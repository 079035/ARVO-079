From 00a5a5d881d6dc1e4b4d2032e873b6fc3fc1d7b3 Mon Sep 17 00:00:00 2001
From: Eric Blankenhorn <eric@wolfssl.com>
Date: Thu, 23 Sep 2021 08:10:34 -0500
Subject: [PATCH] Fix handling properties

---
 src/mqtt_client.c | 75 +++++++++++++++++++++++++++--------------------
 1 file changed, 44 insertions(+), 31 deletions(-)

diff --git a/src/mqtt_client.c b/src/mqtt_client.c
index d392cc5f0..866791116 100644
--- a/src/mqtt_client.c
+++ b/src/mqtt_client.c
@@ -277,6 +277,32 @@ static int MqttClient_RespList_Find(MqttClient *client,
 }
 #endif /* WOLFMQTT_MULTITHREAD */
 
+#ifdef WOLFMQTT_V5
+static int Handle_Props(MqttProp* props)
+{
+    int rc = MQTT_CODE_SUCCESS;
+
+    /* If no properties, just return */
+    if (props != NULL) {
+    #ifdef WOLFMQTT_PROPERTY_CB
+        /* Check for properties set by the server */
+        if (packet_obj && client->property_cb) {
+            /* capture error if returned */
+            int rc_err = client->property_cb(client, props,
+                    client->property_ctx);
+            if (rc_err < 0) {
+                rc = rc_err;
+            }
+        }
+    #endif
+        /* Free the properties */
+        MqttProps_Free(props);
+    }
+    return rc;
+}
+#endif
+
+
 /* Returns length decoded or error (as negative) */
 /*! \brief      Take a received MQTT packet and try and decode it
  *  \param      client       MQTT client context
@@ -299,9 +325,6 @@ static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
     MqttPacketType packet_type;
     MqttQoS packet_qos;
     word16 packet_id = 0;
-#ifdef WOLFMQTT_V5
-    MqttProp* props = NULL;
-#endif
 
     /* must have rx buffer with at least 2 byes for header */
     if (rx_buf == NULL || rx_len < MQTT_PACKET_HEADER_MIN_SIZE) {
@@ -337,7 +360,7 @@ static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
             rc = MqttDecode_ConnectAck(rx_buf, rx_len, p_connect_ack);
         #ifdef WOLFMQTT_V5
             if (rc >= 0) {
-                props = p_connect_ack->props;
+                rc = Handle_Props(p_connect_ack->props);
             }
         #endif
             break;
@@ -358,7 +381,7 @@ static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
             if (rc >= 0) {
                 packet_id = p_publish->packet_id;
             #ifdef WOLFMQTT_V5
-                props = p_publish->props;
+                rc = Handle_Props(p_publish->props);
             #endif
             }
             break;
@@ -383,7 +406,7 @@ static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
             if (rc >= 0) {
                 packet_id = p_publish_resp->packet_id;
             #ifdef WOLFMQTT_V5
-                props = p_publish_resp->props;
+                rc = Handle_Props(p_publish_resp->props);
             #endif
             }
             break;
@@ -404,7 +427,7 @@ static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
             if (rc >= 0) {
                 packet_id = p_subscribe_ack->packet_id;
             #ifdef WOLFMQTT_V5
-                props = p_subscribe_ack->props;
+                rc = Handle_Props(p_subscribe_ack->props);
             #endif
             }
             break;
@@ -426,7 +449,7 @@ static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
             if (rc >= 0) {
                 packet_id = p_unsubscribe_ack->packet_id;
             #ifdef WOLFMQTT_V5
-                props = p_unsubscribe_ack->props;
+                rc = Handle_Props(p_unsubscribe_ack->props);
             #endif
             }
             break;
@@ -455,7 +478,7 @@ static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
             }
             rc = MqttDecode_Auth(rx_buf, rx_len, p_auth);
             if (rc >= 0) {
-                props = p_auth->props;
+                rc = Handle_Props(p_auth->props);
             }
         #else
             rc = MQTT_CODE_ERROR_PACKET_TYPE;
@@ -474,7 +497,7 @@ static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
             }
             rc = MqttDecode_Disconnect(rx_buf, rx_len, p_disc);
             if (rc >= 0) {
-                props = p_disc->props;
+                rc = Handle_Props(p_disc->props);
             }
         #else
             rc = MQTT_CODE_ERROR_PACKET_TYPE;
@@ -498,24 +521,6 @@ static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
         *ppacket_id = packet_id;
     }
 
-#ifdef WOLFMQTT_V5
-    if (props) {
-    #ifdef WOLFMQTT_PROPERTY_CB
-        /* Check for properties set by the server */
-        if (packet_obj && client->property_cb) {
-            /* capture error if returned */
-            int rc_err = client->property_cb(client, props,
-                    client->property_ctx);
-            if (rc_err < 0) {
-                rc = rc_err;
-            }
-        }
-    #endif
-        /* Free the properties */
-        MqttProps_Free(props);
-    }
-#endif
-
     (void)client;
 
 #ifdef WOLFMQTT_DEBUG_CLIENT
@@ -2136,11 +2141,19 @@ int MqttClient_WaitMessage_ex(MqttClient *client, MqttObject* msg,
     return MqttClient_WaitType(client, msg, MQTT_PACKET_TYPE_ANY, 0,
         timeout_ms);
 }
+
 int MqttClient_WaitMessage(MqttClient *client, int timeout_ms)
 {
-    if (client == NULL)
-        return MQTT_CODE_ERROR_BAD_ARG;
-    return MqttClient_WaitMessage_ex(client, &client->msg, timeout_ms);
+    int rc = MQTT_CODE_ERROR_BAD_ARG;
+    if (client != NULL) {
+        rc = MqttClient_WaitMessage_ex(client, &client->msg, timeout_ms);
+        if (rc != MQTT_CODE_CONTINUE) {
+            /* Clear the union for the next call to MqttClient_WaitMessage */
+            XMEMSET(&client->msg, 0, sizeof(MqttObject));
+        }
+    }
+
+    return rc;
 }
 
 int MqttClient_NetConnect(MqttClient *client, const char* host,
