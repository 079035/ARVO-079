From 0343c63bd04d387924974e6da60d8471fdf945a9 Mon Sep 17 00:00:00 2001
From: David Anderson <davea42@linuxmail.org>
Date: Sun, 12 Mar 2023 14:27:36 -0700
Subject: [PATCH] This is a significant revision of dwarf_str_offsets.[ch] with
 consequences in several places.

The old code was hard to follow. This
is much easier to understand.

Still has debugging-related #if 0 in it, those will be removed in
the next commit.
	modified:   src/lib/libdwarf/dwarf_die_deliv.c
	modified:   src/lib/libdwarf/dwarf_fission_to_cu.c
	modified:   src/lib/libdwarf/dwarf_form.c
	modified:   src/lib/libdwarf/dwarf_macro5.c
	modified:   src/lib/libdwarf/dwarf_opaque.h
	modified:   src/lib/libdwarf/dwarf_query.c
	modified:   src/lib/libdwarf/dwarf_str_offsets.c
	modified:   src/lib/libdwarf/dwarf_str_offsets.h
---
 src/lib/libdwarf/dwarf_die_deliv.c     |   4 +-
 src/lib/libdwarf/dwarf_fission_to_cu.c |  33 +-
 src/lib/libdwarf/dwarf_form.c          | 121 +++++---
 src/lib/libdwarf/dwarf_macro5.c        |   1 +
 src/lib/libdwarf/dwarf_opaque.h        |  51 +---
 src/lib/libdwarf/dwarf_query.c         |  26 +-
 src/lib/libdwarf/dwarf_str_offsets.c   | 400 ++++++++++++++++---------
 src/lib/libdwarf/dwarf_str_offsets.h   |  54 +++-
 8 files changed, 444 insertions(+), 246 deletions(-)

diff --git a/src/lib/libdwarf/dwarf_die_deliv.c b/src/lib/libdwarf/dwarf_die_deliv.c
index 4988f9c73..5edba5fff 100644
--- a/src/lib/libdwarf/dwarf_die_deliv.c
+++ b/src/lib/libdwarf/dwarf_die_deliv.c
@@ -1183,10 +1183,10 @@ find_cu_die_base_fields(Dwarf_Debug dbg,
                 int udres = 0;
 
                 udres = dwarf_global_formref(attr,
-                    &cucon->cc_str_offsets_base,
+                    &cucon->cc_str_offsets_header_offset,
                     error);
                 if (udres == DW_DLV_OK) {
-                    cucon->cc_str_offsets_base_present = TRUE;
+                    cucon->cc_str_offsets_tab_present = TRUE;
                 } else {
                     local_attrlist_dealloc(dbg,atcount,alist);
                     /* Something is badly wrong. */
diff --git a/src/lib/libdwarf/dwarf_fission_to_cu.c b/src/lib/libdwarf/dwarf_fission_to_cu.c
index a17c7ce07..d1b6e390c 100644
--- a/src/lib/libdwarf/dwarf_fission_to_cu.c
+++ b/src/lib/libdwarf/dwarf_fission_to_cu.c
@@ -115,10 +115,10 @@ load_xu_str_offsets_into_cucontext(Dwarf_Debug dbg,
     Dwarf_Error *error )
 {
     Dwarf_Small *soff_secptr = 0;
-    Dwarf_Small *soff_hdrptr = 0;
     Dwarf_Unsigned soff_hdroffset = 0;
     Dwarf_Unsigned soff_size = 0;
     Dwarf_Small *soff_eptr = 0;
+    Dwarf_Small *soff_hdrptr;
     int res = 0;
 
     res = _dwarf_load_section(dbg, &dbg->de_debug_str_offsets,
@@ -129,7 +129,6 @@ load_xu_str_offsets_into_cucontext(Dwarf_Debug dbg,
     soff_hdroffset = fsd->pcu_offset[fsd_index];
     soff_secptr = dbg->de_debug_str_offsets.dss_data;
     soff_size = dbg->de_debug_str_offsets.dss_size;
-    soff_eptr = soff_secptr + soff_size;
     soff_hdrptr = soff_secptr + soff_hdroffset;
     if (soff_hdroffset >= soff_size) {
         /*  Something is badly wrong. Ignore it here. */
@@ -142,32 +141,38 @@ load_xu_str_offsets_into_cucontext(Dwarf_Debug dbg,
         Dwarf_Half     extension_size = 0;
         Dwarf_Half     version = 0;
         Dwarf_Half     padding = 0;
-        Dwarf_Unsigned header_length = 0;
+        Dwarf_Unsigned local_offset_to_array=0;
+        Dwarf_Unsigned total_table_length   =0;
+        struct Dwarf_Str_Offsets_Table_s  sotstr;
 
-        res =  _dwarf_read_str_offsets_header(dbg,
+        memset(&sotstr,0,sizeof(sotstr));
+        sotstr.so_dbg = dbg;
+        sotstr.so_section_start_ptr = soff_secptr;
+        sotstr.so_section_end_ptr = soff_eptr;
+        sotstr.so_section_size = soff_size;
+        sotstr.so_next_table_offset = soff_hdroffset;
+        res =  _dwarf_read_str_offsets_header(&sotstr,
             soff_hdrptr,
-            soff_size - soff_hdroffset,
-            soff_eptr,
             cu_context,
             &length,&offset_size,
             &extension_size,&version,&padding,
-            &header_length,
+            &local_offset_to_array,
+            &total_table_length,
             error);
         if (res != DW_DLV_OK) {
             if (res == DW_DLV_ERROR && error) {
                 dwarf_dealloc_error(dbg,*error);
                 *error = 0;
             }
-            res = DW_DLV_NO_ENTRY;
-            return res;
+            return DW_DLV_NO_ENTRY;
         }
-        cu_context->cc_str_offsets_base_present = TRUE;
-        cu_context->cc_str_offsets_header_length_present = TRUE;
+        /*  See dwarf_opaque.h for comments. */
+        cu_context->cc_str_offsets_tab_present = TRUE;
         cu_context->cc_str_offsets_header_offset = soff_hdroffset;
-        cu_context->cc_str_offsets_base = soff_hdroffset +
-            header_length;
-        cu_context->cc_str_offsets_header_length = header_length;
+        cu_context->cc_str_offsets_tab_to_array_present = TRUE;
+        cu_context->cc_str_offsets_tab_to_array = local_offset_to_array;
         cu_context->cc_str_offsets_offset_size = offset_size;
+        cu_context->cc_str_offsets_version = version;
     }
     return DW_DLV_OK;
 }
diff --git a/src/lib/libdwarf/dwarf_form.c b/src/lib/libdwarf/dwarf_form.c
index 19a06f750..610e66442 100644
--- a/src/lib/libdwarf/dwarf_form.c
+++ b/src/lib/libdwarf/dwarf_form.c
@@ -32,6 +32,7 @@
 #include <config.h>
 
 #include <string.h>  /* memcpy() memset() */
+#include <stdio.h>  /* printf() */
 
 #if defined(_WIN32) && defined(HAVE_STDAFX_H)
 #include "stdafx.h"
@@ -1659,63 +1660,97 @@ _dwarf_extract_string_offset_via_str_offsets(Dwarf_Debug dbg,
     Dwarf_Unsigned end_offsetintable = 0;
     Dwarf_Unsigned indexoffset = 0;
     Dwarf_Unsigned baseoffset = 0;
+    Dwarf_Unsigned table_offset_to_array = 0;
+    Dwarf_Unsigned table_size = 0;
     int res = 0;
     int idxres = 0;
-    Dwarf_Small *sof_start = 0;
+    Dwarf_Small *sectionptr = 0;
+    Dwarf_Unsigned sectionlen = 0;
     Dwarf_Unsigned sof_len = 0;
+    Dwarf_Small   *sof_start = 0;
     Dwarf_Small   *sof_end = 0;
+    Dwarf_Unsigned str_sect_offset = 0;
+    Dwarf_Unsigned table_end_offset = 0;
+    Dwarf_Unsigned length_size  = 0;
 
     res = _dwarf_load_section(dbg, &dbg->de_debug_str_offsets,error);
     if (res != DW_DLV_OK) {
         return res;
     }
+    sectionptr = dbg->de_debug_str_offsets.dss_data;
+    sectionlen = dbg->de_debug_str_offsets.dss_size;
+    length_size = cu_context->cc_length_size;  
     /*  If this is a dwp we look there, but I suppose
         we could also look for the section in the tied
-        file it is not here. */
-    sof_start = dbg->de_debug_str_offsets.dss_data;
-    sof_len = dbg->de_debug_str_offsets.dss_size;
-    sof_end = sof_start+sof_len;
+        executable object file it is not here. FIXME */
     idxres = dw_read_str_index_val_itself(dbg,
         attrform,data_ptr,end_data_ptr,&index_to_offset_entry,error);
     if ( idxres != DW_DLV_OK) {
         return idxres;
     }
 
-    if (cu_context->cc_str_offsets_base_present) {
-        baseoffset = cu_context->cc_str_offsets_base;
+#if 0
+printf("dadebug str_offsets_base_present %u line %d\n",cu_context->cc_str_offsets_tab_present,__LINE__);
+#endif
+    if (cu_context->cc_str_offsets_tab_present) {
+        baseoffset = cu_context->cc_str_offsets_header_offset;
+#if 0
+printf("dadebug str_offsets_base 0x%llx line %d\n",baseoffset,__LINE__);
+#endif
+    }
+    if (cu_context->cc_str_offsets_tab_to_array_present) {
+        table_offset_to_array = cu_context->cc_str_offsets_tab_to_array;
     }
-    indexoffset = index_to_offset_entry*
-        cu_context->cc_length_size;
-    baseoffset = cu_context->cc_str_offsets_base;
-    if (!baseoffset) {
+    table_size = cu_context->cc_str_offsets_table_size;
+
+/*    if (cu_context->cc_str_offsets_table_size) */
+#if 0
+printf("dadebug indexoffset 0x%llx line %d\n",indexoffset,__LINE__);
+printf("dadebug str_offsets_base 0x%llx line %d\n",baseoffset,__LINE__);
+printf("dadebug str_offsets tab %u line %d\n",cu_context->cc_str_offsets_tab_present,__LINE__);
+printf("dadebug str_offsets tab_to_arry %u line %d\n",cu_context->
+cc_str_offsets_tab_to_array_present,__LINE__);
+fflush(stdout);
+#endif
+    if (!cu_context->cc_str_offsets_tab_present ||
+        !cu_context->cc_str_offsets_tab_to_array_present) {
+#if 0
+printf("dadebug ERROR: missing tab data! line %d\n",__LINE__);
+fflush(stdout);
+#endif
+        /*  missing any connection to a specific
+            str_offsets table this guesses at table zero.
+            When the compiler/linker have
+            combined str offsets into a
+            single table this works. */
         if (cu_context->cc_version_stamp ==  DW_CU_VERSION5 ) {
-            /*  A base offset of 0 isnormally never correct for
+            /*  A base offset of 0 is ok for either 
                 DWARF5. but some early GNU compilers emitted
                 DWARF4 .debug_str_offsets, so lets check
                 the first table.  */
-            Dwarf_Small * ststart =
-                dbg->de_debug_str_offsets.dss_data;
-            Dwarf_Small * stend = 0;
-            Dwarf_Unsigned  stsize =
+            Dwarf_Unsigned stsize =
                 dbg->de_debug_str_offsets.dss_size;
-            Dwarf_Unsigned length            = 0;
-            Dwarf_Half local_offset_size = 0;
+            Dwarf_Unsigned length           = 0;
+            Dwarf_Unsigned table_length     = 0;
+            Dwarf_Half local_offset_size    = 0;
             Dwarf_Half local_extension_size = 0;
-            Dwarf_Half version               = 0;
-            Dwarf_Half padding               = 0;
+            Dwarf_Half version              = 0;
+            Dwarf_Half padding              = 0;
+            /*  starting at head of section! This is surely wrong. */
+            Dwarf_Unsigned global_array_off  = 0;
+
 
-            stend = ststart + stsize;
             res = _dwarf_trial_read_dwarf_five_hdr(dbg,
-                ststart,stsize,stend,
+                baseoffset,stsize,
+                &table_offset_to_array,
+                &table_length,
                 &length, &local_offset_size,
                 &local_extension_size,
                 &version,
                 &padding,
                 error);
             if (res == DW_DLV_OK) {
-                baseoffset = local_extension_size +
-                    local_offset_size +
-                    2*DWARF_HALF_SIZE;
+                /* baseoffset unchanged */
             } else {
                 if (res == DW_DLV_ERROR && error) {
                     dwarf_dealloc_error(dbg,*error);
@@ -1724,14 +1759,21 @@ _dwarf_extract_string_offset_via_str_offsets(Dwarf_Debug dbg,
             }
         }
     }
-    offsetintable = baseoffset +indexoffset;
-    end_offsetintable = offsetintable +
-        cu_context->cc_str_offsets_offset_size;
+    indexoffset = index_to_offset_entry* length_size;
+    offsetintable = indexoffset+ baseoffset 
+         + table_offset_to_array;
+    end_offsetintable = offsetintable + length_size;
+    table_end_offset = baseoffset + table_size;
+#if 0
+printf("dadebug offsetintable 0x%llx line %d\n",offsetintable,__LINE__);
+printf("dadebug table end offset 0x%llx line %d\n",
+table_end_offset,__LINE__);
+#endif
     /*  The offsets table is a series of offset-size entries.
         The == case in the test applies when we are at the last table
         entry, so == is not an error, hence only test >
     */
-    if (end_offsetintable > dbg->de_debug_str_offsets.dss_size ) {
+    if (end_offsetintable  > sectionlen) {
         dwarfstring m;
 
         dwarfstring_constructor(&m);
@@ -1742,7 +1784,7 @@ _dwarf_extract_string_offset_via_str_offsets(Dwarf_Debug dbg,
         dwarfstring_append_printf_u(&m,
             "but the object section is just 0x%x "
             "bytes long",
-            dbg->de_debug_str_offsets.dss_size);
+            sectionlen);
         _dwarf_error_string(dbg, error,
             DW_DLE_ATTR_FORM_SIZE_BAD,
             dwarfstring_string(&m));
@@ -1750,15 +1792,16 @@ _dwarf_extract_string_offset_via_str_offsets(Dwarf_Debug dbg,
         return DW_DLV_ERROR;
     }
 
-    {
-        Dwarf_Unsigned offsettostr = baseoffset+offsetintable;
-
-        /* Now read the string offset from the offset table. */
-        READ_UNALIGNED_CK(dbg,offsettostr,Dwarf_Unsigned,
-            sof_start+ offsetintable,
-            cu_context->cc_length_size,error,sof_end);
-        *str_sect_offset_out = offsettostr;
-    }
+    sof_start = sectionptr+ offsetintable;
+    sof_end = sectionptr + end_offsetintable; 
+#if 0
+printf("dadebug offsettostr 0x%llx line %d\n",offsetintable,__LINE__);
+#endif
+    /* Now read the string offset from the offset table. */
+    READ_UNALIGNED_CK(dbg,str_sect_offset,Dwarf_Unsigned,
+        sof_start,
+        length_size,error,sof_end);
+    *str_sect_offset_out = str_sect_offset;
     return DW_DLV_OK;
 }
 
diff --git a/src/lib/libdwarf/dwarf_macro5.c b/src/lib/libdwarf/dwarf_macro5.c
index 17d353295..5fb035cdd 100644
--- a/src/lib/libdwarf/dwarf_macro5.c
+++ b/src/lib/libdwarf/dwarf_macro5.c
@@ -46,6 +46,7 @@
 #include "dwarf_util.h"
 #include "dwarf_macro5.h"
 #include "dwarf_string.h"
+#include "dwarf_str_offsets.h"
 
 #define MC_SENTINEL  0xada
 
diff --git a/src/lib/libdwarf/dwarf_opaque.h b/src/lib/libdwarf/dwarf_opaque.h
index a4e7a33af..c3a668269 100644
--- a/src/lib/libdwarf/dwarf_opaque.h
+++ b/src/lib/libdwarf/dwarf_opaque.h
@@ -265,21 +265,23 @@ struct Dwarf_CU_Context_s {
     Dwarf_Bool     cc_loclists_header_length_present;
 
     /*  .debug_str_offsets DW_SECT_STR_OFFSETS DW4 DW5 vs
-        DW_AT_str_offsets_base (table array off) */
-    Dwarf_Bool     cc_str_offsets_base_present;
-    Dwarf_Bool     cc_str_offsets_header_length_present;
-    Dwarf_Unsigned cc_str_offsets_header_offset; /* from cu/tu*/
-    Dwarf_Unsigned cc_str_offsets_contr_size;
-    Dwarf_Unsigned cc_str_offsets_base;
+        DW_AT_str_offsets_base (table array offset) .
+        Here cc_str_offsets_tab_present 
+        paired with cc_str_offsets_header_offset
+        which is what the offset means */
+    Dwarf_Bool     cc_str_offsets_tab_present;
+    /*  Without tab_to_array present we cannot do much. */
+    Dwarf_Bool     cc_str_offsets_tab_to_array_present;
+
+    /*  header_offset is global offset in str_offsets section. */
+    Dwarf_Unsigned cc_str_offsets_header_offset; /* cu/tu etc*/
+    Dwarf_Unsigned cc_str_offsets_table_size; 
+
     /*  to get from the start of a str_offsets table to the
-        offsets array entries.
-        See cc_str_offsets_header_length_present,
-        though not normally needed. If header_length
-        is zero all CUs in this DWP
-        use a DWARF4 extension simple offset array,
-        not a DWARF5 set of tables. */
-    Dwarf_Unsigned cc_str_offsets_header_length;
+        offsets array entries. */
+    Dwarf_Unsigned cc_str_offsets_tab_to_array;
     Dwarf_Unsigned cc_str_offsets_offset_size;
+    Dwarf_Half     cc_str_offsets_version;
 
     /*  DW_SECT_MACRO */
     Dwarf_Unsigned cc_macro_base;    /*DW5 */
@@ -825,29 +827,6 @@ int _dwarf_get_string_base_attr_value(Dwarf_Debug dbg,
     Dwarf_Unsigned *sbase_out,
     Dwarf_Error *error);
 
-int
-_dwarf_read_str_offsets_header(Dwarf_Debug dbg,
-    Dwarf_Small*     table_start_ptr,
-    Dwarf_Unsigned   secsize,
-    Dwarf_Small*     secendptr,
-    Dwarf_CU_Context cucontext,
-    /* Followed by return values/error */
-    Dwarf_Unsigned *length,
-    Dwarf_Half    *offset_size_out,
-    Dwarf_Half    *extension_size_out,
-    Dwarf_Half    *version_out,
-    Dwarf_Half    *padding_out,
-    Dwarf_Unsigned * header_length_out,
-    Dwarf_Error *error);
-
-int _dwarf_extract_string_offset_via_str_offsets(Dwarf_Debug dbg,
-    Dwarf_Small *data_ptr,
-    Dwarf_Small *end_data_ptr,
-    Dwarf_Half   attrform,
-    Dwarf_CU_Context cu_context,
-    Dwarf_Unsigned *str_sect_offset_out,
-    Dwarf_Error *error);
-
 int _dwarf_look_in_local_and_tied_by_index(
     Dwarf_Debug dbg,
     Dwarf_CU_Context context,
diff --git a/src/lib/libdwarf/dwarf_query.c b/src/lib/libdwarf/dwarf_query.c
index 91b00ee39..520a5c1bc 100644
--- a/src/lib/libdwarf/dwarf_query.c
+++ b/src/lib/libdwarf/dwarf_query.c
@@ -1235,11 +1235,23 @@ _dwarf_merge_all_base_attrs_of_cu_die(Dwarf_Debug dbg,
         context->        cc_loclists_base=
             tiedcontext->cc_loclists_base;
     }
-    if (!context->cc_str_offsets_base_present) {
-        context->        cc_str_offsets_base_present =
-            tiedcontext->cc_str_offsets_base_present;
-        context->        cc_str_offsets_base=
-            tiedcontext->cc_str_offsets_base;
+    if (!context->cc_str_offsets_tab_present) {
+        context->        cc_str_offsets_tab_present =
+            tiedcontext->cc_str_offsets_tab_present;
+        context->        cc_str_offsets_header_offset=
+            tiedcontext->cc_str_offsets_header_offset;
+    }
+    if (!context->cc_str_offsets_tab_to_array_present) {
+        context->        cc_str_offsets_tab_to_array_present =
+            tiedcontext->cc_str_offsets_tab_to_array_present;
+        context->        cc_str_offsets_tab_to_array=
+            tiedcontext->cc_str_offsets_tab_to_array;
+        context->        cc_str_offsets_table_size=
+            tiedcontext->cc_str_offsets_table_size;
+        context->        cc_str_offsets_version=
+            tiedcontext->cc_str_offsets_version;
+        context->        cc_str_offsets_offset_size=
+            tiedcontext->cc_str_offsets_offset_size;
     }
 
     /* GNU DW4 extension. */
@@ -1264,8 +1276,8 @@ _dwarf_get_string_base_attr_value(Dwarf_Debug dbg,
 {
     (void)dbg;
     (void)error;
-    if (context->cc_str_offsets_base_present) {
-        *sbase_out = context->cc_str_offsets_base;
+    if (context->cc_str_offsets_tab_present) {
+        *sbase_out = context->cc_str_offsets_header_offset;
         return DW_DLV_OK;
     }
     *sbase_out = 0;
diff --git a/src/lib/libdwarf/dwarf_str_offsets.c b/src/lib/libdwarf/dwarf_str_offsets.c
index 30c11241c..d65eb1710 100644
--- a/src/lib/libdwarf/dwarf_str_offsets.c
+++ b/src/lib/libdwarf/dwarf_str_offsets.c
@@ -35,6 +35,7 @@
 #if defined(_WIN32) && defined(HAVE_STDAFX_H)
 #include "stdafx.h"
 #endif /* HAVE_STDAFX_H */
+#include <stdio.h> /* printf */
 
 #include "dwarf.h"
 #include "libdwarf.h"
@@ -71,7 +72,7 @@ dump_bytes(char * msg,Dwarf_Small * start, long len)
     Dwarf_Small *end = start + len;
     Dwarf_Small *cur = start;
 
-    printf("%s ",msg);
+    printf("%s starting at %p \n",msg,(void*)start);
     for (; cur < end; cur++) {
         printf("%02x ", *cur);
     }
@@ -150,16 +151,44 @@ dwarf_str_offsets_value_by_index(Dwarf_Str_Offsets_Table sot,
 {
     Dwarf_Small *entryptr = 0;
     Dwarf_Unsigned val = 0;
+    Dwarf_Unsigned entryoffset = 0;
+    Dwarf_Unsigned secsize = 0;
+    Dwarf_Debug dbg = 0;
+    Dwarf_Small *end_ptr = 0;
+/* so_section_size */
 
     VALIDATE_SOT(sot)
+    dbg = sot->so_dbg;
+    secsize = dbg->de_debug_str_offsets.dss_size;
     if (index >= sot->so_array_entry_count) {
-        _dwarf_error(sot->so_dbg,error,
-            DW_DLE_STR_OFFSETS_ARRAY_INDEX_WRONG);
+        return DW_DLV_NO_ENTRY;
+    }
+    entryoffset = sot->so_table_start_offset +
+      sot->so_lcl_offset_to_array;
+    entryoffset += index*sot->so_array_entry_size;
+    entryptr = sot->so_section_start_ptr + entryoffset;
+#if 0
+if (index < 3) {
+    dump_bytes("dadebug bytes to read ",(Dwarf_Small*)entryptr,16);
+}
+printf("dadebug array entry count %llu line %d\n",sot->so_array_entry_count,__LINE__);
+printf("dadebug index %llu line %d\n",index,__LINE__);
+printf("dadebug section_size %llu \n",sot->so_section_size);
+printf("dadebug read at entryoffset 0x%llx line %d\n",entryoffset,__LINE__);
+printf("dadebug rd size  %d line %d\n",sot->so_array_entry_size ,__LINE__);
+fflush(stdout);
+#endif
+    if (entryoffset > secsize ||
+        (entryoffset+sot->so_array_entry_size) > secsize) {
+        _dwarf_error_string(dbg,error,
+            DW_DLE_STR_OFFSETS_ARRAY_INDEX_WRONG,
+            "DW_DLE_STR_OFFSETS_ARRAY_INDEX_WRONG: "
+            "A libdwarf internal bug. Report to the maintainers");
         return DW_DLV_ERROR;
     }
-    entryptr = sot->so_array_ptr + (index * sot->so_array_entry_size);
-    READ_UNALIGNED_CK(sot->so_dbg, val, Dwarf_Unsigned,
-        entryptr, sot->so_array_entry_size,error,sot->so_end_cu_ptr);
+    end_ptr = entryptr+sot->so_array_entry_size;
+    READ_UNALIGNED_CK(dbg, val, Dwarf_Unsigned,
+        entryptr, sot->so_array_entry_size,error,end_ptr);
     *stroffset = val;
     return DW_DLV_OK;
 }
@@ -201,24 +230,99 @@ is_all_zeroes(Dwarf_Small*start,
     return TRUE;
 }
 
+static void
+emit_invalid_dw5tab(Dwarf_Debug dbg,
+    Dwarf_Unsigned headerlen,
+    Dwarf_Error *error)
+{
+    dwarfstring m;
+
+    dwarfstring_constructor(&m);
+    dwarfstring_append_printf_u(&m,
+        "DW_DLE_SECTION_SIZE_ERROR: "
+        "header length 0x%x is too small "
+        "to be a real .debug_str_offsets "
+        "DWARF5 section",
+        headerlen);
+    _dwarf_error_string(dbg,error,
+        DW_DLE_SECTION_SIZE_ERROR,
+        dwarfstring_string(&m));
+    dwarfstring_destructor(&m);
+}
+static void
+emit_offsets_array_msg(Dwarf_Debug dbg,
+    Dwarf_Unsigned tab_length,
+    Dwarf_Unsigned secsize,
+    Dwarf_Error *error)
+{
+    dwarfstring m;
+
+    dwarfstring_constructor(&m);
+    dwarfstring_append_printf_u(&m,
+        "DW_DLE_STR_OFFSETS_ARRAY_SIZE: "
+        " total length 0x%x  with table offset larger than ",
+        tab_length);
+    dwarfstring_append_printf_u(&m, 
+        ".debug_str_offsets section size of 0x%x."
+        " Perhaps the section is a GNU DWARF4"
+        " extension with a different format.",
+        secsize);
+    _dwarf_error_string(dbg,error,
+        DW_DLE_STR_OFFSETS_ARRAY_SIZE,
+        dwarfstring_string(&m));
+    dwarfstring_destructor(&m);
+}
+
+static void
+emit_wrong_version(Dwarf_Debug dbg,
+    Dwarf_Half version,
+    Dwarf_Error *error)
+{
+    dwarfstring m;
+
+    dwarfstring_constructor(&m);
+    dwarfstring_append_printf_u(&m,
+        "DW_DLE_STR_OFFSETS_VERSION_WRONG: "
+        "%u. Only version 5 is supported "
+        "when reading .debug_str_offsets."
+        " Perhaps the section is a GNU DWARF4"
+        " extension with a different format.",
+        version);
+    _dwarf_error_string(dbg,error,
+        DW_DLE_STR_OFFSETS_VERSION_WRONG,
+        dwarfstring_string(&m));
+    dwarfstring_destructor(&m);
+}
+
 int
 _dwarf_trial_read_dwarf_five_hdr(Dwarf_Debug dbg,
-    Dwarf_Small *table_start_ptr,
-    Dwarf_Unsigned secsize,
-    Dwarf_Small * secendptr,
+    Dwarf_Unsigned  new_table_offset,
+    Dwarf_Unsigned  secsize,
+    Dwarf_Unsigned *table_local_offset_of_array, 
+    Dwarf_Unsigned *total_table_length, 
     Dwarf_Unsigned *length_out,
-    Dwarf_Half *local_offset_size_out,
-    Dwarf_Half *local_extension_size_out,
-    Dwarf_Half *version_out,
-    Dwarf_Half *padding_out,
-    Dwarf_Error *error)
+    Dwarf_Half     *local_offset_size_out,
+    Dwarf_Half     *local_extension_size_out,
+    Dwarf_Half     *version_out,
+    Dwarf_Half     *padding_out,
+    Dwarf_Error    *error)
 {
     Dwarf_Unsigned length = 0; /* length following the
         local_offset_size + local_extension_size */
     Dwarf_Unsigned local_offset_size = 0;
     Dwarf_Unsigned local_extension_size = 0;
-    Dwarf_Half version = 0;
-    Dwarf_Half padding = 0;
+    Dwarf_Unsigned tab_length = 0;
+    Dwarf_Unsigned array_local_offset = 0;;
+    Dwarf_Half     version = 0;
+    Dwarf_Half     padding = 0;
+    Dwarf_Unsigned globloff = 0;
+    Dwarf_Unsigned net_new_len = 0;
+    Dwarf_Unsigned net_end_offset = 0;
+    Dwarf_Unsigned globl_array_off = 0;
+    Dwarf_Small   *secstart = dbg->de_debug_str_offsets.dss_data;
+    Dwarf_Unsigned secize = dbg->de_debug_str_offsets.dss_size;
+    Dwarf_Small   *table_start_ptr = secstart + new_table_offset; 
+    Dwarf_Small   *secendptr = secstart+secsize;
 
     READ_AREA_LENGTH_CK(dbg,length,Dwarf_Unsigned,
         table_start_ptr,local_offset_size,
@@ -238,74 +342,46 @@ _dwarf_trial_read_dwarf_five_hdr(Dwarf_Debug dbg,
     if (length < 4) {
         /*  Usually DW4-style .debug_str_offsets
             starts off with a zero value to ref the
-            base string in .debug_str.
+            base string in .debug_str. Should not apply here.
             Any tiny value is guaranteed not to be a legal
             DWARF5 .debug_str_offsets section. */
-        dwarfstring m;
-
-        dwarfstring_constructor(&m);
-        dwarfstring_append_printf_u(&m,
-            "DW_DLE_SECTION_SIZE_ERROR: "
-            "header length 0x%x is too small "
-            "to be a real .debug_str_offsets "
-            "DWARF5 section",
-            length);
-        _dwarf_error_string(dbg,error,
-            DW_DLE_SECTION_SIZE_ERROR,
-            dwarfstring_string(&m));
-        dwarfstring_destructor(&m);
+        emit_invalid_dw5tab(dbg,length,error);
         return DW_DLV_ERROR;
-
     }
-    if (length > secsize  ||
-        (length+local_extension_size +local_offset_size) >
-        secsize) {
-        dwarfstring m;
+    globloff = new_table_offset;
+    array_local_offset = local_extension_size +local_offset_size
+        +4; /* 4 for the two Dwarf_Half in the table header */
+    tab_length = local_extension_size +local_offset_size +
+        length;
+    
+    net_end_offset = tab_length+globloff;
 
-        dwarfstring_constructor(&m);
-        dwarfstring_append_printf_u(&m,
-            "DW_DLE_STR_OFFSETS_ARRAY_SIZE: "
-            " header length 0x%x is bigger than ",
-            length);
-        dwarfstring_append_printf_u(&m,
-            ".debug_str_offsets section size of 0x%x."
-            " Perhaps the section is a GNU DWARF4"
-            " extension with a different format.",
-            secsize);
-        _dwarf_error_string(dbg,error,
-            DW_DLE_STR_OFFSETS_ARRAY_SIZE,
-            dwarfstring_string(&m));
-        dwarfstring_destructor(&m);
+    if (length > secsize  ||
+        array_local_offset > secsize ||
+        tab_length > secsize ||  
+        net_end_offset > secsize) {
+        emit_offsets_array_msg(dbg,tab_length,
+           secsize,error);
         return DW_DLV_ERROR;
     }
-    /*  table_start_ptr was incremented past
-        the length data. */
+    /*  table_start_ptr is incremented past
+        the length data by read-area-length-ck. */
     READ_UNALIGNED_CK(dbg, version, Dwarf_Half,
         table_start_ptr, DWARF_HALF_SIZE,
         error,secendptr);
     table_start_ptr += DWARF_HALF_SIZE;
     if (version != DW_STR_OFFSETS_VERSION5) {
-        dwarfstring m;
-
-        dwarfstring_constructor(&m);
-        dwarfstring_append_printf_u(&m,
-            "DW_DLE_STR_OFFSETS_VERSION_WRONG: "
-            "%u. Only version 5 is supported "
-            "when reading .debug_str_offsets."
-            " Perhaps the section is a GNU DWARF4"
-            " extension with a different format.",
-            version);
-        _dwarf_error_string(dbg,error,
-            DW_DLE_STR_OFFSETS_VERSION_WRONG,
-            dwarfstring_string(&m));
-        dwarfstring_destructor(&m);
+        emit_wrong_version(dbg,version,error);
         return DW_DLV_ERROR;
     }
     READ_UNALIGNED_CK(dbg, padding, Dwarf_Half,
         table_start_ptr, DWARF_HALF_SIZE,
         error,secendptr);
+
     /*  padding should be zero, but we are
         not checking it here at present. */
+    *table_local_offset_of_array = array_local_offset;
+    *total_table_length = tab_length;
     *length_out = length;
     *local_offset_size_out = local_offset_size;
     *local_extension_size_out = local_extension_size;
@@ -324,18 +400,17 @@ _dwarf_trial_read_dwarf_five_hdr(Dwarf_Debug dbg,
     --print-str-offsets.
     New 30 August 2020. */
 int
-_dwarf_read_str_offsets_header(Dwarf_Debug dbg,
+_dwarf_read_str_offsets_header(Dwarf_Str_Offsets_Table sot,
     Dwarf_Small*    table_start_ptr,
-    Dwarf_Unsigned secsize,
-    Dwarf_Small*    secendptr,
-    Dwarf_CU_Context  cucontext,
+    Dwarf_CU_Context cucontext,
     /* Followed by return values/error */
     Dwarf_Unsigned *length_out,
     Dwarf_Half     *offset_size_out,
     Dwarf_Half     *extension_size_out,
     Dwarf_Half     *version_out,
     Dwarf_Half     *padding_out,
-    Dwarf_Unsigned *header_length_out,
+    Dwarf_Unsigned *local_offset_to_array_out,
+    Dwarf_Unsigned *total_table_length_out,
     Dwarf_Error *error)
 {
     Dwarf_Unsigned length            = 0;
@@ -344,43 +419,62 @@ _dwarf_read_str_offsets_header(Dwarf_Debug dbg,
     Dwarf_Half version               = 0;
     Dwarf_Half padding               = 0;
     Dwarf_Unsigned headerlength      = 0;
-    int res = 0;
-    Dwarf_Bool is_dwarf_five = TRUE;
+    int            res = 0;
+    Dwarf_Bool     is_dwarf_five = TRUE;
+    Dwarf_Debug    dbg = sot->so_dbg;
+    Dwarf_Unsigned secsize  = sot->so_section_size;
+    Dwarf_Small   *secendptr =   sot->so_section_end_ptr;
+    Dwarf_Unsigned global_array_off = 0;
+    Dwarf_Unsigned table_local_offset_of_array = 0;
+    Dwarf_Unsigned total_table_length = 0;
+    Dwarf_Unsigned globaltaboff = 0;
+
 
+#if 0
+printf("dadebug read_str_offsets_header cucontext? %s line %d\n",cucontext?"yes":"no",__LINE__);
+#endif
+    globaltaboff = sot->so_next_table_offset;
     if (cucontext) {
-        if (cucontext->cc_str_offsets_header_length_present) {
+        if (cucontext->cc_str_offsets_tab_to_array_present) {
             /*  cu_context has what it needs already and we do
                 not need the rest of what the interface
                 provides */
             return DW_DLV_OK;
         }
     }
-    {
-        res = _dwarf_trial_read_dwarf_five_hdr(dbg,
-            table_start_ptr,secsize, secendptr,
-            &length,
-            &local_offset_size,
-            &local_extension_size,
-            &version,
-            &padding,
-            error);
-        if (res != DW_DLV_OK) {
-            if (res == DW_DLV_ERROR && error) {
-                dwarf_dealloc_error(dbg,*error);
-                *error = 0;
-            }
-            /*  If it's really DWARF5 but with a serious
-                problem  this will think...NOT 5! */
-            is_dwarf_five = FALSE;
+    res = _dwarf_trial_read_dwarf_five_hdr(dbg,
+        globaltaboff,
+        secsize,
+        &table_local_offset_of_array,
+        &total_table_length,
+        /* Length is the length field from the table involved */
+        &length,
+        &local_offset_size,
+        &local_extension_size,
+        &version,
+        &padding,
+        error);
+    if (res != DW_DLV_OK) {
+        if (res == DW_DLV_ERROR && error) {
+            dwarf_dealloc_error(dbg,*error);
+            *error = 0;
         }
+        /*  If it's really DWARF5 but with a serious
+            problem  this will think...NOT 5! */
+        is_dwarf_five = FALSE;
     }
     if ( !is_dwarf_five) {
         length = secsize;
-        /*  This is likely
-            GNU Dwarf4 extension .debug_str_offsets,
-            and offset size is not going to be 8
-            de_length_size is most likely a guess
-            and not set properly at this point */
+        /*  This is possibly
+            GNU Dwarf4 extension .debug_str_offsets.
+            It could also just be corrupted data.
+            offset size is not going to be 8.
+            de_length_size is a guess and not set at this point .
+            We assume the data starts with the array of string offsets,
+            and all in one table. */
+        table_local_offset_of_array = 0;
+        total_table_length = secsize; 
+        length = secsize;
         local_offset_size = 4;
         local_extension_size = 0;
         version = DW_STR_OFFSETS_VERSION4;
@@ -402,21 +496,21 @@ _dwarf_read_str_offsets_header(Dwarf_Debug dbg,
     if (padding_out) {
         *padding_out = padding;
     }
-    if (is_dwarf_five) {
-        headerlength =  local_offset_size +
-            local_extension_size +
-            2*DWARF_HALF_SIZE;
-    } else { /* DWARF4 */
-        headerlength = 0;
+    if (cucontext) {
+        cucontext->cc_str_offsets_header_offset         = globaltaboff;
+        cucontext->cc_str_offsets_tab_present = TRUE;
+        cucontext->cc_str_offsets_tab_to_array = 
+            table_local_offset_of_array;
+        cucontext->cc_str_offsets_tab_to_array_present = TRUE;
+        cucontext->cc_str_offsets_offset_size  = local_offset_size;
+        cucontext->cc_str_offsets_table_size   = total_table_length;
+        cucontext->cc_str_offsets_version   = version;
     }
-    if (header_length_out) {
-        *header_length_out  = headerlength;
+    if (local_offset_to_array_out) {
+        *local_offset_to_array_out = table_local_offset_of_array;
     }
-
-    if (cucontext) {
-        cucontext->cc_str_offsets_header_length_present = TRUE;
-        cucontext->cc_str_offsets_header_length = headerlength;
-        cucontext->cc_str_offsets_offset_size = local_offset_size;
+    if (total_table_length_out) {
+        *total_table_length_out = total_table_length;
     }
     return DW_DLV_OK;
 }
@@ -444,7 +538,10 @@ dwarf_next_str_offsets_table(Dwarf_Str_Offsets_Table sot,
     Dwarf_Half local_extension_size = 0;
     Dwarf_Half version           = 0;
     Dwarf_Half padding           = 0;
+    Dwarf_Unsigned local_offset_to_array= 0;
+    Dwarf_Unsigned  total_table_length = 0;
     Dwarf_Unsigned header_length = 0;
+    Dwarf_Debug dbg = sot->so_dbg;
     int res = 0;
 
     VALIDATE_SOT(sot)
@@ -455,8 +552,7 @@ dwarf_next_str_offsets_table(Dwarf_Str_Offsets_Table sot,
     }
     table_header_ptr = sot->so_section_start_ptr +
         table_header_offset;
-    sot->so_header_ptr = table_header_ptr;
-    if (table_header_ptr >= sot->so_section_end_ptr) {
+    if (table_header_offset >= sot->so_section_size) {
         if (table_header_ptr == sot->so_section_end_ptr) {
             /* At end of section. Done. */
             return DW_DLV_NO_ENTRY;
@@ -513,35 +609,54 @@ dwarf_next_str_offsets_table(Dwarf_Str_Offsets_Table sot,
         dwarfstring_destructor(&m);
         return DW_DLV_ERROR;
     }
-    res = _dwarf_read_str_offsets_header(sot->so_dbg,
-        table_header_ptr,sot->so_section_size,
-        sot->so_section_end_ptr,
+
+    res = _dwarf_read_str_offsets_header(sot,
+        table_header_ptr,
         0,
         &length,
         &local_length_size,
         &local_extension_size,
         &version,
         &padding,
-        &header_length, error);
+        &local_offset_to_array,
+        &total_table_length, error);
     if (res != DW_DLV_OK) {
         return res;
     }
     if (version == DW_STR_OFFSETS_VERSION5) {
-        array_start_ptr = table_header_ptr + header_length;
-        array_start_offset = table_header_offset +header_length;
-        table_end_ptr = table_header_ptr +
-            local_length_size +local_extension_size +
-            length;
-        table_end_offset = table_header_offset +
-            local_length_size +local_extension_size +
-            +length;
+        /*  header_length includes length field plus 4 for
+            the rest of the header. Don't double count!
+            length includes space for 4 bytes of the header!  */
+        array_start_ptr = table_header_ptr + local_offset_to_array;;
+        array_start_offset = table_header_offset +local_offset_to_array;
+        table_end_ptr = array_start_ptr + total_table_length;
+        table_end_offset = array_start_offset + total_table_length;
+#if 0
+printf("dadebug DWARF5 %u line %d\n",version,__LINE__);
+printf("dadebug header_length %llu line %d\n",header_length,__LINE__);
+printf("dadebug array start offset 0x%llx line %d\n",array_start_offset,__LINE__);
+printf("dadebug table end offset offset 0x%llx line %d\n",table_end_offset,__LINE__);
+printf("dadebug array start ptr %p line %d\n",(void*)array_start_ptr,__LINE__);
+printf("dadebug table end   ptr %p line %d\n",(void*)table_end_ptr,__LINE__);
+fflush(stdout);
+#endif
     } else {
-        array_start_ptr = table_header_ptr;
+        Dwarf_Unsigned space_left = 0;
+
+        /* leave table header offset as-is */
+        space_left = sot->so_section_size - table_header_offset;
+        array_start_ptr =    table_header_ptr;
         array_start_offset = table_header_offset;
-        table_end_ptr = table_header_ptr +
-            sot->so_section_size;
-        table_end_offset = table_header_offset +
-            sot->so_section_size;
+        table_end_ptr =    array_start_ptr + space_left;
+        table_end_offset = table_header_offset + space_left;
+#if 0
+printf("dadebug DWARF4 %u line %d\n",version,__LINE__);
+printf("dadebug array start offset 0x%llx line %d\n",array_start_offset,__LINE__);
+printf("dadebug table end offset offset 0x%llx line %d\n",table_end_offset,__LINE__);
+printf("dadebug array start ptr %p line %d\n",(void*)array_start_ptr,__LINE__);
+printf("dadebug table end   ptr %p line %d\n",(void*)table_end_ptr,__LINE__);
+fflush(stdout);
+#endif
     }
     /*  So now table_start_ptr points to a table of local_length_size
         entries.
@@ -552,31 +667,48 @@ dwarf_next_str_offsets_table(Dwarf_Str_Offsets_Table sot,
         Dwarf_Unsigned entrybytes = 0;
 
         entrybytes = table_end_offset - array_start_offset;
+#if 0
+printf("dadebug entrybytes %llu line %d\n",entrybytes,__LINE__);
+fflush(stdout);
+#endif
         if (entrybytes % local_length_size) {
-            _dwarf_error(sot->so_dbg,error,
-                DW_DLE_STR_OFFSETS_ARRAY_SIZE);
+            _dwarf_error_string(sot->so_dbg,error,
+                DW_DLE_STR_OFFSETS_ARRAY_SIZE,
+                "DW_DLE_STR_OFFSETS_ARRAY_SIZE "
+                " array size not a multiple of the size of "
+                "a single entry");
             return DW_DLV_ERROR;
         }
         entrycount = entrybytes/local_length_size;
+
+        /* On the next table loop this will be the new table offset */
         sot->so_next_table_offset = table_end_offset;
 
-        sot->so_end_cu_ptr =  table_end_ptr;
+        sot->so_table_end_offset = table_end_offset; 
         sot->so_table_start_offset = table_header_offset;
-        sot->so_array_ptr  = array_start_ptr;
-        sot->so_array_start_offset = array_start_offset;
+        sot->so_table_end_offset = table_header_offset+
+            total_table_length;
         sot->so_array_entry_count = entrycount;
         sot->so_array_entry_size = local_length_size;
+#if 0
+printf("dadebug entrycount %llu line %d\n",entrycount,__LINE__);
+printf("dadebug array entry size %d line %d\n",local_length_size,__LINE__);
+printf("dadebug table_end_offset %llu line %d\n",table_end_offset,__LINE__);
+fflush(stdout);
+#endif
+
         sot->so_table_count += 1;
 
         /*  The data length  in bytes following the unit_length field
-            of the header. */
+            of the header. includes any other header bytes
+            and the table space */
         *unit_length_out = length;
 
         /*  Where the unit_length field starts in the section. */
         *unit_length_offset_out = sot->so_table_start_offset;
 
         /*  Where the table of offsets starts in the section. */
-        *table_start_offset_out = sot->so_array_start_offset;
+        *table_start_offset_out = sot->so_table_start_offset;
 
         /*   Entrysize: 4 or 8 */
         *entry_size_out  = local_length_size;
diff --git a/src/lib/libdwarf/dwarf_str_offsets.h b/src/lib/libdwarf/dwarf_str_offsets.h
index 0ee2ea282..774f99cfc 100644
--- a/src/lib/libdwarf/dwarf_str_offsets.h
+++ b/src/lib/libdwarf/dwarf_str_offsets.h
@@ -1,7 +1,6 @@
 #ifndef DWARF_STR_OFFSETS_H
 #define DWARF_STR_OFFSETS_H
 /*
-    Copyright (C) 2018-2018 David Anderson. All Rights Reserved.
 
     This program is free software; you can redistribute it
     and/or modify it under the terms of version 2.1 of
@@ -49,27 +48,54 @@ struct  Dwarf_Str_Offsets_Table_s {
     Dwarf_Unsigned so_next_table_offset;
 
     /*  Per table (ie, a table is a
-        header and array of offsets) inside the section.  */
-    Dwarf_Small *so_header_ptr;
-    Dwarf_Small *so_end_cu_ptr;
-    Dwarf_Small *so_array_ptr;
+        header and array of offsets) inside the section.  
+        Offset to first byte of a table
+        Offset one past last byte of a table.
+        Offset from first byte of table to its array.
+        Count of entries in the array
+        Size of each enntry in the array. */
     Dwarf_Unsigned so_table_start_offset;
-    Dwarf_Unsigned so_array_start_offset;
+    Dwarf_Unsigned so_table_end_offset;
+    Dwarf_Unsigned so_lcl_offset_to_array;
     Dwarf_Unsigned so_array_entry_count;
     Dwarf_Half     so_array_entry_size;
 
 };
+int _dwarf_extract_string_offset_via_str_offsets(Dwarf_Debug dbg,
+    Dwarf_Small *data_ptr,
+    Dwarf_Small *end_data_ptr,
+    Dwarf_Half   attrform,
+    Dwarf_CU_Context cu_context,
+    Dwarf_Unsigned *str_sect_offset_out,
+    Dwarf_Error *error);
+
+int
+_dwarf_read_str_offsets_header(Dwarf_Str_Offsets_Table sot,
+    Dwarf_Small*     table_start_ptr,
+    Dwarf_CU_Context cucontext,
+    /* Followed by return values/error */
+    Dwarf_Unsigned *length,
+    Dwarf_Half    *offset_size_out,
+    Dwarf_Half    *extension_size_out,
+    Dwarf_Half    *version_out,
+    Dwarf_Half    *padding_out,
+    Dwarf_Unsigned *local_offset_to_array_out,
+    Dwarf_Unsigned *total_table_length_out,
+    Dwarf_Error *error);
 
 int _dwarf_trial_read_dwarf_five_hdr(Dwarf_Debug dbg,
-    Dwarf_Small *table_start_ptr,
-    Dwarf_Unsigned secsize,
-    Dwarf_Small * secendptr,
+    Dwarf_Unsigned  table_start_offset,
+    Dwarf_Unsigned  secsize,
+    Dwarf_Unsigned *table_local_offset_of_array, 
+    Dwarf_Unsigned *total_table_length,
+    /*  length_out is the initial DWARF length value
+        from the table header. */
     Dwarf_Unsigned *length_out,
-    Dwarf_Half *local_offset_size_out,
-    Dwarf_Half *local_extension_size_out,
-    Dwarf_Half *version_out,
-    Dwarf_Half *padding_out,
-    Dwarf_Error *error);
+    Dwarf_Half     *local_offset_size_out,
+    Dwarf_Half     *local_extension_size_out,
+    Dwarf_Half     *version_out,
+    Dwarf_Half     *padding_out,
+    Dwarf_Error    *error);
 int
 _dwarf_find_all_offsets_via_fission(Dwarf_Debug dbg,
     Dwarf_CU_Context cu_context,
