From 105054bc1bab9ac19ec9bdaa9163b8383fe72a07 Mon Sep 17 00:00:00 2001
From: Anthony Desnos <35918127+adesnosgoogle@users.noreply.github.com>
Date: Tue, 13 Feb 2018 11:38:41 +0100
Subject: [PATCH] Add debug flag for dex module + add some checks (#828)

---
 configure.ac          |   8 ++
 libyara/modules/dex.c | 281 ++++++++++++++++++++++++++++++++++--------
 2 files changed, 235 insertions(+), 54 deletions(-)

diff --git a/configure.ac b/configure.ac
index 8977c8deb1..61d8de92f2 100644
--- a/configure.ac
+++ b/configure.ac
@@ -165,6 +165,13 @@ AC_ARG_ENABLE([dex],
     CFLAGS="$CFLAGS -DDEX_MODULE"
   fi])
 
+AC_ARG_ENABLE([debug-dex],
+  [AS_HELP_STRING([--enable-debug-dex], [enable dex module debugging])],
+  [if test x$enableval = xyes; then
+    debug_dex_module=true
+    CFLAGS="$CFLAGS -DDEBUG_DEX_MODULE"
+  fi])
+
 AS_IF([test "x$with_crypto" != "xno"],
   [
     AC_CHECK_HEADERS([openssl/md5.h],, [have_crypto=no])
@@ -256,6 +263,7 @@ AM_CONDITIONAL([DOTNET_MODULE], [test x$build_dotnet_module = xtrue])
 AM_CONDITIONAL([MACHO_MODULE], [test x$build_macho_module = xtrue])
 AM_CONDITIONAL([GCC], [test "x$GCC" = xyes])
 AM_CONDITIONAL([DEX_MODULE], [test x$build_dex_module = xtrue])
+AM_CONDITIONAL([DEBUG_DEX_MODULE], [test x$debug_dex_module = xtrue])
 
 AM_CONDITIONAL([USE_WINDOWS_PROC], [test x$proc_interface = xwindows ])
 AM_CONDITIONAL([USE_LINUX_PROC], [test x$proc_interface = xlinux ])
diff --git a/libyara/modules/dex.c b/libyara/modules/dex.c
index e5bb04ec69..1aea6c9c98 100644
--- a/libyara/modules/dex.c
+++ b/libyara/modules/dex.c
@@ -355,6 +355,14 @@ uint32_t load_encoded_field(
     int static_field,
     int instance_field)
 {
+#ifdef DEBUG_DEX_MODULE
+  printf("[DEX] Parse encoded field start_offset:0x%zx\n", start_offset);
+#endif
+
+  if (!fits_in_dex(dex, dex->data + start_offset,
+                   sizeof(uint32_t) * 2))
+    return 0;
+
   uint32_t current_size = 0;
 
   encoded_field_t encoded_field;
@@ -391,18 +399,37 @@ uint32_t load_encoded_field(
       "field[%i].instance",
       index_encoded_field);
 
+#ifdef DEBUG_DEX_MODULE
+  printf("[DEX]\tEncoded field field_idx:0x%x field_idx_diff:0x%x access_flags:0x%x\n",
+    *previous_field_idx,
+    encoded_field.field_idx_diff,
+    encoded_field.access_flags);
+#endif
+
   uint32_t name_idx = get_integer(
       dex->object, "field_ids[%i].name_idx", *previous_field_idx);
 
+#ifdef DEBUG_DEX_MODULE
+    printf("[DEX]\tNAME_IDX 0x%x\n",
+      name_idx);
+#endif
+
   SIZED_STRING* field_name = get_string(
       dex->object, "string_ids[%i].value", name_idx);
 
-  set_sized_string(
+  if (field_name != NULL) {
+#ifdef DEBUG_DEX_MODULE
+    printf("[DEX]\tFIELD_NAME %s NAME_IDX 0x%x\n",
       field_name->c_string,
-      field_name->length,
-      dex->object,
-      "field[%i].name",
-      index_encoded_field);
+      name_idx);
+#endif
+    set_sized_string(
+        field_name->c_string,
+        field_name->length,
+        dex->object,
+        "field[%i].name",
+        index_encoded_field);
+  }
 
   uint32_t class_idx = get_integer(
       dex->object, "field_ids[%i].class_idx", *previous_field_idx);
@@ -413,12 +440,20 @@ uint32_t load_encoded_field(
   SIZED_STRING* class_name = get_string(
       dex->object, "string_ids[%i].value", descriptor_idx);
 
-  set_sized_string(
+  if (class_name != NULL) {
+#ifdef DEBUG_DEX_MODULE
+    printf("[DEX]\tCLASS_NAME %s CLASS_IDX 0x%x DESCRIPTOR_IDX 0x%x\n",
       class_name->c_string,
-      class_name->length,
-      dex->object,
-      "field[%i].class_name",
-      index_encoded_field);
+      class_idx,
+      descriptor_idx);
+#endif
+    set_sized_string(
+        class_name->c_string,
+        class_name->length,
+        dex->object,
+        "field[%i].class_name",
+        index_encoded_field);
+  }
 
   uint32_t type_idx = get_integer(dex->object,
       "field_ids[%i].type_idx", *previous_field_idx);
@@ -429,12 +464,21 @@ uint32_t load_encoded_field(
   SIZED_STRING* proto_name = get_string(dex->object,
       "string_ids[%i].value", shorty_idx);
 
-  set_sized_string(
+  if (proto_name != NULL) {
+#ifdef DEBUG_DEX_MODULE
+    printf("[DEX]\tPROTO_NAME %s TYPE_IDX 0x%x SHORTY_IDX 0x%x\n",
       proto_name->c_string,
-      proto_name->length,
-      dex->object,
-      "field[%i].proto",
-      index_encoded_field);
+      type_idx,
+      shorty_idx);
+#endif
+    set_sized_string(
+        proto_name->c_string,
+        proto_name->length,
+        dex->object,
+        "field[%i].proto",
+        index_encoded_field);    
+  }
+
 
   return current_size;
 }
@@ -447,6 +491,14 @@ uint32_t load_encoded_method(
     int direct_method,
     int virtual_method)
 {
+#ifdef DEBUG_DEX_MODULE
+  printf("[DEX] Parse encoded method start_offset:0x%zx\n", start_offset);
+#endif
+
+  if (!fits_in_dex(dex, dex->data + start_offset,
+                   sizeof(uint32_t) * 3))
+    return 0;
+
   uint32_t current_size = 0;
   encoded_method_t encoded_method;
 
@@ -491,18 +543,37 @@ uint32_t load_encoded_method(
       "method[%i].virtual",
       index_encoded_method);
 
+#ifdef DEBUG_DEX_MODULE
+  printf("[DEX]\tEncoded method method_idx:0x%x method_idx_diff:0x%x access_flags:0x%x code_off:0x%x\n",
+    *previous_method_idx,
+    encoded_method.method_idx_diff,
+    encoded_method.access_flags,
+    encoded_method.code_off);
+#endif
+
   uint32_t name_idx = get_integer(
       dex->object, "method_ids[%i].name_idx", *previous_method_idx);
 
-  SIZED_STRING* method_name = get_string(
-      dex->object,  "string_ids[%i].value", name_idx);
+#ifdef DEBUG_DEX_MODULE
+  printf("[DEX]\tNAME_IDX 0x%x\n", name_idx);
+#endif
 
-  set_sized_string(
+    SIZED_STRING* method_name = get_string(
+        dex->object,  "string_ids[%i].value", name_idx);
+    
+    if (method_name != NULL) {
+#ifdef DEBUG_DEX_MODULE
+    printf("[DEX]\tMETHOD_NAME %s NAME_IDX 0x%x\n",
       method_name->c_string,
-      method_name->length,
-      dex->object,
-      "method[%i].name",
-      index_encoded_method);
+      name_idx);
+#endif
+      set_sized_string(
+        method_name->c_string,
+        method_name->length,
+        dex->object,
+        "method[%i].name",
+        index_encoded_method);
+    }
 
   uint32_t class_idx = get_integer(
       dex->object, "method_ids[%i].class_idx", *previous_method_idx);
@@ -513,12 +584,20 @@ uint32_t load_encoded_method(
   SIZED_STRING* class_name = get_string(
       dex->object, "string_ids[%i].value", descriptor_idx);
 
-  set_sized_string(
+  if (class_name != NULL) {
+#ifdef DEBUG_DEX_MODULE
+    printf("[DEX]\tCLASS_NAME %s CLASS_IDX 0x%x DESCRIPTOR_IDX:0x%x\n",
       class_name->c_string,
-      class_name->length,
-      dex->object,
-      "method[%i].class_name",
-      index_encoded_method);
+      class_idx,
+      descriptor_idx);
+#endif
+    set_sized_string(
+        class_name->c_string,
+        class_name->length,
+        dex->object,
+        "method[%i].class_name",
+        index_encoded_method);
+  }
 
   uint32_t proto_idx = get_integer(
       dex->object, "method_ids[%i].proto_idx", *previous_method_idx);
@@ -529,34 +608,56 @@ uint32_t load_encoded_method(
   SIZED_STRING* proto_name = get_string(
       dex->object, "string_ids[%i].value", shorty_idx);
 
-  set_sized_string(
+  if (proto_name != NULL) {
+#ifdef DEBUG_DEX_MODULE
+    printf("[DEX]\tPROTO_NAME %s CLASS_IDX 0x%x DESCRIPTOR_IDX:0x%x\n",
       proto_name->c_string,
-      proto_name->length, dex->object,
-      "method[%i].proto",
-      index_encoded_method);
+      class_idx,
+      descriptor_idx);
+#endif
+    set_sized_string(
+        proto_name->c_string,
+        proto_name->length, dex->object,
+        "method[%i].proto",
+        index_encoded_method);
+  }
 
   if (encoded_method.code_off != 0)
   {
-    code_item_t* code_item = (code_item_t*) (
-        dex->data + encoded_method.code_off);
-
-    set_integer(code_item->registers_size, dex->object,
-                "method[%i].code_item.registers_size", index_encoded_method);
-    set_integer(code_item->ins_size, dex->object,
-                "method[%i].code_item.ins_size", index_encoded_method);
-    set_integer(code_item->outs_size, dex->object,
-                "method[%i].code_item.outs_size", index_encoded_method);
-    set_integer(code_item->tries_size, dex->object,
-                "method[%i].code_item.tries_size", index_encoded_method);
-    set_integer(code_item->debug_info_off, dex->object,
-                "method[%i].code_item.debug_info_off", index_encoded_method);
-    set_integer(code_item->insns_size, dex->object,
-                "method[%i].code_item.insns_size", index_encoded_method);
+#ifdef DEBUG_DEX_MODULE
+    printf("[DEX]\t\tParse CODE item\n");
+#endif
 
-    set_sized_string(
-      (const char *)(dex->data + encoded_method.code_off + sizeof(code_item_t)),
-      code_item->insns_size * 2,
-      dex->object, "method[%i].code_item.insns", index_encoded_method);
+    if (struct_fits_in_dex(
+      dex, dex->data + encoded_method.code_off, sizeof(code_item_t))) 
+    {
+      code_item_t* code_item = (code_item_t*) (
+          dex->data + encoded_method.code_off);
+
+      set_integer(code_item->registers_size, dex->object,
+                  "method[%i].code_item.registers_size", index_encoded_method);
+      set_integer(code_item->ins_size, dex->object,
+                  "method[%i].code_item.ins_size", index_encoded_method);
+      set_integer(code_item->outs_size, dex->object,
+                  "method[%i].code_item.outs_size", index_encoded_method);
+      set_integer(code_item->tries_size, dex->object,
+                  "method[%i].code_item.tries_size", index_encoded_method);
+      set_integer(code_item->debug_info_off, dex->object,
+                  "method[%i].code_item.debug_info_off", index_encoded_method);
+      set_integer(code_item->insns_size, dex->object,
+                  "method[%i].code_item.insns_size", index_encoded_method);
+
+      if (fits_in_dex(
+        dex,
+        dex->data + encoded_method.code_off + sizeof(code_item_t),
+        code_item->insns_size * 2)) 
+      {
+        set_sized_string(
+          (const char *)(dex->data + encoded_method.code_off + sizeof(code_item_t)),
+          code_item->insns_size * 2,
+          dex->object, "method[%i].code_item.insns", index_encoded_method);
+      }
+    }
   }
 
   return current_size;
@@ -586,6 +687,10 @@ void dex_parse(
                    dex_header->string_ids_size * sizeof(string_id_item_t)))
     return;
 
+#ifdef DEBUG_DEX_MODULE
+  printf("[DEX] Parse STRING ID section\n");
+#endif
+
   // Get information about the String ID section
   for (i = 0; i < dex_header->string_ids_size; i++)
   {
@@ -594,9 +699,26 @@ void dex_parse(
         dex_header->string_ids_offset +
         i * sizeof(string_id_item_t));
 
+#ifdef DEBUG_DEX_MODULE
+    printf("[DEX] STRING ID item data_offset:0x%x\n", 
+      string_id_item->string_data_offset);
+#endif
+
+    if (!fits_in_dex(dex, dex->data + string_id_item->string_data_offset,
+                     sizeof(uint32_t)))
+      continue;
+
     uint32_t value = (uint32_t)read_uleb128(
         (dex->data + string_id_item->string_data_offset), &uleb128_size);
 
+#ifdef DEBUG_DEX_MODULE
+    printf("[DEX] STRING ID item size:0x%x\n", value);
+#endif
+
+    if (!fits_in_dex(dex, dex->data + string_id_item->string_data_offset,
+                     value))
+      continue;
+
     set_integer(
         string_id_item->string_data_offset, dex->object,
         "string_ids[%i].offset", i);
@@ -616,6 +738,10 @@ void dex_parse(
                    dex_header->type_ids_size * sizeof(type_id_item_t)))
     return;
 
+#ifdef DEBUG_DEX_MODULE
+  printf("[DEX] Parse TYPE ID section\n");
+#endif
+
   // Get information about the Type ID section
   for (i = 0; i < dex_header->type_ids_size; i++)
   {
@@ -633,6 +759,10 @@ void dex_parse(
                    dex_header->proto_ids_size * sizeof(proto_id_item_t)))
     return;
 
+#ifdef DEBUG_DEX_MODULE
+  printf("[DEX] Parse PROTO ID section\n");
+#endif
+
   // Get information about the Proto ID section
   for (i = 0; i < dex_header->proto_ids_size; i++)
   {
@@ -651,6 +781,10 @@ void dex_parse(
                    dex_header->field_ids_size * sizeof(field_id_item_t)))
     return;
 
+#ifdef DEBUG_DEX_MODULE
+  printf("[DEX] Parse FIELD ID section\n");
+#endif
+
   // Get information about the Field ID section
   for (i = 0; i < dex_header->field_ids_size; i++)
   {
@@ -669,6 +803,10 @@ void dex_parse(
                    dex_header->method_ids_size * sizeof(method_id_item_t)))
     return;
 
+#ifdef DEBUG_DEX_MODULE
+  printf("[DEX] Parse METHOD ID section\n");
+#endif
+
   // Get information about the Method ID section
   for (i = 0; i < dex_header->method_ids_size; i++)
   {
@@ -685,6 +823,10 @@ void dex_parse(
                 "method_ids[%i].name_idx", i);
   }
 
+#ifdef DEBUG_DEX_MODULE
+  printf("[DEX] Parse MAP List ID section\n");
+#endif
+
   // Get information about the Map List ID section
   if (dex_header->map_offset != 0 &&
       fits_in_dex(dex, dex->data + dex_header->map_offset, sizeof(uint32_t)))
@@ -720,6 +862,10 @@ void dex_parse(
                    dex_header->class_defs_size * sizeof(class_id_item_t)))
     return;
 
+#ifdef DEBUG_DEX_MODULE
+  printf("[DEX] Parse CLASS ID section\n");
+#endif
+
   // Get information about the Class ID section
   for (i = 0; i < dex_header->class_defs_size; i++)
   {
@@ -728,6 +874,21 @@ void dex_parse(
         dex_header->class_defs_offset +
         i * sizeof(class_id_item_t));
 
+#ifdef DEBUG_DEX_MODULE
+    printf("[DEX] CLASS ID item class_idx:0x%x access_flags:0x%x " \
+           "super_class_idx:0x%x interfaces_off:0x%x source_file_idx:0x%x "\
+           "annotations_offset:0x%x class_data_offset:0x%x "\
+           "static_values_offset:0x%x\n",
+           class_id_item->class_idx,
+           class_id_item->access_flags,
+           class_id_item->super_class_idx,
+           class_id_item->interfaces_off,
+           class_id_item->source_file_idx,
+           class_id_item->annotations_offset,
+           class_id_item->class_data_offset,
+           class_id_item->static_values_offset);
+#endif
+
     set_integer(class_id_item->class_idx, dex->object,
                 "class_defs[%i].class_idx", i);
     set_integer(class_id_item->access_flags, dex->object,
@@ -787,8 +948,11 @@ void dex_parse(
         class_data_item.virtual_methods_size, dex->object,
         "class_data_item[%i].virtual_methods_size", index_class_data_item);
 
-      uint32_t previous_field_idx = 0;
+#ifdef DEBUG_DEX_MODULE
+      printf("[DEX] CLASS DATA item static fields\n");
+#endif
 
+      uint32_t previous_field_idx = 0;
       for (j = 0; j < class_data_item.static_fields_size; j++)
       {
         uleb128_size += load_encoded_field(
@@ -801,8 +965,11 @@ void dex_parse(
         index_encoded_field += 1;
       }
 
-      previous_field_idx = 0;
+#ifdef DEBUG_DEX_MODULE
+      printf("[DEX] CLASS DATA item instance fields\n");
+#endif
 
+      previous_field_idx = 0;
       for (j = 0; j < class_data_item.instance_fields_size; j++)
       {
         uleb128_size += load_encoded_field(
@@ -815,8 +982,11 @@ void dex_parse(
         index_encoded_field += 1;
       }
 
-      uint32_t previous_method_idx = 0;
+#ifdef DEBUG_DEX_MODULE
+      printf("[DEX] CLASS DATA item direct methods\n");
+#endif
 
+      uint32_t previous_method_idx = 0;
       for (j = 0; j < class_data_item.direct_methods_size; j++)
       {
         uleb128_size += load_encoded_method(
@@ -829,8 +999,11 @@ void dex_parse(
         index_encoded_method += 1;
       }
 
-      previous_method_idx = 0;
+#ifdef DEBUG_DEX_MODULE
+      printf("[DEX] CLASS DATA item virtual methods\n");
+#endif
 
+      previous_method_idx = 0;
       for (j = 0; j < class_data_item.virtual_methods_size; j++)
       {
         uleb128_size += load_encoded_method(
