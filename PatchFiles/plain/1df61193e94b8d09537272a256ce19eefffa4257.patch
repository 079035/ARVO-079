commit 1df61193e94b8d09537272a256ce19eefffa4257
Author: Gary E. Miller <gem@rellim.com>
Date:   Sun Oct 2 20:23:14 2022 -0700

    libgps/gpsutils.c: safe_atof() handle exponent overflow/underflow.
    
    Overflow returns INFINITY (per C99), underflow returns 0.0
    Clean up the matching tests.

diff --git a/libgps/gpsutils.c b/libgps/gpsutils.c
index 403d7744b..dc796e2d0 100644
--- a/libgps/gpsutils.c
+++ b/libgps/gpsutils.c
@@ -201,6 +201,13 @@ double safe_atof(const char *string)
         }
         while (isdigit((int) *p)) {
             exp = exp * 10 + (*p - '0');
+            if (1024 < exp) {
+                if (true == expSign) {
+                    // exponent underflow!
+                    return 0.0;
+                } // else  exponent overflow!
+                return INFINITY;
+            }
             p += 1;
         }
     }
diff --git a/tests/test_json.c b/tests/test_json.c
index 9340ce452..106dcd6c0 100644
--- a/tests/test_json.c
+++ b/tests/test_json.c
@@ -11,8 +11,9 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#include <time.h>              // for struct timespec
+#include <time.h>                 // for struct timespec
 
+#include "../include/gps.h"       // for safe_atof()
 #include "../include/gpsd.h"
 #include "../include/gps_json.h"
 
@@ -130,9 +131,9 @@ static void assert_real(char *attr, double fld, double val)
 
 static struct gps_data_t gpsdata;
 
-/* Case 1: TPV report */
+// Case 1: TPV report
 
-/* *INDENT-OFF* */
+// *INDENT-OFF*
 static const char json_str1[] =
     "{\"class\":\"TPV\","
     "\"device\":\"GPS#1\",\"time\":\"2005-06-19T08:12:41.89Z\","
@@ -157,7 +158,7 @@ static const char *json_str2 = "{\"class\":\"SKY\",\
          {\"PRN\":27,\"el\":16,\"az\":66,\"ss\":39,\"used\":true},\
          {\"az\":301,\"el\":10,\"PRN\":21,\"used\":false,\"ss\":0}]}";
 
-/* Case 3: String list syntax */
+// Case 3: String list syntax
 
 static const char *json_str3 = "[\"foo\",\"bar\",\"baz\"]";
 
@@ -174,7 +175,7 @@ static const struct json_array_t json_array_3 = {
     .maxlen = sizeof(stringptrs)/sizeof(stringptrs[0]),
 };
 
-/* Case 4: test defaulting of unspecified attributes */
+// Case 4: test defaulting of unspecified attributes
 
 static const char *json_str4 = "{\"flag1\":true,\"flag2\":false}";
 
@@ -217,7 +218,7 @@ static const struct json_attr_t json_attrs_4[] = {
     {NULL},
 };
 
-/* Case 5: test DEVICE parsing */
+// Case 5: test DEVICE parsing
 
 static const char *json_str5 = "{\"class\":\"DEVICE\",\
            \"path\":\"/dev/ttyUSB0\",\
@@ -226,7 +227,7 @@ static const char *json_str5 = "{\"class\":\"DEVICE\",\
            \"cycle\":1.1,\"mincycle\":0.002\
            }";
 
-/* Case 6: test parsing of subobject list into array of structures */
+// Case 6: test parsing of subobject list into array of structures
 
 static const char *json_str6 = "{\"parts\":[\
            {\"name\":\"Urgle\", \"flag\":true, \"count\":3},\
@@ -261,13 +262,13 @@ static const struct json_attr_t json_attrs_6[] = {
     {NULL},
 };
 
-/* Case 7: test parsing of version response */
+// Case 7: test parsing of version response
 
 static const char *json_str7 = "{\"class\":\"VERSION\",\
            \"release\":\"" VERSION "\",\"rev\":\"dummy-revision\",\
            \"proto_major\":3,\"proto_minor\":1}";
 
-/* Case 8: test parsing arrays of enumerated types */
+// Case 8: test parsing arrays of enumerated types
 
 static const char *json_str8 =
      "{\"fee\":\"FOO\",\"fie\":\"BAR\",\"foe\":\"BAZ\"}";
@@ -283,40 +284,40 @@ static const struct json_attr_t json_attrs_8[] = {
     {NULL},
 };
 
-/* Case 9: Like case 6 but w/ an empty array */
+// Case 9: Like case 6 but w/ an empty array
 
 static const char *json_str9 = "{\"parts\":[]}";
 
-/* Case 10: test parsing of PPS message  */
+// Case 10: test parsing of PPS message
 
 static const char *json_strPPS = "{\"class\":\"PPS\",\"device\":\"GPS#1\"," \
     "\"real_sec\":1428001514, \"real_nsec\":1000000," \
     "\"clock_sec\":1428001513,\"clock_nsec\":999999999," \
     "\"precision\":-20,\"qErr\":-123456}";
 
-/* Case 11: test parsing of TOFF message  */
+// Case 11: test parsing of TOFF message
 
 static const char *json_strTOFF = "{\"class\":\"TOFF\",\"device\":\"GPS#1\"," \
     "\"real_sec\":1428001514, \"real_nsec\":1000000," \
     "\"clock_sec\":1428001513,\"clock_nsec\":999999999}";
 
-/* Case 12: test parsing of OSC message */
+// Case 12: test parsing of OSC message
 
 static const char *json_strOSC = "{\"class\":\"OSC\",\"device\":\"GPS#1\"," \
     "\"running\":true,\"reference\":true,\"disciplined\":false," \
     "\"delta\":67}";
 
-/* Case 13: test parsing of ERROR message, and some escape sequences */
+// Case 13: test parsing of ERROR message, and some escape sequences
 
 static char *json_strErr = "{\"class\":\"ERROR\",\"message\":" \
                            "\"Hello\b\f\n\r\t\"}";
 
-/* Case 14: test parsing of ERROR message and \u escape */
-/* per ECMA-404, \u must be followed by 4 hex digits */
+// Case 14: test parsing of ERROR message and \u escape
+// per ECMA-404, \u must be followed by 4 hex digits
 
 static char *json_strErr1 = "{\"class\":\"ERROR\",\"message\":\"0\\u00334\"}";
 
-/* Case 15: test buffer overflow of short string destination */
+// Case 15: test buffer overflow of short string destination
 
 static char *json_strOver = "{\"name\":\"\\u0033\\u0034\\u0035\\u0036\"}";
 
@@ -330,11 +331,11 @@ static const struct json_attr_t json_short_string[] = {
     {NULL},
 };
 
-/* Case 16: test buffer overflow of short string destination */
+// Case 16: test buffer overflow of short string destination
 
-static char json_strOver2[7 * JSON_VAL_MAX];  /* dynamically built */
+static char json_strOver2[7 * JSON_VAL_MAX];  // dynamically built
 
-/* Case 18: Ignore part of VERSION sentence */
+// Case 18: Ignore part of VERSION sentence
 
 static char *json_str18 =
     "{\"class\":\"VERSION\",\"release\":\"" VERSION "\","
@@ -351,7 +352,7 @@ static const struct json_attr_t json_attrs_18[] = {
     {NULL},
 };
 
-/* Case 19: Ignore part of WATCH sentence */
+// Case 19: Ignore part of WATCH sentence
 
 static char *json_str19 =
     "{\"class\":\"WATCH\",\"enable\":true,\"json\":true,\"nmea\":false,\"raw\":"
@@ -368,7 +369,7 @@ static const struct json_attr_t json_attrs_19[] = {
     {NULL},
 };
 
-/* Case 20: Ignore part of TPV sentence */
+// Case 20: Ignore part of TPV sentence
 
 static char *json_str20 =
     "{\"class\":\"TPV\",\"device\":\"/dev/"
@@ -394,7 +395,7 @@ static const struct json_attr_t json_attrs_20[] = {
     {NULL},
 };
 
-/* Case 21: Read array of integers */
+// Case 21: Read array of integers
 
 static const char *json_strInt = "[23,-17,5]";
 static int intstore[4], intcount;
@@ -406,7 +407,7 @@ static const struct json_array_t json_array_Int = {
     .maxlen = sizeof(intstore)/sizeof(intstore[0]),
 };
 
-/* Case 22: Read array of booleans */
+// Case 22: Read array of booleans
 
 static const char *json_strBool = "[true,false,true]";
 static bool boolstore[4];
@@ -419,7 +420,7 @@ static const struct json_array_t json_array_Bool = {
     .maxlen = sizeof(boolstore)/sizeof(boolstore[0]),
 };
 
-/* Case 23: Read array of reals */
+// Case 23: Read array of reals
 
 static const char *json_strReal = "[23.1,-17.2,5.3]";
 static double realstore[4];
@@ -473,22 +474,23 @@ static const struct json_attr_t json_attrs_25[] = {
 
 
 char str32[] = "\f\n\r\t\v";
-/* *INDENT-ON* */
+// *INDENT-ON*
 
 static void jsontest(int i)
 {
-    int status = 0;   /* libgps_json_unpack() returned status */
-    int n;            /* generic index */
+    int status = 0;      // libgps_json_unpack() returned status
+    int n;               // generic index
     char buffer[500];
     char *pbuf;
     struct timespec expected_ts;
+    double d;
 
     if (0 < debug) {
         (void)fprintf(stderr, "Running test #%d.\n", i);
     }
     current_test = i;
 
-    /* do not keep old data! */
+    // do not keep old data!
     memset((void *)&gpsdata, 0, sizeof(gpsdata));
 
     switch (i)
@@ -607,7 +609,7 @@ static void jsontest(int i)
         break;
 
     case 9:
-        /* yes, the '6' in the next line is correct */
+        // yes, the '6' in the next line is correct
         status = json_read_object(json_str9, json_attrs_6, NULL);
         assert_case(status);
         assert_int("dumbcount", "t_integer", dumbcount, 0);
@@ -669,7 +671,7 @@ static void jsontest(int i)
         break;
 
     case 15:
-        /* check for string overrun caught */
+        // check for string overrun caught
         if (2 < debug) {
             (void)fprintf(stderr, "test string: %s.\n", json_strOver);
         }
@@ -681,9 +683,9 @@ static void jsontest(int i)
         break;
 
     case 16:
-        /* check for string overrun caught */
+        // check for string overrun caught
         json_strOver2[0] = '\0';
-        /* build a LONG test string */
+        // build a LONG test string
         strlcat(json_strOver2, "{\"name\":\"", sizeof(json_strOver2));
         for (n = 0; n < (2 * JSON_VAL_MAX); n++) {
             strlcat(json_strOver2, "\\u0033", sizeof(json_strOver2));
@@ -701,9 +703,9 @@ static void jsontest(int i)
         break;
 
     case 17:
-        /* check for a different string overrun caught */
+        // check for a different string overrun caught
         json_strOver2[0] = '\0';
-        /* build a LONG test string */
+        // build a LONG test string
         strlcat(json_strOver2, "{\"name\":\"", sizeof(json_strOver2));
         for (n = 0; n < (2 * JSON_VAL_MAX); n++) {
             strlcat(json_strOver2, "\\A", sizeof(json_strOver2));
@@ -851,7 +853,40 @@ static void jsontest(int i)
         assert_int("status", "t_integer", status, JSON_ERR_EMPTY);
         break;
 
-#define MAXTEST 32
+    //  CHeck safe_atof() since JSON depends on it.
+    case 33: // Check safe_atof(), exponent too large
+        d =  safe_atof("2e1024");
+        if ((2^1024) == d) {
+            (void)fprintf(stderr, "2^1024 == safe_atof(\"2e1024\") failed\n");
+            exit(EXIT_FAILURE);
+        }
+        break;
+
+    case 34: // Check safe_atof(), exponent too large
+        d =  safe_atof("2e-1024");    // exponent too large
+        if (isnan(d)) {
+            (void)fprintf(stderr, "NAN == safe_atof(\"-2e1024\") failed\n");
+            exit(EXIT_FAILURE);
+        }
+        break;
+
+    case 35: // Check safe_atof(), exponent too large
+        d =  safe_atof("2e1025");    // exponent too large
+        if (!isinf(d)) {
+            (void)fprintf(stderr, "INFINITY == safe_atof(\"2e1025\") failed\n");
+            exit(EXIT_FAILURE);
+        }
+        break;
+
+    case 36: // Check safe_atof(), exponent too large
+        d =  safe_atof("2e-1025");    // exponent too large
+        if (0.0 != d) {
+            (void)fprintf(stderr, "0.0 == safe_atof(\"2e-1025\") failed\n");
+            exit(EXIT_FAILURE);
+        }
+        break;
+
+#define MAXTEST 36
 
     default:
         (void)fputs("Unknown test number\n", stderr);
@@ -892,9 +927,9 @@ int main(int argc UNUSED, char *argv[]UNUSED)
 
     (void)fprintf(stderr, "JSON unit tests\n");
 
-    if (individual)
+    if (individual) {
         jsontest(individual);
-    else {
+    } else {
         int i;
         for (i = 1; i <= MAXTEST; i++) {
             jsontest(i);
@@ -906,5 +941,4 @@ int main(int argc UNUSED, char *argv[]UNUSED)
     exit(EXIT_SUCCESS);
 }
 
-/* end */
 // vim: set expandtab shiftwidth=4
