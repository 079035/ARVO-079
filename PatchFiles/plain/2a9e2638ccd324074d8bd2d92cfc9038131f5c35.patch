commit 2a9e2638ccd324074d8bd2d92cfc9038131f5c35
Author: Aaron Boxer <boxerab@gmail.com>
Date:   Tue Mar 15 17:55:11 2022 -0400

    PLT marker : fix PLM implementation + cleanup

diff --git a/src/lib/jp2/cache/PacketLengthMarkers.cpp b/src/lib/jp2/cache/PacketLengthMarkers.cpp
index fd7a89c3..3e65d9e7 100644
--- a/src/lib/jp2/cache/PacketLengthMarkers.cpp
+++ b/src/lib/jp2/cache/PacketLengthMarkers.cpp
@@ -204,36 +204,39 @@ bool PacketLengthMarkers::readPLM(uint8_t* headerData, uint16_t header_size)
 	// Zplm
 	uint8_t Zplm = *headerData++;
 	--header_size;
-	if(!readInit(Zplm, GRK_PL_MARKER_PLM))
+	if(rawMarkers_->size() == 256)
+	{
+		GRK_ERROR("PLM: only 256 PLM markers are allowed by the standard.");
+		return false;
+	}
+	if(!readInit(Zplm))
 		return false;
-	uint32_t len;
 	while(header_size > 0)
 	{
-		// Nplm
+		// 1. read Nplm
 		uint8_t Nplm = *headerData++;
-		if(header_size < (1 + Nplm))
-		{
-			GRK_ERROR("Malformed PLM marker segment");
-			return false;
-		}
-		uint32_t i = 0;
-		while (i < header_size){
-			while (!readNextByte(*headerData++, &len) && (i < header_size))
-				i++;
-			i++;
-		}
-		header_size = (uint16_t)(header_size - (1 + Nplm));
-		if(packetLen_ != 0)
+		uint16_t segmentLength = (uint16_t)Nplm + 1;
+		if(header_size < segmentLength)
 		{
 			GRK_ERROR("Malformed PLM marker segment");
 			return false;
 		}
+		// 2. push packets for nth tile part into current raw marker
+		auto b = new grkBufferU8();
+		b->alloc(header_size);
+		memcpy(b->buf, headerData, segmentLength);
+		currRawMarkerIter_->second->push_back(b);
+
+		// 3. advance src buffer
+		header_size = (uint16_t)(header_size - segmentLength);
+		headerData += Nplm;
 	}
+
 	return true;
 }
 bool PacketLengthMarkers::readPLT(uint8_t* headerData, uint16_t header_size)
 {
-	if(header_size < 1)
+	if(header_size <= 1)
 	{
 		GRK_ERROR("PLT marker segment too short");
 		return false;
@@ -241,7 +244,7 @@ bool PacketLengthMarkers::readPLT(uint8_t* headerData, uint16_t header_size)
 	/* Zplt */
 	uint8_t Zpl = *headerData++;
 	--header_size;
-	if(!readInit(Zpl, GRK_PL_MARKER_PLT))
+	if(!readInit(Zpl))
 		return false;
 
 	auto b = new grkBufferU8();
@@ -254,13 +257,8 @@ bool PacketLengthMarkers::readPLT(uint8_t* headerData, uint16_t header_size)
 
 	return true;
 }
-bool PacketLengthMarkers::readInit(uint32_t nextIndex, PL_MARKER_TYPE type)
+bool PacketLengthMarkers::readInit(uint32_t nextIndex)
 {
-	if(rawMarkers_->size() == 255 && type == GRK_PL_MARKER_PLM)
-	{
-		GRK_ERROR("PLM: only 255 PLM markers are supported.");
-		return false;
-	}
 	if(rawMarkers_->empty())
 	{
 		sequential_ = nextIndex == 0;
diff --git a/src/lib/jp2/cache/PacketLengthMarkers.h b/src/lib/jp2/cache/PacketLengthMarkers.h
index a5fec2b5..1678f256 100644
--- a/src/lib/jp2/cache/PacketLengthMarkers.h
+++ b/src/lib/jp2/cache/PacketLengthMarkers.h
@@ -22,11 +22,6 @@
 
 namespace grk
 {
-enum PL_MARKER_TYPE
-{
-	GRK_PL_MARKER_PLM,
-	GRK_PL_MARKER_PLT,
-};
 
 typedef std::vector<grkBufferU8*> PL_RAW_MARKER;
 typedef std::map<uint32_t, PL_RAW_MARKER*> PL_RAW_MARKERS;
@@ -78,7 +73,7 @@ struct PacketLengthMarkers
 
 	//////////////////////////
 	// decompress
-	bool readInit(uint32_t index, PL_MARKER_TYPE type);
+	bool readInit(uint32_t index);
 	bool readNextByte(uint8_t Iplm, uint32_t *packetLength);
 	bool sequential_;
 	uint32_t packetLen_;
