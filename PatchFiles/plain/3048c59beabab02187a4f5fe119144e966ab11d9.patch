From 3048c59beabab02187a4f5fe119144e966ab11d9 Mon Sep 17 00:00:00 2001
From: Aaron Boxer <boxerab@gmail.com>
Date: Wed, 19 Jan 2022 18:18:00 -0500
Subject: [PATCH] decompress: delete channel definition object after parse
 error

Fixes
https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=43805&sort=-opened&can=1&q=proj%3Agrok
---
 src/lib/jp2/codestream/FileFormat.cpp          |  9 +++++----
 .../jp2/codestream/FileFormatDecompress.cpp    | 18 +++++++++++++-----
 2 files changed, 18 insertions(+), 9 deletions(-)

diff --git a/src/lib/jp2/codestream/FileFormat.cpp b/src/lib/jp2/codestream/FileFormat.cpp
index b61da7aa7..6b699bde0 100644
--- a/src/lib/jp2/codestream/FileFormat.cpp
+++ b/src/lib/jp2/codestream/FileFormat.cpp
@@ -57,14 +57,15 @@ FileFormat::~FileFormat()
 
 bool FileFormat::exec(std::vector<PROCEDURE_FUNC>* procs)
 {
-	bool result = true;
 	assert(procs);
 
-	for(auto it = procs->begin(); it != procs->end(); ++it)
-		result = result && (*it)();
+	for(auto it = procs->begin(); it != procs->end(); ++it){
+		if (! (*it)())
+			return false;
+	}
 	procs->clear();
 
-	return result;
+	return true;
 }
 
 } // namespace grk
diff --git a/src/lib/jp2/codestream/FileFormatDecompress.cpp b/src/lib/jp2/codestream/FileFormatDecompress.cpp
index da212881c..500a24477 100644
--- a/src/lib/jp2/codestream/FileFormatDecompress.cpp
+++ b/src/lib/jp2/codestream/FileFormatDecompress.cpp
@@ -965,6 +965,7 @@ bool FileFormatDecompress::read_channel_definition(uint8_t* p_cdef_header_data,
 	assert(p_cdef_header_data != nullptr);
 
 	(void)cdef_header_size;
+	bool rc = false;
 
 	/* Part 1, I.5.3.6: 'The shall be at most one Channel Definition box
 	 * inside a JP2 Header box.'*/
@@ -1004,13 +1005,13 @@ bool FileFormatDecompress::read_channel_definition(uint8_t* p_cdef_header_data,
 		if(cdef_info[i].typ > 2 && cdef_info[i].typ != GRK_COMPONENT_TYPE_UNSPECIFIED)
 		{
 			GRK_ERROR("CDEF box : Illegal channel type %u", cdef_info[i].typ);
-			return false;
+			goto cleanup;
 		}
 		grk_read<uint16_t>(p_cdef_header_data, &cdef_info[i].asoc); /* Asoc^i */
 		if(cdef_info[i].asoc > 3 && cdef_info[i].asoc != GRK_COMPONENT_ASSOC_UNASSOCIATED)
 		{
 			GRK_ERROR("CDEF box : Illegal channel association %u", cdef_info[i].asoc);
-			return false;
+			goto cleanup;
 		}
 		p_cdef_header_data += 2;
 	}
@@ -1028,7 +1029,7 @@ bool FileFormatDecompress::read_channel_definition(uint8_t* p_cdef_header_data,
 				GRK_ERROR("CDEF box : multiple descriptions of component, %u, with differing types "
 						  ": %u and %u.",
 						  infoi.cn, infoi.typ, infoj.typ);
-				return false;
+				goto cleanup;
 			}
 		}
 	}
@@ -1048,12 +1049,19 @@ bool FileFormatDecompress::read_channel_definition(uint8_t* p_cdef_header_data,
 				GRK_ERROR(
 					"CDEF box : components %u and %u share same type/association pair (%u,%u).",
 					infoi.cn, infoj.cn, infoj.typ, infoj.asoc);
-				return false;
+				goto cleanup;
 			}
 		}
 	}
+	rc = true;
+cleanup:
+	if (!rc){
+		delete[] color.channel_definition->descriptions;
+		delete color.channel_definition;
+		color.channel_definition = nullptr;
+	}
 
-	return true;
+	return rc;
 }
 bool FileFormatDecompress::read_colr(uint8_t* p_colr_header_data, uint32_t colr_header_size)
 {
