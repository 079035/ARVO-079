From 3c5a5e691ba31ed60c4509e834dfdb40e0fa0220 Mon Sep 17 00:00:00 2001
From: Volodymyr Shymanskyy <vshymanskyi@gmail.com>
Date: Mon, 12 Apr 2021 16:58:44 +0300
Subject: [PATCH] Cleanup

---
 source/m3_compile.c |  3 ++-
 source/m3_env.c     | 10 ++--------
 2 files changed, 4 insertions(+), 9 deletions(-)

diff --git a/source/m3_compile.c b/source/m3_compile.c
index ca0fe830..6fc5e514 100644
--- a/source/m3_compile.c
+++ b/source/m3_compile.c
@@ -2213,7 +2213,8 @@ M3Result  Compile_BlockStatements  (IM3Compilation o)
         o->lastOpcodeStart = o->wasm;
 _       (Read_opcode (& opcode, & o->wasm, o->wasmEnd));                log_opcode (o, opcode);
 
-        if (IsCompilingExpressions(o)) {
+        // Restrict opcodes when evaluating expressions
+        if (not o->function) {
             switch (opcode) {
             case c_waOp_i32_const: case c_waOp_i64_const:
             case c_waOp_f32_const: case c_waOp_f64_const:
diff --git a/source/m3_env.c b/source/m3_env.c
index 316f57fd..e288d189 100644
--- a/source/m3_env.c
+++ b/source/m3_env.c
@@ -260,17 +260,12 @@ void  m3_FreeRuntime  (IM3Runtime i_runtime)
     }
 }
 
-static char* c_compilingExprsFlag = "m3_exprs";
-
-bool  IsCompilingExpressions  (IM3Compilation i_compilation)
-{
-    return i_compilation->runtime && i_compilation->runtime->userdata == c_compilingExprsFlag;
-}
-
 M3Result  EvaluateExpression  (IM3Module i_module, void * o_expressed, u8 i_type, bytes_t * io_bytes, cbytes_t i_end)
 {
     M3Result result = m3Err_none;
 
+    // OPTZ: use a simplified interpreter for expressions
+
     // create a temporary runtime context
 #if defined(d_m3PreferStaticAlloc)
     static M3Runtime runtime;
@@ -282,7 +277,6 @@ M3Result  EvaluateExpression  (IM3Module i_module, void * o_expressed, u8 i_type
     runtime.environment = i_module->runtime->environment;
     runtime.numStackSlots = i_module->runtime->numStackSlots;
     runtime.stack = i_module->runtime->stack;
-    runtime.userdata = c_compilingExprsFlag;
 
     m3stack_t stack = (m3stack_t)runtime.stack;
 
