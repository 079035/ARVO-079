From 1bc7f51b4790539d7ccc3830faff650c1cf4c993 Mon Sep 17 00:00:00 2001
From: Joachim Metz <joachim.metz@gmail.com>
Date: Sat, 2 Oct 2021 07:01:34 +0200
Subject: [PATCH] Fixed multiple bounds issues in tsk_UTF16toUTF8 and
 iso9660_load_inodes_dir

---
 tsk/base/tsk_unicode.c |  4 ++++
 tsk/fs/iso9660.c       | 32 +++++++++++++++++++++++---------
 2 files changed, 27 insertions(+), 9 deletions(-)

diff --git a/tsk/base/tsk_unicode.c b/tsk/base/tsk_unicode.c
index da34c74aef..61f5d029c2 100644
--- a/tsk/base/tsk_unicode.c
+++ b/tsk/base/tsk_unicode.c
@@ -150,12 +150,15 @@ tsk_UTF16toUTF8(TSK_ENDIAN_ENUM endian, const UTF16 ** sourceStart,
     TSKConversionResult result = TSKconversionOK;
     const UTF16 *source = *sourceStart;
     UTF8 *target = *targetStart;
+
     while (source < sourceEnd) {
         UTF32 ch;
         unsigned short bytesToWrite = 0;
         const UTF32 byteMask = 0xBF;
         const UTF32 byteMark = 0x80;
         const UTF16 *oldSource = source;        /* In case we have to back up because of target overflow. */
+
+        // Need at least 2 bytes
         ch = tsk_getu16(endian, (uint8_t *) source);
         source++;
 
@@ -163,6 +166,7 @@ tsk_UTF16toUTF8(TSK_ENDIAN_ENUM endian, const UTF16 ** sourceStart,
         if (ch >= UNI_SUR_HIGH_START && ch <= UNI_SUR_HIGH_END) {
             /* If the 16 bits following the high surrogate are in the source buffer... */
             if (source < sourceEnd) {
+                // Need at least 2 bytes
                 UTF32 ch2 = tsk_getu16(endian, (uint8_t *) source);
                 ++source;
 
diff --git a/tsk/fs/iso9660.c b/tsk/fs/iso9660.c
index 3815517638..6fa2c2c1e1 100755
--- a/tsk/fs/iso9660.c
+++ b/tsk/fs/iso9660.c
@@ -556,6 +556,15 @@ iso9660_load_inodes_dir(TSK_FS_INFO * fs, TSK_OFF_T a_offs, int count,
                         in_node = NULL;
                         break;
                     }
+                    if (b_offs >= ISO9660_SSIZE_B - sizeof(iso9660_dentry)) {
+                        if (tsk_verbose)
+                            tsk_fprintf(stderr,
+                                        "iso9660_load_inodes_dir: b_offs out of bounds, bailing\n");
+                        free(in_node);
+                        in_node = NULL;
+                        break;
+                    }
+
 
                     name16 =
                         (UTF16 *) & buf[b_offs + sizeof(iso9660_dentry)];
@@ -570,13 +579,18 @@ iso9660_load_inodes_dir(TSK_FS_INFO * fs, TSK_OFF_T a_offs, int count,
                     }
                     name8 = (UTF8 *) in_node->inode.fn;
 
+                    if ((dentry->fi_len % 2) != 0 || dentry->fi_len > ISO9660_SSIZE_B - sizeof(iso9660_dentry) - b_offs) {
+                        if (tsk_verbose)
+                            tsk_fprintf(stderr,
+                                        "iso9660_load_inodes_dir: UTF-16 name length out of bounds, bailing\n");
+                        free(in_node);
+                        in_node = NULL;
+                        break;
+                    }
                     retVal =
                         tsk_UTF16toUTF8(fs->endian,
-                        (const UTF16 **) &name16,
-                        (UTF16 *) & buf[b_offs + sizeof(iso9660_dentry) +
-                            dentry->fi_len], &name8,
-                        (UTF8 *) ((uintptr_t) & in_node->inode.
-                            fn[ISO9660_MAXNAMLEN_STD]),
+                        (const UTF16 **) &name16, (UTF16 *) & buf[b_offs + sizeof(iso9660_dentry) + dentry->fi_len],
+                        &name8, (UTF8 *) ((uintptr_t) & in_node->inode.fn[ISO9660_MAXNAMLEN_STD]),
                         TSKlenientConversion);
                     if (retVal != TSKconversionOK) {
                         if (tsk_verbose)
@@ -628,10 +642,10 @@ iso9660_load_inodes_dir(TSK_FS_INFO * fs, TSK_OFF_T a_offs, int count,
                 }
 
                 // if no extension, remove the final '.'
-                if (in_node->inode.fn[strlen(in_node->inode.fn) - 1] ==
-                    '.')
-                    in_node->inode.fn[strlen(in_node->inode.fn) - 1] =
-                        '\0';
+                size_t name8_len = strnlen(in_node->inode.fn, ISO9660_MAXNAMLEN);
+                if (name8_len > 0 && in_node->inode.fn[name8_len - 1] == '.') {
+                    in_node->inode.fn[name8_len - 1] = '\0';
+                }
                 
                 
                 if (strlen(in_node->inode.fn) == 0) {
