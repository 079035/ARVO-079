commit 4107288ebb23d418ff5c1a9d40c48a4f00950193
Author: Ken Sharp <ken.sharp@artifex.com>
Date:   Fri Dec 17 14:48:51 2021 +0000

    OSS-fuzz #42309
    
    The stream interface needs us to handle single filters, and arrays of
    filters differently in order to correctly clean up after an error.
    
    However, Flate with Predictor, although a single filter, is actually
    handled as 2 filters internally and so requires special casing. When we
    get an error with the Predictor filter we were closing all the open
    filters in the chain.
    
    Previously this was acceptable but since adding a SubFileDecode around
    images, this meant that an error on the Predictor would lead to us
    closing all the filters, including the SubFileDecode filter, which
    would then crash when we tried to close it in the image code.
    
    Simply have the Predictor code only close the parent stream (the Flate)
    and leave the rest up to the file code.

diff --git a/pdf/pdf_file.c b/pdf/pdf_file.c
index a87583261..0b4c32563 100644
--- a/pdf/pdf_file.c
+++ b/pdf/pdf_file.c
@@ -315,6 +315,7 @@ static int pdfi_Flate_filter(pdf_context *ctx, pdf_dict *d, stream *source, stre
     stream_zlib_state zls;
     uint min_size = 2048;
     int code;
+    stream *Flate_source = NULL;
 
     memset(&zls, 0, sizeof(zls));
 
@@ -329,9 +330,10 @@ static int pdfi_Flate_filter(pdf_context *ctx, pdf_dict *d, stream *source, stre
     source = *new_stream;
 
     if (d && d->type == PDF_DICT) {
+        Flate_source = (*new_stream)->strm;
         code = pdfi_Predictor_filter(ctx, d, source, new_stream);
         if (code < 0)
-            pdfi_close_filter_chain(ctx, source, NULL);
+            pdfi_close_filter_chain(ctx, source, Flate_source);
     }
     return code;
 }
