From 41ab86fce0c0d2056ae038ff08ac978027c093df Mon Sep 17 00:00:00 2001
From: Eugene Kliuchnikov <eustas.ru@gmail.com>
Date: Fri, 30 Jun 2023 10:58:11 +0200
Subject: [PATCH] Fix UB in HF adjustment. (#161)

Actually, apply the same sanity filters as in non-fixed code.
---
 libfaad/common.c    | 44 ++------------------------------------
 libfaad/common.h    |  1 -
 libfaad/rvlc.c      |  2 +-
 libfaad/sbr_hfadj.c | 52 ++++++++++++++++++++++++++++-----------------
 libfaad/syntax.c    |  2 +-
 5 files changed, 37 insertions(+), 64 deletions(-)

diff --git a/libfaad/common.c b/libfaad/common.c
index 04e1a410..22333498 100644
--- a/libfaad/common.c
+++ b/libfaad/common.c
@@ -366,6 +366,8 @@ real_t pow2_fix(real_t val)
 
     if (val == 0)
         return (1<<REAL_BITS);
+    if (REAL_BITS + whole < 0)
+        return 0;
 
     /* leave INTERP_BITS bits */
     index_frac = rest >> (REAL_BITS-TABLE_BITS-INTERP_BITS);
@@ -471,46 +473,4 @@ int32_t log2_int(uint32_t val)
     return ((exp+REAL_BITS) << REAL_BITS) + errcorr + x1;
 }
 
-/* ld(x) = ld(x*y/y) = ld(x/y) + ld(y), with y=2^N and [1 <= (x/y) < 2] */
-real_t log2_fix(uint32_t val)
-{
-    uint32_t frac;
-    int32_t exp = 0;
-    uint32_t index;
-    uint32_t index_frac;
-    uint32_t x1, x2;
-    uint32_t errcorr;
-
-    /* error */
-    if (val == 0)
-        return -100000;
-
-    exp = floor_log2(val);
-    exp -= REAL_BITS;
-
-    /* frac = [1..2] */
-    if (exp >= 0)
-        frac = val >> exp;
-    else
-        frac = val << -exp;
-
-    /* index in the log2 table */
-    index = frac >> (REAL_BITS-TABLE_BITS);
-
-    /* leftover part for linear interpolation */
-    index_frac = frac & ((1<<(REAL_BITS-TABLE_BITS))-1);
-
-    /* leave INTERP_BITS bits */
-    index_frac = index_frac >> (REAL_BITS-TABLE_BITS-INTERP_BITS);
-
-    x1 = log2_tab[index & ((1<<TABLE_BITS)-1)];
-    x2 = log2_tab[(index & ((1<<TABLE_BITS)-1)) + 1];
-
-    /* linear interpolation */
-    /* retval = exp + ((index_frac)*x2 + (1-index_frac)*x1) */
-
-    errcorr = (index_frac * (x2-x1)) >> INTERP_BITS;
-
-    return (exp << REAL_BITS) + errcorr + x1;
-}
 #endif
diff --git a/libfaad/common.h b/libfaad/common.h
index d12acc12..c7b8d0d1 100644
--- a/libfaad/common.h
+++ b/libfaad/common.h
@@ -419,7 +419,6 @@ uint32_t ne_rng(uint32_t *__r1, uint32_t *__r2);
 uint32_t wl_min_lzc(uint32_t x);
 #define LOG2_MIN_INF REAL_CONST(-10000)
 int32_t log2_int(uint32_t val);
-int32_t log2_fix(uint32_t val);
 int32_t pow2_int(real_t val);
 real_t pow2_fix(real_t val);
 #endif
diff --git a/libfaad/rvlc.c b/libfaad/rvlc.c
index 49584cb4..da7b8709 100644
--- a/libfaad/rvlc.c
+++ b/libfaad/rvlc.c
@@ -190,7 +190,7 @@ static uint8_t rvlc_decode_sf_forward(ic_stream *ics, bitfile *ld_sf, bitfile *l
     /* TODO: consider rolling out to regular build. */
 #ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
     /* The value is inexact, adjusted to current fuzzer findings. */
-    scale_factor_max = 174;
+    scale_factor_max = 165;
 #endif  // FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
 #endif  // FIXED_POINT
 
diff --git a/libfaad/sbr_hfadj.c b/libfaad/sbr_hfadj.c
index 6da73250..2cb20882 100644
--- a/libfaad/sbr_hfadj.c
+++ b/libfaad/sbr_hfadj.c
@@ -279,11 +279,11 @@ static const real_t log2_int_tab[] = {
     REAL_CONST(5.906890595608518), REAL_CONST(5.930737337562887), REAL_CONST(5.954196310386876), REAL_CONST(5.977279923499916)
 };
 
-static const real_t pan_log2_tab[] = {
+// pan_log2_tab[X] = log2(2**X + 1) - X
+static const real_t pan_log2_tab[13] = {
     REAL_CONST(1.000000000000000), REAL_CONST(0.584962500721156), REAL_CONST(0.321928094887362), REAL_CONST(0.169925001442312), REAL_CONST(0.087462841250339),
     REAL_CONST(0.044394119358453), REAL_CONST(0.022367813028455), REAL_CONST(0.011227255423254), REAL_CONST(0.005624549193878), REAL_CONST(0.002815015607054),
-    REAL_CONST(0.001408194392808), REAL_CONST(0.000704269011247), REAL_CONST(0.000352177480301), REAL_CONST(0.000176099486443), REAL_CONST(0.000088052430122),
-    REAL_CONST(0.000044026886827), REAL_CONST(0.000022013611360), REAL_CONST(0.000011006847667)
+    REAL_CONST(0.001408194392808), REAL_CONST(0.000704269011247), REAL_CONST(0.000352177480301)
 };
 
 static real_t find_log2_E(sbr_info *sbr, uint8_t k, uint8_t l, uint8_t ch)
@@ -291,13 +291,16 @@ static real_t find_log2_E(sbr_info *sbr, uint8_t k, uint8_t l, uint8_t ch)
     /* check for coupled energy/noise data */
     if (sbr->bs_coupling == 1)
     {
+        int16_t e = sbr->E[0][k][l];
+        int16_t E = sbr->E[1][k][l];
         uint8_t amp0 = (sbr->amp_res[0]) ? 0 : 1;
         uint8_t amp1 = (sbr->amp_res[1]) ? 0 : 1;
-        real_t tmp = (7 << REAL_BITS) + (sbr->E[0][k][l] << (REAL_BITS-amp0));
-        real_t pan;
+        real_t tmp, pan;
 
         /* E[1] should always be even so shifting is OK */
-        uint8_t E = sbr->E[1][k][l] >> amp1;
+        E >>= amp1;
+        if (e < 0 || e >= 64 || E < 0 || E > 24)
+            return LOG2_MIN_INF;
 
         if (ch == 0)
         {
@@ -321,10 +324,14 @@ static real_t find_log2_E(sbr_info *sbr, uint8_t k, uint8_t l, uint8_t ch)
         }
 
         /* tmp / pan in log2 */
+        tmp = (7 << REAL_BITS) + (e << (REAL_BITS-amp0));
         return tmp - pan;
     } else {
-        real_t mul = (sbr->amp_res[ch]) ? REAL_PRECISION : (REAL_PRECISION / 2);
-        return 6 * REAL_PRECISION + sbr->E[ch][k][l] * mul;
+        int16_t e = sbr->E[ch][k][l];
+        uint8_t amp = (sbr->amp_res[ch]) ? 0 : 1;
+        if (e < 0 || (e >> amp) >= 64)
+            return LOG2_MIN_INF;
+        return 6 * REAL_PRECISION + e * (REAL_PRECISION >> amp);
     }
 }
 
@@ -333,10 +340,12 @@ static real_t find_log2_Q(sbr_info *sbr, uint8_t k, uint8_t l, uint8_t ch)
     /* check for coupled energy/noise data */
     if (sbr->bs_coupling == 1)
     {
-        real_t tmp = (7 << REAL_BITS) - (sbr->Q[0][k][l] << REAL_BITS);
-        real_t pan;
-
+        int32_t q = sbr->Q[0][k][l];
         int32_t Q = sbr->Q[1][k][l];
+        real_t tmp, pan;
+
+        if (q < 0 || q > 30 || Q < 0 || Q > 24)
+            return LOG2_MIN_INF;
 
         if (ch == 0)
         {
@@ -360,9 +369,13 @@ static real_t find_log2_Q(sbr_info *sbr, uint8_t k, uint8_t l, uint8_t ch)
         }
 
         /* tmp / pan in log2 */
+        tmp = (7 - q) * REAL_PRECISION;
         return tmp - pan;
     } else {
-        return (6 - sbr->Q[ch][k][l]) * REAL_PRECISION;
+        int32_t q = sbr->Q[ch][k][l];
+        if (q < 0 || q > 30)
+            return LOG2_MIN_INF;
+        return (6 - q) * REAL_PRECISION;
     }
 }
 
@@ -457,6 +470,7 @@ static void calculate_gain(sbr_info *sbr, sbr_hfadj_info *adj, uint8_t ch)
     ALIGN real_t G_boost;
     ALIGN real_t S_M[MAX_M];
 
+    real_t exp = REAL_CONST(-10);
 
     for (l = 0; l < sbr->L_E[ch]; l++)
     {
@@ -504,7 +518,7 @@ static void calculate_gain(sbr_info *sbr, sbr_hfadj_info *adj, uint8_t ch)
                 {
                     current_res_band_size++;
                 } else {
-                    acc1 += pow2_int(-REAL_CONST(10) + log2_int_tab[current_res_band_size] + find_log2_E(sbr, current_res_band, l, ch));
+                    acc1 += pow2_int(exp + log2_int_tab[current_res_band_size] + find_log2_E(sbr, current_res_band, l, ch));
 
                     current_res_band++;
                     current_res_band_size = 1;
@@ -512,7 +526,7 @@ static void calculate_gain(sbr_info *sbr, sbr_hfadj_info *adj, uint8_t ch)
 
                 acc2 += sbr->E_curr[ch][m][l];
             }
-            acc1 += pow2_int(-REAL_CONST(10) + log2_int_tab[current_res_band_size] + find_log2_E(sbr, current_res_band, l, ch));
+            acc1 += pow2_int(exp + log2_int_tab[current_res_band_size] + find_log2_E(sbr, current_res_band, l, ch));
 
 
             if (acc1 == 0)
@@ -594,7 +608,7 @@ static void calculate_gain(sbr_info *sbr, sbr_hfadj_info *adj, uint8_t ch)
                     E_curr = LOG2_MIN_INF;
                 else
                     E_curr = log2_int(sbr->E_curr[ch][m][l]);
-                E_orig = -REAL_CONST(10) + find_log2_E(sbr, current_res_band2, l, ch);
+                E_orig = exp + find_log2_E(sbr, current_res_band2, l, ch);
 
 
                 Q_orig = find_log2_Q(sbr, current_f_noise_band, current_t_noise_band, ch);
@@ -627,8 +641,8 @@ static void calculate_gain(sbr_info *sbr, sbr_hfadj_info *adj, uint8_t ch)
                  * of the HF generated signal
                  */
                 /* E_curr here is officially E_curr+1 so the log2() of that can never be < 0 */
-                /* scaled by -10 */
-                G = E_orig - max(-REAL_CONST(10), E_curr);
+                /* scaled by exp */
+                G = E_orig - max(exp, E_curr);
                 if ((S_mapped == 0) && (delta == 1))
                 {
                     /* G = G * 1/(1+Q) */
@@ -1669,7 +1683,7 @@ static void hf_assembly(sbr_info *sbr, sbr_hfadj_info *adj,
                     int8_t rev = (((m + sbr->kx) & 1) ? -1 : 1);
                     QMF_RE(psi) = adj->S_M_boost[l][m] * phi_re[fIndexSine];
 #ifdef FIXED_POINT
-                    QMF_RE(Xsbr[i + sbr->tHFAdj][m+sbr->kx]) += (QMF_RE(psi) << REAL_BITS);
+                    QMF_RE(Xsbr[i + sbr->tHFAdj][m+sbr->kx]) += QMF_RE(psi) * REAL_PRECISION;
 #else
                     QMF_RE(Xsbr[i + sbr->tHFAdj][m+sbr->kx]) += QMF_RE(psi);
 #endif
@@ -1677,7 +1691,7 @@ static void hf_assembly(sbr_info *sbr, sbr_hfadj_info *adj,
 #ifndef SBR_LOW_POWER
                     QMF_IM(psi) = rev * adj->S_M_boost[l][m] * phi_im[fIndexSine];
 #ifdef FIXED_POINT
-                    QMF_IM(Xsbr[i + sbr->tHFAdj][m+sbr->kx]) += (QMF_IM(psi) << REAL_BITS);
+                    QMF_IM(Xsbr[i + sbr->tHFAdj][m+sbr->kx]) += QMF_IM(psi) * REAL_PRECISION;
 #else
                     QMF_IM(Xsbr[i + sbr->tHFAdj][m+sbr->kx]) += QMF_IM(psi);
 #endif
diff --git a/libfaad/syntax.c b/libfaad/syntax.c
index 78dc2166..56ae310d 100644
--- a/libfaad/syntax.c
+++ b/libfaad/syntax.c
@@ -1903,7 +1903,7 @@ static uint8_t decode_scale_factors(ic_stream *ics, bitfile *ld)
     /* TODO: consider rolling out to regular build. */
 #ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
     /* The value is inexact, adjusted to current fuzzer findings. */
-    scale_factor_max = 174;
+    scale_factor_max = 165;
 #endif  // FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
 #endif  // FIXED_POINT
 #ifndef DRM
