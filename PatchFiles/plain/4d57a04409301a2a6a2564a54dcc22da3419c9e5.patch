From 4d57a04409301a2a6a2564a54dcc22da3419c9e5 Mon Sep 17 00:00:00 2001
From: "Diego F. Aranha" <dfaranha@gmail.com>
Date: Thu, 1 Dec 2022 01:32:16 +0100
Subject: [PATCH] Fix more type issues.

---
 include/relic_dv.h       | 20 ++++++++---------
 include/relic_util.h     |  4 ++--
 src/bn/relic_bn_shift.c  | 47 ++++++++++++++++++++--------------------
 src/cp/relic_cp_pbpsi.c  |  2 +-
 src/cp/relic_cp_rsapsi.c |  2 +-
 src/cp/relic_cp_shipsi.c |  2 +-
 src/dv/relic_dv_mem.c    |  2 +-
 src/dv/relic_dv_util.c   | 38 +++++++++++++++-----------------
 src/relic_util.c         |  4 ++--
 9 files changed, 59 insertions(+), 62 deletions(-)

diff --git a/include/relic_dv.h b/include/relic_dv.h
index 5694794ef..cb7244cf7 100644
--- a/include/relic_dv.h
+++ b/include/relic_dv.h
@@ -141,7 +141,7 @@ typedef dig_t *dv_t;
  * @param[in] a				- the temporary digit vector to print.
  * @param[in] digits		- the number of digits to print.
  */
-void dv_print(const dig_t *a, int digits);
+void dv_print(const dig_t *a, size_t digits);
 
 /**
  * Assigns zero to a temporary double-precision digit vector.
@@ -149,7 +149,7 @@ void dv_print(const dig_t *a, int digits);
  * @param[out] a			- the temporary digit vector to assign.
  * @param[in] digits		- the number of words to initialize with zero.
  */
-void dv_zero(dig_t *a, int digits);
+void dv_zero(dig_t *a, size_t digits);
 
 /**
  * Copies some digits from a digit vector to another digit vector.
@@ -158,7 +158,7 @@ void dv_zero(dig_t *a, int digits);
  * @param[in] a				- the source.
  * @param[in] digits		- the number of digits to copy.
  */
-void dv_copy(dig_t *c, const dig_t *a, int digits);
+void dv_copy(dig_t *c, const dig_t *a, size_t digits);
 
 /**
  * Conditionally copies some digits from a digit vector to another digit vector.
@@ -168,7 +168,7 @@ void dv_copy(dig_t *c, const dig_t *a, int digits);
  * @param[in] digits		- the number of digits to copy.
  * @param[in] cond			- the condition to evaluate.
  */
-void dv_copy_cond(dig_t *c, const dig_t *a, int digits, dig_t cond);
+void dv_copy_cond(dig_t *c, const dig_t *a, size_t digits, dig_t cond);
 
 /**
  * Conditionally swap two digit vectors.
@@ -178,7 +178,7 @@ void dv_copy_cond(dig_t *c, const dig_t *a, int digits, dig_t cond);
  * @param[in] digits		- the number of digits to copy.
  * @param[in] cond			- the condition to evaluate.
  */
-void dv_swap_cond(dig_t *c, dig_t *a, int digits, dig_t cond);
+void dv_swap_cond(dig_t *c, dig_t *a, size_t digits, dig_t cond);
 
 /**
  * Returns the result of a comparison between two digit vectors.
@@ -188,7 +188,7 @@ void dv_swap_cond(dig_t *c, dig_t *a, int digits, dig_t cond);
  * @param[in] size			- the length in digits of the vectors.
  * @return RLC_LT if a < b, RLC_EQ if a == b and RLC_GT if a > b.
  */
-int dv_cmp(const dig_t *a, const dig_t *b, int size);
+int dv_cmp(const dig_t *a, const dig_t *b, size_t size);
 
 /**
  * Compares two digit vectors in constant time.
@@ -198,7 +198,7 @@ int dv_cmp(const dig_t *a, const dig_t *b, int size);
  * @param[in] size			- the length in digits of the vectors.
  * @return RLC_EQ if they are equal and RLC_NE otherwise.
  */
-int dv_cmp_const(const dig_t *a, const dig_t *b, int size);
+int dv_cmp_const(const dig_t *a, const dig_t *b, size_t size);
 
 /**
  * Allocates and initializes a temporary double-precision digit vector.
@@ -210,7 +210,7 @@ int dv_cmp_const(const dig_t *a, const dig_t *b, int size);
  * 							by the library.
  */
 #if ALLOC == DYNAMIC
-void dv_new_dynam(dv_t *a, int digits);
+void dv_new_dynam(dv_t *a, size_t digits);
 #endif
 
 /**
@@ -231,7 +231,7 @@ void dv_free_dynam(dv_t *a);
  * @param[in] size			- the number of digits to shift.
  * @param[in] digits		- the shift amount.
  */
-void dv_lshd(dig_t *c, const dig_t *a, int size, int digits);
+void dv_lshd(dig_t *c, const dig_t *a, size_t size, uint_t digits);
 
 /**
  * Shifts a digit vector to the right by some digits.
@@ -242,6 +242,6 @@ void dv_lshd(dig_t *c, const dig_t *a, int size, int digits);
  * @param[in] size			- the number of digits to shift.
  * @param[in] digits		- the shift amount.
  */
-void dv_rshd(dig_t *c, const dig_t *a, int size, int digits);
+void dv_rshd(dig_t *c, const dig_t *a, size_t size, uint_t digits);
 
 #endif /* !RLC_DV_H */
diff --git a/include/relic_util.h b/include/relic_util.h
index e70b0fef4..d24737bba 100644
--- a/include/relic_util.h
+++ b/include/relic_util.h
@@ -295,7 +295,7 @@ size_t util_bits_dig(dig_t a);
  * @param[in] n				- the length in bytes of the buffers.
  * @return RLC_EQ if they are equal and RLC_NE otherwise.
  */
-int util_cmp_const(const void *a, const void *b, int n);
+int util_cmp_const(const void *a, const void *b, size_t n);
 
 /**
  * Computes a random permutation in [0, n-1].
@@ -303,7 +303,7 @@ int util_cmp_const(const void *a, const void *b, int n);
  * @param[out] p 			- the resulting permutation.
  * @param[in] n 			- the size of the permutation.
  */
-void util_perm(uint_t p[], int n);
+void util_perm(uint_t p[], size_t n);
 
 /**
  * Formats and prints data following a printf-like syntax.
diff --git a/src/bn/relic_bn_shift.c b/src/bn/relic_bn_shift.c
index 5da273d27..e4de4c3d4 100644
--- a/src/bn/relic_bn_shift.c
+++ b/src/bn/relic_bn_shift.c
@@ -67,25 +67,22 @@ void bn_lsh(bn_t c, const bn_t a, uint_t bits) {
 	int digits;
 	dig_t carry;
 
-	bn_copy(c, a);
-
 	RLC_RIP(bits, digits, bits);
 
 	RLC_TRY {
 		bn_grow(c, c->used + digits + (bits > 0));
 
 		c->used = a->used + digits;
-		c->sign = a->sign;
 		if (digits > 0) {
 			dv_lshd(c->dp, a->dp, c->used, digits);
+		} else {
+			dv_copy(c->dp, a->dp, a->used);
 		}
+		c->sign = a->sign;
 
 		if (bits > 0) {
-			if (c != a) {
-				carry = bn_lshb_low(c->dp + digits, a->dp, a->used, bits);
-			} else {
-				carry = bn_lshb_low(c->dp + digits, c->dp + digits, c->used - digits, bits);
-			}
+			carry = bn_lshb_low(c->dp + digits, c->dp + digits,
+				c->used - digits, bits);
 			if (carry != 0) {
 				c->dp[c->used] = carry;
 				(c->used)++;
@@ -100,27 +97,29 @@ void bn_lsh(bn_t c, const bn_t a, uint_t bits) {
 void bn_rsh(bn_t c, const bn_t a, uint_t bits) {
 	uint_t digits = 0;
 
-	bn_copy(c, a);
-
 	RLC_RIP(bits, digits, bits);
 
-	if (digits > 0) {
-		dv_rshd(c->dp, a->dp, a->used, digits);
-	}
-
-	if (a->used > digits) {
-		c->used = a->used - digits;
-	} else {
-		c->used = 0;
-	}
-	c->sign = a->sign;
+	RLC_TRY {
+		bn_grow(c, a->used);
 
-	if (c->used > 0 && bits > 0) {
-		if (digits == 0 && c != a) {
-			bn_rshb_low(c->dp, a->dp + digits, a->used - digits, bits);
+		if (digits > 0) {
+			if (a->used > digits) {
+				dv_rshd(c->dp, a->dp, a->used, digits);
+				c->used = a->used - digits;
+			} else {
+				c->used = 0;
+			}
 		} else {
+			dv_copy(c->dp, a->dp, a->used);
+			c->used = a->used;
+		}
+		c->sign = a->sign;
+
+		if (c->used > 0 && bits > 0) {
 			bn_rshb_low(c->dp, c->dp, c->used, bits);
 		}
+		bn_trim(c);
+	} RLC_CATCH_ANY {
+		RLC_THROW(ERR_CAUGHT);
 	}
-	bn_trim(c);
 }
diff --git a/src/cp/relic_cp_pbpsi.c b/src/cp/relic_cp_pbpsi.c
index ec294754c..52f2cdebf 100644
--- a/src/cp/relic_cp_pbpsi.c
+++ b/src/cp/relic_cp_pbpsi.c
@@ -125,7 +125,7 @@ int cp_pbpsi_ans(gt_t t[], g1_t u[], const g1_t ss, const g2_t d,
 	bn_t q, tj;
 	g1_t g1;
 	g2_t g2;
-	uint_t *shuffle = RLC_ALLOCA(unsigned int, n);
+	uint_t *shuffle = RLC_ALLOCA(uint_t, n);
 
 	bn_null(q);
 	bn_null(tj);
diff --git a/src/cp/relic_cp_rsapsi.c b/src/cp/relic_cp_rsapsi.c
index 646f06326..26cb6f3e5 100644
--- a/src/cp/relic_cp_rsapsi.c
+++ b/src/cp/relic_cp_rsapsi.c
@@ -107,7 +107,7 @@ int cp_rsapsi_ans(bn_t t[], bn_t u[], const bn_t d, const bn_t g, const bn_t n,
 		const bn_t y[], size_t l) {
 	int j, result = RLC_OK, len = RLC_CEIL(RLC_BN_BITS, 8);
 	uint8_t h[RLC_MD_LEN], bin[RLC_CEIL(RLC_BN_BITS, 8)];
-	uint_t *shuffle = RLC_ALLOCA(unsigned int, l);
+	uint_t *shuffle = RLC_ALLOCA(uint_t, l);
 	bn_t p;
 
 	bn_null(p);
diff --git a/src/cp/relic_cp_shipsi.c b/src/cp/relic_cp_shipsi.c
index d737300b3..2bfb8726b 100644
--- a/src/cp/relic_cp_shipsi.c
+++ b/src/cp/relic_cp_shipsi.c
@@ -104,7 +104,7 @@ int cp_shipsi_ans(bn_t t[], bn_t u, bn_t d, const bn_t g, const crt_t crt,
 		const bn_t y[], size_t n) {
 	int j, result = RLC_OK, len = RLC_CEIL(RLC_BN_BITS, 8);
 	uint8_t h[RLC_MD_LEN], bin[RLC_CEIL(RLC_BN_BITS, 8)];
-	uint_t *shuffle = RLC_ALLOCA(unsigned int, n);
+	uint_t *shuffle = RLC_ALLOCA(uint_t, n);
 	bn_t p, q;
 
 	bn_null(p);
diff --git a/src/dv/relic_dv_mem.c b/src/dv/relic_dv_mem.c
index 59373822c..4dd47ed4c 100644
--- a/src/dv/relic_dv_mem.c
+++ b/src/dv/relic_dv_mem.c
@@ -47,7 +47,7 @@
 
 #if ALLOC == DYNAMIC
 
-void dv_new_dynam(dv_t *a, int digits) {
+void dv_new_dynam(dv_t *a, size_t digits) {
 	if (digits > RLC_DV_DIGS) {
 		RLC_THROW(ERR_NO_PRECI);
 		return;
diff --git a/src/dv/relic_dv_util.c b/src/dv/relic_dv_util.c
index a26eec036..5084472a1 100644
--- a/src/dv/relic_dv_util.c
+++ b/src/dv/relic_dv_util.c
@@ -38,20 +38,18 @@
 /* Public definitions                                                         */
 /*============================================================================*/
 
-void dv_print(const dig_t *a, int digits) {
-	int i;
-
+void dv_print(const dig_t *a, size_t digits) {
 	/* Suppress possible unused parameter warning. */
 	(void)a;
-	for (i = digits - 1; i >= 0; i--) {
-		util_print_dig(a[i], 1);
+	for (size_t i = digits; i > 0; i--) {
+		util_print_dig(a[i-1], 1);
 	}
 	util_print("\n");
 
 	return;
 }
 
-void dv_zero(dig_t *a, int digits) {
+void dv_zero(dig_t *a, size_t digits) {
 	int i;
 
 #if ALLOC != DYNAMIC
@@ -68,39 +66,39 @@ void dv_zero(dig_t *a, int digits) {
 	return;
 }
 
-void dv_copy(dig_t *c, const dig_t *a, int digits) {
+void dv_copy(dig_t *c, const dig_t *a, size_t digits) {
 	memcpy(c, a, digits * sizeof(dig_t));
 }
 
-void dv_copy_cond(dig_t *c, const dig_t *a, int digits, dig_t cond) {
+void dv_copy_cond(dig_t *c, const dig_t *a, size_t digits, dig_t cond) {
 	dig_t mask, t;
 
 	mask = -cond;
-	for (int i = 0; i < digits; i++) {
+	for (size_t i = 0; i < digits; i++) {
 		t = (a[i] ^ c[i]) & mask;
 		c[i] ^= t;
 	}
 }
 
-void dv_swap_cond(dig_t *c, dig_t *a, int digits, dig_t cond) {
+void dv_swap_cond(dig_t *c, dig_t *a, size_t digits, dig_t cond) {
 	dig_t mask, t;
 
 	mask = -cond;
-	for (int i = 0; i < digits; i++) {
+	for (size_t i = 0; i < digits; i++) {
 		t = (a[i] ^ c[i]) & mask;
 		a[i] ^= t;
 		c[i] ^= t;
 	}
 }
 
-int dv_cmp(const dig_t *a, const dig_t *b, int size) {
-	int i, r;
+int dv_cmp(const dig_t *a, const dig_t *b, size_t size) {
+	int r;
 
 	a += (size - 1);
 	b += (size - 1);
 
 	r = RLC_EQ;
-	for (i = 0; i < size; i++, --a, --b) {
+	for (size_t i = 0; i < size; i++, --a, --b) {
 		if (*a != *b && r == RLC_EQ) {
 			r = (*a > *b ? RLC_GT : RLC_LT);
 		}
@@ -108,20 +106,20 @@ int dv_cmp(const dig_t *a, const dig_t *b, int size) {
 	return r;
 }
 
-int dv_cmp_const(const dig_t *a, const dig_t *b, int size) {
+int dv_cmp_const(const dig_t *a, const dig_t *b, size_t size) {
 	dig_t r = 0;
 
-	for (int i = 0; i < size; i++) {
+	for (size_t i = 0; i < size; i++) {
 		r |= a[i] ^ b[i];
 	}
 
 	return (r == 0 ? RLC_EQ : RLC_NE);
 }
 
-void dv_rshd(dig_t *c, const dig_t *a, int size, int digits) {
+void dv_rshd(dig_t *c, const dig_t *a, size_t size, uint_t digits) {
 	const dig_t *top;
 	dig_t *bot;
-	int i;
+	size_t i;
 
 	top = a + digits;
 	bot = c;
@@ -134,10 +132,10 @@ void dv_rshd(dig_t *c, const dig_t *a, int size, int digits) {
 	}
 }
 
-void dv_lshd(dig_t *c, const dig_t *a, int size, int digits) {
+void dv_lshd(dig_t *c, const dig_t *a, size_t size, uint_t digits) {
 	dig_t *top;
 	const dig_t *bot;
-	int i;
+	size_t i;
 
 	top = c + size - 1;
 	bot = a + size - 1 - digits;
diff --git a/src/relic_util.c b/src/relic_util.c
index 8bef83822..161084893 100644
--- a/src/relic_util.c
+++ b/src/relic_util.c
@@ -138,7 +138,7 @@ size_t util_bits_dig(dig_t a) {
     return RLC_DIG - arch_lzcnt(a);
 }
 
-int util_cmp_const(const void *a, const void *b, int size) {
+int util_cmp_const(const void *a, const void *b, size_t size) {
 	const uint8_t *_a = (const uint8_t *)a;
 	const uint8_t *_b = (const uint8_t *)b;
 	uint8_t result = 0;
@@ -151,7 +151,7 @@ int util_cmp_const(const void *a, const void *b, int size) {
 	return (result == 0 ? RLC_EQ : RLC_NE);
 }
 
-void util_perm(uint_t p[], int n) {
+void util_perm(uint_t p[], size_t n) {
 	size_t i, j, k;
 
 	for (i = 0; i < n; i++) {
