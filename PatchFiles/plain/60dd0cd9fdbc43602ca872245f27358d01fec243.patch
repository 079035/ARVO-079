From 60dd0cd9fdbc43602ca872245f27358d01fec243 Mon Sep 17 00:00:00 2001
From: pancake <pancake@nowsecure.com>
Date: Mon, 15 May 2023 21:45:53 +0200
Subject: [PATCH] Store the vector index instead of a weak pointer for the ELF
 ##crash

* Fix the hashtable bug with +1-1 massaging
---
 libr/bin/format/elf/elf.c | 29 ++++++++++++++++++++---------
 libr/bin/format/elf/elf.h |  3 ++-
 libr/include/r_vector.h   |  6 +++++-
 3 files changed, 27 insertions(+), 11 deletions(-)

diff --git a/libr/bin/format/elf/elf.c b/libr/bin/format/elf/elf.c
index b5b5dc8320d8f..0224eb7f47a4b 100644
--- a/libr/bin/format/elf/elf.c
+++ b/libr/bin/format/elf/elf.c
@@ -1,6 +1,7 @@
 /* radare - LGPL - Copyright 2008-2023 - nibble, pancake, alvaro_fe */
 
 #define R_LOG_ORIGIN "elf"
+#include <sdb/ht_uu.h>
 #include <r_types.h>
 #include <r_util.h>
 #include "elf.h"
@@ -1394,7 +1395,8 @@ static bool elf_init(ELFOBJ *bin) {
 	bin->symbols_by_ord = NULL;
 	(void) _load_elf_sections (bin);
 	bin->boffset = Elf_(r_bin_elf_get_boffset) (bin);
-	bin->rel_cache = ht_up_new_size (1024, NULL, NULL, NULL);
+	HtUUOptions opt = {0};
+	bin->rel_cache = ht_uu_new_opt (&opt);
 	(void) Elf_(r_bin_elf_load_relocs) (bin);
 	sdb_ns_set (bin->kv, "versioninfo", store_versioninfo (bin));
 	return true;
@@ -1416,7 +1418,7 @@ ut64 Elf_(r_bin_elf_get_section_addr_end)(ELFOBJ *bin, const char *section_name)
 }
 
 static ut64 get_got_entry(ELFOBJ *bin, RBinElfReloc *rel) {
-	if (!rel->rva) {
+	if (!rel || !rel->rva || rel->rva == UT64_MAX) {
 		return UT64_MAX;
 	}
 
@@ -1656,8 +1658,12 @@ static ut64 get_import_addr(ELFOBJ *bin, int sym) {
 		return UT64_MAX;
 	}
 
+	int index = ht_uu_find (bin->rel_cache, sym+1, NULL);
+	if (index == -1) {
+		return UT64_MAX;
+	}
 	// lookup the right rel/rela entry
-	RBinElfReloc *rel = ht_up_find (bin->rel_cache, sym, NULL);
+	RBinElfReloc *rel = r_vector_at (&bin->g_relocs, index - 1);
 	if (!rel) {
 		return UT64_MAX;
 	}
@@ -2888,21 +2894,24 @@ static size_t populate_relocs_record_from_dynamic(ELFOBJ *bin, size_t pos, size_
 	size_t offset;
 	size_t size = get_size_rel_mode (bin->dyn_info.dt_pltrel);
 
+	// order matters
 	for (offset = 0; offset < bin->dyn_info.dt_pltrelsz && pos < num_relocs; offset += size, pos++) {
 		reloc = r_vector_end (&bin->g_relocs);
 		if (!read_reloc (bin, reloc, bin->dyn_info.dt_pltrel, bin->dyn_info.dt_jmprel + offset)) {
 			break;
 		}
-		ht_up_insert (bin->rel_cache, reloc->sym, reloc);
+		// XXX reloc is a weak pointer we can't own it!
+		int index = r_vector_index (&bin->g_relocs);
+		ht_uu_insert (bin->rel_cache, reloc->sym+1, index +1);
 		fix_rva_and_offset_exec_file (bin, reloc);
 	}
-
 	for (offset = 0; offset < bin->dyn_info.dt_relasz && pos < num_relocs; offset += bin->dyn_info.dt_relaent, pos++) {
 		reloc = r_vector_end (&bin->g_relocs);
 		if (!read_reloc (bin, reloc, DT_RELA, bin->dyn_info.dt_rela + offset)) {
 			break;
 		}
-		ht_up_insert (bin->rel_cache, reloc->sym, reloc);
+		int index = r_vector_index (&bin->g_relocs);
+		ht_uu_insert (bin->rel_cache, reloc->sym + 1, index + 1);
 		fix_rva_and_offset_exec_file (bin, reloc);
 	}
 
@@ -2911,7 +2920,8 @@ static size_t populate_relocs_record_from_dynamic(ELFOBJ *bin, size_t pos, size_
 		if (!read_reloc (bin, reloc, DT_REL, bin->dyn_info.dt_rel + offset)) {
 			break;
 		}
-		ht_up_insert (bin->rel_cache, reloc->sym, reloc);
+		int index = r_vector_index (&bin->g_relocs);
+		ht_uu_insert (bin->rel_cache, reloc->sym + 1, index + 1);
 		fix_rva_and_offset_exec_file (bin, reloc);
 	}
 
@@ -2969,7 +2979,8 @@ static size_t populate_relocs_record_from_section(ELFOBJ *bin, size_t pos, size_
 				break;
 			}
 
-			ht_up_insert (bin->rel_cache, reloc->sym, reloc);
+			int index = r_vector_index (&bin->g_relocs);
+			ht_uu_insert (bin->rel_cache, reloc->sym, index);
 			fix_rva_and_offset (bin, reloc, i);
 			pos++;
 		}
@@ -4504,7 +4515,7 @@ void Elf_(r_bin_elf_free)(ELFOBJ* bin) {
 	if (bin->fields_loaded) {
 		r_vector_fini (&bin->g_fields);
 	}
-	ht_up_free (bin->rel_cache);
+	ht_uu_free (bin->rel_cache);
 	bin->rel_cache = NULL;
 	sdb_free (bin->kv);
 	r_list_free (bin->inits);
diff --git a/libr/bin/format/elf/elf.h b/libr/bin/format/elf/elf.h
index 2fe19b28d8265..28a5bcc247b52 100644
--- a/libr/bin/format/elf/elf.h
+++ b/libr/bin/format/elf/elf.h
@@ -2,6 +2,7 @@
 #include <r_util.h>
 #include <r_lib.h>
 #include <r_bin.h>
+#include <sdb/ht_uu.h>
 
 #include "elf_specs.h"
 
@@ -146,7 +147,7 @@ struct Elf_(r_bin_elf_obj_t) {
 	RVector *phdr_symbols;  // RBinElfSymbol
 	RVector *phdr_imports;  // RBinElfSymbol
 	RList *inits;
-	HtUP *rel_cache;
+	HtUU *rel_cache;
 	ut32 g_reloc_num;
 	bool relocs_loaded;
 	RVector g_relocs;  // RBinElfReloc
diff --git a/libr/include/r_vector.h b/libr/include/r_vector.h
index c7f9eeb126947..80af73b27f2d2 100644
--- a/libr/include/r_vector.h
+++ b/libr/include/r_vector.h
@@ -144,7 +144,11 @@ R_API void *r_vector_shrink(RVector *vec);
 
 R_API void *r_vector_flush(RVector *vec);
 
-static inline R_MUSTUSE void *r_vector_end (RVector *vec) {
+static inline R_MUSTUSE int r_vector_index(RVector *vec) {
+	return vec->len - 1;
+}
+
+static inline R_MUSTUSE void *r_vector_end(RVector *vec) {
 	const size_t len = vec->len;
 	if (R_UNLIKELY (len >= vec->capacity)) {
 		const size_t next_capacity = (vec->capacity + 4) * 2;
