From 6e9f2d3c6ce6c4eae32b2d9c228a76e262edd52d Mon Sep 17 00:00:00 2001
From: Roman Lebedev <lebedev.ri@gmail.com>
Date: Wed, 15 Nov 2017 21:20:46 +0300
Subject: [PATCH] Decompressors should have decompress() function, not decode()

---
 fuzz/librawspeed/decompressors/SonyArw2Decompressor.cpp       | 2 +-
 src/librawspeed/decoders/ArwDecoder.cpp                       | 2 +-
 src/librawspeed/decoders/DngDecoder.cpp                       | 2 +-
 src/librawspeed/decoders/RafDecoder.cpp                       | 2 +-
 src/librawspeed/decoders/Rw2Decoder.cpp                       | 4 ++--
 src/librawspeed/decompressors/AbstractDngDecompressor.cpp     | 4 +++-
 src/librawspeed/decompressors/AbstractDngDecompressor.h       | 2 +-
 .../decompressors/AbstractParallelizedDecompressor.cpp        | 2 +-
 .../decompressors/AbstractParallelizedDecompressor.h          | 2 +-
 src/librawspeed/decompressors/FujiDecompressor.cpp            | 4 +++-
 src/librawspeed/decompressors/FujiDecompressor.h              | 2 +-
 11 files changed, 16 insertions(+), 12 deletions(-)

diff --git a/fuzz/librawspeed/decompressors/SonyArw2Decompressor.cpp b/fuzz/librawspeed/decompressors/SonyArw2Decompressor.cpp
index 5bfaa14c4..afe32998e 100644
--- a/fuzz/librawspeed/decompressors/SonyArw2Decompressor.cpp
+++ b/fuzz/librawspeed/decompressors/SonyArw2Decompressor.cpp
@@ -56,7 +56,7 @@ extern "C" int LLVMFuzzerTestOneInput(const uint8_t* Data, size_t Size) {
 
     mRaw->createData();
 
-    a.decode();
+    a.decompress();
 
     mRaw->checkMemIsInitialized();
   } catch (rawspeed::RawspeedException&) {
diff --git a/src/librawspeed/decoders/ArwDecoder.cpp b/src/librawspeed/decoders/ArwDecoder.cpp
index 9eec4831a..2f25ac8ba 100644
--- a/src/librawspeed/decoders/ArwDecoder.cpp
+++ b/src/librawspeed/decoders/ArwDecoder.cpp
@@ -265,7 +265,7 @@ void ArwDecoder::DecodeARW2(const ByteStream& input, uint32 w, uint32 h,
   if (bpp == 8) {
     SonyArw2Decompressor a2(mRaw, input);
     mRaw->createData();
-    a2.decode();
+    a2.decompress();
     return;
   } // End bpp = 8
 
diff --git a/src/librawspeed/decoders/DngDecoder.cpp b/src/librawspeed/decoders/DngDecoder.cpp
index 82eba7168..13625854e 100644
--- a/src/librawspeed/decoders/DngDecoder.cpp
+++ b/src/librawspeed/decoders/DngDecoder.cpp
@@ -315,7 +315,7 @@ void DngDecoder::decodeData(const TiffIFD* raw, uint32 sample_format) {
 
   mRaw->createData();
 
-  slices.decode();
+  slices.decompress();
 }
 
 RawImage DngDecoder::decodeRawInternal() {
diff --git a/src/librawspeed/decoders/RafDecoder.cpp b/src/librawspeed/decoders/RafDecoder.cpp
index 3a3b68f9d..4dd305970 100644
--- a/src/librawspeed/decoders/RafDecoder.cpp
+++ b/src/librawspeed/decoders/RafDecoder.cpp
@@ -107,7 +107,7 @@ RawImage RafDecoder::decodeRawInternal() {
 
     mRaw->createData();
 
-    f.decode();
+    f.decompress();
 
     return mRaw;
   }
diff --git a/src/librawspeed/decoders/Rw2Decoder.cpp b/src/librawspeed/decoders/Rw2Decoder.cpp
index ee2443977..fb57315f9 100644
--- a/src/librawspeed/decoders/Rw2Decoder.cpp
+++ b/src/librawspeed/decoders/Rw2Decoder.cpp
@@ -99,7 +99,7 @@ RawImage Rw2Decoder::decodeRawInternal() {
       // It's using the new .RW2 decoding method
       PanasonicDecompressor p(mRaw, ByteStream(mFile, offset),
                               hints.has("zero_is_not_bad"), load_flags);
-      p.decode();
+      p.decompress();
     }
   } else {
     if (width == 0 || height == 0 || width > 5488 || height > 3904)
@@ -123,7 +123,7 @@ RawImage Rw2Decoder::decodeRawInternal() {
     // It's using the new .RW2 decoding method
     PanasonicDecompressor p(mRaw, ByteStream(mFile, offset),
                             hints.has("zero_is_not_bad"), load_flags);
-    p.decode();
+    p.decompress();
   }
 
   return mRaw;
diff --git a/src/librawspeed/decompressors/AbstractDngDecompressor.cpp b/src/librawspeed/decompressors/AbstractDngDecompressor.cpp
index 61bc4996b..bc429e93a 100644
--- a/src/librawspeed/decompressors/AbstractDngDecompressor.cpp
+++ b/src/librawspeed/decompressors/AbstractDngDecompressor.cpp
@@ -40,7 +40,9 @@
 
 namespace rawspeed {
 
-void AbstractDngDecompressor::decode() const { startThreading(slices.size()); }
+void AbstractDngDecompressor::decompress() const {
+  startThreading(slices.size());
+}
 
 void AbstractDngDecompressor::decompressThreaded(
     const RawDecompressorThread* t) const {
diff --git a/src/librawspeed/decompressors/AbstractDngDecompressor.h b/src/librawspeed/decompressors/AbstractDngDecompressor.h
index c0c48b26e..3a48d6eb9 100644
--- a/src/librawspeed/decompressors/AbstractDngDecompressor.h
+++ b/src/librawspeed/decompressors/AbstractDngDecompressor.h
@@ -51,7 +51,7 @@ class AbstractDngDecompressor final : public AbstractParallelizedDecompressor {
       : AbstractParallelizedDecompressor(img), compression(compression_),
         mFixLjpeg(mFixLjpeg_), mBps(mBps_), mPredictor(mPredictor_) {}
 
-  void decode() const final;
+  void decompress() const final;
 
   std::vector<DngSliceElement> slices;
 
diff --git a/src/librawspeed/decompressors/AbstractParallelizedDecompressor.cpp b/src/librawspeed/decompressors/AbstractParallelizedDecompressor.cpp
index d22ff969d..bcf5ff8fe 100644
--- a/src/librawspeed/decompressors/AbstractParallelizedDecompressor.cpp
+++ b/src/librawspeed/decompressors/AbstractParallelizedDecompressor.cpp
@@ -118,7 +118,7 @@ void AbstractParallelizedDecompressor::startThreading(uint32 pieces) const {
 }
 #endif
 
-void AbstractParallelizedDecompressor::decode() const {
+void AbstractParallelizedDecompressor::decompress() const {
   startThreading(mRaw->dim.y);
 }
 
diff --git a/src/librawspeed/decompressors/AbstractParallelizedDecompressor.h b/src/librawspeed/decompressors/AbstractParallelizedDecompressor.h
index 36fd065a0..018df3858 100644
--- a/src/librawspeed/decompressors/AbstractParallelizedDecompressor.h
+++ b/src/librawspeed/decompressors/AbstractParallelizedDecompressor.h
@@ -43,7 +43,7 @@ class AbstractParallelizedDecompressor : public AbstractDecompressor {
   explicit AbstractParallelizedDecompressor(const RawImage& img) : mRaw(img) {}
   virtual ~AbstractParallelizedDecompressor() = default;
 
-  virtual void decode() const;
+  virtual void decompress() const;
 
 protected:
   RawImage mRaw;
diff --git a/src/librawspeed/decompressors/FujiDecompressor.cpp b/src/librawspeed/decompressors/FujiDecompressor.cpp
index fcc7c0425..842c2594e 100644
--- a/src/librawspeed/decompressors/FujiDecompressor.cpp
+++ b/src/librawspeed/decompressors/FujiDecompressor.cpp
@@ -758,7 +758,9 @@ void FujiDecompressor::fuji_compressed_load_raw() {
   }
 }
 
-void FujiDecompressor::decode() const { startThreading(header.blocks_in_row); }
+void FujiDecompressor::decompress() const {
+  startThreading(header.blocks_in_row);
+}
 
 void FujiDecompressor::decompressThreaded(
     const RawDecompressorThread* t) const {
diff --git a/src/librawspeed/decompressors/FujiDecompressor.h b/src/librawspeed/decompressors/FujiDecompressor.h
index 092df50bb..1955e9036 100644
--- a/src/librawspeed/decompressors/FujiDecompressor.h
+++ b/src/librawspeed/decompressors/FujiDecompressor.h
@@ -106,7 +106,7 @@ class FujiDecompressor final : public AbstractParallelizedDecompressor {
 
   void fuji_compressed_load_raw();
 
-  void decode() const final;
+  void decompress() const final;
 
 protected:
   struct fuji_compressed_params {
