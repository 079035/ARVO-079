From 7473d21494834f72f984b0e2a06346bd68fb6e1c Mon Sep 17 00:00:00 2001
From: Roman Lebedev <lebedev.ri@gmail.com>
Date: Thu, 25 Oct 2018 23:59:15 +0300
Subject: [PATCH] VC5Decompressor: better handling of Optional tags. (i.e.
 don't assert)

---
 src/librawspeed/common/Optional.h               |  2 ++
 .../decompressors/VC5Decompressor.cpp           | 17 ++++++++++++++---
 src/librawspeed/decompressors/VC5Decompressor.h |  2 +-
 3 files changed, 17 insertions(+), 4 deletions(-)

diff --git a/src/librawspeed/common/Optional.h b/src/librawspeed/common/Optional.h
index 74af057a9..78a03d538 100644
--- a/src/librawspeed/common/Optional.h
+++ b/src/librawspeed/common/Optional.h
@@ -41,6 +41,8 @@ template <class T> class Optional final {
 
   bool hasValue() const { return hasData; }
 
+  void reset() { hasData = false; }
+
   T getValue() const {
     assert(hasValue());
     return data;
diff --git a/src/librawspeed/decompressors/VC5Decompressor.cpp b/src/librawspeed/decompressors/VC5Decompressor.cpp
index 8cf7b88fd..43557db16 100644
--- a/src/librawspeed/decompressors/VC5Decompressor.cpp
+++ b/src/librawspeed/decompressors/VC5Decompressor.cpp
@@ -455,7 +455,7 @@ void VC5Decompressor::parseVC5() {
       // FIXME: something is wrong. We get this before VC5Tag::ChannelNumber.
       // Defaulting to 'mVC5.iChannel=0' seems to work *for existing samples*.
       for (int iWavelet = 0; iWavelet < numWaveletLevels; ++iWavelet) {
-        auto& channel = channels[mVC5.iChannel.getValue()];
+        auto& channel = channels[mVC5.iChannel];
         auto& wavelet = channel.wavelets[iWavelet];
         wavelet.prescale = (val >> (14 - 2 * iWavelet)) & 0x03;
       }
@@ -574,26 +574,35 @@ void VC5Decompressor::parseLargeCodeblock(const ByteStream& bs) {
     return bands;
   }();
 
+  if (!mVC5.iSubband.hasValue())
+    ThrowRDE("Did not see VC5Tag::SubbandNumber yet");
+
   const int idx = subband_wavelet_index[mVC5.iSubband.getValue()];
   const int band = subband_band_index[mVC5.iSubband.getValue()];
 
-  auto& wavelets = channels[mVC5.iChannel.getValue()].wavelets;
+  auto& wavelets = channels[mVC5.iChannel].wavelets;
 
   Wavelet& wavelet = wavelets[idx];
   if (wavelet.isBandValid(band)) {
     ThrowRDE("Band %u for wavelet %u on channel %u was already seen", band, idx,
-             mVC5.iChannel.getValue());
+             mVC5.iChannel);
   }
 
   std::unique_ptr<Wavelet::AbstractBand>& dstBand = wavelet.bands[band];
   if (mVC5.iSubband.getValue() == 0) {
     assert(band == 0);
     // low-pass band, only one, for the smallest wavelet, per channel per image
+    if (!mVC5.lowpassPrecision.hasValue())
+      ThrowRDE("Did not see VC5Tag::LowpassPrecision yet");
     dstBand = std::make_unique<Wavelet::LowPassBand>(
         bs, mVC5.lowpassPrecision.getValue());
+    mVC5.lowpassPrecision.reset();
   } else {
+    if (!mVC5.quantization.hasValue())
+      ThrowRDE("Did not see VC5Tag::Quantization yet");
     dstBand = std::make_unique<Wavelet::HighPassBand>(
         bs, mVC5.quantization.getValue());
+    mVC5.quantization.reset();
   }
   wavelet.setBandValid(band);
 
@@ -605,6 +614,8 @@ void VC5Decompressor::parseLargeCodeblock(const ByteStream& bs) {
     nextWavelet.bands[0] = std::make_unique<Wavelet::ReconstructableBand>();
     nextWavelet.setBandValid(0);
   }
+
+  mVC5.iSubband.reset();
 }
 
 void VC5Decompressor::decode(unsigned int offsetX, unsigned int offsetY,
diff --git a/src/librawspeed/decompressors/VC5Decompressor.h b/src/librawspeed/decompressors/VC5Decompressor.h
index 13065544b..882eb1957 100644
--- a/src/librawspeed/decompressors/VC5Decompressor.h
+++ b/src/librawspeed/decompressors/VC5Decompressor.h
@@ -105,7 +105,7 @@ class VC5Decompressor final : public AbstractDecompressor {
       numLowPassBands + numHighPassBands * numWaveletLevels;
 
   struct {
-    Optional<ushort16> iChannel{0}; // 0'th channel is the default
+    ushort16 iChannel = 0; // 0'th channel is the default
     Optional<ushort16> iSubband;
     Optional<ushort16> lowpassPrecision;
     Optional<short16> quantization;
