From 78b88d3be723ca990122ca7fcac0c95e5664be7b Mon Sep 17 00:00:00 2001
From: Wesley Shields <wxs@atarininja.org>
Date: Wed, 19 Dec 2018 04:22:10 -0500
Subject: [PATCH] Fix an OOM condition in dex module. (#998)

When scanning certain files the dex module will OOM. The file seems to be
obfuscated somehow and it causes the parser to misbehave. I haven't completely
narrowed down what is going on, but this change at least allows the parser to
complete without excessive memory usage and also quickly.

This is easily triggerable with
c8a3172a42cd9270db562b8fd0fddc15d35511483818bfc01c508fdb39f01635.

This change does two things:

1. Move the check for name_idx on both fields and methods to earlier in the
function. If the name_idx is UNDEFINED return early and indicate to the caller
that it should stop parsing that piece because it's not going to work.

2. The parser now support abandoning parsing certain pieces early if the
corresponding function (load_encoded_field or load_encoded_method) returns 0.
The parser would otherwise spend A LOT of time parsing files that are obviously
"wrong."

It does cause some method names (and possibly other things) to be incorrectly
parsed. For example, there's this output now when running the module on the
above sample:

[1]
		class_name = "Landroid/animation/AnimatorSet;"
		name = "le\x00\x11setExistBitmapImg\x00\x0bsetExpanded\x00\x09setExport\x00\x0dsetExportPath\x00\x0fsetExtActionBar\x00\x13setExtendedProperty"
		proto = "LJ"
		direct = 0
		virtual = 1
		method_idx_diff = 17
		access_flags = 1
		code_off = 17
		code_item
				registers_size = 52336
				ins_size = 46768
				outs_size = 24434
				tries_size = 46705
				debug_info_off = 1781676661
				insns_size = 74018772
				insns = UNDEFINED
				padding = UNDEFINED
				tries
				handlers
---
 libyara/modules/dex.c | 67 +++++++++++++++++++++++++++++++------------
 1 file changed, 49 insertions(+), 18 deletions(-)

diff --git a/libyara/modules/dex.c b/libyara/modules/dex.c
index b95c0cd643..3338bc1194 100644
--- a/libyara/modules/dex.c
+++ b/libyara/modules/dex.c
@@ -374,6 +374,16 @@ uint32_t load_encoded_field(
 
   *previous_field_idx = encoded_field.field_idx_diff + *previous_field_idx;
 
+  int name_idx = (int) get_integer(
+      dex->object, "field_ids[%i].name_idx", *previous_field_idx);
+
+  if (name_idx == (int)(UNDEFINED & 0xFFFFFFFF))
+    return 0;
+
+  #ifdef DEBUG_DEX_MODULE
+  printf("[DEX]\tNAME_IDX 0x%x\n", name_idx);
+  #endif
+
   set_integer(
       encoded_field.field_idx_diff,
       dex->object,
@@ -405,13 +415,6 @@ uint32_t load_encoded_field(
       encoded_field.access_flags);
   #endif
 
-  int name_idx = (int) get_integer(
-      dex->object, "field_ids[%i].name_idx", *previous_field_idx);
-
-  #ifdef DEBUG_DEX_MODULE
-  printf("[DEX]\tNAME_IDX 0x%x\n", name_idx);
-  #endif
-
   SIZED_STRING* field_name = get_string(
       dex->object, "string_ids[%i].value", name_idx);
 
@@ -515,6 +518,16 @@ uint32_t load_encoded_method(
 
   *previous_method_idx = encoded_method.method_idx_diff + *previous_method_idx;
 
+  int name_idx = (int) get_integer(
+      dex->object, "method_ids[%i].name_idx", *previous_method_idx);
+
+  if (name_idx == (int)(UNDEFINED & 0xFFFFFFFF))
+    return 0;
+
+  #ifdef DEBUG_DEX_MODULE
+  printf("[DEX]\tNAME_IDX 0x%x\n", name_idx);
+  #endif
+
   set_integer(
       encoded_method.method_idx_diff,
       dex->object,
@@ -553,13 +566,6 @@ uint32_t load_encoded_method(
       encoded_method.code_off);
   #endif
 
-  int name_idx = (int) get_integer(
-      dex->object, "method_ids[%i].name_idx", *previous_method_idx);
-
-  #ifdef DEBUG_DEX_MODULE
-  printf("[DEX]\tNAME_IDX 0x%x\n", name_idx);
-  #endif
-
   SIZED_STRING* method_name = get_string(
       dex->object,  "string_ids[%i].value", name_idx);
 
@@ -680,6 +686,7 @@ void dex_parse(
   int i, j;
 
   uint32_t uleb128_size = 0;
+  uint32_t new_size = 0;
   uint32_t index_class_data_item = 0;
   uint32_t index_encoded_method = 0;
   uint32_t index_encoded_field = 0;
@@ -981,13 +988,19 @@ void dex_parse(
       uint32_t previous_field_idx = 0;
       for (j = 0; j < class_data_item.static_fields_size; j++)
       {
-        uleb128_size += load_encoded_field(
+        new_size = load_encoded_field(
             dex,
             yr_le32toh(class_id_item->class_data_offset) + uleb128_size,
             &previous_field_idx,
             index_encoded_field,
             1,0);
 
+        // If the current field isn't parsed the other fields aren't likely to
+        // parse.
+        if (new_size == 0)
+          break;
+
+        uleb128_size += new_size;
         index_encoded_field += 1;
       }
 
@@ -999,13 +1012,19 @@ void dex_parse(
 
       for (j = 0; j < class_data_item.instance_fields_size; j++)
       {
-        uleb128_size += load_encoded_field(
+        new_size = load_encoded_field(
             dex,
             yr_le32toh(class_id_item->class_data_offset) + uleb128_size,
             &previous_field_idx,
             index_encoded_field,
             0, 1);
 
+        // If the current field isn't parsed the other fields aren't likely to
+        // parse.
+        if (new_size == 0)
+          break;
+
+        uleb128_size += new_size;
         index_encoded_field += 1;
       }
 
@@ -1017,13 +1036,19 @@ void dex_parse(
 
       for (j = 0; j < class_data_item.direct_methods_size; j++)
       {
-        uleb128_size += load_encoded_method(
+        new_size = load_encoded_method(
             dex,
             yr_le32toh(class_id_item->class_data_offset) + uleb128_size,
             &previous_method_idx,
             index_encoded_method,
             1, 0);
 
+        // If the current field isn't parsed the other fields aren't likely to
+        // parse.
+        if (new_size == 0)
+          break;
+
+        uleb128_size += new_size;
         index_encoded_method += 1;
       }
 
@@ -1035,13 +1060,19 @@ void dex_parse(
 
       for (j = 0; j < class_data_item.virtual_methods_size; j++)
       {
-        uleb128_size += load_encoded_method(
+        new_size = load_encoded_method(
             dex,
             yr_le32toh(class_id_item->class_data_offset) + uleb128_size,
             &previous_method_idx,
             index_encoded_method,
             0, 1);
 
+        // If the current field isn't parsed the other fields aren't likely to
+        // parse.
+        if (new_size == 0)
+          break;
+
+        uleb128_size += new_size;
         index_encoded_method += 1;
       }
 
