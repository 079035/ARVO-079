From 7f4574f51ad7db56fc13de89e13e7893b1a82189 Mon Sep 17 00:00:00 2001
From: Marta Iborra <martaiborra24@gmail.com>
Date: Mon, 13 Jun 2022 11:55:06 +0200
Subject: [PATCH] Fix warnings II

---
 blosc/blosc2.c                  | 4 ++++
 blosc/schunk.c                  | 6 ++++++
 examples/multithread.c          | 2 +-
 examples/simple.c               | 4 ++--
 plugins/codecs/ndlz/ndlz4x4.c   | 4 ++--
 plugins/codecs/ndlz/ndlz8x8.c   | 2 +-
 plugins/filters/ndcell/ndcell.c | 4 ++--
 plugins/filters/ndmean/ndmean.c | 4 ++--
 tests/cutest.h                  | 4 +++-
 9 files changed, 23 insertions(+), 11 deletions(-)

diff --git a/blosc/blosc2.c b/blosc/blosc2.c
index 07555fc35..52064ae35 100644
--- a/blosc/blosc2.c
+++ b/blosc/blosc2.c
@@ -3982,10 +3982,12 @@ int register_filter_private(blosc2_filter *filter) {
         BLOSC_TRACE_ERROR("The id must be greater or equal than %d", BLOSC2_GLOBAL_REGISTERED_FILTERS_START);
         return BLOSC2_ERROR_FAILURE;
     }
+    /* This condition can never be fulfilled
     if (filter->id > BLOSC2_USER_REGISTERED_FILTERS_STOP) {
         BLOSC_TRACE_ERROR("The id must be lower or equal than %d", BLOSC2_USER_REGISTERED_FILTERS_STOP);
         return BLOSC2_ERROR_FAILURE;
     }
+    */
 
     // Check if the filter is already registered
     for (uint64_t i = 0; i < g_nfilters; ++i) {
@@ -4024,10 +4026,12 @@ int register_codec_private(blosc2_codec *codec) {
         BLOSC_TRACE_ERROR("The id must be greater or equal than %d", BLOSC2_GLOBAL_REGISTERED_CODECS_START);
         return BLOSC2_ERROR_FAILURE;
     }
+    /* This condition can never be fulfilled
     if (codec->compcode > BLOSC2_USER_REGISTERED_CODECS_STOP) {
         BLOSC_TRACE_ERROR("The id must be lower or equal to %d", BLOSC2_USER_REGISTERED_CODECS_STOP);
         return BLOSC2_ERROR_FAILURE;
     }
+     */
 
     // Check if the code is already registered
     for (int i = 0; i < g_ncodecs; ++i) {
diff --git a/blosc/schunk.c b/blosc/schunk.c
index 24bd9a4e9..4abc2c433 100644
--- a/blosc/schunk.c
+++ b/blosc/schunk.c
@@ -474,6 +474,12 @@ blosc2_schunk* blosc2_schunk_from_buffer(uint8_t *cframe, int64_t len, bool copy
   if (frame == NULL) {
     return NULL;
   }
+  // Check that the buffer actually comes from a cframe
+  char *magic_number = (char *)cframe;
+  magic_number += FRAME_HEADER_MAGIC;
+  if (strcmp(magic_number, "b2frame\0") != 0) {
+    return NULL;
+  }
   blosc2_schunk* schunk = frame_to_schunk(frame, copy, &BLOSC2_IO_DEFAULTS);
   if (schunk && copy) {
     // Super-chunk has its own copy of frame
diff --git a/examples/multithread.c b/examples/multithread.c
index bf3ff4d16..4ecc155ab 100644
--- a/examples/multithread.c
+++ b/examples/multithread.c
@@ -80,7 +80,7 @@ int main(void) {
       return csize;
     }
 
-    printf("Compression: %zu -> %d (%.1fx)\n", isize, csize, (1. * (double)isize) /
+    printf("Compression: %lld -> %d (%.1fx)\n", (int64_t)isize, csize, (1. * (double)isize) /
             csize);
 
     /* Decompress  */
diff --git a/examples/simple.c b/examples/simple.c
index ac264db38..d2d93f059 100644
--- a/examples/simple.c
+++ b/examples/simple.c
@@ -60,8 +60,8 @@ int main(void) {
     return csize;
   }
 
-  printf("Compression: %zu -> %d (%.1fx)\n",
-         isize, csize, (1. * (double)isize) / csize);
+  printf("Compression: %lld -> %d (%.1fx)\n",
+         (int64_t)isize, csize, (1. * (double)isize) / csize);
 
   ret = blosc_getitem(data_out, 5, 5, data_subset);
   if (ret < 0) {
diff --git a/plugins/codecs/ndlz/ndlz4x4.c b/plugins/codecs/ndlz/ndlz4x4.c
index bde85796d..e75c61d4e 100644
--- a/plugins/codecs/ndlz/ndlz4x4.c
+++ b/plugins/codecs/ndlz/ndlz4x4.c
@@ -554,8 +554,8 @@ int ndlz4_decompress(const uint8_t *input, int32_t input_len, uint8_t *output, i
 
   /* main loop */
   uint32_t ii[2];
-  uint32_t padding[2];
-  uint32_t ind;
+  uint32_t padding[2] = {0};
+  uint32_t ind = 0;
   uint8_t cell_aux[16];
   for (ii[0] = 0; ii[0] < i_stop[0]; ++ii[0]) {
     for (ii[1] = 0; ii[1] < i_stop[1]; ++ii[1]) {      // for each cell
diff --git a/plugins/codecs/ndlz/ndlz8x8.c b/plugins/codecs/ndlz/ndlz8x8.c
index 8714fc560..06d0e864c 100644
--- a/plugins/codecs/ndlz/ndlz8x8.c
+++ b/plugins/codecs/ndlz/ndlz8x8.c
@@ -472,7 +472,7 @@ int ndlz8_decompress(const uint8_t *input, int32_t input_len, uint8_t *output, i
 
   /* main loop */
   int32_t ii[2];
-  int32_t padding[2];
+  int32_t padding[2] = {0};
   int32_t ind = 0;
   uint8_t* local_buffer = malloc(cell_size);
   uint8_t* cell_aux = malloc(cell_size);
diff --git a/plugins/filters/ndcell/ndcell.c b/plugins/filters/ndcell/ndcell.c
index c378ac999..8178a5a73 100644
--- a/plugins/filters/ndcell/ndcell.c
+++ b/plugins/filters/ndcell/ndcell.c
@@ -191,9 +191,9 @@ int ndcell_decoder(const uint8_t* input, uint8_t* output, int32_t length, uint8_
     }
 
     /* main loop */
-    int64_t pad_shape[NDCELL_MAX_DIM];
+    int64_t pad_shape[NDCELL_MAX_DIM] = {0};
     int64_t ii[NDCELL_MAX_DIM];
-    int32_t ind;
+    int32_t ind = 0;
     for (int cell_ind = 0; cell_ind < ncells; cell_ind++) {      // for each cell
 
         if (ip > ip_limit) {
diff --git a/plugins/filters/ndmean/ndmean.c b/plugins/filters/ndmean/ndmean.c
index 2ecf7213b..a481e62b4 100644
--- a/plugins/filters/ndmean/ndmean.c
+++ b/plugins/filters/ndmean/ndmean.c
@@ -256,9 +256,9 @@ int ndmean_decoder(const uint8_t* input, uint8_t* output, int32_t length, uint8_
     }
 
     /* main loop */
-    int64_t pad_shape[NDMEAN_MAX_DIM];
+    int64_t pad_shape[NDMEAN_MAX_DIM] = {0};
     int64_t ii[NDMEAN_MAX_DIM];
-    int32_t ind;
+    int32_t ind = 0;
     for (int cell_ind = 0; cell_ind < ncells; cell_ind++) {      // for each cell
 
         if (ip > ip_limit) {
diff --git a/tests/cutest.h b/tests/cutest.h
index 54b5fb960..e92f2af59 100644
--- a/tests/cutest.h
+++ b/tests/cutest.h
@@ -164,11 +164,13 @@ int _cutest_run(int (*test)(void *), void *test_data, char *name) {
   uint8_t count = 0;
   int num = niters;
   do { count++; num /= 10;} while(num != 0);
+  char aux[MAXLEN_TESTNAME];
   for (int niter = 0; niter < niters; ++niter) {
     sprintf(test_name, "[%0*d/%d] %s(", count, niter + 1, niters, name);
     for (int i = 0; i < nparams; ++i) {
       cutest_params_ind[i] = (int8_t) (niter / params_strides[i] % cutest_params[i].params_len);
-      snprintf(test_name, MAXLEN_TESTNAME, "%s%s[%d], ", test_name, cutest_params[i].name,
+      strcpy(aux, test_name);
+      snprintf(test_name, MAXLEN_TESTNAME, "%s%s[%d], ", aux, cutest_params[i].name,
                cutest_params_ind[i]);
     }
     test_name[strlen(test_name) - 1] = 0;
