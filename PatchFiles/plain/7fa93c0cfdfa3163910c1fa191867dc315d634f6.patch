From 596e67baa8dcd2f9f6b7fa68a424a262184af0e2 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Hannes=20M=C3=BChleisen?= <hannes@muehleisen.org>
Date: Fri, 14 May 2021 12:29:27 +0200
Subject: [PATCH 1/8] adding first ossfuzz failures and test case runner for
 them

---
 test/CMakeLists.txt                           |  1 +
 test/ossfuzz/CMakeLists.txt                   |  4 ++
 ...minimized-parse_fuzz_test-4918294185377792 |  1 +
 ...minimized-parse_fuzz_test-5061856420036608 |  1 +
 ...minimized-parse_fuzz_test-5096106838065152 |  1 +
 ...minimized-parse_fuzz_test-5239305812443136 |  1 +
 ...minimized-parse_fuzz_test-6131030948970496 |  1 +
 ...minimized-parse_fuzz_test-6306994567905280 |  1 +
 test/ossfuzz/test_ossfuzz.cpp                 | 37 +++++++++++++++++++
 9 files changed, 48 insertions(+)
 create mode 100644 test/ossfuzz/CMakeLists.txt
 create mode 100644 test/ossfuzz/cases/clusterfuzz-testcase-minimized-parse_fuzz_test-4918294185377792
 create mode 100644 test/ossfuzz/cases/clusterfuzz-testcase-minimized-parse_fuzz_test-5061856420036608
 create mode 100644 test/ossfuzz/cases/clusterfuzz-testcase-minimized-parse_fuzz_test-5096106838065152
 create mode 100644 test/ossfuzz/cases/clusterfuzz-testcase-minimized-parse_fuzz_test-5239305812443136
 create mode 100644 test/ossfuzz/cases/clusterfuzz-testcase-minimized-parse_fuzz_test-6131030948970496
 create mode 100644 test/ossfuzz/cases/clusterfuzz-testcase-minimized-parse_fuzz_test-6306994567905280
 create mode 100644 test/ossfuzz/test_ossfuzz.cpp

diff --git a/test/CMakeLists.txt b/test/CMakeLists.txt
index 2f8cacbea04..8cb2a54da9b 100644
--- a/test/CMakeLists.txt
+++ b/test/CMakeLists.txt
@@ -10,6 +10,7 @@ add_subdirectory(extension)
 add_subdirectory(helpers)
 add_subdirectory(sql)
 add_subdirectory(sqlite)
+add_subdirectory(ossfuzz)
 
 if(NOT WIN32 AND NOT SUN)
   if(${BUILD_TPCE})
diff --git a/test/ossfuzz/CMakeLists.txt b/test/ossfuzz/CMakeLists.txt
new file mode 100644
index 00000000000..da7581d6252
--- /dev/null
+++ b/test/ossfuzz/CMakeLists.txt
@@ -0,0 +1,4 @@
+add_library_unity(test_ossfuzz OBJECT test_ossfuzz.cpp)
+set(ALL_OBJECT_FILES
+    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:test_ossfuzz>
+    PARENT_SCOPE)
diff --git a/test/ossfuzz/cases/clusterfuzz-testcase-minimized-parse_fuzz_test-4918294185377792 b/test/ossfuzz/cases/clusterfuzz-testcase-minimized-parse_fuzz_test-4918294185377792
new file mode 100644
index 00000000000..6a810adbd31
--- /dev/null
+++ b/test/ossfuzz/cases/clusterfuzz-testcase-minimized-parse_fuzz_test-4918294185377792
@@ -0,0 +1 @@
+:::::::::::::::::Øƒí£ƒ
\ No newline at end of file
diff --git a/test/ossfuzz/cases/clusterfuzz-testcase-minimized-parse_fuzz_test-5061856420036608 b/test/ossfuzz/cases/clusterfuzz-testcase-minimized-parse_fuzz_test-5061856420036608
new file mode 100644
index 00000000000..028975cc446
--- /dev/null
+++ b/test/ossfuzz/cases/clusterfuzz-testcase-minimized-parse_fuzz_test-5061856420036608
@@ -0,0 +1 @@
+calln(ÿ††==›g›@c††==›g›@c††==›g›@co›@c†==tru@c†††==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†====†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†===†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==††==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==††==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†====†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†===†==†====†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==††==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==‚==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==††==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†====††==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==††==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†===†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†====†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==††==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†===†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==††==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==††==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==††==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==‚==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==††==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†====††==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==††==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†====†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==††==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==††==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==††==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==‚==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†====†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==††==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==‚==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==††==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==††==†==†==†==††==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==†==›g›@c††==›g›@co›@c††l¿Â)
\ No newline at end of file
diff --git a/test/ossfuzz/cases/clusterfuzz-testcase-minimized-parse_fuzz_test-5096106838065152 b/test/ossfuzz/cases/clusterfuzz-testcase-minimized-parse_fuzz_test-5096106838065152
new file mode 100644
index 00000000000..97dfff338b5
--- /dev/null
+++ b/test/ossfuzz/cases/clusterfuzz-testcase-minimized-parse_fuzz_test-5096106838065152
@@ -0,0 +1 @@
+select-8e-8004
\ No newline at end of file
diff --git a/test/ossfuzz/cases/clusterfuzz-testcase-minimized-parse_fuzz_test-5239305812443136 b/test/ossfuzz/cases/clusterfuzz-testcase-minimized-parse_fuzz_test-5239305812443136
new file mode 100644
index 00000000000..b98090d174f
--- /dev/null
+++ b/test/ossfuzz/cases/clusterfuzz-testcase-minimized-parse_fuzz_test-5239305812443136
@@ -0,0 +1 @@
+select struct''
\ No newline at end of file
diff --git a/test/ossfuzz/cases/clusterfuzz-testcase-minimized-parse_fuzz_test-6131030948970496 b/test/ossfuzz/cases/clusterfuzz-testcase-minimized-parse_fuzz_test-6131030948970496
new file mode 100644
index 00000000000..d1f4912e718
--- /dev/null
+++ b/test/ossfuzz/cases/clusterfuzz-testcase-minimized-parse_fuzz_test-6131030948970496
@@ -0,0 +1 @@
+select''from currEnt_time
\ No newline at end of file
diff --git a/test/ossfuzz/cases/clusterfuzz-testcase-minimized-parse_fuzz_test-6306994567905280 b/test/ossfuzz/cases/clusterfuzz-testcase-minimized-parse_fuzz_test-6306994567905280
new file mode 100644
index 00000000000..0f8c95faf9b
--- /dev/null
+++ b/test/ossfuzz/cases/clusterfuzz-testcase-minimized-parse_fuzz_test-6306994567905280
@@ -0,0 +1 @@
+selectîååå+ê++++++++++++++«+++++++++++++«td9iew2+++++´ìz
\ No newline at end of file
diff --git a/test/ossfuzz/test_ossfuzz.cpp b/test/ossfuzz/test_ossfuzz.cpp
new file mode 100644
index 00000000000..7ddb74548c0
--- /dev/null
+++ b/test/ossfuzz/test_ossfuzz.cpp
@@ -0,0 +1,37 @@
+#include "catch.hpp"
+#include "duckdb/common/file_system.hpp"
+#include "test_helpers.hpp"
+
+#include <fstream>
+#include <streambuf>
+#include <string>
+
+using namespace duckdb;
+using namespace std;
+
+constexpr const char *QUERY_DIRECTORY = "test/ossfuzz/cases";
+static FileSystem fs;
+
+static void test_runner() {
+	auto file_name = Catch::getResultCapture().getCurrentTestName();
+	auto fname = fs.JoinPath(QUERY_DIRECTORY, file_name);
+
+	unique_ptr<QueryResult> result;
+	DuckDB db(nullptr);
+	Connection con(db);
+	ifstream t(fname);
+	string query((istreambuf_iterator<char>(t)), istreambuf_iterator<char>());
+	con.Query(query.c_str());
+	// we don't know whether the query fails or not and we don't know the
+	// correct result we just don't want it to crash
+	REQUIRE(1 == 1);
+}
+
+struct RegisterOssfuzzTests {
+	RegisterOssfuzzTests() {
+		// register a separate test for each file in the QUERY_DIRECTORY
+		fs.ListFiles(QUERY_DIRECTORY,
+		             [&](const string &path, bool) { REGISTER_TEST_CASE(test_runner, path, "[ossfuzz][.]"); });
+	}
+};
+RegisterOssfuzzTests register_ossfuzz_test;

From ca2f96ab0be2b0ede6b2184500583272d34d72bf Mon Sep 17 00:00:00 2001
From: Mark Raasveldt <mark.raasveldt@gmail.com>
Date: Fri, 14 May 2021 16:41:47 +0200
Subject: [PATCH 2/8] Fix for stack overflow caused by too deep recursion in
 transformer found by oss fuzz

---
 .../expression/comparison_expression.hpp      |  1 +
 src/include/duckdb/parser/transformer.hpp     | 24 ++++++++---
 .../expression/comparison_expression.cpp      |  3 ++
 .../expression/transform_expression.cpp       | 19 ++++++++-
 .../expression/transform_operator.cpp         | 41 +++++++++++--------
 5 files changed, 66 insertions(+), 22 deletions(-)

diff --git a/src/include/duckdb/parser/expression/comparison_expression.hpp b/src/include/duckdb/parser/expression/comparison_expression.hpp
index 08a8c00ad92..1c524126a50 100644
--- a/src/include/duckdb/parser/expression/comparison_expression.hpp
+++ b/src/include/duckdb/parser/expression/comparison_expression.hpp
@@ -15,6 +15,7 @@ namespace duckdb {
 //! and has two children.
 class ComparisonExpression : public ParsedExpression {
 public:
+	ComparisonExpression(ExpressionType type);
 	ComparisonExpression(ExpressionType type, unique_ptr<ParsedExpression> left, unique_ptr<ParsedExpression> right);
 
 	unique_ptr<ParsedExpression> left;
diff --git a/src/include/duckdb/parser/transformer.hpp b/src/include/duckdb/parser/transformer.hpp
index 6ec090423c2..3a7e2fe00cd 100644
--- a/src/include/duckdb/parser/transformer.hpp
+++ b/src/include/duckdb/parser/transformer.hpp
@@ -25,6 +25,14 @@ struct OrderByNode;
 struct CopyInfo;
 struct CommonTableExpressionInfo;
 
+struct ExpressionTransformTarget {
+	ExpressionTransformTarget(duckdb_libpgquery::PGNode *node_p, unique_ptr<ParsedExpression> &result_p) :
+		node(node_p), result(result_p) {}
+
+	duckdb_libpgquery::PGNode *node;
+	unique_ptr<ParsedExpression> &result;
+};
+
 //! The transformer class is responsible for transforming the internal Postgres
 //! parser representation into the DuckDB representation
 class Transformer {
@@ -55,6 +63,8 @@ class Transformer {
 		}
 	}
 
+	vector<ExpressionTransformTarget> expressions_to_be_transformed;
+
 private:
 	//! Transforms a Postgres statement into a single SQL statement
 	unique_ptr<SQLStatement> TransformStatement(duckdb_libpgquery::PGNode *stmt);
@@ -122,6 +132,12 @@ class Transformer {
 	//===--------------------------------------------------------------------===//
 	// Expression Transform
 	//===--------------------------------------------------------------------===//
+	//! Transform a Postgres abstract expression into an Expression
+	void TransformExpressionLazy(duckdb_libpgquery::PGNode *node, unique_ptr<ParsedExpression> &result);
+
+	unique_ptr<ParsedExpression> TransformExpression(duckdb_libpgquery::PGNode *node);
+	unique_ptr<ParsedExpression> TransformExpressionInternal(duckdb_libpgquery::PGNode *node);
+
 	//! Transform a Postgres boolean expression into an Expression
 	unique_ptr<ParsedExpression> TransformBoolExpr(duckdb_libpgquery::PGBoolExpr *root);
 	//! Transform a Postgres case expression into an Expression
@@ -136,8 +152,6 @@ class Transformer {
 	unique_ptr<ConstantExpression> TransformValue(duckdb_libpgquery::PGValue val);
 	//! Transform a Postgres operator into an Expression
 	unique_ptr<ParsedExpression> TransformAExpr(duckdb_libpgquery::PGAExpr *root);
-	//! Transform a Postgres abstract expression into an Expression
-	unique_ptr<ParsedExpression> TransformExpression(duckdb_libpgquery::PGNode *node);
 	//! Transform a Postgres function call into an Expression
 	unique_ptr<ParsedExpression> TransformFuncCall(duckdb_libpgquery::PGFuncCall *root);
 	//! Transform a Postgres boolean expression into an Expression
@@ -186,9 +200,9 @@ class Transformer {
 	// Operator String to ExpressionType (e.g. + => OPERATOR_ADD)
 	ExpressionType OperatorToExpressionType(const string &op);
 
-	unique_ptr<ParsedExpression> TransformUnaryOperator(const string &op, unique_ptr<ParsedExpression> child);
-	unique_ptr<ParsedExpression> TransformBinaryOperator(const string &op, unique_ptr<ParsedExpression> left,
-	                                                     unique_ptr<ParsedExpression> right);
+	unique_ptr<ParsedExpression> TransformUnaryOperator(const string &op, duckdb_libpgquery::PGNode *child);
+	unique_ptr<ParsedExpression> TransformBinaryOperator(const string &op, duckdb_libpgquery::PGNode *left,
+	                                                     duckdb_libpgquery::PGNode *right);
 	//===--------------------------------------------------------------------===//
 	// TableRef transform
 	//===--------------------------------------------------------------------===//
diff --git a/src/parser/expression/comparison_expression.cpp b/src/parser/expression/comparison_expression.cpp
index ea8171ff5a4..99178c19414 100644
--- a/src/parser/expression/comparison_expression.cpp
+++ b/src/parser/expression/comparison_expression.cpp
@@ -13,6 +13,9 @@ ComparisonExpression::ComparisonExpression(ExpressionType type, unique_ptr<Parse
 	this->right = move(right);
 }
 
+ComparisonExpression::ComparisonExpression(ExpressionType type) :
+	ComparisonExpression(type, nullptr, nullptr) {}
+
 string ComparisonExpression::ToString() const {
 	return left->ToString() + ExpressionTypeToOperator(type) + right->ToString();
 }
diff --git a/src/parser/transform/expression/transform_expression.cpp b/src/parser/transform/expression/transform_expression.cpp
index 4f8caab2c1a..7cec1d1ac01 100644
--- a/src/parser/transform/expression/transform_expression.cpp
+++ b/src/parser/transform/expression/transform_expression.cpp
@@ -29,7 +29,14 @@ unique_ptr<ParsedExpression> Transformer::TransformNamedArg(duckdb_libpgquery::P
 	return expr;
 }
 
-unique_ptr<ParsedExpression> Transformer::TransformExpression(duckdb_libpgquery::PGNode *node) {
+void Transformer::TransformExpressionLazy(duckdb_libpgquery::PGNode *node, unique_ptr<ParsedExpression> &result) {
+	if (!node) {
+		return;
+	}
+	expressions_to_be_transformed.push_back(ExpressionTransformTarget(node, result));
+}
+
+unique_ptr<ParsedExpression> Transformer::TransformExpressionInternal(duckdb_libpgquery::PGNode *node) {
 	if (!node) {
 		return nullptr;
 	}
@@ -80,6 +87,16 @@ unique_ptr<ParsedExpression> Transformer::TransformExpression(duckdb_libpgquery:
 	}
 }
 
+unique_ptr<ParsedExpression> Transformer::TransformExpression(duckdb_libpgquery::PGNode *node) {
+	auto result = TransformExpressionInternal(node);
+	while(!expressions_to_be_transformed.empty()) {
+		auto entry = expressions_to_be_transformed.back();
+		expressions_to_be_transformed.pop_back();
+		entry.result = TransformExpressionInternal(entry.node);
+	}
+	return result;
+}
+
 bool Transformer::TransformExpressionList(duckdb_libpgquery::PGList *list,
                                           vector<unique_ptr<ParsedExpression>> &result) {
 	if (!list) {
diff --git a/src/parser/transform/expression/transform_operator.cpp b/src/parser/transform/expression/transform_operator.cpp
index bc0a1c99c72..0ec64608984 100644
--- a/src/parser/transform/expression/transform_operator.cpp
+++ b/src/parser/transform/expression/transform_operator.cpp
@@ -26,31 +26,37 @@ ExpressionType Transformer::OperatorToExpressionType(const string &op) {
 	return ExpressionType::INVALID;
 }
 
-unique_ptr<ParsedExpression> Transformer::TransformUnaryOperator(const string &op, unique_ptr<ParsedExpression> child) {
+unique_ptr<ParsedExpression> Transformer::TransformUnaryOperator(const string &op, duckdb_libpgquery::PGNode *child) {
+	D_ASSERT(child);
+
 	const auto schema = DEFAULT_SCHEMA;
 
 	vector<unique_ptr<ParsedExpression>> children;
-	children.push_back(move(child));
 
 	// built-in operator function
 	auto result = make_unique<FunctionExpression>(schema, op, children);
+	result->children.resize(1);
+	TransformExpressionLazy(child, result->children[0]);
+
 	result->is_operator = true;
 	return move(result);
 }
 
-unique_ptr<ParsedExpression> Transformer::TransformBinaryOperator(const string &op, unique_ptr<ParsedExpression> left,
-                                                                  unique_ptr<ParsedExpression> right) {
+unique_ptr<ParsedExpression> Transformer::TransformBinaryOperator(const string &op, duckdb_libpgquery::PGNode *left,
+                                                                  duckdb_libpgquery::PGNode *right) {
 	const auto schema = DEFAULT_SCHEMA;
 
 	vector<unique_ptr<ParsedExpression>> children;
-	children.push_back(move(left));
-	children.push_back(move(right));
 
 	if (op == "~" || op == "!~") {
 		// rewrite 'asdf' SIMILAR TO '.*sd.*' into regexp_full_match('asdf', '.*sd.*')
 		bool invert_similar = op == "!~";
 
 		auto result = make_unique<FunctionExpression>(schema, "regexp_full_match", children);
+		result->children.resize(2);
+
+		TransformExpressionLazy(left, result->children[0]);
+		TransformExpressionLazy(right, result->children[1]);
 		if (invert_similar) {
 			return make_unique<OperatorExpression>(ExpressionType::OPERATOR_NOT, move(result));
 		} else {
@@ -60,11 +66,18 @@ unique_ptr<ParsedExpression> Transformer::TransformBinaryOperator(const string &
 		auto target_type = OperatorToExpressionType(op);
 		if (target_type != ExpressionType::INVALID) {
 			// built-in comparison operator
-			return make_unique<ComparisonExpression>(target_type, move(children[0]), move(children[1]));
+			auto comparison = make_unique<ComparisonExpression>(target_type);
+			TransformExpressionLazy(left, comparison->left);
+			TransformExpressionLazy(right, comparison->right);
+			return move(comparison);
 		}
 		// not a special operator: convert to a function expression
 		auto result = make_unique<FunctionExpression>(schema, op, children);
 		result->is_operator = true;
+		result->children.resize(2);
+
+		TransformExpressionLazy(left, result->children[0]);
+		TransformExpressionLazy(right, result->children[1]);
 		return move(result);
 	}
 }
@@ -173,21 +186,17 @@ unique_ptr<ParsedExpression> Transformer::TransformAExpr(duckdb_libpgquery::PGAE
 		return make_unique<ComparisonExpression>(ExpressionType::COMPARE_DISTINCT_FROM, move(left_expr),
 		                                         move(right_expr));
 	}
-
 	default:
 		break;
 	}
-	auto left_expr = TransformExpression(root->lexpr);
-	auto right_expr = TransformExpression(root->rexpr);
-
-	if (!left_expr) {
+	if (!root->lexpr) {
 		// prefix operator
-		return TransformUnaryOperator(name, move(right_expr));
-	} else if (!right_expr) {
+		return TransformUnaryOperator(name, root->rexpr);
+	} else if (!root->rexpr) {
 		// postfix operator, only ! is currently supported
-		return TransformUnaryOperator(name + "__postfix", move(left_expr));
+		return TransformUnaryOperator(name + "__postfix", root->lexpr);
 	} else {
-		return TransformBinaryOperator(name, move(left_expr), move(right_expr));
+		return TransformBinaryOperator(name, root->lexpr, root->rexpr);
 	}
 }
 

From 0c5ca9ddcc8e614c077619b82f6c664dbf0061ad Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Hannes=20M=C3=BChleisen?= <hannes@muehleisen.org>
Date: Sun, 16 May 2021 14:12:45 +0200
Subject: [PATCH 3/8] moar bugs

---
 ...erfuzz-testcase-minimized-parse_fuzz_test-4857993532407808 | 4 ++++
 ...erfuzz-testcase-minimized-parse_fuzz_test-5926232345673728 | 4 ++++
 2 files changed, 8 insertions(+)
 create mode 100644 test/ossfuzz/cases/clusterfuzz-testcase-minimized-parse_fuzz_test-4857993532407808
 create mode 100644 test/ossfuzz/cases/clusterfuzz-testcase-minimized-parse_fuzz_test-5926232345673728

diff --git a/test/ossfuzz/cases/clusterfuzz-testcase-minimized-parse_fuzz_test-4857993532407808 b/test/ossfuzz/cases/clusterfuzz-testcase-minimized-parse_fuzz_test-4857993532407808
new file mode 100644
index 00000000000..e977f3e1514
--- /dev/null
+++ b/test/ossfuzz/cases/clusterfuzz-testcase-minimized-parse_fuzz_test-4857993532407808
@@ -0,0 +1,4 @@
+pragma
+
+
+Üw(W1+2201@140114000000000114000000000000038386150157+97544044047544044+-5540+.289754044+ÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý~½!½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!ïï22222½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½-554.038897597544044043880+.289754044+-554.038897597544044043889759+.289754044~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý~½!½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~*Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬~Ý½~!½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½^~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~À¿!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý~½!½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!ïï22222½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½½½~Ý~Ý~~½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½-554.038897597544044043880+.289754044+-554.038897597544044043889759+.289754044~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~~½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý~½!½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!ïï22222½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½½½~Ý~Ý~~½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½-554.038897597544044043880+.289754044+-554.038897597544044043889759+.289754044~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý~½!½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý~½!½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!ïï22222½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½-554.038897597544044043880+.289754044+-554.038897597544044043889759+.289754044~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý~½!½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!ïï22222½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½-554.038897597544044043880+.289754044+-554.038897597544044043889759+.289754044~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý~½!½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~*Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬~Ý½~!½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½^~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý~½!½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~*Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬~Ý½~!½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½^~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~À¿!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý~½!½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!ïï22222½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½½½~Ý~Ý~~½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½-554.038897597544044043880+.289754044+-554.038897597544044043889759+.289754044~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý~½!½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!ïï22222½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½½½~Ý~Ý~~½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½-554.038897597544044043880+.289754044+-554.038897597544044043889759+.289754044~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý~½!½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý~½!½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!ïï22222½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½-554.038897597544044043880+.289754044+-554.038897597544044043889759+.289754044~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý~½!½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!ïï22222½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½-554.038897597544044043880+.289754044+-554.038897597544044043889759+.289754044~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý~½!½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~*Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬~Ý½~!½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½^~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý~½!½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!ïï22222½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½½½~Ý~Ý~~½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿ½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý~½!½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!ïï22222½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½½½~Ý~Ý~~½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½-554.038897597544044043880+.289754044+-554.038897597544044043889759+.289754044~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý~½!½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!ïï22222½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½½½~Ý~Ý~~½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½-554.038897597544044043880+.289754044+-554.038897597544044043889759+.289754044~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý~½!½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý~½!½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!ïï22222½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½-554.038897597544044043880+.289754044+-554.038897597544044043889759+.289754044~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý~½!½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!ïï22222½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½½½~Ý~Ý~~½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½-554.038897597544044043880+.289754044+-554.038897597544044043889759+.289754044~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý~½!½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý~½!½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!ïï22222½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½-554.038897597544044043880+.289754044+-554.038897597544044043889759+.289754044~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~0000000138658*798.00002*00013574300000000693291890.000000*00013574302,030,gess~40950000000088888888.*0.3574302,030,gess~4095000088888888.*0.0005055%88210095,gess‚‚‚‚‚‚‚‚½ÁÁÁÁÁÁÁÁÁÁÁÁÁ++*current_catalog+*7`++*K=m+s~,@e÷K=m+s~,KiKi~ÁÁÁÍÁÁÁÁÁÁÁÁÁÁÁÁÁ½ÁÁÁÁÁÁÁÁÁÁÁÁÁ++*current_cataÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚW+r@a×im$ÿv$úsÿÿÿÿÿÿÿÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÿÿil~KK=m+s~,@e÷K=m+s~,Km+s~,KiKi~ÁÁÁÁÁÁÁÁÁ++*current_catalog+*7`++*K=m+s~,@e÷K=m+s~,KiKi~ÁÁÁÍÁÁÁÁÁÁÁÁÁÁÁÁÁ½ÁÁÁÁÁÁÁÁÁÁÁÁÁ++*current_catalog+*4`++*4`+8`++*5``ÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁZÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚúÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚ+*4`++*5`ÁÁÁÁÿÿÿÿÿÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÿÿil~KK=m+s~,@e÷K=m+s~,KiKi~ÁÁÁÍÁÁÁÁÁÁÁÁÁÁÁÁÁ½ÁÁÁÁÁÁÁÁÁÁÁÁÁ++*current_catalog+*3+`+*K=m+s~,@e÷K=m+s~,KiKi~ÁÁÁÍÁÁÁÝ½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬~Ý½~!½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~ÀÿÝ½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~0000000138658*798.00002*00013574300000000693291890.000000*00013574302,030,gess~40950000000088888888.*0.3574302,030,gess~4095000088888888.*0.0005055%88210095,gess‚‚‚‚‚‚‚‚½ÁÁÁÁÁÁÁÁÁÁÁÁÁ++*current_catalog+*7`++*K=m+s~,@e÷K=m+s~,KiKi~ÁÁÁÍÁÁÁÁÁÁÁÁÁÁÁÁÁ½ÁÁÁÁÁÁÁÁÁÁÁÁÁ++*current_cataÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚW+r@a×im$ÿv$úsÿÿÿÿÿÿÿÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÿÿil~KK=m+s~,@e÷K=m+s~,Km+s~,KiKi~ÁÁÁÁÁÁÁÁÁ++*current_catalog+*7`++*K=m+s~,@e÷K=m+s~,KiKi~ÁÁÁÍÁÁÁÁÁÁÁÁÁÁÁÁÁ½ÁÁÁÁÁÁÁÁÁÁÁÁÁ++*current_catalog+*4`++*4`+8`++*5``ÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁZÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚúÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚ+*4`++*5`ÁÁÁÁÿÿÿÿÿÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÿÿil~KK=m+s~,@e÷K=m+s~,KiKi~ÁÁÁÍÁÁÁÁÁÁÁÁÁÁÁÁÁ½ÁÁÁÁÁÁÁÁÁÁÁÁÁ++*current_catalo½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý~½!½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!ïï22222½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½½½~Ý~Ý~~½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿ½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý~½!½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!ïï22222½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½½½~Ý~Ý~~½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½-554.038897597544044043880+.289754044+-554.038897597544044043889759+.289754044~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~0000000138658*798.00002*00013574300000000693291890.000000*00013574302,030,gess~40950000000088888888.*0.3574302,030,gess~4095000088888888.*0.0005055%88210095,gess‚‚‚‚‚‚‚‚½ÁÁÁÁÁÁÁÁÁÁÁÁÁ++*current_catalog+*7`++*K=m+s~,@e÷K=m+s~,KiKi~ÁÁÁÍÁÁÁÁÁÁÁÁÁÁÁÁÁ½ÁÁÁÁÁÁÁÁÁÁÁÁÁ++*current_cataÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚW+r@a×im$ÿv$úsÿÿÿÿÿÿÿÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÿÿil~KK=m+s~,@e÷K=m+s~,Km+s~,KiKi~ÁÁÁÁÁÁÁÁÁ++*current_catalog+*7`++*K=m+s~,@e÷K=m+s~,KiKi~ÁÁÁÍÁÁÁÁÁÁÁÁÁÁÁÁÁ½ÁÁÁÁÁÁÁÁÁÁÁÁÁ++*current_catalog+*4`++*4`+8`++*5``ÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁZÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚúÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚÚ+*4`++*5`ÁÁÁÁÿÿÿÿÿÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÁÿÿil~KK=m+s~,@e÷K=m+s~,KiKi~ÁÁÁÍÁÁÁÁÁÁÁÁÁÁÁÁÁ½ÁÁÁÁÁÁÁÁÁÁÁÁÁ++*current_catalog+*3+`+*K=m+s~,@e÷K=m+s~,KiKi~ÁÁÁÍÁÁÁÝ½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~Ý½~Ý~™½^Ý½~Àÿt~~½Ý~½½¬~!~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý!~½~Ý½~0~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~*Ý½~0~™½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A%Ý½~Ý½^™~Ý½~Àÿt!~½~Àß!~½~Ý½~0~™½^Ý½~Àÿt¬!^Ý½~Àÿt¬!~½~Ý½~~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬~Ý½~!½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~~~½~Ý½~Ý½!~½~Ý½~Ý½^™~ÝÝ~™½^Ý½~Àÿt¬!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~Ý~™½^Ý½~Àÿt¬!~½~Ý½~Ý~!½½~Ý½~~½~Ý½~Ý½!~Ý½~Ý½Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½b™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~1~™½^Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½Ý½~Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™~Ý½~ÿÿÀÿt¬!~A~Ý½~Ý½^™~Ý½~Àÿt!~½~Àÿ!~½~Ý½~-2~™½^Ý½~Àÿt¬!~½~Ý½~Àÿt¬!~½~Ý½Àÿ!~Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½Ý½!~½~Ý½~~½~Ý½~Ý½!~½Ý½!~½~Ý½~~½~Ý½~Ý½!~½~Ý½~Ý½^™+-554.038890+.289754044+-554.038848862336+.54044+-557544044047544044+-5868208,8355157+233333333233+2201@14018386057+2083868208,8355157+233333333233+2201@14018386057+2333333332331433332.314~)
\ No newline at end of file
diff --git a/test/ossfuzz/cases/clusterfuzz-testcase-minimized-parse_fuzz_test-5926232345673728 b/test/ossfuzz/cases/clusterfuzz-testcase-minimized-parse_fuzz_test-5926232345673728
new file mode 100644
index 00000000000..667b2c7dce9
--- /dev/null
+++ b/test/ossfuzz/cases/clusterfuzz-testcase-minimized-parse_fuzz_test-5926232345673728
@@ -0,0 +1,4 @@
+
+
+pragma
+Ü†(054000%%%%%%%%%%%*%%‘Š““¿Æ@@@@false@and@@@@@@@analyz0000394133963betw@?@asenc4775801*.99999999994799923-3720268547758^^^^~^isnull@@=@@@00000000000000000000538314215between-0568>-600.00700%%%%%%*%%‘Š““¿Æ@@@zone@false@and@@@@@?@asenc4771811*.99999999994392979-37202685477581147758^^^^~^isnull@@=@@@00000000000000000008547758^^^^~^isnull@@=@@@00000000000000000000538314215between-05686>-00.00700%%%%%%*%%‘Š““¿Æ@@@Üwne@false@and@9999999994392979-37202685477581147758^^^^~^isnull@@=@@@00000000000000000008547758^^^^~^isnull@@=@@@00000000000000000000538314215between-05686>-00.00700%%%%%%*%%‘Š““¿Æ@@@Üwne@false@and@@@@@75811*.9999991134783514-9-999*ÿ999999999999947999929223-3720268547.9@?@*-170141183460469231731687303715884105728-+-+-+-05+-+-+É*-170141183460469231731687303715884105728-+-+-+-+-+­++-+-+-+41888581147758^^^^~^isnull@@=@@@00000000000000000008547758^^^^~^isnull@@=@@@00000000000000000000538314215between-05686>-00.00700%%%%%%*%%‘Š““¿Æ@@@Üwne@false@and@@@@@75811*.9999991134783514-9-54000%%%%%%%%%%%*%%‘Š““¿Æ@@@@false@and@@@@@@@analyz0000394133963betw@?@asenc4775801*.99999999994799923-3720268547758^^^^~^isnull@@=@@@00000000000000000000538314215between-0568>-600.00700%%%%%%*%%‘Š““¿Æ@@@zone@false@and@@@@@?@asenc4771811*.99999999994392979-37202685477581147758^^^^~^isnull@@=@@@00000000000000000008547758^^^^~^isnull@@=@@@00000000000000000000538314215between-05686>-00.00700%%%%%%*%%‘Š““¿Æ@@@Üwne@false@and@9999999994392979-37202685477581147758^^^^~^isnull@@=@@@00000000000000000008547758^^^^~^isnull@@=@@@00000000000000000000538314215between-05686>-00.00700%%%%%%*%%‘Š““¿Æ@@@Üwne@false@and@@@@@75811*.9999991134783514-9-999*ÿ999999999999947999929223-3720268547.9@?@*-170141183460469231731687303715884105728-+-+-+-05+-+-+É*-170141183460469231731687303715884105728-+-+-+-+-+­++-+-+-+41888581147758^^^^~^isnull@@=@@@00000000000000000008547758^^^^~^isnull@@=@@@00000000000000000000538314215between-05686>-00.00700%%%%%%*%%‘Š““¿Æ@@@Üwne@false@and@@@@@75811*.9999991134783514-9-999*ÿ999999999999947999929223-3720268547.9@?@asenc4775801*.99999998^^^^~^isnull@@=@@@00isnull@@=@@@00000000000000000008547758^^^^~^isnull@@=@@@@@@75811*.9999991134783514-9-999*ÿÏÆ9999999999947999929223-3720268547.9@?@asenc4775801*.99999998^^^^~^isnull@@=@@@0@=@@@00000000000000000000538314215between-0568>-600.00700%%%%%%*%%‘Š““¿Æ@@@zone@false@and@@@@@?@asenc4771811*.99999999994392979-37202685477581147758^^^^~^isnull@@=@@@9999999994799923-3720268547758^^^^~^isnull@@=@@@00000000000000000000538314215between-0568>-600.00700%%%%%%*%%‘Š““¿Æ@@@zone@false@and@@@@@?@asenc4771811*.99999999994392979-37202685477581147758^^^^~^isnull@@=@@@00000000000000000008547758^^^^~^isnull@@=@@@00000000000000000000538314215between-05686>-00.00700%%%%%%*%%‘Š““¿Æ@@@Üwne@false@and@9999999994392979-37202685477581147758^^^^~^isnull@@=@@@00000000000000000008547758^^^^~^isnull@@=@@@00000000000000000000538314215between-05686>-00.00700%%%%%%*%%‘Š““¿Æ@@@Üwne@false@and@@@@@75811*.9999991134783514-9-999*ÿ999999999999947999929223-3720268547.9@?@*-170141183460469231731687303715884105728-+-+-+-05+-+-+É*-170141183460469231731687303715884105728-+-+-+-+-+­++-+-+-+41888581147758^^^^~^isnull@@=@@@00000000000000000008547758^^^^~^isnull@@=@@@00000000000000000000538314215between-05686>-00.00700%%%%%%*%%‘Š““¿Æ@@@Üwne@false@and@@@@@75811*.9999991134783514-9-999*ÿ999999999999947999929223-3720268547.9@?@asenc4775801*.99999998^^^^~^isnull@@=@@@00isnull@@=@@@00000000000000000008547758^^^^~^isnull@@=@@@@@@75811*.9999991134783514-9-999*ÿÏÆ9999999999947999929223-3720268547.9@?@asenc4775801*.99999998^^^^~^isnull@@=@@@0@=@@@00000000000000000000538314215between-0568>-600.00700%%%%%%*%%‘Š““¿Æ@@@zone@false@and@@@@@?@asenc4771811*.99999999994392979-37202685477581147758^^^^~^isnull@@=@@@00000000000000000008547758^^^^~^isnull@@=@@@00000000000000000000538314215between-05686>-0/0.00700%%%%%%*%000000000000000008547758^^^47758^^^^%‘Š““¿Æ@@@Üwne@false@and@99999999943999*ÿ999999999999947999929223-3720268547.9@?@asenc4775801*.99999998^^^^~^isnull@@=@@@00isnull@@=@@@00000000000000000008547758^^^^~^isnull@@=@@@@@@75811*.9999991134783514-9-999*ÿÏÆ9999999999947999929223-3720268547.9@?@asenc4775801*.99999998^^^^~^isnull@@=@@@0@=@@@00000000000000000000538314215between-0568>-600.00700%%%%%%*%%‘Š““¿Æ@@@zone@false@and@@@@@?@asenc4771811*.99999999994392979-37202685477581147758^^^^~^isnull@@=@@@9999999994799923-3720268547758^^^^~^isnull@@=@@@00000000000000000000538314215between-0568>-600.00700%%%%%%*%%‘Š““¿Æ@@@zone@false@and@@@@@?@asenc4771811*.99999999994392979-37202685477581147758^^^^~^isnull@@=@@@00000000000000000008547758^^^^~^isnull@@=@@@00000000000000000000538314215between-05686>-00.00700%%%%%%*%%‘Š““¿Æ@@@Üwne@false@and@9999999994392979-37202685477581147758^^^^~^isnull@@=@@@00000000000000000008547758^^^^~^isnull@@=@@@00000000000000000000538314215between-05686>-00.00700%%%%%%*%%‘Š““¿Æ@@@Üwne@false@and@@@@@75811*.9999991134783514-9-999*ÿ999999999999947999929223-3720268547.9@?@*-170141183460469231731687303715884105728-+-+-+-05+-+-+É*-170141183460469231731687303715884105728-+-+-+-+-+­++-+-+-+41888581147758^^^^~^isnull@@=@@@00000000000000000008547758^^^^~^isnull@@=@@@00000000000000000000538314215between-05686>-00.00700%%%%%%*%%‘Š““¿Æ@@@Üwne@false@and@@@@@75811*.9999991134783514-9-999*ÿ999999999999947999929223-3720268547.9@?@asenc4775801*.99999998^^^^~^isnull@@=@@@00isnull@@=@@@00000000000000000008547758^^^^~^isnull@@=@@@@@@75811*.9999991134783514-9-999*ÿÏÆ9999999999947999929223-3720268547.9@?@asenc4775801*.99999998^^^^~^isnull@@=@@@0@=@@@00000000000000000000538314215between-0568>-600.00700%%%%%%*%%‘Š““¿Æ@@@zone@false@and@@@@@?@asenc4771811*.99999999994392979-37202685477581147758^^^^~^isnull@@=@@@00000000000000000008547758^^^^~^isnull@@=@@@00000000000000000000538314215between-05686>-0/0.00700%%%%%%*%000000000000000008547758^^^47758^^^^%‘Š““¿Æ@@@Üwne@false@and@9999999994392979-37202685477581147758^^^^~^isnull@@=@@@00000000000000000008547758^^^47758^^^^~^isnull@@=@@@0000000000000000000053831421>-00.00700%%%%%%*%%‘Š““¿Æ@@@zone@false@00000000000000000008547758^^^^~^isnull@@=@@@00000000000000000000538314215between-05686>-0/0.00700%%%%%%*%000000000000000008547758^^^47758^^^^%‘Š““¿Æ@@@Üwne@false@and@9999999994392979-37202685477581147758^^^^~^isnull@@=@@@00000000000000000008547758^^^47758^^^^~^isnull@@=@@@0000000000000000000053831421>-00.00700%%%%%%*%%‘Š““¿Æ@@@zone@false@and@@@@@75811*.999467440737095737095446773`09551616,730975446744073709551667516002082498624,gess~,gess)
\ No newline at end of file

From eb61e93c8e3eb23a636f7f197f00360aa41957f5 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Hannes=20M=C3=BChleisen?= <hannes@muehleisen.org>
Date: Wed, 19 May 2021 14:10:27 +0200
Subject: [PATCH 4/8] Revert "Fix for stack overflow caused by too deep
 recursion in transformer found by oss fuzz"

This reverts commit ca2f96ab0be2b0ede6b2184500583272d34d72bf.
---
 .../expression/comparison_expression.hpp      |  1 -
 src/include/duckdb/parser/transformer.hpp     | 24 +++--------
 .../expression/comparison_expression.cpp      |  3 --
 .../expression/transform_expression.cpp       | 19 +--------
 .../expression/transform_operator.cpp         | 41 ++++++++-----------
 5 files changed, 22 insertions(+), 66 deletions(-)

diff --git a/src/include/duckdb/parser/expression/comparison_expression.hpp b/src/include/duckdb/parser/expression/comparison_expression.hpp
index 1c524126a50..08a8c00ad92 100644
--- a/src/include/duckdb/parser/expression/comparison_expression.hpp
+++ b/src/include/duckdb/parser/expression/comparison_expression.hpp
@@ -15,7 +15,6 @@ namespace duckdb {
 //! and has two children.
 class ComparisonExpression : public ParsedExpression {
 public:
-	ComparisonExpression(ExpressionType type);
 	ComparisonExpression(ExpressionType type, unique_ptr<ParsedExpression> left, unique_ptr<ParsedExpression> right);
 
 	unique_ptr<ParsedExpression> left;
diff --git a/src/include/duckdb/parser/transformer.hpp b/src/include/duckdb/parser/transformer.hpp
index 3a7e2fe00cd..6ec090423c2 100644
--- a/src/include/duckdb/parser/transformer.hpp
+++ b/src/include/duckdb/parser/transformer.hpp
@@ -25,14 +25,6 @@ struct OrderByNode;
 struct CopyInfo;
 struct CommonTableExpressionInfo;
 
-struct ExpressionTransformTarget {
-	ExpressionTransformTarget(duckdb_libpgquery::PGNode *node_p, unique_ptr<ParsedExpression> &result_p) :
-		node(node_p), result(result_p) {}
-
-	duckdb_libpgquery::PGNode *node;
-	unique_ptr<ParsedExpression> &result;
-};
-
 //! The transformer class is responsible for transforming the internal Postgres
 //! parser representation into the DuckDB representation
 class Transformer {
@@ -63,8 +55,6 @@ class Transformer {
 		}
 	}
 
-	vector<ExpressionTransformTarget> expressions_to_be_transformed;
-
 private:
 	//! Transforms a Postgres statement into a single SQL statement
 	unique_ptr<SQLStatement> TransformStatement(duckdb_libpgquery::PGNode *stmt);
@@ -132,12 +122,6 @@ class Transformer {
 	//===--------------------------------------------------------------------===//
 	// Expression Transform
 	//===--------------------------------------------------------------------===//
-	//! Transform a Postgres abstract expression into an Expression
-	void TransformExpressionLazy(duckdb_libpgquery::PGNode *node, unique_ptr<ParsedExpression> &result);
-
-	unique_ptr<ParsedExpression> TransformExpression(duckdb_libpgquery::PGNode *node);
-	unique_ptr<ParsedExpression> TransformExpressionInternal(duckdb_libpgquery::PGNode *node);
-
 	//! Transform a Postgres boolean expression into an Expression
 	unique_ptr<ParsedExpression> TransformBoolExpr(duckdb_libpgquery::PGBoolExpr *root);
 	//! Transform a Postgres case expression into an Expression
@@ -152,6 +136,8 @@ class Transformer {
 	unique_ptr<ConstantExpression> TransformValue(duckdb_libpgquery::PGValue val);
 	//! Transform a Postgres operator into an Expression
 	unique_ptr<ParsedExpression> TransformAExpr(duckdb_libpgquery::PGAExpr *root);
+	//! Transform a Postgres abstract expression into an Expression
+	unique_ptr<ParsedExpression> TransformExpression(duckdb_libpgquery::PGNode *node);
 	//! Transform a Postgres function call into an Expression
 	unique_ptr<ParsedExpression> TransformFuncCall(duckdb_libpgquery::PGFuncCall *root);
 	//! Transform a Postgres boolean expression into an Expression
@@ -200,9 +186,9 @@ class Transformer {
 	// Operator String to ExpressionType (e.g. + => OPERATOR_ADD)
 	ExpressionType OperatorToExpressionType(const string &op);
 
-	unique_ptr<ParsedExpression> TransformUnaryOperator(const string &op, duckdb_libpgquery::PGNode *child);
-	unique_ptr<ParsedExpression> TransformBinaryOperator(const string &op, duckdb_libpgquery::PGNode *left,
-	                                                     duckdb_libpgquery::PGNode *right);
+	unique_ptr<ParsedExpression> TransformUnaryOperator(const string &op, unique_ptr<ParsedExpression> child);
+	unique_ptr<ParsedExpression> TransformBinaryOperator(const string &op, unique_ptr<ParsedExpression> left,
+	                                                     unique_ptr<ParsedExpression> right);
 	//===--------------------------------------------------------------------===//
 	// TableRef transform
 	//===--------------------------------------------------------------------===//
diff --git a/src/parser/expression/comparison_expression.cpp b/src/parser/expression/comparison_expression.cpp
index 99178c19414..ea8171ff5a4 100644
--- a/src/parser/expression/comparison_expression.cpp
+++ b/src/parser/expression/comparison_expression.cpp
@@ -13,9 +13,6 @@ ComparisonExpression::ComparisonExpression(ExpressionType type, unique_ptr<Parse
 	this->right = move(right);
 }
 
-ComparisonExpression::ComparisonExpression(ExpressionType type) :
-	ComparisonExpression(type, nullptr, nullptr) {}
-
 string ComparisonExpression::ToString() const {
 	return left->ToString() + ExpressionTypeToOperator(type) + right->ToString();
 }
diff --git a/src/parser/transform/expression/transform_expression.cpp b/src/parser/transform/expression/transform_expression.cpp
index 7cec1d1ac01..4f8caab2c1a 100644
--- a/src/parser/transform/expression/transform_expression.cpp
+++ b/src/parser/transform/expression/transform_expression.cpp
@@ -29,14 +29,7 @@ unique_ptr<ParsedExpression> Transformer::TransformNamedArg(duckdb_libpgquery::P
 	return expr;
 }
 
-void Transformer::TransformExpressionLazy(duckdb_libpgquery::PGNode *node, unique_ptr<ParsedExpression> &result) {
-	if (!node) {
-		return;
-	}
-	expressions_to_be_transformed.push_back(ExpressionTransformTarget(node, result));
-}
-
-unique_ptr<ParsedExpression> Transformer::TransformExpressionInternal(duckdb_libpgquery::PGNode *node) {
+unique_ptr<ParsedExpression> Transformer::TransformExpression(duckdb_libpgquery::PGNode *node) {
 	if (!node) {
 		return nullptr;
 	}
@@ -87,16 +80,6 @@ unique_ptr<ParsedExpression> Transformer::TransformExpressionInternal(duckdb_lib
 	}
 }
 
-unique_ptr<ParsedExpression> Transformer::TransformExpression(duckdb_libpgquery::PGNode *node) {
-	auto result = TransformExpressionInternal(node);
-	while(!expressions_to_be_transformed.empty()) {
-		auto entry = expressions_to_be_transformed.back();
-		expressions_to_be_transformed.pop_back();
-		entry.result = TransformExpressionInternal(entry.node);
-	}
-	return result;
-}
-
 bool Transformer::TransformExpressionList(duckdb_libpgquery::PGList *list,
                                           vector<unique_ptr<ParsedExpression>> &result) {
 	if (!list) {
diff --git a/src/parser/transform/expression/transform_operator.cpp b/src/parser/transform/expression/transform_operator.cpp
index 0ec64608984..bc0a1c99c72 100644
--- a/src/parser/transform/expression/transform_operator.cpp
+++ b/src/parser/transform/expression/transform_operator.cpp
@@ -26,37 +26,31 @@ ExpressionType Transformer::OperatorToExpressionType(const string &op) {
 	return ExpressionType::INVALID;
 }
 
-unique_ptr<ParsedExpression> Transformer::TransformUnaryOperator(const string &op, duckdb_libpgquery::PGNode *child) {
-	D_ASSERT(child);
-
+unique_ptr<ParsedExpression> Transformer::TransformUnaryOperator(const string &op, unique_ptr<ParsedExpression> child) {
 	const auto schema = DEFAULT_SCHEMA;
 
 	vector<unique_ptr<ParsedExpression>> children;
+	children.push_back(move(child));
 
 	// built-in operator function
 	auto result = make_unique<FunctionExpression>(schema, op, children);
-	result->children.resize(1);
-	TransformExpressionLazy(child, result->children[0]);
-
 	result->is_operator = true;
 	return move(result);
 }
 
-unique_ptr<ParsedExpression> Transformer::TransformBinaryOperator(const string &op, duckdb_libpgquery::PGNode *left,
-                                                                  duckdb_libpgquery::PGNode *right) {
+unique_ptr<ParsedExpression> Transformer::TransformBinaryOperator(const string &op, unique_ptr<ParsedExpression> left,
+                                                                  unique_ptr<ParsedExpression> right) {
 	const auto schema = DEFAULT_SCHEMA;
 
 	vector<unique_ptr<ParsedExpression>> children;
+	children.push_back(move(left));
+	children.push_back(move(right));
 
 	if (op == "~" || op == "!~") {
 		// rewrite 'asdf' SIMILAR TO '.*sd.*' into regexp_full_match('asdf', '.*sd.*')
 		bool invert_similar = op == "!~";
 
 		auto result = make_unique<FunctionExpression>(schema, "regexp_full_match", children);
-		result->children.resize(2);
-
-		TransformExpressionLazy(left, result->children[0]);
-		TransformExpressionLazy(right, result->children[1]);
 		if (invert_similar) {
 			return make_unique<OperatorExpression>(ExpressionType::OPERATOR_NOT, move(result));
 		} else {
@@ -66,18 +60,11 @@ unique_ptr<ParsedExpression> Transformer::TransformBinaryOperator(const string &
 		auto target_type = OperatorToExpressionType(op);
 		if (target_type != ExpressionType::INVALID) {
 			// built-in comparison operator
-			auto comparison = make_unique<ComparisonExpression>(target_type);
-			TransformExpressionLazy(left, comparison->left);
-			TransformExpressionLazy(right, comparison->right);
-			return move(comparison);
+			return make_unique<ComparisonExpression>(target_type, move(children[0]), move(children[1]));
 		}
 		// not a special operator: convert to a function expression
 		auto result = make_unique<FunctionExpression>(schema, op, children);
 		result->is_operator = true;
-		result->children.resize(2);
-
-		TransformExpressionLazy(left, result->children[0]);
-		TransformExpressionLazy(right, result->children[1]);
 		return move(result);
 	}
 }
@@ -186,17 +173,21 @@ unique_ptr<ParsedExpression> Transformer::TransformAExpr(duckdb_libpgquery::PGAE
 		return make_unique<ComparisonExpression>(ExpressionType::COMPARE_DISTINCT_FROM, move(left_expr),
 		                                         move(right_expr));
 	}
+
 	default:
 		break;
 	}
-	if (!root->lexpr) {
+	auto left_expr = TransformExpression(root->lexpr);
+	auto right_expr = TransformExpression(root->rexpr);
+
+	if (!left_expr) {
 		// prefix operator
-		return TransformUnaryOperator(name, root->rexpr);
-	} else if (!root->rexpr) {
+		return TransformUnaryOperator(name, move(right_expr));
+	} else if (!right_expr) {
 		// postfix operator, only ! is currently supported
-		return TransformUnaryOperator(name + "__postfix", root->lexpr);
+		return TransformUnaryOperator(name + "__postfix", move(left_expr));
 	} else {
-		return TransformBinaryOperator(name, root->lexpr, root->rexpr);
+		return TransformBinaryOperator(name, move(left_expr), move(right_expr));
 	}
 }
 

From 83f81fe6b6ddcbff5e54bd3e6d6d8f91e38c904d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Hannes=20M=C3=BChleisen?= <hannes@muehleisen.org>
Date: Wed, 19 May 2021 14:52:57 +0200
Subject: [PATCH 5/8] added depth limit to expression transform to prevent
 stack overflows down the execution pipeline

---
 src/include/duckdb/parser/transformer.hpp     | 56 ++++++++++--------
 .../constraint/transform_constraint.cpp       |  6 +-
 .../expression/transform_array_access.cpp     | 13 +++--
 .../expression/transform_bool_expr.cpp        |  4 +-
 .../transform/expression/transform_case.cpp   | 11 ++--
 .../transform/expression/transform_cast.cpp   |  4 +-
 .../expression/transform_coalesce.cpp         |  5 +-
 .../expression/transform_columnref.cpp        |  2 +-
 .../expression/transform_constant.cpp         |  6 +-
 .../expression/transform_expression.cpp       | 57 ++++++++++---------
 .../expression/transform_function.cpp         | 26 +++++----
 .../expression/transform_interval.cpp         |  4 +-
 .../expression/transform_is_null.cpp          |  4 +-
 .../transform/expression/transform_lambda.cpp |  6 +-
 .../expression/transform_operator.cpp         | 46 ++++++++-------
 .../expression/transform_param_ref.cpp        |  2 +-
 .../transform_positional_reference.cpp        |  3 +-
 .../expression/transform_subquery.cpp         |  4 +-
 .../transform/helpers/transform_groupby.cpp   |  2 +-
 .../transform/helpers/transform_orderby.cpp   |  2 +-
 .../transform/helpers/transform_sample.cpp    |  2 +-
 .../statement/transform_alter_table.cpp       |  4 +-
 .../transform/statement/transform_call.cpp    |  2 +-
 .../transform/statement/transform_copy.cpp    |  2 +-
 .../statement/transform_create_function.cpp   |  4 +-
 .../statement/transform_create_index.cpp      |  2 +-
 .../statement/transform_create_table.cpp      |  5 +-
 .../transform/statement/transform_delete.cpp  |  2 +-
 .../transform/statement/transform_insert.cpp  |  2 +-
 .../transform/statement/transform_pragma.cpp  |  4 +-
 .../transform/statement/transform_prepare.cpp |  2 +-
 .../statement/transform_select_node.cpp       | 12 ++--
 .../transform/statement/transform_set.cpp     |  2 +-
 .../transform/statement/transform_update.cpp  |  4 +-
 .../transform/tableref/transform_join.cpp     |  2 +-
 .../tableref/transform_table_function.cpp     |  2 +-
 36 files changed, 167 insertions(+), 149 deletions(-)

diff --git a/src/include/duckdb/parser/transformer.hpp b/src/include/duckdb/parser/transformer.hpp
index 6ec090423c2..86b58c2b155 100644
--- a/src/include/duckdb/parser/transformer.hpp
+++ b/src/include/duckdb/parser/transformer.hpp
@@ -28,8 +28,11 @@ struct CommonTableExpressionInfo;
 //! The transformer class is responsible for transforming the internal Postgres
 //! parser representation into the DuckDB representation
 class Transformer {
+	static constexpr const idx_t DEFAULT_MAX_EXPRESSION_DEPTH = 1000;
+
 public:
-	explicit Transformer(Transformer *parent = nullptr) : parent(parent) {
+	explicit Transformer(Transformer *parent = nullptr, idx_t max_expression_depth_p = DEFAULT_MAX_EXPRESSION_DEPTH)
+	    : parent(parent), max_expression_depth(parent ? parent->max_expression_depth : max_expression_depth_p) {
 	}
 
 	//! Transforms a Postgres parse tree into a set of SQL Statements
@@ -42,6 +45,7 @@ class Transformer {
 
 private:
 	Transformer *parent;
+	idx_t max_expression_depth;
 	//! The current prepared statement parameter index
 	idx_t prepared_statement_parameter_index = 0;
 	//! Holds window expressions defined by name. We need those when transforming the expressions referring to them.
@@ -123,43 +127,44 @@ class Transformer {
 	// Expression Transform
 	//===--------------------------------------------------------------------===//
 	//! Transform a Postgres boolean expression into an Expression
-	unique_ptr<ParsedExpression> TransformBoolExpr(duckdb_libpgquery::PGBoolExpr *root);
+	unique_ptr<ParsedExpression> TransformBoolExpr(duckdb_libpgquery::PGBoolExpr *root, idx_t depth);
 	//! Transform a Postgres case expression into an Expression
-	unique_ptr<ParsedExpression> TransformCase(duckdb_libpgquery::PGCaseExpr *root);
+	unique_ptr<ParsedExpression> TransformCase(duckdb_libpgquery::PGCaseExpr *root, idx_t depth);
 	//! Transform a Postgres type cast into an Expression
-	unique_ptr<ParsedExpression> TransformTypeCast(duckdb_libpgquery::PGTypeCast *root);
+	unique_ptr<ParsedExpression> TransformTypeCast(duckdb_libpgquery::PGTypeCast *root, idx_t depth);
 	//! Transform a Postgres coalesce into an Expression
-	unique_ptr<ParsedExpression> TransformCoalesce(duckdb_libpgquery::PGAExpr *root);
+	unique_ptr<ParsedExpression> TransformCoalesce(duckdb_libpgquery::PGAExpr *root, idx_t depth);
 	//! Transform a Postgres column reference into an Expression
-	unique_ptr<ParsedExpression> TransformColumnRef(duckdb_libpgquery::PGColumnRef *root);
+	unique_ptr<ParsedExpression> TransformColumnRef(duckdb_libpgquery::PGColumnRef *root, idx_t depth);
 	//! Transform a Postgres constant value into an Expression
-	unique_ptr<ConstantExpression> TransformValue(duckdb_libpgquery::PGValue val);
+	unique_ptr<ConstantExpression> TransformValue(duckdb_libpgquery::PGValue val, idx_t depth);
 	//! Transform a Postgres operator into an Expression
-	unique_ptr<ParsedExpression> TransformAExpr(duckdb_libpgquery::PGAExpr *root);
+	unique_ptr<ParsedExpression> TransformAExpr(duckdb_libpgquery::PGAExpr *root, idx_t depth);
 	//! Transform a Postgres abstract expression into an Expression
-	unique_ptr<ParsedExpression> TransformExpression(duckdb_libpgquery::PGNode *node);
+	unique_ptr<ParsedExpression> TransformExpression(duckdb_libpgquery::PGNode *node, idx_t depth);
 	//! Transform a Postgres function call into an Expression
-	unique_ptr<ParsedExpression> TransformFuncCall(duckdb_libpgquery::PGFuncCall *root);
+	unique_ptr<ParsedExpression> TransformFuncCall(duckdb_libpgquery::PGFuncCall *root, idx_t depth);
 	//! Transform a Postgres boolean expression into an Expression
-	unique_ptr<ParsedExpression> TransformInterval(duckdb_libpgquery::PGIntervalConstant *root);
+	unique_ptr<ParsedExpression> TransformInterval(duckdb_libpgquery::PGIntervalConstant *root, idx_t depth);
 	//! Transform a Postgres lambda node [e.g. (x, y) -> x + y] into a lambda expression
-	unique_ptr<ParsedExpression> TransformLambda(duckdb_libpgquery::PGLambdaFunction *node);
+	unique_ptr<ParsedExpression> TransformLambda(duckdb_libpgquery::PGLambdaFunction *node, idx_t depth);
 	//! Transform a Postgres array access node (e.g. x[1] or x[1:3])
-	unique_ptr<ParsedExpression> TransformArrayAccess(duckdb_libpgquery::PGAIndirection *node);
+	unique_ptr<ParsedExpression> TransformArrayAccess(duckdb_libpgquery::PGAIndirection *node, idx_t depth);
 	//! Transform a positional reference (e.g. #1)
-	unique_ptr<ParsedExpression> TransformPositionalReference(duckdb_libpgquery::PGPositionalReference *node);
+	unique_ptr<ParsedExpression> TransformPositionalReference(duckdb_libpgquery::PGPositionalReference *node,
+	                                                          idx_t depth);
 
 	//! Transform a Postgres constant value into an Expression
-	unique_ptr<ParsedExpression> TransformConstant(duckdb_libpgquery::PGAConst *c);
+	unique_ptr<ParsedExpression> TransformConstant(duckdb_libpgquery::PGAConst *c, idx_t depth);
 
-	unique_ptr<ParsedExpression> TransformResTarget(duckdb_libpgquery::PGResTarget *root);
-	unique_ptr<ParsedExpression> TransformNullTest(duckdb_libpgquery::PGNullTest *root);
-	unique_ptr<ParsedExpression> TransformParamRef(duckdb_libpgquery::PGParamRef *node);
-	unique_ptr<ParsedExpression> TransformNamedArg(duckdb_libpgquery::PGNamedArgExpr *root);
+	unique_ptr<ParsedExpression> TransformResTarget(duckdb_libpgquery::PGResTarget *root, idx_t depth);
+	unique_ptr<ParsedExpression> TransformNullTest(duckdb_libpgquery::PGNullTest *root, idx_t depth);
+	unique_ptr<ParsedExpression> TransformParamRef(duckdb_libpgquery::PGParamRef *node, idx_t depth);
+	unique_ptr<ParsedExpression> TransformNamedArg(duckdb_libpgquery::PGNamedArgExpr *root, idx_t depth);
 
-	unique_ptr<ParsedExpression> TransformSQLValueFunction(duckdb_libpgquery::PGSQLValueFunction *node);
+	unique_ptr<ParsedExpression> TransformSQLValueFunction(duckdb_libpgquery::PGSQLValueFunction *node, idx_t depth);
 
-	unique_ptr<ParsedExpression> TransformSubquery(duckdb_libpgquery::PGSubLink *root);
+	unique_ptr<ParsedExpression> TransformSubquery(duckdb_libpgquery::PGSubLink *root, idx_t depth);
 	//===--------------------------------------------------------------------===//
 	// Constraints transform
 	//===--------------------------------------------------------------------===//
@@ -171,7 +176,7 @@ class Transformer {
 	//===--------------------------------------------------------------------===//
 	// Collation transform
 	//===--------------------------------------------------------------------===//
-	unique_ptr<ParsedExpression> TransformCollateExpr(duckdb_libpgquery::PGCollateClause *collate);
+	unique_ptr<ParsedExpression> TransformCollateExpr(duckdb_libpgquery::PGCollateClause *collate, idx_t depth);
 
 	string TransformCollation(duckdb_libpgquery::PGCollateClause *collate);
 
@@ -219,12 +224,13 @@ class Transformer {
 	bool TransformOrderBy(duckdb_libpgquery::PGList *order, vector<OrderByNode> &result);
 
 	//! Transform a Postgres SELECT clause into a list of Expressions
-	bool TransformExpressionList(duckdb_libpgquery::PGList *list, vector<unique_ptr<ParsedExpression>> &result);
+	bool TransformExpressionList(duckdb_libpgquery::PGList *list, vector<unique_ptr<ParsedExpression>> &result,
+	                             idx_t depth);
 
 	//! Transform a Postgres PARTITION BY/ORDER BY specification into lists of expressions
-	void TransformWindowDef(duckdb_libpgquery::PGWindowDef *window_spec, WindowExpression *expr);
+	void TransformWindowDef(duckdb_libpgquery::PGWindowDef *window_spec, WindowExpression *expr, idx_t depth);
 	//! Transform a Postgres window frame specification into frame expressions
-	void TransformWindowFrame(duckdb_libpgquery::PGWindowDef *window_spec, WindowExpression *expr);
+	void TransformWindowFrame(duckdb_libpgquery::PGWindowDef *window_spec, WindowExpression *expr, idx_t depth);
 
 	unique_ptr<SampleOptions> TransformSampleOptions(duckdb_libpgquery::PGNode *options);
 };
diff --git a/src/parser/transform/constraint/transform_constraint.cpp b/src/parser/transform/constraint/transform_constraint.cpp
index f5ff8d4129d..6f7deb3d80e 100644
--- a/src/parser/transform/constraint/transform_constraint.cpp
+++ b/src/parser/transform/constraint/transform_constraint.cpp
@@ -18,14 +18,14 @@ unique_ptr<Constraint> Transformer::TransformConstraint(duckdb_libpgquery::PGLis
 		return make_unique<UniqueConstraint>(columns, is_primary_key);
 	}
 	case duckdb_libpgquery::PG_CONSTR_CHECK: {
-		auto expression = TransformExpression(constraint->raw_expr);
+		auto expression = TransformExpression(constraint->raw_expr, 0);
 		if (expression->HasSubquery()) {
 			throw ParserException("subqueries prohibited in CHECK constraints");
 		}
 		if (expression->IsAggregate()) {
 			throw ParserException("aggregates prohibited in CHECK constraints");
 		}
-		return make_unique<CheckConstraint>(TransformExpression(constraint->raw_expr));
+		return make_unique<CheckConstraint>(TransformExpression(constraint->raw_expr, 0));
 	}
 	default:
 		throw NotImplementedException("Constraint type not handled yet!");
@@ -48,7 +48,7 @@ unique_ptr<Constraint> Transformer::TransformConstraint(duckdb_libpgquery::PGLis
 	case duckdb_libpgquery::PG_CONSTR_NULL:
 		return nullptr;
 	case duckdb_libpgquery::PG_CONSTR_DEFAULT:
-		column.default_value = TransformExpression(constraint->raw_expr);
+		column.default_value = TransformExpression(constraint->raw_expr, 0);
 		return nullptr;
 	case duckdb_libpgquery::PG_CONSTR_FOREIGN:
 	default:
diff --git a/src/parser/transform/expression/transform_array_access.cpp b/src/parser/transform/expression/transform_array_access.cpp
index 80ba5f16021..ef56960d54c 100644
--- a/src/parser/transform/expression/transform_array_access.cpp
+++ b/src/parser/transform/expression/transform_array_access.cpp
@@ -6,10 +6,11 @@
 
 namespace duckdb {
 
-unique_ptr<ParsedExpression> Transformer::TransformArrayAccess(duckdb_libpgquery::PGAIndirection *indirection_node) {
+unique_ptr<ParsedExpression> Transformer::TransformArrayAccess(duckdb_libpgquery::PGAIndirection *indirection_node,
+                                                               idx_t depth) {
 	// transform the source expression
 	unique_ptr<ParsedExpression> result;
-	result = TransformExpression(indirection_node->arg);
+	result = TransformExpression(indirection_node->arg, depth + 1);
 
 	// now go over the indices
 	// note that a single indirection node can contain multiple indices
@@ -28,15 +29,15 @@ unique_ptr<ParsedExpression> Transformer::TransformArrayAccess(duckdb_libpgquery
 			if (index->is_slice) {
 				// slice
 				children.push_back(!index->lidx ? make_unique<ConstantExpression>(Value())
-				                                : TransformExpression(index->lidx));
+				                                : TransformExpression(index->lidx, depth + 1));
 				children.push_back(!index->uidx ? make_unique<ConstantExpression>(Value())
-				                                : TransformExpression(index->uidx));
+				                                : TransformExpression(index->uidx, depth + 1));
 				result = make_unique<OperatorExpression>(ExpressionType::ARRAY_SLICE, move(children));
 			} else {
 				// array access
 				D_ASSERT(!index->lidx);
 				D_ASSERT(index->uidx);
-				children.push_back(TransformExpression(index->uidx));
+				children.push_back(TransformExpression(index->uidx, depth + 1));
 				result = make_unique<OperatorExpression>(ExpressionType::ARRAY_EXTRACT, move(children));
 			}
 			break;
@@ -45,7 +46,7 @@ unique_ptr<ParsedExpression> Transformer::TransformArrayAccess(duckdb_libpgquery
 			auto val = (duckdb_libpgquery::PGValue *)target;
 			vector<unique_ptr<ParsedExpression>> children;
 			children.push_back(move(result));
-			children.push_back(TransformValue(*val));
+			children.push_back(TransformValue(*val, depth + 1));
 			result = make_unique<OperatorExpression>(ExpressionType::STRUCT_EXTRACT, move(children));
 			break;
 		}
diff --git a/src/parser/transform/expression/transform_bool_expr.cpp b/src/parser/transform/expression/transform_bool_expr.cpp
index cdd4e933108..47e0d532316 100644
--- a/src/parser/transform/expression/transform_bool_expr.cpp
+++ b/src/parser/transform/expression/transform_bool_expr.cpp
@@ -4,10 +4,10 @@
 
 namespace duckdb {
 
-unique_ptr<ParsedExpression> Transformer::TransformBoolExpr(duckdb_libpgquery::PGBoolExpr *root) {
+unique_ptr<ParsedExpression> Transformer::TransformBoolExpr(duckdb_libpgquery::PGBoolExpr *root, idx_t depth) {
 	unique_ptr<ParsedExpression> result;
 	for (auto node = root->args->head; node != nullptr; node = node->next) {
-		auto next = TransformExpression(reinterpret_cast<duckdb_libpgquery::PGNode *>(node->data.ptr_value));
+		auto next = TransformExpression(reinterpret_cast<duckdb_libpgquery::PGNode *>(node->data.ptr_value), depth + 1);
 
 		switch (root->boolop) {
 		case duckdb_libpgquery::PG_AND_EXPR: {
diff --git a/src/parser/transform/expression/transform_case.cpp b/src/parser/transform/expression/transform_case.cpp
index 06e8ae30aac..b02d38b30bf 100644
--- a/src/parser/transform/expression/transform_case.cpp
+++ b/src/parser/transform/expression/transform_case.cpp
@@ -5,7 +5,7 @@
 
 namespace duckdb {
 
-unique_ptr<ParsedExpression> Transformer::TransformCase(duckdb_libpgquery::PGCaseExpr *root) {
+unique_ptr<ParsedExpression> Transformer::TransformCase(duckdb_libpgquery::PGCaseExpr *root, idx_t depth) {
 	if (!root) {
 		return nullptr;
 	}
@@ -17,21 +17,22 @@ unique_ptr<ParsedExpression> Transformer::TransformCase(duckdb_libpgquery::PGCas
 		CaseCheck case_check;
 
 		auto w = reinterpret_cast<duckdb_libpgquery::PGCaseWhen *>(cell->data.ptr_value);
-		auto test_raw = TransformExpression(reinterpret_cast<duckdb_libpgquery::PGNode *>(w->expr));
+		auto test_raw = TransformExpression(reinterpret_cast<duckdb_libpgquery::PGNode *>(w->expr), depth + 1);
 		unique_ptr<ParsedExpression> test;
-		auto arg = TransformExpression(reinterpret_cast<duckdb_libpgquery::PGNode *>(root->arg));
+		auto arg = TransformExpression(reinterpret_cast<duckdb_libpgquery::PGNode *>(root->arg), depth + 1);
 		if (arg) {
 			case_check.when_expr =
 			    make_unique<ComparisonExpression>(ExpressionType::COMPARE_EQUAL, move(arg), move(test_raw));
 		} else {
 			case_check.when_expr = move(test_raw);
 		}
-		case_check.then_expr = TransformExpression(reinterpret_cast<duckdb_libpgquery::PGNode *>(w->result));
+		case_check.then_expr = TransformExpression(reinterpret_cast<duckdb_libpgquery::PGNode *>(w->result), depth + 1);
 		case_node->case_checks.push_back(move(case_check));
 	}
 
 	if (root->defresult) {
-		case_node->else_expr = TransformExpression(reinterpret_cast<duckdb_libpgquery::PGNode *>(root->defresult));
+		case_node->else_expr =
+		    TransformExpression(reinterpret_cast<duckdb_libpgquery::PGNode *>(root->defresult), depth + 1);
 	} else {
 		case_node->else_expr = make_unique<ConstantExpression>(Value(LogicalType::SQLNULL));
 	}
diff --git a/src/parser/transform/expression/transform_cast.cpp b/src/parser/transform/expression/transform_cast.cpp
index 7ecd4a6f72a..b29c94a96c8 100644
--- a/src/parser/transform/expression/transform_cast.cpp
+++ b/src/parser/transform/expression/transform_cast.cpp
@@ -6,7 +6,7 @@
 
 namespace duckdb {
 
-unique_ptr<ParsedExpression> Transformer::TransformTypeCast(duckdb_libpgquery::PGTypeCast *root) {
+unique_ptr<ParsedExpression> Transformer::TransformTypeCast(duckdb_libpgquery::PGTypeCast *root, idx_t depth) {
 	if (!root) {
 		return nullptr;
 	}
@@ -22,7 +22,7 @@ unique_ptr<ParsedExpression> Transformer::TransformTypeCast(duckdb_libpgquery::P
 		}
 	}
 	// transform the expression node
-	auto expression = TransformExpression(root->arg);
+	auto expression = TransformExpression(root->arg, depth + 1);
 	bool try_cast = root->tryCast;
 
 	// now create a cast operation
diff --git a/src/parser/transform/expression/transform_coalesce.cpp b/src/parser/transform/expression/transform_coalesce.cpp
index 7e10b717168..07fb44a3d8f 100644
--- a/src/parser/transform/expression/transform_coalesce.cpp
+++ b/src/parser/transform/expression/transform_coalesce.cpp
@@ -5,7 +5,7 @@ namespace duckdb {
 
 // COALESCE(a,b,c) returns the first argument that is NOT NULL, so
 // rewrite into CASE(a IS NOT NULL, a, CASE(b IS NOT NULL, b, c))
-unique_ptr<ParsedExpression> Transformer::TransformCoalesce(duckdb_libpgquery::PGAExpr *root) {
+unique_ptr<ParsedExpression> Transformer::TransformCoalesce(duckdb_libpgquery::PGAExpr *root, idx_t depth) {
 	if (!root) {
 		return nullptr;
 	}
@@ -15,7 +15,8 @@ unique_ptr<ParsedExpression> Transformer::TransformCoalesce(duckdb_libpgquery::P
 	auto coalesce_op = make_unique<OperatorExpression>(ExpressionType::OPERATOR_COALESCE);
 	for (auto cell = coalesce_args->head; cell; cell = cell->next) {
 		// get the value of the COALESCE
-		auto value_expr = TransformExpression(reinterpret_cast<duckdb_libpgquery::PGNode *>(cell->data.ptr_value));
+		auto value_expr =
+		    TransformExpression(reinterpret_cast<duckdb_libpgquery::PGNode *>(cell->data.ptr_value), depth + 1);
 		coalesce_op->children.push_back(move(value_expr));
 	}
 	return move(coalesce_op);
diff --git a/src/parser/transform/expression/transform_columnref.cpp b/src/parser/transform/expression/transform_columnref.cpp
index 2f008bb553b..801aa65a19e 100644
--- a/src/parser/transform/expression/transform_columnref.cpp
+++ b/src/parser/transform/expression/transform_columnref.cpp
@@ -6,7 +6,7 @@
 
 namespace duckdb {
 
-unique_ptr<ParsedExpression> Transformer::TransformColumnRef(duckdb_libpgquery::PGColumnRef *root) {
+unique_ptr<ParsedExpression> Transformer::TransformColumnRef(duckdb_libpgquery::PGColumnRef *root, idx_t depth) {
 	auto fields = root->fields;
 	switch ((reinterpret_cast<duckdb_libpgquery::PGNode *>(fields->head->data.ptr_value))->type) {
 	case duckdb_libpgquery::T_PGString: {
diff --git a/src/parser/transform/expression/transform_constant.cpp b/src/parser/transform/expression/transform_constant.cpp
index 191a2ec6150..90ea2717f3b 100644
--- a/src/parser/transform/expression/transform_constant.cpp
+++ b/src/parser/transform/expression/transform_constant.cpp
@@ -6,7 +6,7 @@
 
 namespace duckdb {
 
-unique_ptr<ConstantExpression> Transformer::TransformValue(duckdb_libpgquery::PGValue val) {
+unique_ptr<ConstantExpression> Transformer::TransformValue(duckdb_libpgquery::PGValue val, idx_t depth) {
 	switch (val.type) {
 	case duckdb_libpgquery::T_PGInteger:
 		D_ASSERT(val.val.ival <= NumericLimits<int32_t>::Maximum());
@@ -73,8 +73,8 @@ unique_ptr<ConstantExpression> Transformer::TransformValue(duckdb_libpgquery::PG
 	}
 }
 
-unique_ptr<ParsedExpression> Transformer::TransformConstant(duckdb_libpgquery::PGAConst *c) {
-	return TransformValue(c->val);
+unique_ptr<ParsedExpression> Transformer::TransformConstant(duckdb_libpgquery::PGAConst *c, idx_t depth) {
+	return TransformValue(c->val, depth + 1);
 }
 
 } // namespace duckdb
diff --git a/src/parser/transform/expression/transform_expression.cpp b/src/parser/transform/expression/transform_expression.cpp
index 4f8caab2c1a..a2057dfa5a5 100644
--- a/src/parser/transform/expression/transform_expression.cpp
+++ b/src/parser/transform/expression/transform_expression.cpp
@@ -4,11 +4,11 @@
 
 namespace duckdb {
 
-unique_ptr<ParsedExpression> Transformer::TransformResTarget(duckdb_libpgquery::PGResTarget *root) {
+unique_ptr<ParsedExpression> Transformer::TransformResTarget(duckdb_libpgquery::PGResTarget *root, idx_t depth) {
 	if (!root) {
 		return nullptr;
 	}
-	auto expr = TransformExpression(root->val);
+	auto expr = TransformExpression(root->val, depth + 1);
 	if (!expr) {
 		return nullptr;
 	}
@@ -18,70 +18,73 @@ unique_ptr<ParsedExpression> Transformer::TransformResTarget(duckdb_libpgquery::
 	return expr;
 }
 
-unique_ptr<ParsedExpression> Transformer::TransformNamedArg(duckdb_libpgquery::PGNamedArgExpr *root) {
+unique_ptr<ParsedExpression> Transformer::TransformNamedArg(duckdb_libpgquery::PGNamedArgExpr *root, idx_t depth) {
 	if (!root) {
 		return nullptr;
 	}
-	auto expr = TransformExpression((duckdb_libpgquery::PGNode *)root->arg);
+	auto expr = TransformExpression((duckdb_libpgquery::PGNode *)root->arg, depth + 1);
 	if (root->name) {
 		expr->alias = string(root->name);
 	}
 	return expr;
 }
 
-unique_ptr<ParsedExpression> Transformer::TransformExpression(duckdb_libpgquery::PGNode *node) {
+unique_ptr<ParsedExpression> Transformer::TransformExpression(duckdb_libpgquery::PGNode *node, idx_t depth) {
 	if (!node) {
 		return nullptr;
 	}
+	if (depth > max_expression_depth) {
+		throw ParserException("Expression tree is too deep (maximum depth %d)", max_expression_depth);
+	}
 
 	switch (node->type) {
 	case duckdb_libpgquery::T_PGColumnRef:
-		return TransformColumnRef(reinterpret_cast<duckdb_libpgquery::PGColumnRef *>(node));
+		return TransformColumnRef(reinterpret_cast<duckdb_libpgquery::PGColumnRef *>(node), depth);
 	case duckdb_libpgquery::T_PGAConst:
-		return TransformConstant(reinterpret_cast<duckdb_libpgquery::PGAConst *>(node));
+		return TransformConstant(reinterpret_cast<duckdb_libpgquery::PGAConst *>(node), depth);
 	case duckdb_libpgquery::T_PGAExpr:
-		return TransformAExpr(reinterpret_cast<duckdb_libpgquery::PGAExpr *>(node));
+		return TransformAExpr(reinterpret_cast<duckdb_libpgquery::PGAExpr *>(node), depth);
 	case duckdb_libpgquery::T_PGFuncCall:
-		return TransformFuncCall(reinterpret_cast<duckdb_libpgquery::PGFuncCall *>(node));
+		return TransformFuncCall(reinterpret_cast<duckdb_libpgquery::PGFuncCall *>(node), depth);
 	case duckdb_libpgquery::T_PGBoolExpr:
-		return TransformBoolExpr(reinterpret_cast<duckdb_libpgquery::PGBoolExpr *>(node));
+		return TransformBoolExpr(reinterpret_cast<duckdb_libpgquery::PGBoolExpr *>(node), depth);
 	case duckdb_libpgquery::T_PGTypeCast:
-		return TransformTypeCast(reinterpret_cast<duckdb_libpgquery::PGTypeCast *>(node));
+		return TransformTypeCast(reinterpret_cast<duckdb_libpgquery::PGTypeCast *>(node), depth);
 	case duckdb_libpgquery::T_PGCaseExpr:
-		return TransformCase(reinterpret_cast<duckdb_libpgquery::PGCaseExpr *>(node));
+		return TransformCase(reinterpret_cast<duckdb_libpgquery::PGCaseExpr *>(node), depth);
 	case duckdb_libpgquery::T_PGSubLink:
-		return TransformSubquery(reinterpret_cast<duckdb_libpgquery::PGSubLink *>(node));
+		return TransformSubquery(reinterpret_cast<duckdb_libpgquery::PGSubLink *>(node), depth);
 	case duckdb_libpgquery::T_PGCoalesceExpr:
-		return TransformCoalesce(reinterpret_cast<duckdb_libpgquery::PGAExpr *>(node));
+		return TransformCoalesce(reinterpret_cast<duckdb_libpgquery::PGAExpr *>(node), depth);
 	case duckdb_libpgquery::T_PGNullTest:
-		return TransformNullTest(reinterpret_cast<duckdb_libpgquery::PGNullTest *>(node));
+		return TransformNullTest(reinterpret_cast<duckdb_libpgquery::PGNullTest *>(node), depth);
 	case duckdb_libpgquery::T_PGResTarget:
-		return TransformResTarget(reinterpret_cast<duckdb_libpgquery::PGResTarget *>(node));
+		return TransformResTarget(reinterpret_cast<duckdb_libpgquery::PGResTarget *>(node), depth);
 	case duckdb_libpgquery::T_PGParamRef:
-		return TransformParamRef(reinterpret_cast<duckdb_libpgquery::PGParamRef *>(node));
+		return TransformParamRef(reinterpret_cast<duckdb_libpgquery::PGParamRef *>(node), depth);
 	case duckdb_libpgquery::T_PGNamedArgExpr:
-		return TransformNamedArg(reinterpret_cast<duckdb_libpgquery::PGNamedArgExpr *>(node));
+		return TransformNamedArg(reinterpret_cast<duckdb_libpgquery::PGNamedArgExpr *>(node), depth);
 	case duckdb_libpgquery::T_PGSQLValueFunction:
-		return TransformSQLValueFunction(reinterpret_cast<duckdb_libpgquery::PGSQLValueFunction *>(node));
+		return TransformSQLValueFunction(reinterpret_cast<duckdb_libpgquery::PGSQLValueFunction *>(node), depth);
 	case duckdb_libpgquery::T_PGSetToDefault:
 		return make_unique<DefaultExpression>();
 	case duckdb_libpgquery::T_PGCollateClause:
-		return TransformCollateExpr(reinterpret_cast<duckdb_libpgquery::PGCollateClause *>(node));
+		return TransformCollateExpr(reinterpret_cast<duckdb_libpgquery::PGCollateClause *>(node), depth);
 	case duckdb_libpgquery::T_PGIntervalConstant:
-		return TransformInterval(reinterpret_cast<duckdb_libpgquery::PGIntervalConstant *>(node));
+		return TransformInterval(reinterpret_cast<duckdb_libpgquery::PGIntervalConstant *>(node), depth);
 	case duckdb_libpgquery::T_PGLambdaFunction:
-		return TransformLambda(reinterpret_cast<duckdb_libpgquery::PGLambdaFunction *>(node));
+		return TransformLambda(reinterpret_cast<duckdb_libpgquery::PGLambdaFunction *>(node), depth);
 	case duckdb_libpgquery::T_PGAIndirection:
-		return TransformArrayAccess(reinterpret_cast<duckdb_libpgquery::PGAIndirection *>(node));
+		return TransformArrayAccess(reinterpret_cast<duckdb_libpgquery::PGAIndirection *>(node), depth);
 	case duckdb_libpgquery::T_PGPositionalReference:
-		return TransformPositionalReference(reinterpret_cast<duckdb_libpgquery::PGPositionalReference *>(node));
+		return TransformPositionalReference(reinterpret_cast<duckdb_libpgquery::PGPositionalReference *>(node), depth);
 	default:
 		throw NotImplementedException("Expr of type %d not implemented\n", (int)node->type);
 	}
 }
 
-bool Transformer::TransformExpressionList(duckdb_libpgquery::PGList *list,
-                                          vector<unique_ptr<ParsedExpression>> &result) {
+bool Transformer::TransformExpressionList(duckdb_libpgquery::PGList *list, vector<unique_ptr<ParsedExpression>> &result,
+                                          idx_t depth) {
 	if (!list) {
 		return false;
 	}
@@ -90,7 +93,7 @@ bool Transformer::TransformExpressionList(duckdb_libpgquery::PGList *list,
 		if (!target) {
 			return false;
 		}
-		auto expr = TransformExpression(target);
+		auto expr = TransformExpression(target, depth + 1);
 		if (!expr) {
 			return false;
 		}
diff --git a/src/parser/transform/expression/transform_function.cpp b/src/parser/transform/expression/transform_function.cpp
index 00034affa4b..bfcb36b5d10 100644
--- a/src/parser/transform/expression/transform_function.cpp
+++ b/src/parser/transform/expression/transform_function.cpp
@@ -37,22 +37,23 @@ static ExpressionType WindowToExpressionType(string &fun_name) {
 	return ExpressionType::WINDOW_AGGREGATE;
 }
 
-void Transformer::TransformWindowDef(duckdb_libpgquery::PGWindowDef *window_spec, WindowExpression *expr) {
+void Transformer::TransformWindowDef(duckdb_libpgquery::PGWindowDef *window_spec, WindowExpression *expr, idx_t depth) {
 	D_ASSERT(window_spec);
 	D_ASSERT(expr);
 
 	// next: partitioning/ordering expressions
-	TransformExpressionList(window_spec->partitionClause, expr->partitions);
+	TransformExpressionList(window_spec->partitionClause, expr->partitions, depth);
 	TransformOrderBy(window_spec->orderClause, expr->orders);
 }
 
-void Transformer::TransformWindowFrame(duckdb_libpgquery::PGWindowDef *window_spec, WindowExpression *expr) {
+void Transformer::TransformWindowFrame(duckdb_libpgquery::PGWindowDef *window_spec, WindowExpression *expr,
+                                       idx_t depth) {
 	D_ASSERT(window_spec);
 	D_ASSERT(expr);
 
 	// finally: specifics of bounds
-	expr->start_expr = TransformExpression(window_spec->startOffset);
-	expr->end_expr = TransformExpression(window_spec->endOffset);
+	expr->start_expr = TransformExpression(window_spec->startOffset, depth + 1);
+	expr->end_expr = TransformExpression(window_spec->endOffset, depth + 1);
 
 	if ((window_spec->frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING) ||
 	    (window_spec->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)) {
@@ -101,7 +102,7 @@ void Transformer::TransformWindowFrame(duckdb_libpgquery::PGWindowDef *window_sp
 	}
 }
 
-unique_ptr<ParsedExpression> Transformer::TransformFuncCall(duckdb_libpgquery::PGFuncCall *root) {
+unique_ptr<ParsedExpression> Transformer::TransformFuncCall(duckdb_libpgquery::PGFuncCall *root, idx_t depth) {
 	auto name = root->funcname;
 	string schema, function_name;
 	if (name->length == 2) {
@@ -135,7 +136,7 @@ unique_ptr<ParsedExpression> Transformer::TransformFuncCall(duckdb_libpgquery::P
 
 		if (root->args) {
 			vector<unique_ptr<ParsedExpression>> function_list;
-			auto res = TransformExpressionList(root->args, function_list);
+			auto res = TransformExpressionList(root->args, function_list, depth);
 			if (!res) {
 				throw Exception("Failed to transform window function children");
 			}
@@ -176,8 +177,8 @@ unique_ptr<ParsedExpression> Transformer::TransformFuncCall(duckdb_libpgquery::P
 			window_ref = it->second;
 			D_ASSERT(window_ref);
 		}
-		TransformWindowDef(window_ref, expr.get());
-		TransformWindowFrame(window_spec, expr.get());
+		TransformWindowDef(window_ref, expr.get(), depth);
+		TransformWindowFrame(window_spec, expr.get(), depth);
 
 		return move(expr);
 	}
@@ -186,13 +187,13 @@ unique_ptr<ParsedExpression> Transformer::TransformFuncCall(duckdb_libpgquery::P
 	vector<unique_ptr<ParsedExpression>> children;
 	if (root->args != nullptr) {
 		for (auto node = root->args->head; node != nullptr; node = node->next) {
-			auto child_expr = TransformExpression((duckdb_libpgquery::PGNode *)node->data.ptr_value);
+			auto child_expr = TransformExpression((duckdb_libpgquery::PGNode *)node->data.ptr_value, depth + 1);
 			children.push_back(move(child_expr));
 		}
 	}
 	unique_ptr<ParsedExpression> filter_expr;
 	if (root->agg_filter) {
-		filter_expr = TransformExpression(root->agg_filter);
+		filter_expr = TransformExpression(root->agg_filter, depth + 1);
 	}
 
 	// star gets eaten in the parser
@@ -270,7 +271,8 @@ static string SQLValueOpToString(duckdb_libpgquery::PGSQLValueFunctionOp op) {
 	}
 }
 
-unique_ptr<ParsedExpression> Transformer::TransformSQLValueFunction(duckdb_libpgquery::PGSQLValueFunction *node) {
+unique_ptr<ParsedExpression> Transformer::TransformSQLValueFunction(duckdb_libpgquery::PGSQLValueFunction *node,
+                                                                    idx_t depth) {
 	if (!node) {
 		return nullptr;
 	}
diff --git a/src/parser/transform/expression/transform_interval.cpp b/src/parser/transform/expression/transform_interval.cpp
index 6fdad6aabfa..e937b3175b2 100644
--- a/src/parser/transform/expression/transform_interval.cpp
+++ b/src/parser/transform/expression/transform_interval.cpp
@@ -6,7 +6,7 @@
 
 namespace duckdb {
 
-unique_ptr<ParsedExpression> Transformer::TransformInterval(duckdb_libpgquery::PGIntervalConstant *node) {
+unique_ptr<ParsedExpression> Transformer::TransformInterval(duckdb_libpgquery::PGIntervalConstant *node, idx_t depth) {
 	// handle post-fix notation of INTERVAL
 
 	// three scenarios
@@ -16,7 +16,7 @@ unique_ptr<ParsedExpression> Transformer::TransformInterval(duckdb_libpgquery::P
 	unique_ptr<ParsedExpression> expr;
 	switch (node->val_type) {
 	case duckdb_libpgquery::T_PGAExpr:
-		expr = TransformExpression(node->eval);
+		expr = TransformExpression(node->eval, depth + 1);
 		break;
 	case duckdb_libpgquery::T_PGString:
 		expr = make_unique<ConstantExpression>(Value(node->sval));
diff --git a/src/parser/transform/expression/transform_is_null.cpp b/src/parser/transform/expression/transform_is_null.cpp
index fca817d61e7..13ff6676b90 100644
--- a/src/parser/transform/expression/transform_is_null.cpp
+++ b/src/parser/transform/expression/transform_is_null.cpp
@@ -4,9 +4,9 @@
 
 namespace duckdb {
 
-unique_ptr<ParsedExpression> Transformer::TransformNullTest(duckdb_libpgquery::PGNullTest *root) {
+unique_ptr<ParsedExpression> Transformer::TransformNullTest(duckdb_libpgquery::PGNullTest *root, idx_t depth) {
 	D_ASSERT(root);
-	auto arg = TransformExpression(reinterpret_cast<duckdb_libpgquery::PGNode *>(root->arg));
+	auto arg = TransformExpression(reinterpret_cast<duckdb_libpgquery::PGNode *>(root->arg), depth + 1);
 	if (root->argisrow) {
 		throw NotImplementedException("IS NULL argisrow");
 	}
diff --git a/src/parser/transform/expression/transform_lambda.cpp b/src/parser/transform/expression/transform_lambda.cpp
index 1be827b7839..1e95daf0fea 100644
--- a/src/parser/transform/expression/transform_lambda.cpp
+++ b/src/parser/transform/expression/transform_lambda.cpp
@@ -16,9 +16,9 @@ static string ExtractColumnFromLambda(ParsedExpression &expr) {
 	return colref.column_name;
 }
 
-unique_ptr<ParsedExpression> Transformer::TransformLambda(duckdb_libpgquery::PGLambdaFunction *node) {
+unique_ptr<ParsedExpression> Transformer::TransformLambda(duckdb_libpgquery::PGLambdaFunction *node, idx_t depth) {
 	vector<unique_ptr<ParsedExpression>> parameter_expressions;
-	if (!TransformExpressionList(node->parameters, parameter_expressions)) {
+	if (!TransformExpressionList(node->parameters, parameter_expressions, depth + 1)) {
 		throw ParserException("Failed to transform expression list");
 	}
 	vector<string> parameters;
@@ -27,7 +27,7 @@ unique_ptr<ParsedExpression> Transformer::TransformLambda(duckdb_libpgquery::PGL
 		parameters.push_back(ExtractColumnFromLambda(*expr));
 	}
 
-	auto lambda_function = TransformExpression(node->function);
+	auto lambda_function = TransformExpression(node->function, depth + 1);
 	return make_unique<LambdaExpression>(move(parameters), move(lambda_function));
 }
 
diff --git a/src/parser/transform/expression/transform_operator.cpp b/src/parser/transform/expression/transform_operator.cpp
index bc0a1c99c72..1eeab6e4437 100644
--- a/src/parser/transform/expression/transform_operator.cpp
+++ b/src/parser/transform/expression/transform_operator.cpp
@@ -69,7 +69,7 @@ unique_ptr<ParsedExpression> Transformer::TransformBinaryOperator(const string &
 	}
 }
 
-unique_ptr<ParsedExpression> Transformer::TransformAExpr(duckdb_libpgquery::PGAExpr *root) {
+unique_ptr<ParsedExpression> Transformer::TransformAExpr(duckdb_libpgquery::PGAExpr *root, idx_t depth) {
 	if (!root) {
 		return nullptr;
 	}
@@ -77,7 +77,7 @@ unique_ptr<ParsedExpression> Transformer::TransformAExpr(duckdb_libpgquery::PGAE
 
 	switch (root->kind) {
 	case duckdb_libpgquery::PG_AEXPR_IN: {
-		auto left_expr = TransformExpression(root->lexpr);
+		auto left_expr = TransformExpression(root->lexpr, depth + 1);
 		ExpressionType operator_type;
 		// this looks very odd, but seems to be the way to find out its NOT IN
 		if (name == "<>") {
@@ -88,14 +88,14 @@ unique_ptr<ParsedExpression> Transformer::TransformAExpr(duckdb_libpgquery::PGAE
 			operator_type = ExpressionType::COMPARE_IN;
 		}
 		auto result = make_unique<OperatorExpression>(operator_type, move(left_expr));
-		TransformExpressionList((duckdb_libpgquery::PGList *)root->rexpr, result->children);
+		TransformExpressionList((duckdb_libpgquery::PGList *)root->rexpr, result->children, depth);
 		return move(result);
 	}
 	// rewrite NULLIF(a, b) into CASE WHEN a=b THEN NULL ELSE a END
 	case duckdb_libpgquery::PG_AEXPR_NULLIF: {
 		vector<unique_ptr<ParsedExpression>> children;
-		children.push_back(TransformExpression(root->lexpr));
-		children.push_back(TransformExpression(root->rexpr));
+		children.push_back(TransformExpression(root->lexpr, depth + 1));
+		children.push_back(TransformExpression(root->rexpr, depth + 1));
 		return make_unique<FunctionExpression>("nullif", children);
 	}
 	// rewrite (NOT) X BETWEEN A AND B into (NOT) AND(GREATERTHANOREQUALTO(X,
@@ -107,15 +107,17 @@ unique_ptr<ParsedExpression> Transformer::TransformAExpr(duckdb_libpgquery::PGAE
 			throw Exception("(NOT) BETWEEN needs two args");
 		}
 
-		auto between_left =
-		    TransformExpression(reinterpret_cast<duckdb_libpgquery::PGNode *>(between_args->head->data.ptr_value));
-		auto between_right =
-		    TransformExpression(reinterpret_cast<duckdb_libpgquery::PGNode *>(between_args->tail->data.ptr_value));
-
-		auto compare_left = make_unique<ComparisonExpression>(ExpressionType::COMPARE_GREATERTHANOREQUALTO,
-		                                                      TransformExpression(root->lexpr), move(between_left));
-		auto compare_right = make_unique<ComparisonExpression>(ExpressionType::COMPARE_LESSTHANOREQUALTO,
-		                                                       TransformExpression(root->lexpr), move(between_right));
+		auto between_left = TransformExpression(
+		    reinterpret_cast<duckdb_libpgquery::PGNode *>(between_args->head->data.ptr_value), depth + 1);
+		auto between_right = TransformExpression(
+		    reinterpret_cast<duckdb_libpgquery::PGNode *>(between_args->tail->data.ptr_value), depth + 1);
+
+		auto compare_left =
+		    make_unique<ComparisonExpression>(ExpressionType::COMPARE_GREATERTHANOREQUALTO,
+		                                      TransformExpression(root->lexpr, depth + 1), move(between_left));
+		auto compare_right =
+		    make_unique<ComparisonExpression>(ExpressionType::COMPARE_LESSTHANOREQUALTO,
+		                                      TransformExpression(root->lexpr, depth + 1), move(between_right));
 		auto compare_between = make_unique<ConjunctionExpression>(ExpressionType::CONJUNCTION_AND, move(compare_left),
 		                                                          move(compare_right));
 		if (root->kind == duckdb_libpgquery::PG_AEXPR_BETWEEN) {
@@ -126,8 +128,8 @@ unique_ptr<ParsedExpression> Transformer::TransformAExpr(duckdb_libpgquery::PGAE
 	}
 	// rewrite SIMILAR TO into regexp_full_match('asdf', '.*sd.*')
 	case duckdb_libpgquery::PG_AEXPR_SIMILAR: {
-		auto left_expr = TransformExpression(root->lexpr);
-		auto right_expr = TransformExpression(root->rexpr);
+		auto left_expr = TransformExpression(root->lexpr, depth + 1);
+		auto right_expr = TransformExpression(root->rexpr, depth + 1);
 
 		vector<unique_ptr<ParsedExpression>> children;
 		children.push_back(move(left_expr));
@@ -162,14 +164,14 @@ unique_ptr<ParsedExpression> Transformer::TransformAExpr(duckdb_libpgquery::PGAE
 		}
 	}
 	case duckdb_libpgquery::PG_AEXPR_NOT_DISTINCT: {
-		auto left_expr = TransformExpression(root->lexpr);
-		auto right_expr = TransformExpression(root->rexpr);
+		auto left_expr = TransformExpression(root->lexpr, depth + 1);
+		auto right_expr = TransformExpression(root->rexpr, depth + 1);
 		return make_unique<ComparisonExpression>(ExpressionType::COMPARE_NOT_DISTINCT_FROM, move(left_expr),
 		                                         move(right_expr));
 	}
 	case duckdb_libpgquery::PG_AEXPR_DISTINCT: {
-		auto left_expr = TransformExpression(root->lexpr);
-		auto right_expr = TransformExpression(root->rexpr);
+		auto left_expr = TransformExpression(root->lexpr, depth + 1);
+		auto right_expr = TransformExpression(root->rexpr, depth + 1);
 		return make_unique<ComparisonExpression>(ExpressionType::COMPARE_DISTINCT_FROM, move(left_expr),
 		                                         move(right_expr));
 	}
@@ -177,8 +179,8 @@ unique_ptr<ParsedExpression> Transformer::TransformAExpr(duckdb_libpgquery::PGAE
 	default:
 		break;
 	}
-	auto left_expr = TransformExpression(root->lexpr);
-	auto right_expr = TransformExpression(root->rexpr);
+	auto left_expr = TransformExpression(root->lexpr, depth + 1);
+	auto right_expr = TransformExpression(root->rexpr, depth + 1);
 
 	if (!left_expr) {
 		// prefix operator
diff --git a/src/parser/transform/expression/transform_param_ref.cpp b/src/parser/transform/expression/transform_param_ref.cpp
index 6c8dd58101e..c4990cd9bae 100644
--- a/src/parser/transform/expression/transform_param_ref.cpp
+++ b/src/parser/transform/expression/transform_param_ref.cpp
@@ -4,7 +4,7 @@
 
 namespace duckdb {
 
-unique_ptr<ParsedExpression> Transformer::TransformParamRef(duckdb_libpgquery::PGParamRef *node) {
+unique_ptr<ParsedExpression> Transformer::TransformParamRef(duckdb_libpgquery::PGParamRef *node, idx_t depth) {
 	if (!node) {
 		return nullptr;
 	}
diff --git a/src/parser/transform/expression/transform_positional_reference.cpp b/src/parser/transform/expression/transform_positional_reference.cpp
index a771620071b..11ab434631d 100644
--- a/src/parser/transform/expression/transform_positional_reference.cpp
+++ b/src/parser/transform/expression/transform_positional_reference.cpp
@@ -4,7 +4,8 @@
 
 namespace duckdb {
 
-unique_ptr<ParsedExpression> Transformer::TransformPositionalReference(duckdb_libpgquery::PGPositionalReference *node) {
+unique_ptr<ParsedExpression> Transformer::TransformPositionalReference(duckdb_libpgquery::PGPositionalReference *node,
+                                                                       idx_t depth) {
 	if (node->position <= 0) {
 		throw ParserException("Positional reference node needs to be >= 1");
 	}
diff --git a/src/parser/transform/expression/transform_subquery.cpp b/src/parser/transform/expression/transform_subquery.cpp
index 8b9ae67cd02..a13cc86afd0 100644
--- a/src/parser/transform/expression/transform_subquery.cpp
+++ b/src/parser/transform/expression/transform_subquery.cpp
@@ -4,7 +4,7 @@
 
 namespace duckdb {
 
-unique_ptr<ParsedExpression> Transformer::TransformSubquery(duckdb_libpgquery::PGSubLink *root) {
+unique_ptr<ParsedExpression> Transformer::TransformSubquery(duckdb_libpgquery::PGSubLink *root, idx_t depth) {
 	if (!root) {
 		return nullptr;
 	}
@@ -24,7 +24,7 @@ unique_ptr<ParsedExpression> Transformer::TransformSubquery(duckdb_libpgquery::P
 	case duckdb_libpgquery::PG_ALL_SUBLINK: {
 		// comparison with ANY() or ALL()
 		subquery_expr->subquery_type = SubqueryType::ANY;
-		subquery_expr->child = TransformExpression(root->testexpr);
+		subquery_expr->child = TransformExpression(root->testexpr, depth + 1);
 		// get the operator name
 		if (!root->operName) {
 			// simple IN
diff --git a/src/parser/transform/helpers/transform_groupby.cpp b/src/parser/transform/helpers/transform_groupby.cpp
index d80dd742655..38f425067a2 100644
--- a/src/parser/transform/helpers/transform_groupby.cpp
+++ b/src/parser/transform/helpers/transform_groupby.cpp
@@ -11,7 +11,7 @@ bool Transformer::TransformGroupBy(duckdb_libpgquery::PGList *group, vector<uniq
 
 	for (auto node = group->head; node != nullptr; node = node->next) {
 		auto n = reinterpret_cast<duckdb_libpgquery::PGNode *>(node->data.ptr_value);
-		result.push_back(TransformExpression(n));
+		result.push_back(TransformExpression(n, 0));
 	}
 	return true;
 }
diff --git a/src/parser/transform/helpers/transform_orderby.cpp b/src/parser/transform/helpers/transform_orderby.cpp
index 37c64b8ca18..e3d4c5b0c64 100644
--- a/src/parser/transform/helpers/transform_orderby.cpp
+++ b/src/parser/transform/helpers/transform_orderby.cpp
@@ -34,7 +34,7 @@ bool Transformer::TransformOrderBy(duckdb_libpgquery::PGList *order, vector<Orde
 			} else {
 				throw NotImplementedException("Unimplemented order by type");
 			}
-			auto order_expression = TransformExpression(target);
+			auto order_expression = TransformExpression(target, 0);
 			result.emplace_back(type, null_order, move(order_expression));
 		} else {
 			throw NotImplementedException("ORDER BY list member type %d\n", temp->type);
diff --git a/src/parser/transform/helpers/transform_sample.cpp b/src/parser/transform/helpers/transform_sample.cpp
index b1c6b47ddd3..dbf6a10033e 100644
--- a/src/parser/transform/helpers/transform_sample.cpp
+++ b/src/parser/transform/helpers/transform_sample.cpp
@@ -25,7 +25,7 @@ unique_ptr<SampleOptions> Transformer::TransformSampleOptions(duckdb_libpgquery:
 	auto result = make_unique<SampleOptions>();
 	auto &sample_options = (duckdb_libpgquery::PGSampleOptions &)*options;
 	auto &sample_size = (duckdb_libpgquery::PGSampleSize &)*sample_options.sample_size;
-	auto sample_value = TransformValue(sample_size.sample_size)->value;
+	auto sample_value = TransformValue(sample_size.sample_size, 0)->value;
 	result->is_percentage = sample_size.is_percentage;
 	if (sample_size.is_percentage) {
 		// sample size is given in sample_size: use system sampling
diff --git a/src/parser/transform/statement/transform_alter_table.cpp b/src/parser/transform/statement/transform_alter_table.cpp
index 2a07ff5423a..c26ad20f94b 100644
--- a/src/parser/transform/statement/transform_alter_table.cpp
+++ b/src/parser/transform/statement/transform_alter_table.cpp
@@ -39,7 +39,7 @@ unique_ptr<AlterStatement> Transformer::TransformAlter(duckdb_libpgquery::PGNode
 			break;
 		}
 		case duckdb_libpgquery::PG_AT_ColumnDefault: {
-			auto expr = TransformExpression(command->def);
+			auto expr = TransformExpression(command->def, 0);
 			result->info = make_unique<SetDefaultInfo>(qname.schema, qname.name, command->name, move(expr));
 			break;
 		}
@@ -49,7 +49,7 @@ unique_ptr<AlterStatement> Transformer::TransformAlter(duckdb_libpgquery::PGNode
 
 			unique_ptr<ParsedExpression> expr;
 			if (cdef->raw_default) {
-				expr = TransformExpression(cdef->raw_default);
+				expr = TransformExpression(cdef->raw_default, 0);
 			} else {
 				auto colref = make_unique<ColumnRefExpression>(command->name);
 				expr = make_unique<CastExpression>(column_definition.type, move(colref));
diff --git a/src/parser/transform/statement/transform_call.cpp b/src/parser/transform/statement/transform_call.cpp
index 4a8d5da3233..2a03b653b73 100644
--- a/src/parser/transform/statement/transform_call.cpp
+++ b/src/parser/transform/statement/transform_call.cpp
@@ -8,7 +8,7 @@ unique_ptr<CallStatement> Transformer::TransformCall(duckdb_libpgquery::PGNode *
 	D_ASSERT(stmt);
 
 	auto result = make_unique<CallStatement>();
-	result->function = TransformFuncCall((duckdb_libpgquery::PGFuncCall *)stmt->func);
+	result->function = TransformFuncCall((duckdb_libpgquery::PGFuncCall *)stmt->func, 0);
 	return result;
 }
 
diff --git a/src/parser/transform/statement/transform_copy.cpp b/src/parser/transform/statement/transform_copy.cpp
index 79e8e26073c..097cd1e69a6 100644
--- a/src/parser/transform/statement/transform_copy.cpp
+++ b/src/parser/transform/statement/transform_copy.cpp
@@ -49,7 +49,7 @@ void Transformer::TransformCopyOptions(CopyInfo &info, duckdb_libpgquery::PGList
 			break;
 		default:
 			info.options[def_elem->defname].push_back(
-			    TransformValue(*((duckdb_libpgquery::PGValue *)def_elem->arg))->value);
+			    TransformValue(*((duckdb_libpgquery::PGValue *)def_elem->arg), 0)->value);
 			break;
 		}
 	}
diff --git a/src/parser/transform/statement/transform_create_function.cpp b/src/parser/transform/statement/transform_create_function.cpp
index 2f8d75235f7..647846ed90f 100644
--- a/src/parser/transform/statement/transform_create_function.cpp
+++ b/src/parser/transform/statement/transform_create_function.cpp
@@ -20,13 +20,13 @@ unique_ptr<CreateStatement> Transformer::TransformCreateFunction(duckdb_libpgque
 	info->schema = qname.schema;
 	info->name = qname.name;
 
-	auto function = TransformExpression(stmt->function);
+	auto function = TransformExpression(stmt->function, 0);
 	D_ASSERT(function);
 	auto macro_func = make_unique<MacroFunction>(move(function));
 
 	if (stmt->params) {
 		vector<unique_ptr<ParsedExpression>> parameters;
-		auto res = TransformExpressionList(stmt->params, parameters);
+		auto res = TransformExpressionList(stmt->params, parameters, 0);
 		if (!res) {
 			throw ParserException("Failed to transform macro parameters!");
 		}
diff --git a/src/parser/transform/statement/transform_create_index.cpp b/src/parser/transform/statement/transform_create_index.cpp
index fb8b8b3e8ac..3301615df26 100644
--- a/src/parser/transform/statement/transform_create_index.cpp
+++ b/src/parser/transform/statement/transform_create_index.cpp
@@ -44,7 +44,7 @@ unique_ptr<CreateStatement> Transformer::TransformCreateIndex(duckdb_libpgquery:
 		} else {
 			// parse the index expression
 			D_ASSERT(index_element->expr);
-			info->expressions.push_back(TransformExpression(index_element->expr));
+			info->expressions.push_back(TransformExpression(index_element->expr, 0));
 		}
 	}
 
diff --git a/src/parser/transform/statement/transform_create_table.cpp b/src/parser/transform/statement/transform_create_table.cpp
index 3205f4aa602..6a57434815a 100644
--- a/src/parser/transform/statement/transform_create_table.cpp
+++ b/src/parser/transform/statement/transform_create_table.cpp
@@ -26,8 +26,9 @@ string Transformer::TransformCollation(duckdb_libpgquery::PGCollateClause *colla
 	return collation;
 }
 
-unique_ptr<ParsedExpression> Transformer::TransformCollateExpr(duckdb_libpgquery::PGCollateClause *collate) {
-	auto child = TransformExpression(collate->arg);
+unique_ptr<ParsedExpression> Transformer::TransformCollateExpr(duckdb_libpgquery::PGCollateClause *collate,
+                                                               idx_t depth) {
+	auto child = TransformExpression(collate->arg, depth + 1);
 	auto collation = TransformCollation(collate);
 	return make_unique<CollateExpression>(collation, move(child));
 }
diff --git a/src/parser/transform/statement/transform_delete.cpp b/src/parser/transform/statement/transform_delete.cpp
index 6dc61d5af8c..cb3dd2df02f 100644
--- a/src/parser/transform/statement/transform_delete.cpp
+++ b/src/parser/transform/statement/transform_delete.cpp
@@ -9,7 +9,7 @@ unique_ptr<DeleteStatement> Transformer::TransformDelete(duckdb_libpgquery::PGNo
 	D_ASSERT(stmt);
 	auto result = make_unique<DeleteStatement>();
 
-	result->condition = TransformExpression(stmt->whereClause);
+	result->condition = TransformExpression(stmt->whereClause, 0);
 	result->table = TransformRangeVar(stmt->relation);
 	if (result->table->type != TableReferenceType::BASE_TABLE) {
 		throw Exception("Can only delete from base tables!");
diff --git a/src/parser/transform/statement/transform_insert.cpp b/src/parser/transform/statement/transform_insert.cpp
index 50da6c90384..8e6405b3bf0 100644
--- a/src/parser/transform/statement/transform_insert.cpp
+++ b/src/parser/transform/statement/transform_insert.cpp
@@ -10,7 +10,7 @@ unique_ptr<TableRef> Transformer::TransformValuesList(duckdb_libpgquery::PGList
 		auto target = (duckdb_libpgquery::PGList *)(value_list->data.ptr_value);
 
 		vector<unique_ptr<ParsedExpression>> insert_values;
-		if (!TransformExpressionList(target, insert_values)) {
+		if (!TransformExpressionList(target, insert_values, 0)) {
 			throw ParserException("Could not parse expression list!");
 		}
 		if (!result->values.empty()) {
diff --git a/src/parser/transform/statement/transform_pragma.cpp b/src/parser/transform/statement/transform_pragma.cpp
index 9fa355f47eb..25e2737323f 100644
--- a/src/parser/transform/statement/transform_pragma.cpp
+++ b/src/parser/transform/statement/transform_pragma.cpp
@@ -17,13 +17,13 @@ unique_ptr<PragmaStatement> Transformer::TransformPragma(duckdb_libpgquery::PGNo
 	if (stmt->args) {
 		for (auto cell = stmt->args->head; cell != nullptr; cell = cell->next) {
 			auto node = reinterpret_cast<duckdb_libpgquery::PGNode *>(cell->data.ptr_value);
-			auto expr = TransformExpression(node);
+			auto expr = TransformExpression(node, 0);
 
 			if (expr->type == ExpressionType::COMPARE_EQUAL) {
 				auto &comp = (ComparisonExpression &)*expr;
 				info.named_parameters[comp.left->ToString()] = Value(comp.right->ToString());
 			} else if (node->type == duckdb_libpgquery::T_PGAConst) {
-				auto constant = TransformConstant((duckdb_libpgquery::PGAConst *)node);
+				auto constant = TransformConstant((duckdb_libpgquery::PGAConst *)node, 0);
 				info.parameters.push_back(((ConstantExpression &)*constant).value);
 			} else {
 				info.parameters.emplace_back(expr->ToString());
diff --git a/src/parser/transform/statement/transform_prepare.cpp b/src/parser/transform/statement/transform_prepare.cpp
index 01e2d31da64..ccacca626fd 100644
--- a/src/parser/transform/statement/transform_prepare.cpp
+++ b/src/parser/transform/statement/transform_prepare.cpp
@@ -28,7 +28,7 @@ unique_ptr<ExecuteStatement> Transformer::TransformExecute(duckdb_libpgquery::PG
 	auto result = make_unique<ExecuteStatement>();
 	result->name = string(stmt->name);
 
-	TransformExpressionList(stmt->params, result->values);
+	TransformExpressionList(stmt->params, result->values, 0);
 	for (auto &expr : result->values) {
 		if (!expr->IsScalar()) {
 			throw Exception("Only scalar parameters or NULL supported for EXECUTE");
diff --git a/src/parser/transform/statement/transform_select_node.cpp b/src/parser/transform/statement/transform_select_node.cpp
index d4c300a9fca..19ef233cd5e 100644
--- a/src/parser/transform/statement/transform_select_node.cpp
+++ b/src/parser/transform/statement/transform_select_node.cpp
@@ -40,7 +40,7 @@ unique_ptr<QueryNode> Transformer::TransformSelectNode(duckdb_libpgquery::PGSele
 			auto target = reinterpret_cast<duckdb_libpgquery::PGNode *>(stmt->distinctClause->head->data.ptr_value);
 			if (target) {
 				//  add the columns defined in the ON clause to the select list
-				if (!TransformExpressionList(stmt->distinctClause, modifier->distinct_on_targets)) {
+				if (!TransformExpressionList(stmt->distinctClause, modifier->distinct_on_targets, 0)) {
 					throw Exception("Failed to transform expression list from DISTINCT ON.");
 				}
 			}
@@ -58,18 +58,18 @@ unique_ptr<QueryNode> Transformer::TransformSelectNode(duckdb_libpgquery::PGSele
 				throw ParserException("SELECT clause without selection list");
 			}
 			// select list
-			if (!TransformExpressionList(stmt->targetList, result->select_list)) {
+			if (!TransformExpressionList(stmt->targetList, result->select_list, 0)) {
 				throw InternalException("Failed to transform expression list.");
 			}
 			result->from_table = TransformFrom(stmt->fromClause);
 		}
 
 		// where
-		result->where_clause = TransformExpression(stmt->whereClause);
+		result->where_clause = TransformExpression(stmt->whereClause, 0);
 		// group by
 		TransformGroupBy(stmt->groupClause, result->groups);
 		// having
-		result->having = TransformExpression(stmt->havingClause);
+		result->having = TransformExpression(stmt->havingClause, 0);
 		// sample
 		result->sample = TransformSampleOptions(stmt->sampleOptions);
 		break;
@@ -126,10 +126,10 @@ unique_ptr<QueryNode> Transformer::TransformSelectNode(duckdb_libpgquery::PGSele
 	if (stmt->limitCount || stmt->limitOffset) {
 		auto limit_modifier = make_unique<LimitModifier>();
 		if (stmt->limitCount) {
-			limit_modifier->limit = TransformExpression(stmt->limitCount);
+			limit_modifier->limit = TransformExpression(stmt->limitCount, 0);
 		}
 		if (stmt->limitOffset) {
-			limit_modifier->offset = TransformExpression(stmt->limitOffset);
+			limit_modifier->offset = TransformExpression(stmt->limitOffset, 0);
 		}
 		node->modifiers.push_back(move(limit_modifier));
 	}
diff --git a/src/parser/transform/statement/transform_set.cpp b/src/parser/transform/statement/transform_set.cpp
index 9f115f18582..cdd4b8b3807 100644
--- a/src/parser/transform/statement/transform_set.cpp
+++ b/src/parser/transform/statement/transform_set.cpp
@@ -19,7 +19,7 @@ unique_ptr<SetStatement> Transformer::TransformSet(duckdb_libpgquery::PGNode *no
 	D_ASSERT(stmt->args->head && stmt->args->head->data.ptr_value);
 	D_ASSERT(((duckdb_libpgquery::PGNode *)stmt->args->head->data.ptr_value)->type == duckdb_libpgquery::T_PGAConst);
 
-	auto value = TransformValue(((duckdb_libpgquery::PGAConst *)stmt->args->head->data.ptr_value)->val)->value;
+	auto value = TransformValue(((duckdb_libpgquery::PGAConst *)stmt->args->head->data.ptr_value)->val, 0)->value;
 
 	return make_unique<SetStatement>(name, value);
 }
diff --git a/src/parser/transform/statement/transform_update.cpp b/src/parser/transform/statement/transform_update.cpp
index d373a33be42..78425258ac9 100644
--- a/src/parser/transform/statement/transform_update.cpp
+++ b/src/parser/transform/statement/transform_update.cpp
@@ -18,10 +18,10 @@ unique_ptr<UpdateStatement> Transformer::TransformUpdate(duckdb_libpgquery::PGNo
 	for (auto cell = root->head; cell != nullptr; cell = cell->next) {
 		auto target = (duckdb_libpgquery::PGResTarget *)(cell->data.ptr_value);
 		result->columns.emplace_back(target->name);
-		result->expressions.push_back(TransformExpression(target->val));
+		result->expressions.push_back(TransformExpression(target->val, 0));
 	}
 
-	result->condition = TransformExpression(stmt->whereClause);
+	result->condition = TransformExpression(stmt->whereClause, 0);
 	return result;
 }
 
diff --git a/src/parser/transform/tableref/transform_join.cpp b/src/parser/transform/tableref/transform_join.cpp
index 2e2b185f143..1056555190a 100644
--- a/src/parser/transform/tableref/transform_join.cpp
+++ b/src/parser/transform/tableref/transform_join.cpp
@@ -57,7 +57,7 @@ unique_ptr<TableRef> Transformer::TransformJoin(duckdb_libpgquery::PGJoinExpr *r
 		cross->right = move(result->right);
 		return move(cross);
 	}
-	result->condition = TransformExpression(root->quals);
+	result->condition = TransformExpression(root->quals, 0);
 	return move(result);
 }
 
diff --git a/src/parser/transform/tableref/transform_table_function.cpp b/src/parser/transform/tableref/transform_table_function.cpp
index 22063b537dc..bd5c6e276bb 100644
--- a/src/parser/transform/tableref/transform_table_function.cpp
+++ b/src/parser/transform/tableref/transform_table_function.cpp
@@ -29,7 +29,7 @@ unique_ptr<TableRef> Transformer::TransformRangeFunction(duckdb_libpgquery::PGRa
 	auto func_call = (duckdb_libpgquery::PGFuncCall *)call_tree;
 	// transform the function call
 	auto result = make_unique<TableFunctionRef>();
-	result->function = TransformFuncCall(func_call);
+	result->function = TransformFuncCall(func_call, 0);
 	result->alias = TransformAlias(root->alias, result->column_name_alias);
 	result->query_location = func_call->location;
 	if (root->sample) {

From c0b07fb4f326999b6a055e8c04d7ab549348eda2 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Hannes=20M=C3=BChleisen?= <hannes@muehleisen.org>
Date: Wed, 19 May 2021 15:05:51 +0200
Subject: [PATCH 6/8] fixing more ossfuzz parser issues

---
 .../transform/helpers/transform_typename.cpp    |  4 +++-
 .../tableref/transform_table_function.cpp       | 17 +++++++++++++----
 2 files changed, 16 insertions(+), 5 deletions(-)

diff --git a/src/parser/transform/helpers/transform_typename.cpp b/src/parser/transform/helpers/transform_typename.cpp
index 69ddafd5c03..2fef67a4490 100644
--- a/src/parser/transform/helpers/transform_typename.cpp
+++ b/src/parser/transform/helpers/transform_typename.cpp
@@ -13,7 +13,9 @@ LogicalType Transformer::TransformTypeName(duckdb_libpgquery::PGTypeName *type_n
 	LogicalType base_type = TransformStringToLogicalType(name);
 
 	if (base_type == LogicalTypeId::STRUCT) {
-		D_ASSERT(type_name->typmods && type_name->typmods->length > 0);
+		if (!type_name->typmods || type_name->typmods->length == 0) {
+			throw ParserException("Struct needs a name and entries");
+		}
 		child_list_t<LogicalType> children;
 		unordered_set<string> name_collision_set;
 
diff --git a/src/parser/transform/tableref/transform_table_function.cpp b/src/parser/transform/tableref/transform_table_function.cpp
index bd5c6e276bb..cc9f7b9762a 100644
--- a/src/parser/transform/tableref/transform_table_function.cpp
+++ b/src/parser/transform/tableref/transform_table_function.cpp
@@ -22,16 +22,25 @@ unique_ptr<TableRef> Transformer::TransformRangeFunction(duckdb_libpgquery::PGRa
 	auto call_tree = (duckdb_libpgquery::PGNode *)function_sublist->head->data.ptr_value;
 	auto coldef = function_sublist->head->next->data.ptr_value;
 
-	D_ASSERT(call_tree->type == duckdb_libpgquery::T_PGFuncCall);
 	if (coldef) {
 		throw NotImplementedException("Explicit column definition not supported yet");
 	}
-	auto func_call = (duckdb_libpgquery::PGFuncCall *)call_tree;
 	// transform the function call
 	auto result = make_unique<TableFunctionRef>();
-	result->function = TransformFuncCall(func_call, 0);
+	switch (call_tree->type) {
+	case duckdb_libpgquery::T_PGFuncCall: {
+		auto func_call = (duckdb_libpgquery::PGFuncCall *)call_tree;
+		result->function = TransformFuncCall(func_call, 0);
+		result->query_location = func_call->location;
+		break;
+	}
+	case duckdb_libpgquery::T_PGSQLValueFunction:
+		result->function = TransformSQLValueFunction((duckdb_libpgquery::PGSQLValueFunction *)call_tree, 0);
+		break;
+	default:
+		throw ParserException("Not a function call or value function");
+	}
 	result->alias = TransformAlias(root->alias, result->column_name_alias);
-	result->query_location = func_call->location;
 	if (root->sample) {
 		result->sample = TransformSampleOptions(root->sample);
 	}

From e4a9cebe860eb62f6971f5436a4cb3a4e908c946 Mon Sep 17 00:00:00 2001
From: Mark Raasveldt <mark.raasveldt@gmail.com>
Date: Mon, 31 May 2021 13:47:07 +0200
Subject: [PATCH 7/8] Use relative path to file for ossfuzz tests (similar to
 other tests)

---
 test/ossfuzz/test_ossfuzz.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/test/ossfuzz/test_ossfuzz.cpp b/test/ossfuzz/test_ossfuzz.cpp
index 7ddb74548c0..d5fc4505cd0 100644
--- a/test/ossfuzz/test_ossfuzz.cpp
+++ b/test/ossfuzz/test_ossfuzz.cpp
@@ -31,7 +31,7 @@ struct RegisterOssfuzzTests {
 	RegisterOssfuzzTests() {
 		// register a separate test for each file in the QUERY_DIRECTORY
 		fs.ListFiles(QUERY_DIRECTORY,
-		             [&](const string &path, bool) { REGISTER_TEST_CASE(test_runner, path, "[ossfuzz][.]"); });
+		             [&](const string &path, bool) { REGISTER_TEST_CASE(test_runner, string(QUERY_DIRECTORY) + "/" + path, "[ossfuzz][.]"); });
 	}
 };
 RegisterOssfuzzTests register_ossfuzz_test;

From c4c0aa1975fb68380a43b3237e56cd7311937b71 Mon Sep 17 00:00:00 2001
From: Mark Raasveldt <mark.raasveldt@gmail.com>
Date: Tue, 1 Jun 2021 08:50:05 +0200
Subject: [PATCH 8/8] Format fix

---
 test/ossfuzz/test_ossfuzz.cpp | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/test/ossfuzz/test_ossfuzz.cpp b/test/ossfuzz/test_ossfuzz.cpp
index d5fc4505cd0..6b364be17e6 100644
--- a/test/ossfuzz/test_ossfuzz.cpp
+++ b/test/ossfuzz/test_ossfuzz.cpp
@@ -30,8 +30,9 @@ static void test_runner() {
 struct RegisterOssfuzzTests {
 	RegisterOssfuzzTests() {
 		// register a separate test for each file in the QUERY_DIRECTORY
-		fs.ListFiles(QUERY_DIRECTORY,
-		             [&](const string &path, bool) { REGISTER_TEST_CASE(test_runner, string(QUERY_DIRECTORY) + "/" + path, "[ossfuzz][.]"); });
+		fs.ListFiles(QUERY_DIRECTORY, [&](const string &path, bool) {
+			REGISTER_TEST_CASE(test_runner, string(QUERY_DIRECTORY) + "/" + path, "[ossfuzz][.]");
+		});
 	}
 };
 RegisterOssfuzzTests register_ossfuzz_test;
