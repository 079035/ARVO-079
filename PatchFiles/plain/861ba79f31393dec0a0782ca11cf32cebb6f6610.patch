From 861ba79f31393dec0a0782ca11cf32cebb6f6610 Mon Sep 17 00:00:00 2001
From: Aleix Alcacer <aleixalcacer@gmail.com>
Date: Thu, 18 Feb 2021 12:26:27 +0100
Subject: [PATCH] Serialized blocksize into frame header

---
 README_CFRAME_FORMAT.rst | 29 +++++++++----------
 blosc/frame.c            | 60 ++++++++++++++++++++++++++++++----------
 blosc/frame.h            | 17 ++++++------
 tests/test_frame.c       | 35 ++++++++++++++---------
 4 files changed, 92 insertions(+), 49 deletions(-)

diff --git a/README_CFRAME_FORMAT.rst b/README_CFRAME_FORMAT.rst
index f671ae3e0..9ff9cc3c5 100644
--- a/README_CFRAME_FORMAT.rst
+++ b/README_CFRAME_FORMAT.rst
@@ -32,7 +32,7 @@ The header contains information needed to decompress the Blosc chunks contained
       |   |       |                           +--[msgpack] int32
       |   |       +---magic number, currently "b2frame"
       |   +------[msgpack] str with 8 elements
-      +---[msgpack] fixarray with X=0xD (13) elements
+      +---[msgpack] fixarray with X=0xE (14) elements
 
     |-18|-19|-1A|-1B|-1C|-1D|-1E|-1F|-20|-21|-22|-23|-24|-25|-26|-27|-28|-29|-2A|-2B|-2C|-2D|-2E|
     | a4|_f0|_f1|_f2|_f3| d3| uncompressed_size             | d3| compressed_size               |
@@ -46,24 +46,25 @@ The header contains information needed to decompress the Blosc chunks contained
       |   +------general_flags (see below)
       +---[msgpack] str with 4 elements (flags)
 
-    |-2F|-30|-31|-32|-33|-34|-35|-36|-37|-38|-39|-3A|-3B|-3C|-3D|-3E|-3F|
-    | d2| type_size     | d2| chunk_size    | d1| tcomp | d1|tdecomp| cX|
-    |---|---------------|---|---------------|---|-------|---|-------|---|
-      ^                   ^                   ^     ^     ^     ^     ^
-      |                   |                   |     |     |     |     +--[msgpack] bool for has_vlmetalayers
-      |                   |                   |     |     |     +--number of threads for decompression
-      |                   |                   |     |     +-- [msgpack] int16
-      |                   |                   |     +--number of threads for compression
-      |                   |                   +---[msgpack] int16
-      |                   +------[msgpack] int32
-      +---[msgpack] int32
+    |-2F|-30|-31|-32|-33|-34|-35|-36|-37|-38|-39|-3A|-3B|-3C|-3D|-3E|-3F|-40|-41|-42|-43|-44|
+    | d2| type_size     | d2| block_size    | d2| chunk_size    | d1| tcomp | d1|tdecomp| cX|
+    |---|---------------|---|---------------|---|---------------|---|-------|---|-------|---|
+      ^                   ^                   ^                   ^     ^     ^     ^     ^
+      |                   |                   |                   |     |     |     |     +-- [msgpack] bool for has_vlmetalayers
+      |                   |                   |                   |     |     |     +-- number of threads for decompression
+      |                   |                   |                   |     |     +-- [msgpack] int16
+      |                   |                   |                   |     +-- number of threads for compression
+      |                   |                   |                   +-- [msgpack] int16
+      |                   |                   +-- [msgpack] int32
+      |                   +-- [msgpack] int32
+      +-- [msgpack] int32
 
 The filter pipeline is stored next in the header. It contains 8 slots, one for each filter that can be applied. For
 each slot there is a byte used to store the filter code in `filter_codes` and an associated byte used to store any
 possible filter meta-info in `filter_meta`::
 
 
-    |-40|-41|-42|-43|-44|-45|-46|-47|-48|-49|-4A|-4B|-4C|-4D|-4E|-4F|-50|-51|
+    |-45|-46|-47|-48|-49|-4A|-4B|-4C|-4D|-4E|-4F|-50|-51|-52|-53|-54|-55|-56|
     | d2| X | filter_codes                  | filter_meta                   |
     |---|---|-------------------------------|-------------------------------|
       ^   ^
@@ -75,7 +76,7 @@ At the end of the header *metalayers* are stored which contain meta-information
 frame. It is up to the user to store whatever data they want with the only (strong) suggestion that they be stored
 using the msgpack format. Here is the format for the *metalayers*::
 
-    |-52|-53|-54|-55|-56|-57|-58|====================|---|---|---|================|
+    |-57|-58|-59|-5A|-5B|-5C|-5D|====================|---|---|---|================|
     | 93| cd| idx   | de| size  | meta keys/values   | dc|  idy  | meta content   |
     |---|---|-------|---|---|---|====================|---|-------|================|
      ^   ^      ^     ^     ^             ^            ^     ^            ^
diff --git a/blosc/frame.c b/blosc/frame.c
index 077e398bb..173f21674 100644
--- a/blosc/frame.c
+++ b/blosc/frame.c
@@ -170,7 +170,7 @@ void *new_header_frame(blosc2_schunk *schunk, blosc2_frame_s *frame) {
 
   // The msgpack header starts here
   *h2p = 0x90;  // fixarray...
-  *h2p += 13;   // ...with 13 elements
+  *h2p += 14;   // ...with 13 elements
   h2p += 1;
 
   // Magic number
@@ -267,6 +267,16 @@ void *new_header_frame(blosc2_schunk *schunk, blosc2_frame_s *frame) {
     return NULL;
   }
 
+  // Block size
+  *h2p = 0xd2;  // int32
+  h2p += 1;
+  int32_t blocksize = schunk->blocksize;
+  big_store(h2p, &blocksize, sizeof(blocksize));
+  h2p += 4;
+  if (h2p - h2 >= FRAME_HEADER_MINLEN) {
+    return NULL;
+  }
+
   // Chunk size
   *h2p = 0xd2;  // int32
   h2p += 1;
@@ -434,8 +444,9 @@ void *new_header_frame(blosc2_schunk *schunk, blosc2_frame_s *frame) {
 
 
 int get_header_info(blosc2_frame_s *frame, int32_t *header_len, int64_t *frame_len, int64_t *nbytes,
-                    int64_t *cbytes, int32_t *chunksize, int32_t *nchunks, int32_t *typesize,
-                    uint8_t *compcode, uint8_t *clevel, uint8_t *filters, uint8_t *filters_meta) {
+                    int64_t *cbytes, int32_t *blocksize, int32_t *chunksize, int32_t *nchunks,
+                    int32_t *typesize, uint8_t *compcode, uint8_t *clevel, uint8_t *filters,
+                    uint8_t *filters_meta) {
   uint8_t* framep = frame->cframe;
   uint8_t header[FRAME_HEADER_MINLEN];
 
@@ -480,6 +491,7 @@ int get_header_info(blosc2_frame_s *frame, int32_t *header_len, int64_t *frame_l
   big_store(frame_len, framep + FRAME_LEN, sizeof(*frame_len));
   big_store(nbytes, framep + FRAME_NBYTES, sizeof(*nbytes));
   big_store(cbytes, framep + FRAME_CBYTES, sizeof(*cbytes));
+  big_store(blocksize, framep + FRAME_BLOCKSIZE, sizeof(*blocksize));
   big_store(chunksize, framep + FRAME_CHUNKSIZE, sizeof(*chunksize));
   if (typesize != NULL) {
     big_store(typesize, framep + FRAME_TYPESIZE, sizeof(*typesize));
@@ -719,9 +731,11 @@ int frame_update_trailer(blosc2_frame_s* frame, blosc2_schunk* schunk) {
   int64_t frame_len;
   int64_t nbytes;
   int64_t cbytes;
+  int32_t blocksize;
   int32_t chunksize;
   int32_t nchunks;
-  int ret = get_header_info(frame, &header_len, &frame_len, &nbytes, &cbytes, &chunksize, &nchunks,
+  int ret = get_header_info(frame, &header_len, &frame_len, &nbytes, &cbytes,
+                            &blocksize, &chunksize, &nchunks,
                             NULL, NULL, NULL, NULL, NULL);
   if (ret < 0) {
     BLOSC_TRACE_ERROR("Unable to get meta info from frame.");
@@ -1283,9 +1297,11 @@ int frame_get_metalayers(blosc2_frame_s* frame, blosc2_schunk* schunk) {
   int64_t frame_len;
   int64_t nbytes;
   int64_t cbytes;
+  int32_t blocksize;
   int32_t chunksize;
   int32_t nchunks;
-  int ret = get_header_info(frame, &header_len, &frame_len, &nbytes, &cbytes, &chunksize, &nchunks,
+  int ret = get_header_info(frame, &header_len, &frame_len, &nbytes, &cbytes,
+                            &blocksize, &chunksize, &nchunks,
                             NULL, NULL, NULL, NULL, NULL);
   if (ret < 0) {
     BLOSC_TRACE_ERROR("Unable to get the header info from frame.");
@@ -1444,9 +1460,11 @@ int frame_get_vlmetalayers(blosc2_frame_s* frame, blosc2_schunk* schunk) {
   int64_t frame_len;
   int64_t nbytes;
   int64_t cbytes;
+  int32_t blocksize;
   int32_t chunksize;
   int32_t nchunks;
-  int ret = get_header_info(frame, &header_len, &frame_len, &nbytes, &cbytes, &chunksize, &nchunks,
+  int ret = get_header_info(frame, &header_len, &frame_len, &nbytes, &cbytes,
+                            &blocksize, &chunksize, &nchunks,
                             NULL, NULL, NULL, NULL, NULL);
   if (ret < 0) {
     BLOSC_TRACE_ERROR("Unable to get the trailer info from frame.");
@@ -1541,9 +1559,11 @@ blosc2_schunk* frame_to_schunk(blosc2_frame_s* frame, bool copy) {
 
   blosc2_schunk* schunk = calloc(1, sizeof(blosc2_schunk));
   schunk->frame = (blosc2_frame*)frame;
-  int ret = get_header_info(frame, &header_len, &frame_len, &schunk->nbytes, &schunk->cbytes,
+  int ret = get_header_info(frame, &header_len, &frame_len, &schunk->nbytes,
+                            &schunk->cbytes, &schunk->blocksize,
                             &schunk->chunksize, &schunk->nchunks, &schunk->typesize,
-                            &schunk->compcode, &schunk->clevel, schunk->filters, schunk->filters_meta);
+                            &schunk->compcode, &schunk->clevel, schunk->filters,
+                            schunk->filters_meta);
   if (ret < 0) {
     BLOSC_TRACE_ERROR("Unable to get meta info from frame.");
     blosc2_schunk_free(schunk);
@@ -1804,6 +1824,7 @@ int frame_get_chunk(blosc2_frame_s *frame, int nchunk, uint8_t **chunk, bool *ne
   int64_t frame_len;
   int64_t nbytes;
   int64_t cbytes;
+  int32_t blocksize;
   int32_t chunksize;
   int32_t nchunks;
   int32_t typesize;
@@ -1812,7 +1833,8 @@ int frame_get_chunk(blosc2_frame_s *frame, int nchunk, uint8_t **chunk, bool *ne
 
   *chunk = NULL;
   *needs_free = false;
-  int ret = get_header_info(frame, &header_len, &frame_len, &nbytes, &cbytes, &chunksize, &nchunks,
+  int ret = get_header_info(frame, &header_len, &frame_len, &nbytes, &cbytes,
+                            &blocksize, &chunksize, &nchunks,
                             &typesize, NULL, NULL, NULL, NULL);
   if (ret < 0) {
     BLOSC_TRACE_ERROR("Unable to get meta info from frame.");
@@ -1892,6 +1914,7 @@ int frame_get_lazychunk(blosc2_frame_s *frame, int nchunk, uint8_t **chunk, bool
   int64_t frame_len;
   int64_t nbytes;
   int64_t cbytes;
+  int32_t blocksize;
   int32_t chunksize;
   int32_t nchunks;
   int32_t typesize;
@@ -1900,7 +1923,8 @@ int frame_get_lazychunk(blosc2_frame_s *frame, int nchunk, uint8_t **chunk, bool
 
   *chunk = NULL;
   *needs_free = false;
-  int ret = get_header_info(frame, &header_len, &frame_len, &nbytes, &cbytes, &chunksize, &nchunks,
+  int ret = get_header_info(frame, &header_len, &frame_len, &nbytes, &cbytes,
+                            &blocksize, &chunksize, &nchunks,
                             &typesize, NULL, NULL, NULL, NULL);
   if (ret < 0) {
     BLOSC_TRACE_ERROR("Unable to get meta info from frame.");
@@ -2037,9 +2061,11 @@ void* frame_append_chunk(blosc2_frame_s* frame, void* chunk, blosc2_schunk* schu
   int64_t frame_len;
   int64_t nbytes;
   int64_t cbytes;
+  int32_t blocksize;
   int32_t chunksize;
   int32_t nchunks;
-  int rc = get_header_info(frame, &header_len, &frame_len, &nbytes, &cbytes, &chunksize, &nchunks,
+  int rc = get_header_info(frame, &header_len, &frame_len, &nbytes, &cbytes, &blocksize, &chunksize,
+                           &nchunks,
                            NULL, NULL, NULL, NULL, NULL);
   if (rc < 0) {
     BLOSC_TRACE_ERROR("Unable to get meta info from frame.");
@@ -2231,9 +2257,11 @@ void* frame_insert_chunk(blosc2_frame_s* frame, int nchunk, void* chunk, blosc2_
   int64_t frame_len;
   int64_t nbytes;
   int64_t cbytes;
+  int32_t blocksize;
   int32_t chunksize;
   int32_t nchunks;
-  int rc = get_header_info(frame, &header_len, &frame_len, &nbytes, &cbytes, &chunksize, &nchunks,
+  int rc = get_header_info(frame, &header_len, &frame_len, &nbytes, &cbytes,
+                           &blocksize, &chunksize,  &nchunks,
                            NULL, NULL, NULL, NULL, NULL);
   if (rc < 0) {
     BLOSC_TRACE_ERROR("Unable to get meta info from frame.");
@@ -2403,9 +2431,11 @@ void* frame_update_chunk(blosc2_frame_s* frame, int nchunk, void* chunk, blosc2_
   int64_t frame_len;
   int64_t nbytes;
   int64_t cbytes;
+  int32_t blocksize;
   int32_t chunksize;
   int32_t nchunks;
-  int rc = get_header_info(frame, &header_len, &frame_len, &nbytes, &cbytes, &chunksize, &nchunks,
+  int rc = get_header_info(frame, &header_len, &frame_len, &nbytes, &cbytes,
+                           &blocksize, &chunksize, &nchunks,
                            NULL, NULL, NULL, NULL, NULL);
   if (rc < 0) {
     BLOSC_TRACE_ERROR("Unable to get meta info from frame.");
@@ -2568,9 +2598,11 @@ int frame_reorder_offsets(blosc2_frame_s* frame, const int* offsets_order, blosc
   int64_t frame_len;
   int64_t nbytes;
   int64_t cbytes;
+  int32_t blocksize;
   int32_t chunksize;
   int32_t nchunks;
-  int ret = get_header_info(frame, &header_len, &frame_len, &nbytes, &cbytes, &chunksize, &nchunks,
+  int ret = get_header_info(frame, &header_len, &frame_len, &nbytes, &cbytes,
+                            &blocksize, &chunksize,  &nchunks,
                             NULL, NULL, NULL, NULL, NULL);
   if (ret < 0) {
       BLOSC_TRACE_ERROR("Cannot get the header info for the frame.");
diff --git a/blosc/frame.h b/blosc/frame.h
index 3d850809c..729a58023 100644
--- a/blosc/frame.h
+++ b/blosc/frame.h
@@ -27,14 +27,15 @@
 #define FRAME_NBYTES (FRAME_FLAGS + 4 + 1)  // 30
 #define FRAME_CBYTES (FRAME_NBYTES + 8 + 1)  // 39
 #define FRAME_TYPESIZE (FRAME_CBYTES + 8 + 1) // 48
-#define FRAME_CHUNKSIZE (FRAME_TYPESIZE + 4 + 1)  // 53
-#define FRAME_NTHREADS_C (FRAME_CHUNKSIZE + 4 + 1)  // 58
-#define FRAME_NTHREADS_D (FRAME_NTHREADS_C + 2 + 1)  // 61
-#define FRAME_HAS_VLMETALAYERS (FRAME_NTHREADS_D + 2)  // 63
-#define FRAME_FILTER_PIPELINE (FRAME_HAS_VLMETALAYERS + 1 + 1) // 65
-#define FRAME_HEADER_MINLEN (FRAME_FILTER_PIPELINE + 1 + 16)  // 82 <- minimum length
-#define FRAME_METALAYERS (FRAME_HEADER_MINLEN)  // 82
-#define FRAME_IDX_SIZE (FRAME_METALAYERS + 1 + 1)  // 84
+#define FRAME_BLOCKSIZE (FRAME_TYPESIZE + 4 + 1)  // 53
+#define FRAME_CHUNKSIZE (FRAME_BLOCKSIZE + 4 + 1)  // 58
+#define FRAME_NTHREADS_C (FRAME_CHUNKSIZE + 4 + 1)  // 63
+#define FRAME_NTHREADS_D (FRAME_NTHREADS_C + 2 + 1)  // 66
+#define FRAME_HAS_VLMETALAYERS (FRAME_NTHREADS_D + 2)  // 68
+#define FRAME_FILTER_PIPELINE (FRAME_HAS_VLMETALAYERS + 1 + 1) // 70
+#define FRAME_HEADER_MINLEN (FRAME_FILTER_PIPELINE + 1 + 16)  // 87 <- minimum length
+#define FRAME_METALAYERS (FRAME_HEADER_MINLEN)  // 87
+#define FRAME_IDX_SIZE (FRAME_METALAYERS + 1 + 1)  // 89
 
 #define FRAME_FILTER_PIPELINE_MAX (8)  // the maximum number of filters that can be stored in header
 
diff --git a/tests/test_frame.c b/tests/test_frame.c
index 7466f676a..0fe726925 100644
--- a/tests/test_frame.c
+++ b/tests/test_frame.c
@@ -17,13 +17,15 @@
 #define snprintf _snprintf
 #endif
 
-#define CHUNKSIZE (20 * 1000)
+#define CHUNKSIZE (40 * 1000)
 #define NTHREADS (4)
 
 /* Global vars */
 int nchunks_[] = {0, 1, 2, 5};
 int tests_run = 0;
 int nchunks;
+int32_t blocksize_[] = {0, 20 * 1000};
+int32_t blocksize;
 bool multithread;
 bool splits;
 bool free_new;
@@ -62,6 +64,8 @@ static char* test_frame(void) {
     // Only BLOSCLZ is doing that.
     cparams.compcode = BLOSC_BLOSCLZ;
   }
+  cparams.blocksize = blocksize;
+
 #if defined(HAVE_LZ4)
   else {
     cparams.compcode = BLOSC_LZ4;
@@ -107,6 +111,8 @@ static char* test_frame(void) {
                   schunk->storage->cparams->clevel == BLOSC2_CPARAMS_DEFAULTS.clevel);
         mu_assert("dparams are not recovered correctly",
                   schunk->storage->dparams->nthreads == BLOSC2_DPARAMS_DEFAULTS.nthreads);
+        mu_assert("blocksize is not recovered correctly",
+                  schunk->storage->cparams->blocksize == cparams.blocksize);
       } else {
         // Dump the schunk into a buffer and regenerate it from there
         int64_t buffer_len = blosc2_schunk_to_buffer(schunk, &buffer, &buffer_needs_free);
@@ -273,18 +279,21 @@ static char *all_tests(void) {
             for (int ifilter_pipeline = 0; ifilter_pipeline < 2; ifilter_pipeline++) {
               for (int imetalayers = 0; imetalayers < 2; imetalayers++) {
                 for (int ivlmetalayers = 0; ivlmetalayers < 2; ivlmetalayers++) {
-                  splits = (bool) isplits;
-                  multithread = (bool) imultithread;
-                  sparse_schunk = (bool) isparse_schunk;
-                  free_new = (bool) ifree_new;
-                  filter_pipeline = (bool) ifilter_pipeline;
-                  metalayers = (bool) imetalayers;
-                  vlmetalayers = (bool) ivlmetalayers;
-                  fname = NULL;
-                  mu_run_test(test_frame);
-                  snprintf(buf, sizeof(buf), "test_frame_nc%d.b2frame", nchunks);
-                  fname = buf;
-                  mu_run_test(test_frame);
+                  for (int iblocksize = 0; iblocksize < sizeof(blocksize_) / sizeof(int32_t); ++iblocksize) {
+                        blocksize = blocksize_[iblocksize];
+                        splits = (bool) isplits;
+                        multithread = (bool) imultithread;
+                        sparse_schunk = (bool) isparse_schunk;
+                        free_new = (bool) ifree_new;
+                        filter_pipeline = (bool) ifilter_pipeline;
+                        metalayers = (bool) imetalayers;
+                        vlmetalayers = (bool) ivlmetalayers;
+                        fname = NULL;
+                        mu_run_test(test_frame);
+                        snprintf(buf, sizeof(buf), "test_frame_nc%d.b2frame", nchunks);
+                        fname = buf;
+                        mu_run_test(test_frame);
+                    }
                 }
               }
             }
