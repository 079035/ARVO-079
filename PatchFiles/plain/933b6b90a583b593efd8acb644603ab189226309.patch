commit 933b6b90a583b593efd8acb644603ab189226309
Author: James Zern <jzern@google.com>
Date:   Wed Jul 6 15:06:51 2022 -0700

    Revert "Fix bug with smaller width bigger size"
    
    This reverts commit 5b530fc962bcb8a51bbf03f5fbc2912f21b86e70.
    
    This fixes memory related fuzzer failures in the decoder.
    
    Bug: webm:1642
    Bug: oss-fuzz:48609
    Bug: oss-fuzz:48629
    Bug: oss-fuzz:48632
    Bug: oss-fuzz:48638
    Bug: oss-fuzz:48639
    Bug: oss-fuzz:48651
    Bug: oss-fuzz:48657
    Bug: oss-fuzz:48659
    Bug: oss-fuzz:48660
    Bug: oss-fuzz:48661
    Bug: oss-fuzz:48680
    Bug: oss-fuzz:48686
    Bug: oss-fuzz:48697
    Bug: oss-fuzz:48706
    Bug: oss-fuzz:48712
    Bug: oss-fuzz:48717
    Bug: oss-fuzz:48728
    Bug: oss-fuzz:48732
    Bug: oss-fuzz:48780
    Bug: oss-fuzz:48781
    Bug: oss-fuzz:48782
    Bug: oss-fuzz:48785
    Change-Id: I67a8539a3083f00eec1164fef5c6a8bc209f91fc

diff --git a/test/resize_test.cc b/test/resize_test.cc
index 1e5e166f7..212ff4697 100644
--- a/test/resize_test.cc
+++ b/test/resize_test.cc
@@ -101,8 +101,11 @@ void ScaleForFrameNumber(unsigned int frame, unsigned int initial_w,
       *h = initial_h;
       return;
     }
-    *w = initial_w * 7 / 10;
-    *h = initial_h * 16 / 10;
+    if (frame < 100) {
+      *w = initial_w * 7 / 10;
+      *h = initial_h * 16 / 10;
+      return;
+    }
     return;
   }
   if (frame < 10) {
@@ -575,7 +578,9 @@ TEST_P(ResizeRealtimeTest, TestExternalResizeWorks) {
   }
 }
 
-TEST_P(ResizeRealtimeTest, TestExternalResizeSmallerWidthBiggerSize) {
+// TODO(https://crbug.com/webm/1642): This causes a segfault in
+// init_encode_frame_mb_context().
+TEST_P(ResizeRealtimeTest, DISABLED_TestExternalResizeSmallerWidthBiggerSize) {
   ResizingVideoSource video;
   video.flag_codec_ = true;
   video.smaller_width_larger_size_ = true;
diff --git a/vp9/common/vp9_alloccommon.c b/vp9/common/vp9_alloccommon.c
index c27fe6477..faad657a0 100644
--- a/vp9/common/vp9_alloccommon.c
+++ b/vp9/common/vp9_alloccommon.c
@@ -132,6 +132,15 @@ int vp9_alloc_context_buffers(VP9_COMMON *cm, int width, int height) {
   if (cm->mi_alloc_size < new_mi_size) {
     cm->free_mi(cm);
     if (cm->alloc_mi(cm, new_mi_size)) goto fail;
+  }
+
+  if (cm->seg_map_alloc_size < cm->mi_rows * cm->mi_cols) {
+    // Create the segmentation map structure and set to 0.
+    free_seg_map(cm);
+    if (alloc_seg_map(cm, cm->mi_rows * cm->mi_cols)) goto fail;
+  }
+
+  if (cm->above_context_alloc_cols < cm->mi_cols) {
     vpx_free(cm->above_context);
     cm->above_context = (ENTROPY_CONTEXT *)vpx_calloc(
         2 * mi_cols_aligned_to_sb(cm->mi_cols) * MAX_MB_PLANE,
@@ -145,12 +154,6 @@ int vp9_alloc_context_buffers(VP9_COMMON *cm, int width, int height) {
     cm->above_context_alloc_cols = cm->mi_cols;
   }
 
-  if (cm->seg_map_alloc_size < cm->mi_rows * cm->mi_cols) {
-    // Create the segmentation map structure and set to 0.
-    free_seg_map(cm);
-    if (alloc_seg_map(cm, cm->mi_rows * cm->mi_cols)) goto fail;
-  }
-
   if (vp9_alloc_loop_filter(cm)) goto fail;
 
   return 0;
diff --git a/vp9/encoder/vp9_encoder.c b/vp9/encoder/vp9_encoder.c
index d58e8a312..371779e77 100644
--- a/vp9/encoder/vp9_encoder.c
+++ b/vp9/encoder/vp9_encoder.c
@@ -1972,17 +1972,6 @@ static void alloc_copy_partition_data(VP9_COMP *cpi) {
   }
 }
 
-static void free_copy_partition_data(VP9_COMP *cpi) {
-  vpx_free(cpi->prev_partition);
-  cpi->prev_partition = NULL;
-  vpx_free(cpi->prev_segment_id);
-  cpi->prev_segment_id = NULL;
-  vpx_free(cpi->prev_variance_low);
-  cpi->prev_variance_low = NULL;
-  vpx_free(cpi->copied_frame_cnt);
-  cpi->copied_frame_cnt = NULL;
-}
-
 void vp9_change_config(struct VP9_COMP *cpi, const VP9EncoderConfig *oxcf) {
   VP9_COMMON *const cm = &cpi->common;
   RATE_CONTROL *const rc = &cpi->rc;
@@ -2062,8 +2051,6 @@ void vp9_change_config(struct VP9_COMP *cpi, const VP9EncoderConfig *oxcf) {
     new_mi_size = cm->mi_stride * calc_mi_size(cm->mi_rows);
     if (cm->mi_alloc_size < new_mi_size) {
       vp9_free_context_buffers(cm);
-      vp9_free_pc_tree(&cpi->td);
-      vpx_free(cpi->mbmi_ext_base);
       alloc_compressor_data(cpi);
       realloc_segmentation_maps(cpi);
       cpi->initial_width = cpi->initial_height = 0;
@@ -2082,18 +2069,8 @@ void vp9_change_config(struct VP9_COMP *cpi, const VP9EncoderConfig *oxcf) {
     update_frame_size(cpi);
 
   if (last_w != cpi->oxcf.width || last_h != cpi->oxcf.height) {
-    vpx_free(cpi->consec_zero_mv);
-    CHECK_MEM_ERROR(
-        cm, cpi->consec_zero_mv,
-        vpx_calloc(cm->mi_rows * cm->mi_cols, sizeof(*cpi->consec_zero_mv)));
-
-    vpx_free(cpi->skin_map);
-    CHECK_MEM_ERROR(
-        cm, cpi->skin_map,
-        vpx_calloc(cm->mi_rows * cm->mi_cols, sizeof(cpi->skin_map[0])));
-
-    free_copy_partition_data(cpi);
-    alloc_copy_partition_data(cpi);
+    memset(cpi->consec_zero_mv, 0,
+           cm->mi_rows * cm->mi_cols * sizeof(*cpi->consec_zero_mv));
     if (cpi->oxcf.aq_mode == CYCLIC_REFRESH_AQ)
       vp9_cyclic_refresh_reset_resize(cpi);
     rc->rc_1_frame = 0;
