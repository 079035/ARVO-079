From 9392fc7117dd5240c76d8ab81d84b482bc968339 Mon Sep 17 00:00:00 2001
From: Riccardo Schirone <ret2libc@users.noreply.github.com>
Date: Thu, 30 May 2019 15:45:52 +0200
Subject: [PATCH] Fix some RBin file format crashes ##bin

* Use st64 and ut64 instead of size_t
* Fix mach0 parsing issue
* Fix OOB write in PE parsing
* Fix crash in bin_xbe parser
* Fix crash in bin_java
Fixes clusterfuzz-testcase-minimized-ia_fuzz-5740477602594816.dms
---
 libr/bin/format/mach0/mach0.c |  5 ++-
 libr/bin/format/pe/pe.c       |  2 +-
 libr/bin/format/xbe/xbe.h     |  2 +-
 libr/bin/p/bin_java.c         | 56 +++---------------------
 libr/bin/p/bin_xbe.c          | 72 +++++++++++++++----------------
 libr/include/r_util/r_buf.h   | 46 ++++++++++----------
 libr/util/buf.c               | 80 +++++++++++++++++------------------
 libr/util/buf_bytes.c         |  8 ++--
 libr/util/buf_file.c          |  6 +--
 libr/util/buf_io.c            |  6 +--
 libr/util/buf_ref.c           |  6 +--
 libr/util/buf_sparse.c        | 26 ++++++------
 12 files changed, 136 insertions(+), 179 deletions(-)

diff --git a/libr/bin/format/mach0/mach0.c b/libr/bin/format/mach0/mach0.c
index 34a1794e35d93..9b11f96eda1dd 100644
--- a/libr/bin/format/mach0/mach0.c
+++ b/libr/bin/format/mach0/mach0.c
@@ -2097,7 +2097,10 @@ RSkipList *MACH0_(get_relocs)(struct MACH0_(obj_t) *bin) {
 			bin->dyld_info->lazy_bind_off + lazy_size > bin->size) {
 			return NULL;
 		}
-		if (bin->dyld_info->bind_off+bind_size+lazy_size > bin->size) {
+		if (bin->dyld_info->bind_off + bind_size + lazy_size > bin->size) {
+			return NULL;
+		}
+		if (bin->dyld_info->weak_bind_off + weak_size > bin->size) {
 			return NULL;
 		}
 		ut64 amount = bind_size + lazy_size + weak_size;
diff --git a/libr/bin/format/pe/pe.c b/libr/bin/format/pe/pe.c
index 6d695d7c1071b..0a525f413e5e0 100644
--- a/libr/bin/format/pe/pe.c
+++ b/libr/bin/format/pe/pe.c
@@ -2468,7 +2468,7 @@ static void bin_pe_get_certificate(struct PE_ (r_bin_pe_obj_t) * bin) {
 	bin->cms = NULL;
 	size = bin->data_directory[PE_IMAGE_DIRECTORY_ENTRY_SECURITY].Size;
 	vaddr = bin->data_directory[PE_IMAGE_DIRECTORY_ENTRY_SECURITY].VirtualAddress;
-	if (size == 0) {
+	if (size < 8) {
 		return;
 	}
 	data = calloc (1, size);
diff --git a/libr/bin/format/xbe/xbe.h b/libr/bin/format/xbe/xbe.h
index 71142c0b89cd4..7bb35ae942b21 100644
--- a/libr/bin/format/xbe/xbe.h
+++ b/libr/bin/format/xbe/xbe.h
@@ -65,7 +65,7 @@ typedef struct  {
 }) xbe_lib;
 
 typedef struct {
-	xbe_header *header;
+	xbe_header header;
 	int kt_key;
 	int ep_key;
 } r_bin_xbe_obj_t; 
diff --git a/libr/bin/p/bin_java.c b/libr/bin/p/bin_java.c
index 9b3d9a4bdcc45..25f1b7a3e8c3e 100644
--- a/libr/bin/p/bin_java.c
+++ b/libr/bin/p/bin_java.c
@@ -74,15 +74,13 @@ static Sdb *get_sdb(RBinFile *bf) {
 	return NULL;
 }
 
-static bool load_bytes(RBinFile *bf, void **bin_obj, const ut8 *buf, ut64 sz, ut64 loadaddr, Sdb *sdb){
+static bool load_buffer(RBinFile * bf, void **bin_obj, RBuffer *buf, ut64 loadaddr, Sdb *sdb) {
 	struct r_bin_java_obj_t *tmp_bin_obj = NULL;
-	RBuffer *tbuf = NULL;
-	if (!buf || sz == 0 || sz == UT64_MAX) {
+	RBuffer *tbuf = r_buf_ref (buf);
+	tmp_bin_obj = r_bin_java_new_buf (tbuf, loadaddr, sdb);
+	if (!tmp_bin_obj) {
 		return false;
 	}
-	tbuf = r_buf_new ();
-	r_buf_set_bytes (tbuf, buf, sz);
-	tmp_bin_obj = r_bin_java_new_buf (tbuf, loadaddr, sdb);
 	*bin_obj = tmp_bin_obj;
 	add_bin_obj_to_sdb (tmp_bin_obj);
 	if (bf && bf->file) {
@@ -92,49 +90,6 @@ static bool load_bytes(RBinFile *bf, void **bin_obj, const ut8 *buf, ut64 sz, ut
 	return true;
 }
 
-static bool load(RBinFile *bf) {
-	if (!bf || !bf->o) {
-		return false;
-	}
-
-	int result = false;
-	ut64 sz;
-	const ut8 *bytes = r_buf_data (bf->buf, &sz);
-	struct r_bin_java_obj_t *bin_obj = NULL;
-
-	load_bytes (bf, (void **)&bin_obj, bytes, sz, bf->o->loadaddr, bf->sdb);
-
-	if (bin_obj) {
-		if (!bf->o->kv) {
-			bf->o->kv = bin_obj->kv;
-		}
-		bf->o->bin_obj = bin_obj;
-		bin_obj->AllJavaBinObjs = DB;
-		// XXX - /\ this is a hack, but (one way but) necessary to get access to
-		// the object addrs from anal. If only global variables are used,
-		// they get "lost" somehow after they are initialized and go out of
-		// scope.
-		//
-		// There are several points of indirection, but here is the gist:
-		// 1) RAnal->(through RBinBind) RBin->RBinJavaObj->DB
-		//
-		// The purpose is to ensure that information about a give class file
-		// can be grabbed at any time from RAnal.  This was tried with global
-		// variables, but failed when attempting to access the DB
-		// in the class.c scope.  Once DB  was moved here, it is initialized
-		// once here and assigned to each of the other RBinJavaObjs.
-		//
-		// Now, the RAnal component of radare can get to each of the
-		// RBinJavaObjs for analysing functions and dependencies using an Sdb.
-		add_bin_obj_to_sdb (bin_obj);
-		if (bf->file) {
-			bin_obj->file = strdup (bf->file);
-		}
-		result = true;
-	}
-	return result;
-}
-
 static void destroy(RBinFile *bf) {
 	r_bin_java_free ((struct r_bin_java_obj_t *) bf->o->bin_obj);
 	sdb_free (DB);
@@ -266,8 +221,7 @@ RBinPlugin r_bin_plugin_java = {
 	.init = init,
 	.fini = fini,
 	.get_sdb = &get_sdb,
-	.load = &load,
-	.load_bytes = &load_bytes,
+	.load_buffer = &load_buffer,
 	.destroy = &destroy,
 	.check_bytes = &check_bytes,
 	.check_buffer = &check_buffer,
diff --git a/libr/bin/p/bin_xbe.c b/libr/bin/p/bin_xbe.c
index 5422967435757..47f9e28f75cc8 100644
--- a/libr/bin/p/bin_xbe.c
+++ b/libr/bin/p/bin_xbe.c
@@ -19,36 +19,36 @@ static bool check_buffer(RBuffer *b) {
 	return false;
 }
 
-static bool load(RBinFile *bf) {
-	r_return_val_if_fail (bf && bf->o, false);
-	r_bin_xbe_obj_t *obj = NULL;
-	const ut8 *bytes = r_buf_data (bf->buf, NULL);
-	bf->o->bin_obj = malloc (sizeof (r_bin_plugin_xbe));
-	obj = bf->o->bin_obj;
-	if (obj) {
-		obj->header = (xbe_header *) bytes;
-		if ((obj->header->ep & 0xf0000000) == 0x40000000) {
-			// Sega Chihiro xbe
-			obj->ep_key = XBE_EP_CHIHIRO;
-			obj->kt_key = XBE_KP_CHIHIRO;
-		} else if ((obj->header->ep ^ XBE_EP_RETAIL) > 0x1000000) {
-			// Debug xbe
-			obj->ep_key = XBE_EP_DEBUG;
-			obj->kt_key = XBE_KP_DEBUG;
-		} else {
-			// Retail xbe
-			obj->ep_key = XBE_EP_RETAIL;
-			obj->kt_key = XBE_KP_RETAIL;
-		}
-		return true;
+static bool load_buffer(RBinFile *bf, void **bin_obj, RBuffer *buf, ut64 loadaddr, Sdb *sdb) {
+	r_bin_xbe_obj_t *obj = R_NEW (r_bin_xbe_obj_t);
+	if (!obj) {
+		return false;
 	}
-	return false;
+	st64 r = r_buf_read_at (buf, 0, (ut8 *)&obj->header, sizeof (obj->header));
+	if (r != sizeof (obj->header)) {
+		R_FREE (obj);
+		return false;
+	}
+
+	if ((obj->header.ep & 0xf0000000) == 0x40000000) {
+		// Sega Chihiro xbe
+		obj->ep_key = XBE_EP_CHIHIRO;
+		obj->kt_key = XBE_KP_CHIHIRO;
+	} else if ((obj->header.ep ^ XBE_EP_RETAIL) > 0x1000000) {
+		// Debug xbe
+		obj->ep_key = XBE_EP_DEBUG;
+		obj->kt_key = XBE_KP_DEBUG;
+	} else {
+		// Retail xbe
+		obj->ep_key = XBE_EP_RETAIL;
+		obj->kt_key = XBE_KP_RETAIL;
+	}
+	*bin_obj = obj;
+	return true;
 }
 
 static void destroy(RBinFile *bf) {
 	R_FREE (bf->o->bin_obj);
-	r_buf_free (bf->buf);
-	bf->buf = NULL;
 }
 
 static RBinAddr *binsym(RBinFile *bf, int type) {
@@ -60,8 +60,8 @@ static RBinAddr *binsym(RBinFile *bf, int type) {
 	if (!ret) {
 		return NULL;
 	}
-	ret->vaddr = obj->header->ep ^ obj->ep_key;
-	ret->paddr = ret->vaddr - obj->header->base;
+	ret->vaddr = obj->header.ep ^ obj->ep_key;
+	ret->paddr = ret->vaddr - obj->header.base;
 	return ret;
 }
 
@@ -80,8 +80,8 @@ static RList *entries(RBinFile *bf) {
 	}
 	ret->free = free;
 	obj = bf->o->bin_obj;
-	ptr->vaddr = obj->header->ep ^ obj->ep_key;
-	ptr->paddr = ptr->vaddr - obj->header->base;
+	ptr->vaddr = obj->header.ep ^ obj->ep_key;
+	ptr->paddr = ptr->vaddr - obj->header.base;
 	r_list_append (ret, ptr);
 	return ret;
 }
@@ -99,7 +99,7 @@ static RList *sections(RBinFile *bf) {
 		return NULL;
 	}
 	obj = bf->o->bin_obj;
-	h = obj->header;
+	h = &obj->header;
 	if (h->sections < 1) {
 		return NULL;
 	}
@@ -174,7 +174,7 @@ static RList *libs(RBinFile *bf) {
 		return NULL;
 	}
 	obj = bf->o->bin_obj;
-	h = obj->header;
+	h = &obj->header;
 	ret = r_list_new ();
 	if (!ret) {
 		return NULL;
@@ -257,7 +257,7 @@ static RList *symbols(RBinFile *bf) {
 	}
 
 	obj = bf->o->bin_obj;
-	h = obj->header;
+	h = &obj->header;
 	kt_addr = h->kernel_thunk_addr ^ obj->kt_key;
 	ret = r_list_new ();
 	if (!ret) {
@@ -332,8 +332,8 @@ static RBinInfo *info(RBinFile *bf) {
 	obj = bf->o->bin_obj;
 
 	memset (dbg_name, 0, sizeof (dbg_name));
-	r_buf_read_at (bf->buf, obj->header->debug_name_addr -\
-		obj->header->base, dbg_name, sizeof (dbg_name));
+	r_buf_read_at (bf->buf, obj->header.debug_name_addr -\
+		obj->header.base, dbg_name, sizeof (dbg_name));
 	dbg_name[sizeof(dbg_name) - 1] = 0;
 	ret->file = strdup ((char *) dbg_name);
 	ret->bclass = strdup ("program");
@@ -351,14 +351,14 @@ static RBinInfo *info(RBinFile *bf) {
 
 static ut64 baddr(RBinFile *bf) {
 	r_bin_xbe_obj_t *obj = bf->o->bin_obj;
-	return obj->header->base;
+	return obj->header.base;
 }
 
 RBinPlugin r_bin_plugin_xbe = {
 	.name = "xbe",
 	.desc = "Microsoft Xbox xbe format r_bin plugin",
 	.license = "LGPL3",
-	.load = &load,
+	.load_buffer = &load_buffer,
 	.destroy = &destroy,
 	.check_buffer = &check_buffer,
 	.baddr = &baddr,
diff --git a/libr/include/r_util/r_buf.h b/libr/include/r_util/r_buf.h
index dd9057b8492fd..0c999d096deb0 100644
--- a/libr/include/r_util/r_buf.h
+++ b/libr/include/r_util/r_buf.h
@@ -16,11 +16,11 @@ typedef struct r_buf_t RBuffer;
 
 typedef bool (*RBufferInit)(RBuffer *b, const void *user);
 typedef bool (*RBufferFini)(RBuffer *b);
-typedef int (*RBufferRead)(RBuffer *b, ut8 *buf, size_t len);
-typedef int (*RBufferWrite)(RBuffer *b, const ut8 *buf, size_t len);
+typedef st64 (*RBufferRead)(RBuffer *b, ut8 *buf, ut64 len);
+typedef st64 (*RBufferWrite)(RBuffer *b, const ut8 *buf, ut64 len);
 typedef ut64 (*RBufferGetSize)(RBuffer *b);
 typedef bool (*RBufferResize)(RBuffer *b, ut64 newsize);
-typedef int (*RBufferSeek)(RBuffer *b, st64 addr, int whence);
+typedef st64 (*RBufferSeek)(RBuffer *b, st64 addr, int whence);
 typedef ut8 *(*RBufferGetWholeBuf)(RBuffer *b, ut64 *sz);
 typedef void (*RBufferFreeWholeBuf)(RBuffer *b);
 typedef RList *(*RBufferNonEmptyList)(RBuffer *b);
@@ -73,30 +73,30 @@ R_API RBuffer *r_buf_new_sparse(ut8 Oxff);
 /* methods */
 R_API bool r_buf_dump(RBuffer *buf, const char *file);
 R_API bool r_buf_set_bytes(RBuffer *b, const ut8 *buf, ut64 length);
-R_API int r_buf_append_string(RBuffer *b, const char *str);
+R_API st64 r_buf_append_string(RBuffer *b, const char *str);
 R_API bool r_buf_append_buf(RBuffer *b, RBuffer *a);
-R_API bool r_buf_append_bytes(RBuffer *b, const ut8 *buf, size_t length);
-R_API bool r_buf_append_nbytes(RBuffer *b, size_t length);
+R_API bool r_buf_append_bytes(RBuffer *b, const ut8 *buf, ut64 length);
+R_API bool r_buf_append_nbytes(RBuffer *b, ut64 length);
 R_API bool r_buf_append_ut16(RBuffer *b, ut16 n);
-R_API bool r_buf_append_buf_slice(RBuffer *b, RBuffer *a, ut64 offset, int size);
+R_API bool r_buf_append_buf_slice(RBuffer *b, RBuffer *a, ut64 offset, ut64 size);
 R_API bool r_buf_append_ut32(RBuffer *b, ut32 n);
 R_API bool r_buf_append_ut64(RBuffer *b, ut64 n);
-R_API bool r_buf_prepend_bytes(RBuffer *b, const ut8 *buf, size_t length);
-R_API int r_buf_insert_bytes(RBuffer *b, ut64 addr, const ut8 *buf, size_t length);
+R_API bool r_buf_prepend_bytes(RBuffer *b, const ut8 *buf, ut64 length);
+R_API st64 r_buf_insert_bytes(RBuffer *b, ut64 addr, const ut8 *buf, ut64 length);
 R_API char *r_buf_to_string(RBuffer *b);
-R_API char *r_buf_get_string (RBuffer *b, ut64 addr);
-R_API int r_buf_read(RBuffer *b, ut8 *buf, size_t len);
+R_API char *r_buf_get_string(RBuffer *b, ut64 addr);
+R_API st64 r_buf_read(RBuffer *b, ut8 *buf, ut64 len);
 R_API ut8 r_buf_read8(RBuffer *b);
-R_API int r_buf_fread(RBuffer *b, ut8 *buf, const char *fmt, int n);
-R_API int r_buf_read_at(RBuffer *b, ut64 addr, ut8 *buf, int len);
+R_API st64 r_buf_fread(RBuffer *b, ut8 *buf, const char *fmt, int n);
+R_API st64 r_buf_read_at(RBuffer *b, ut64 addr, ut8 *buf, ut64 len);
 R_API ut8 r_buf_read8_at(RBuffer *b, ut64 addr);
 R_API ut64 r_buf_tell(RBuffer *b);
-R_API int r_buf_seek(RBuffer *b, st64 addr, int whence);
-R_API int r_buf_fread_at(RBuffer *b, ut64 addr, ut8 *buf, const char *fmt, int n);
-R_API int r_buf_write(RBuffer *b, const ut8 *buf, size_t len);
-R_API int r_buf_fwrite(RBuffer *b, const ut8 *buf, const char *fmt, int n);
-R_API int r_buf_write_at(RBuffer *b, ut64 addr, const ut8 *buf, int len);
-R_API int r_buf_fwrite_at(RBuffer *b, ut64 addr, const ut8 *buf, const char *fmt, int n);
+R_API st64 r_buf_seek(RBuffer *b, st64 addr, int whence);
+R_API st64 r_buf_fread_at(RBuffer *b, ut64 addr, ut8 *buf, const char *fmt, int n);
+R_API st64 r_buf_write(RBuffer *b, const ut8 *buf, ut64 len);
+R_API st64 r_buf_fwrite(RBuffer *b, const ut8 *buf, const char *fmt, int n);
+R_API st64 r_buf_write_at(RBuffer *b, ut64 addr, const ut8 *buf, ut64 len);
+R_API st64 r_buf_fwrite_at(RBuffer *b, ut64 addr, const ut8 *buf, const char *fmt, int n);
 // WARNING: this function should be used with care because it may allocate the
 // entire buffer in memory. Consider using the r_buf_read* APIs instead and read
 // only the chunks you need.
@@ -198,14 +198,14 @@ static inline ut64 r_buf_read_ble64_at(RBuffer *b, ut64 addr, bool big_endian) {
 	return r == sizeof (buf)? r_read_ble64 (buf, big_endian): UT64_MAX;
 }
 
-R_API int r_buf_uleb128(RBuffer *b, ut64 *v);
-R_API int r_buf_sleb128(RBuffer *b, st64 *v);
+R_API st64 r_buf_uleb128(RBuffer *b, ut64 *v);
+R_API st64 r_buf_sleb128(RBuffer *b, st64 *v);
 
-static inline int r_buf_uleb128_at(RBuffer *b, ut64 addr, ut64 *v) {
+static inline st64 r_buf_uleb128_at(RBuffer *b, ut64 addr, ut64 *v) {
 	r_buf_seek (b, addr, R_BUF_SET);
 	return r_buf_uleb128 (b, v);
 }
-static inline int r_buf_sleb128_at(RBuffer *b, ut64 addr, st64 *v) {
+static inline st64 r_buf_sleb128_at(RBuffer *b, ut64 addr, st64 *v) {
 	r_buf_seek (b, addr, R_BUF_SET);
 	return r_buf_sleb128 (b, v);
 }
diff --git a/libr/util/buf.c b/libr/util/buf.c
index 246d8f59fee52..6182f2f39065e 100644
--- a/libr/util/buf.c
+++ b/libr/util/buf.c
@@ -35,17 +35,17 @@ static ut64 buf_get_size(RBuffer *b) {
 	return b->methods->get_size? b->methods->get_size (b): UT64_MAX;
 }
 
-static int buf_read(RBuffer *b, ut8 *buf, size_t len) {
+static st64 buf_read(RBuffer *b, ut8 *buf, size_t len) {
 	r_return_val_if_fail (b && b->methods, -1);
 	return b->methods->read? b->methods->read (b, buf, len): -1;
 }
 
-static int buf_write(RBuffer *b, const ut8 *buf, size_t len) {
+static st64 buf_write(RBuffer *b, const ut8 *buf, size_t len) {
 	r_return_val_if_fail (b && b->methods, -1);
 	return b->methods->write? b->methods->write (b, buf, len): -1;
 }
 
-static int buf_seek(RBuffer *b, st64 addr, int whence) {
+static st64 buf_seek(RBuffer *b, st64 addr, int whence) {
 	r_return_val_if_fail (b && b->methods, -1);
 	return b->methods->seek? b->methods->seek (b, addr, whence): -1;
 }
@@ -240,7 +240,7 @@ R_API bool r_buf_dump(RBuffer *b, const char *file) {
 	return r_file_dump (file, tmp, tmpsz, 0);
 }
 
-R_API int r_buf_seek(RBuffer *b, st64 addr, int whence) {
+R_API st64 r_buf_seek(RBuffer *b, st64 addr, int whence) {
 	r_return_val_if_fail (b, -1);
 	return buf_seek (b, addr, whence);
 }
@@ -263,7 +263,7 @@ R_API bool r_buf_set_bytes(RBuffer *b, const ut8 *buf, ut64 length) {
 	return r_buf_seek (b, 0, R_BUF_SET) >= 0;
 }
 
-R_API bool r_buf_prepend_bytes(RBuffer *b, const ut8 *buf, size_t length) {
+R_API bool r_buf_prepend_bytes(RBuffer *b, const ut8 *buf, ut64 length) {
 	r_return_val_if_fail (b && buf && !b->readonly, false);
 	return r_buf_insert_bytes (b, 0, buf, length) >= 0;
 }
@@ -282,7 +282,7 @@ R_API char *r_buf_to_string(RBuffer *b) {
 	return s;
 }
 
-R_API bool r_buf_append_bytes(RBuffer *b, const ut8 *buf, size_t length) {
+R_API bool r_buf_append_bytes(RBuffer *b, const ut8 *buf, ut64 length) {
 	r_return_val_if_fail (b && buf && !b->readonly, false);
 
 	if (r_buf_seek (b, 0, R_BUF_END) < 0) {
@@ -292,7 +292,7 @@ R_API bool r_buf_append_bytes(RBuffer *b, const ut8 *buf, size_t length) {
 	return r_buf_write (b, buf, length) >= 0;
 }
 
-R_API bool r_buf_append_nbytes(RBuffer *b, size_t length) {
+R_API bool r_buf_append_nbytes(RBuffer *b, ut64 length) {
 	r_return_val_if_fail (b && !b->readonly, false);
 	ut8 *buf = R_NEWS0 (ut8, length);
 	if (!buf) {
@@ -303,9 +303,9 @@ R_API bool r_buf_append_nbytes(RBuffer *b, size_t length) {
 	return res;
 }
 
-R_API int r_buf_insert_bytes(RBuffer *b, ut64 addr, const ut8 *buf, size_t length) {
+R_API st64 r_buf_insert_bytes(RBuffer *b, ut64 addr, const ut8 *buf, ut64 length) {
 	r_return_val_if_fail (b && !b->readonly, -1);
-	int pos, r = r_buf_seek (b, 0, R_BUF_CUR);
+	st64 pos, r = r_buf_seek (b, 0, R_BUF_CUR);
 	if (r < 0) {
 		return r;
 	}
@@ -321,7 +321,7 @@ R_API int r_buf_insert_bytes(RBuffer *b, ut64 addr, const ut8 *buf, size_t lengt
 	if (r < 0) {
 		goto free_tmp;
 	}
-	size_t tmp_length = (size_t)r;
+	st64 tmp_length = r;
 	if (!r_buf_resize (b, sz + length)) {
 		goto free_tmp;
 	}
@@ -367,7 +367,7 @@ R_API bool r_buf_append_buf(RBuffer *b, RBuffer *a) {
 	return r_buf_append_bytes (b, tmp, sz);
 }
 
-R_API bool r_buf_append_buf_slice(RBuffer *b, RBuffer *a, ut64 offset, int size) {
+R_API bool r_buf_append_buf_slice(RBuffer *b, RBuffer *a, ut64 offset, ut64 size) {
 	r_return_val_if_fail (b && a && !b->readonly, false);
 	ut8 *tmp = R_NEWS (ut8, size);
 	bool res = false;
@@ -375,7 +375,7 @@ R_API bool r_buf_append_buf_slice(RBuffer *b, RBuffer *a, ut64 offset, int size)
 	if (!tmp) {
 		return false;
 	}
-	int r = r_buf_read_at (a, offset, tmp, size);
+	st64 r = r_buf_read_at (a, offset, tmp, size);
 	if (r < 0) {
 		goto err;
 	}
@@ -392,7 +392,7 @@ R_API char *r_buf_get_string(RBuffer *b, ut64 addr) {
 	const int MIN_RES_SZ = 64;
 	ut8 *res = R_NEWS (ut8, MIN_RES_SZ + 1);
 	ut64 sz = 0;
-	int r = r_buf_read_at (b, addr, res, MIN_RES_SZ);
+	st64 r = r_buf_read_at (b, addr, res, MIN_RES_SZ);
 	bool null_found = false;
 	while (r > 0) {
 		const ut8 *needle = r_mem_mem (res + sz, r, (ut8 *)"\x00", 1);
@@ -419,34 +419,35 @@ R_API char *r_buf_get_string(RBuffer *b, ut64 addr) {
 	return (char *)res;
 }
 
-R_API int r_buf_read(RBuffer *b, ut8 *buf, size_t len) {
+R_API st64 r_buf_read(RBuffer *b, ut8 *buf, ut64 len) {
 	r_return_val_if_fail (b && buf, -1);
-	int r = buf_read (b, buf, len);
+	ut64 r = buf_read (b, buf, len);
 	if (r >= 0 && r < len) {
 		memset (buf + r, b->Oxff_priv, len - r);
 	}
 	return r;
 }
 
-R_API int r_buf_write(RBuffer *b, const ut8 *buf, size_t len) {
+R_API st64 r_buf_write(RBuffer *b, const ut8 *buf, ut64 len) {
 	r_return_val_if_fail (b && buf && !b->readonly, -1);
 	return buf_write (b, buf, len);
 }
 
 R_API ut8 r_buf_read8(RBuffer *b) {
 	ut8 res;
-	int r = r_buf_read (b, &res, sizeof (res));
-	return r == sizeof (res)? res :b->Oxff_priv;
+	st64 r = r_buf_read (b, &res, sizeof (res));
+	return r == sizeof (res)? res: b->Oxff_priv;
 }
 
 R_API ut8 r_buf_read8_at(RBuffer *b, ut64 addr) {
 	ut8 res;
-	int r = r_buf_read_at (b, addr, &res, sizeof (res));
+	st64 r = r_buf_read_at (b, addr, &res, sizeof (res));
 	return r == sizeof (res)? res: b->Oxff_priv;
 }
 
-static int buf_format(RBuffer *dst, RBuffer *src, const char *fmt, int n) {
-	int i, res = 0;
+static st64 buf_format(RBuffer *dst, RBuffer *src, const char *fmt, int n) {
+	st64 res = 0;
+	int i;
 	for (i = 0; i < n; ++i) {
 		int j;
 		int m = 1;
@@ -486,7 +487,7 @@ static int buf_format(RBuffer *dst, RBuffer *src, const char *fmt, int n) {
 				ut16 d2;
 				ut32 d3;
 				ut64 d4;
-				int r = r_buf_read (src, tmp, tsize);
+				st64 r = r_buf_read (src, tmp, tsize);
 				if (r < tsize) {
 					return -1;
 				}
@@ -522,16 +523,16 @@ static int buf_format(RBuffer *dst, RBuffer *src, const char *fmt, int n) {
 	return res;
 }
 
-R_API int r_buf_fread(RBuffer *b, ut8 *buf, const char *fmt, int n) {
+R_API st64 r_buf_fread(RBuffer *b, ut8 *buf, const char *fmt, int n) {
 	r_return_val_if_fail (b && buf && fmt, -1);
 	// XXX: we assume the caller knows what he's doing
 	RBuffer *dst = r_buf_new_with_pointers (buf, UT64_MAX, false);
-	int res = buf_format (dst, b, fmt, n);
+	st64 res = buf_format (dst, b, fmt, n);
 	r_buf_free (dst);
 	return res;
 }
 
-R_API int r_buf_fread_at(RBuffer *b, ut64 addr, ut8 *buf, const char *fmt, int n) {
+R_API st64 r_buf_fread_at(RBuffer *b, ut64 addr, ut8 *buf, const char *fmt, int n) {
 	r_return_val_if_fail (b && buf && fmt, -1);
 	int r = r_buf_seek (b, addr, R_BUF_SET);
 	if (r < 0) {
@@ -540,27 +541,27 @@ R_API int r_buf_fread_at(RBuffer *b, ut64 addr, ut8 *buf, const char *fmt, int n
 	return r_buf_fread (b, buf, fmt, n);
 }
 
-R_API int r_buf_fwrite(RBuffer *b, const ut8 *buf, const char *fmt, int n) {
+R_API st64 r_buf_fwrite(RBuffer *b, const ut8 *buf, const char *fmt, int n) {
 	r_return_val_if_fail (b && buf && fmt && !b->readonly, -1);
 	// XXX: we assume the caller knows what he's doing
 	RBuffer *src = r_buf_new_with_pointers (buf, UT64_MAX, false);
-	int res = buf_format (b, src, fmt, n);
+	st64 res = buf_format (b, src, fmt, n);
 	r_buf_free (src);
 	return res;
 }
 
-R_API int r_buf_fwrite_at(RBuffer *b, ut64 addr, const ut8 *buf, const char *fmt, int n) {
+R_API st64 r_buf_fwrite_at(RBuffer *b, ut64 addr, const ut8 *buf, const char *fmt, int n) {
 	r_return_val_if_fail (b && buf && fmt && !b->readonly, -1);
-	int r = r_buf_seek (b, addr, R_BUF_SET);
+	st64 r = r_buf_seek (b, addr, R_BUF_SET);
 	if (r < 0) {
 		return r;
 	}
 	return r_buf_fwrite (b, buf, fmt, n);
 }
 
-R_API int r_buf_read_at(RBuffer *b, ut64 addr, ut8 *buf, int len) {
+R_API st64 r_buf_read_at(RBuffer *b, ut64 addr, ut8 *buf, ut64 len) {
 	r_return_val_if_fail (b && buf, -1);
-	int r = r_buf_seek (b, addr, R_BUF_SET);
+	st64 r = r_buf_seek (b, addr, R_BUF_SET);
 	if (r < 0) {
 		return r;
 	}
@@ -568,9 +569,9 @@ R_API int r_buf_read_at(RBuffer *b, ut64 addr, ut8 *buf, int len) {
 	return r_buf_read (b, buf, len);
 }
 
-R_API int r_buf_write_at(RBuffer *b, ut64 addr, const ut8 *buf, int len) {
+R_API st64 r_buf_write_at(RBuffer *b, ut64 addr, const ut8 *buf, ut64 len) {
 	r_return_val_if_fail (b && buf && !b->readonly, -1);
-	int r = r_buf_seek (b, addr, R_BUF_SET);
+	st64 r = r_buf_seek (b, addr, R_BUF_SET);
 	if (r < 0) {
 		return r;
 	}
@@ -604,7 +605,7 @@ R_API void r_buf_free(RBuffer *b) {
 	}
 }
 
-R_API int r_buf_append_string(RBuffer *b, const char *str) {
+R_API st64 r_buf_append_string(RBuffer *b, const char *str) {
 	r_return_val_if_fail (b && str && !b->readonly, false);
 	return r_buf_append_bytes (b, (const ut8 *)str, strlen (str));
 }
@@ -625,12 +626,12 @@ R_API RList *r_buf_nonempty_list(RBuffer *b) {
 	return b->methods->nonempty_list? b->methods->nonempty_list (b): NULL;
 }
 
-R_API int r_buf_uleb128(RBuffer *b, ut64 *v) {
+R_API st64 r_buf_uleb128(RBuffer *b, ut64 *v) {
 	ut8 c = 0xff;
 	ut64 s = 0, sum = 0, l = 0;
 	do {
 		ut8 data;
-		int r = r_buf_read (b, &data, sizeof (data));
+		st64 r = r_buf_read (b, &data, sizeof (data));
 		if (r <= 0) {
 			return -1;
 		}
@@ -645,13 +646,12 @@ R_API int r_buf_uleb128(RBuffer *b, ut64 *v) {
 	return l;
 }
 
-R_API int r_buf_sleb128(RBuffer *b, st64 *v) {
-	st64 result = 0;
-	int offset = 0;
+R_API st64 r_buf_sleb128(RBuffer *b, st64 *v) {
+	st64 result = 0, offset = 0;
 	ut8 value;
 	do {
 		st64 chunk;
-		int r = r_buf_read (b, &value, sizeof (value));
+		st64 r = r_buf_read (b, &value, sizeof (value));
 		if (r != sizeof (value)) {
 			return -1;
 		}
diff --git a/libr/util/buf_bytes.c b/libr/util/buf_bytes.c
index 33f6160d416d0..7b26b5d87480e 100644
--- a/libr/util/buf_bytes.c
+++ b/libr/util/buf_bytes.c
@@ -70,15 +70,15 @@ static bool buf_bytes_resize(RBuffer *b, ut64 newsize) {
 	return true;
 }
 
-static int buf_bytes_read(RBuffer *b, ut8 *buf, size_t len) {
+static st64 buf_bytes_read(RBuffer *b, ut8 *buf, ut64 len) {
 	struct buf_bytes_priv *priv = get_priv_bytes (b);
-	size_t real_len = priv->length < priv->offset? 0: R_MIN (priv->length - priv->offset, len);
+	ut64 real_len = priv->length < priv->offset? 0: R_MIN (priv->length - priv->offset, len);
 	memmove (buf, priv->buf + priv->offset, real_len);
 	priv->offset += real_len;
 	return real_len;
 }
 
-static int buf_bytes_write(RBuffer *b, const ut8 *buf, size_t len) {
+static st64 buf_bytes_write(RBuffer *b, const ut8 *buf, ut64 len) {
 	struct buf_bytes_priv *priv = get_priv_bytes (b);
 	if (priv->offset > priv->length || priv->offset + len >= priv->length) {
 		bool r = r_buf_resize (b, priv->offset + len);
@@ -96,7 +96,7 @@ static ut64 buf_bytes_get_size(RBuffer *b) {
 	return priv->length;
 }
 
-static int buf_bytes_seek(RBuffer *b, st64 addr, int whence) {
+static st64 buf_bytes_seek(RBuffer *b, st64 addr, int whence) {
 	struct buf_bytes_priv *priv = get_priv_bytes (b);
 	if (addr < 0 && (-addr) > (st64)priv->offset) {
 		return -1;
diff --git a/libr/util/buf_file.c b/libr/util/buf_file.c
index 5983e96c1ee3c..caf4836615417 100644
--- a/libr/util/buf_file.c
+++ b/libr/util/buf_file.c
@@ -49,17 +49,17 @@ static ut64 buf_file_get_size(RBuffer *b) {
 	return (ut64)res;
 }
 
-static int buf_file_read(RBuffer *b, ut8 *buf, size_t len) {
+static st64 buf_file_read(RBuffer *b, ut8 *buf, ut64 len) {
 	struct buf_file_priv *priv = get_priv_file (b);
 	return r_sandbox_read (priv->fd, buf, len);
 }
 
-static int buf_file_write(RBuffer *b, const ut8 *buf, size_t len) {
+static st64 buf_file_write(RBuffer *b, const ut8 *buf, ut64 len) {
 	struct buf_file_priv *priv = get_priv_file (b);
 	return r_sandbox_write (priv->fd, buf, len);
 }
 
-static int buf_file_seek(RBuffer *b, st64 addr, int whence) {
+static st64 buf_file_seek(RBuffer *b, st64 addr, int whence) {
 	struct buf_file_priv *priv = get_priv_file (b);
 	switch (whence) {
 	case R_BUF_CUR: whence = SEEK_CUR; break;
diff --git a/libr/util/buf_io.c b/libr/util/buf_io.c
index 5e5fad5fca938..55daf998c9d0e 100644
--- a/libr/util/buf_io.c
+++ b/libr/util/buf_io.c
@@ -35,7 +35,7 @@ static bool buf_io_fini(RBuffer *b) {
 	return true;
 }
 
-static int buf_io_seek(RBuffer *b, st64 addr, int whence) {
+static st64 buf_io_seek(RBuffer *b, st64 addr, int whence) {
 	struct buf_io_priv *priv = get_priv_io (b);
 	int io_whence;
 
@@ -65,12 +65,12 @@ static bool buf_io_resize(RBuffer *b, ut64 newsize) {
 	return priv->iob->fd_resize (priv->iob->io, priv->fd, newsize);
 }
 
-static int buf_io_read(RBuffer *b, ut8 *buf, size_t len) {
+static st64 buf_io_read(RBuffer *b, ut8 *buf, ut64 len) {
 	struct buf_io_priv *priv = get_priv_io (b);
 	return priv->iob->fd_read (priv->iob->io, priv->fd, buf, len);
 }
 
-static int buf_io_write(RBuffer *b, const ut8 *buf, size_t len) {
+static st64 buf_io_write(RBuffer *b, const ut8 *buf, ut64 len) {
 	struct buf_io_priv *priv = get_priv_io (b);
 	return priv->iob->fd_write (priv->iob->io, priv->fd, buf, len);
 }
diff --git a/libr/util/buf_ref.c b/libr/util/buf_ref.c
index 3457438391aab..8ee825a9b29e1 100644
--- a/libr/util/buf_ref.c
+++ b/libr/util/buf_ref.c
@@ -50,13 +50,13 @@ static bool buf_ref_resize(RBuffer *b, ut64 newsize) {
 	return true;
 }
 
-static int buf_ref_read(RBuffer *b, ut8 *buf, size_t len) {
+static st64 buf_ref_read(RBuffer *b, ut8 *buf, ut64 len) {
 	struct buf_ref_priv *priv = get_priv_ref (b);
 	if (priv->size < priv->cur) {
 		return -1;
 	}
 	len = R_MIN (len, priv->size - priv->cur);
-	int r = r_buf_read_at (priv->parent, priv->base + priv->cur, buf, len);
+	st64 r = r_buf_read_at (priv->parent, priv->base + priv->cur, buf, len);
 	if (r < 0) {
 		return r;
 	}
@@ -69,7 +69,7 @@ static ut64 buf_ref_get_size(RBuffer *b) {
 	return priv->size;
 }
 
-static int buf_ref_seek(RBuffer *b, st64 addr, int whence) {
+static st64 buf_ref_seek(RBuffer *b, st64 addr, int whence) {
 	struct buf_ref_priv *priv = get_priv_ref (b);
 	switch (whence) {
 	case R_BUF_CUR:
diff --git a/libr/util/buf_sparse.c b/libr/util/buf_sparse.c
index 842eff7a181da..cdadea0942870 100644
--- a/libr/util/buf_sparse.c
+++ b/libr/util/buf_sparse.c
@@ -31,8 +31,8 @@ static bool sparse_limits(RList *l, ut64 *max) {
 	return set;
 }
 
-static RBufferSparse *sparse_append(RList *l, ut64 addr, const ut8 *data, int len) {
-	if (l && data && len > 0) {
+static RBufferSparse *sparse_append(RList *l, ut64 addr, const ut8 *data, ut64 len) {
+	if (l && data) {
 		RBufferSparse *s = R_NEW0 (RBufferSparse);
 		if (s) {
 			s->data = calloc (1, len);
@@ -50,15 +50,15 @@ static RBufferSparse *sparse_append(RList *l, ut64 addr, const ut8 *data, int le
 }
 
 //ret -1 if failed; # of bytes copied if success
-static int sparse_write(RList *l, ut64 addr, const ut8 *data, int len) {
+static st64 sparse_write(RList *l, ut64 addr, const ut8 *data, ut64 len) {
 	RBufferSparse *s;
 	RListIter *iter;
-	int olen = len;
+	ut64 olen = len;
 
 	r_list_foreach (l, iter, s) {
 		if (addr >= s->from && addr < s->to) {
-			int delta = addr - s->from;
-			int reallen = s->size - delta >= len? len: s->size - delta;
+			ut64 delta = addr - s->from;
+			ut64 reallen = s->size - delta >= len? len: s->size - delta;
 			memcpy (s->data + delta, data, reallen);
 			data += reallen;
 			len -= reallen;
@@ -139,7 +139,7 @@ static ut64 buf_sparse_size(RBuffer *b) {
 	return sparse_limits (priv->sparse, &max)? max: 0;
 }
 
-static int buf_sparse_read(RBuffer *b, ut8 *buf, size_t len) {
+static st64 buf_sparse_read(RBuffer *b, ut8 *buf, ut64 len) {
 	struct buf_sparse_priv *priv = get_priv_sparse (b);
 	RBufferSparse *c;
 	RListIter *iter;
@@ -152,10 +152,10 @@ static int buf_sparse_read(RBuffer *b, ut8 *buf, size_t len) {
 		}
 		if (priv->offset < c->to && c->from < priv->offset + len) {
 			if (priv->offset < c->from) {
-				int l = R_MIN (priv->offset + len - c->from, c->size);
+				ut64 l = R_MIN (priv->offset + len - c->from, c->size);
 				memcpy (buf + c->from - priv->offset, c->data, l);
 			} else {
-				int l = R_MIN (c->to - priv->offset, len);
+				ut64 l = R_MIN (c->to - priv->offset, len);
 				memcpy (buf, c->data + priv->offset - c->from, l);
 			}
 		}
@@ -163,19 +163,19 @@ static int buf_sparse_read(RBuffer *b, ut8 *buf, size_t len) {
 	if (priv->offset > max) {
 		return -1;
 	}
-	int r = R_MIN (max - priv->offset, len);
+	ut64 r = R_MIN (max - priv->offset, len);
 	priv->offset += r;
 	return r;
 }
 
-static int buf_sparse_write(RBuffer *b, const ut8 *buf, size_t len) {
+static st64 buf_sparse_write(RBuffer *b, const ut8 *buf, ut64 len) {
 	struct buf_sparse_priv *priv = get_priv_sparse (b);
-	int r = sparse_write (priv->sparse, priv->offset, buf, len);
+	st64 r = sparse_write (priv->sparse, priv->offset, buf, len);
 	priv->offset += r;
 	return r;
 }
 
-static int buf_sparse_seek(RBuffer *b, st64 addr, int whence) {
+static st64 buf_sparse_seek(RBuffer *b, st64 addr, int whence) {
 	struct buf_sparse_priv *priv = get_priv_sparse (b);
 	ut64 max;
 	if (addr < 0 && (-addr) > (st64)priv->offset) {
