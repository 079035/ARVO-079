From 986d605935bb5fbf2b83c358f91c557210b28c43 Mon Sep 17 00:00:00 2001
From: Roman Lebedev <lebedev.ri@gmail.com>
Date: Sat, 18 Nov 2017 15:17:29 +0300
Subject: [PATCH] CMake: fix oss-fuzz build.

---
 CMakeLists.txt                           |  2 ++
 cmake/Modules/FindLibFuzzingEngine.cmake | 28 ++++++++++++++++++++++++
 cmake/compiler-flags.cmake               |  6 ++---
 fuzz/CMakeLists.txt                      | 13 +++++++++--
 4 files changed, 44 insertions(+), 5 deletions(-)
 create mode 100644 cmake/Modules/FindLibFuzzingEngine.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 77732332b..15f8f3aa8 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -115,6 +115,8 @@ set(ZLIB_PATH "/usr/src/zlib" CACHE PATH "Path to the zlib root tree.")
 set(GOOGLEBENCHMARK_PATH "/usr/src/googlebenchmark" CACHE PATH
                     "Path to the googlebenchmark root tree.")
 
+set(LIB_FUZZING_ENGINE "OFF" CACHE STRING "Either OFF, or overrides location of prebuilt fuzzing engine library (e.g. libFuzzer) that needs to be linked with all fuzz targets.")
+
 set(REFERENCE_SAMPLE_ARCHIVE "~/raw-camera-samples/raw.pixls.us-unique" CACHE PATH "The location of the reference sample set to use. Should contain filelist.sha1 and timestamp.txt")
 
 if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
diff --git a/cmake/Modules/FindLibFuzzingEngine.cmake b/cmake/Modules/FindLibFuzzingEngine.cmake
new file mode 100644
index 000000000..b9a9ba393
--- /dev/null
+++ b/cmake/Modules/FindLibFuzzingEngine.cmake
@@ -0,0 +1,28 @@
+# - Try to find LibFuzzingEngine
+# Once done, this will define
+#
+#  LibFuzzingEngine_FOUND - system has LibFuzzingEngine
+#  LibFuzzingEngine_LIBRARIES - link these to use LibFuzzingEngine
+
+include(LibFindMacros)
+
+if(EXISTS "${LIB_FUZZING_ENGINE}")
+  set(LibFuzzingEngine_LIBRARY "${LIB_FUZZING_ENGINE}")
+else()
+  set(LibFuzzingEngine_LIBRARY "LibFuzzingEngine_LIBRARY-NOTFOUND")
+endif()
+
+# Set the include dir variables and the libraries and let libfind_process do the rest.
+# NOTE: Singular variables for this library, plural for libraries this this lib depends on.
+set(LibFuzzingEngine_PROCESS_LIBS LibFuzzingEngine_LIBRARY)
+libfind_process(LibFuzzingEngine)
+
+if(LibFuzzingEngine_FOUND)
+  add_library(LibFuzzingEngine INTERFACE IMPORTED)
+  set_property(TARGET LibFuzzingEngine PROPERTY INTERFACE_LINK_LIBRARIES "${LibFuzzingEngine_LIBRARIES}")
+endif()
+
+set_package_properties(LibFuzzingEngine PROPERTIES
+                       TYPE REQUIRED
+                       DESCRIPTION "A prebuilt fuzzing engine library (e.g. libFuzzer) that needs to be linked with all fuzz target"
+                       PURPOSE "Used to actually drive the fuzz targets")
diff --git a/cmake/compiler-flags.cmake b/cmake/compiler-flags.cmake
index b00bbaa74..ad4f4b411 100644
--- a/cmake/compiler-flags.cmake
+++ b/cmake/compiler-flags.cmake
@@ -161,12 +161,12 @@ MARK_AS_ADVANCED(
 
 set(fuzz "-O3 -ffast-math")
 
-if(NOT DEFINED ENV{LIB_FUZZING_ENGINE})
-  # specialhandling: oss-fuzz provides all the needed flags already.
+if(NOT LIB_FUZZING_ENGINE)
   set(fuzz "${fuzz} ${asan} ${ubsan}")
   set(fuzz "${fuzz} -fsanitize=fuzzer-no-link")
 else()
-  message(STATUS "LIB_FUZZING_ENGINE env variable is set, assuming this is oss-fuzz, not setting special compiler flags.")
+  # specialhandling: oss-fuzz provides all the needed flags already.
+  message(STATUS "LIB_FUZZING_ENGINE override option is passed, not setting special compiler flags.")
 endif()
 
 set(fuzz "${fuzz} -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION")
diff --git a/fuzz/CMakeLists.txt b/fuzz/CMakeLists.txt
index 4868576cb..562b9812e 100644
--- a/fuzz/CMakeLists.txt
+++ b/fuzz/CMakeLists.txt
@@ -33,8 +33,17 @@ if(NOT (CMAKE_CXX_COMPILER_ID STREQUAL "Clang" AND CMAKE_BUILD_TYPE STREQUAL "FU
     add_test(NAME fuzzers/${fuzzer} COMMAND ${fuzzer})
   endmacro()
 else()
-  target_compile_options(rawspeed_fuzz INTERFACE "-fsanitize=fuzzer")
-  target_link_libraries (rawspeed_fuzz INTERFACE "-fsanitize=fuzzer")
+  if(NOT LIB_FUZZING_ENGINE)
+    # specialhandling: oss-fuzz provides all the needed flags already.
+    target_compile_options(rawspeed_fuzz INTERFACE "-fsanitize=fuzzer")
+    target_link_libraries (rawspeed_fuzz INTERFACE "-fsanitize=fuzzer")
+  else()
+    message(STATUS "LIB_FUZZING_ENGINE override option is passed, not setting special compiler flags.")
+    find_package(LibFuzzingEngine REQUIRED)
+    target_link_libraries(rawspeed_fuzz PUBLIC LibFuzzingEngine)
+  endif()
+
+  add_feature_info("Fuzzing" ON "will be actually able to do the fuzzing")
 
   file(GLOB FUZZ_DICT "common.dict")
 
