commit 9cc2ff55a146b2b3e8c321a87920c0d39a2b2ba6
Author: Hiroshi Hatake <hatake@calyptia.com>
Date:   Mon Sep 26 14:54:14 2022 +0900

    build: lib: onigmo: Bundle the patched fluent/onigmo
    
    Also, this update bumps up Unicode version to 12.0.
    
    Signed-off-by: Hiroshi Hatake <hatake@calyptia.com>

diff --git a/.gitignore b/.gitignore
index af39f6563..44f0a4b69 100644
--- a/.gitignore
+++ b/.gitignore
@@ -5,7 +5,6 @@
 *~
 _book/
 lib/jemalloc
-lib/onigmo
 tests/internal/flb_tests_internal.h
 tests/runtime/flb_tests_runtime.h
 build/*
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 638b849fd..133801047 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -885,11 +885,21 @@ if(FLB_IN_KAFKA OR FLB_OUT_KAFKA)
     add_subdirectory(${FLB_PATH_LIB_RDKAFKA} EXCLUDE_FROM_ALL)
 endif()
 
-# Onigmo (Regex Engine)
+# Onigmo (Regex Engine) options
 # =====================
 if(FLB_REGEX)
-  include(cmake/onigmo.cmake)
+  option(ONIGMO_SHARED_LIB    OFF)
+  option(ONIGMO_CTESTS        OFF)
+  option(ONIGMO_CTESTS_SAMPLE OFF)
+  option(ONIGMO_PYTHON_TESTS  OFF)
   FLB_DEFINITION(FLB_HAVE_REGEX)
+
+  if (FLB_SYSTEM_WINDOWS)
+    # We need this line in order to link libonigmo.lib statically.
+    # Read onigmo/README for details.
+    FLB_DEFINITION_VAL(ONIG_EXTERN "extern")
+  endif()
+  add_subdirectory(${FLB_PATH_LIB_ONIGMO} EXCLUDE_FROM_ALL)
 endif()
 
 # tutf8e (UTF8 Encoding)
diff --git a/cmake/onigmo.cmake b/cmake/onigmo.cmake
deleted file mode 100644
index dd9cb3119..000000000
--- a/cmake/onigmo.cmake
+++ /dev/null
@@ -1,79 +0,0 @@
-# This file provides 'libonigmo' target for both UNIX and Windows.
-#
-# To enable Onigmo, include this file and link the build target:
-#
-#    include(cmake/onigmo.cmake)
-#    target_link_libraries(fluent-bit libonigmo)
-
-add_library(libonigmo STATIC IMPORTED GLOBAL)
-
-# Global Settings
-set(ONIGMO_SRC "${PROJECT_SOURCE_DIR}/lib/onigmo")
-set(ONIGMO_DEST "${CMAKE_CURRENT_BINARY_DIR}")
-
-if(CMAKE_SIZEOF_VOID_P MATCHES 8)
-  set(ONIGMO_ARCH "x64")
-else()
-  set(ONIGMO_ARCH "x86")
-endif()
-
-if (CMAKE_OSX_SYSROOT)
-  # From macOS Mojave, /usr/include does not store C SDK headers.
-  # For libbacktrace building on macOS, we have to tell C headers where they are located.
-  set(DEPS_C_COMPILER "${CMAKE_C_COMPILER} -isysroot ${CMAKE_OSX_SYSROOT}")
-else()
-  set(DEPS_C_COMPILER "${CMAKE_C_COMPILER}")
-endif()
-
-# Onigmo (UNIX)
-# =============
-if(FLB_SMALL)
-ExternalProject_Add(onigmo
-  BUILD_IN_SOURCE TRUE
-  EXCLUDE_FROM_ALL TRUE
-  SOURCE_DIR ${ONIGMO_SRC}
-  INSTALL_DIR ${ONIGMO_DEST}
-  CONFIGURE_COMMAND ./configure ${AUTOCONF_HOST_OPT} --with-pic --disable-shared --enable-static --prefix=${ONIGMO_DEST}
-  CFLAGS=-std=gnu99\ -Wall\ -pipe\ -Os\ -g0\ -s\ -fno-stack-protector\ -fomit-frame-pointer\ -DNDEBUG\ -U_FORTIFY_SOURCE
-  BUILD_COMMAND $(MAKE)
-  INSTALL_COMMAND $(MAKE) DESTDIR= install)
-else()
-ExternalProject_Add(onigmo
-  BUILD_IN_SOURCE TRUE
-  EXCLUDE_FROM_ALL TRUE
-  SOURCE_DIR ${ONIGMO_SRC}
-  INSTALL_DIR ${ONIGMO_DEST}
-  CONFIGURE_COMMAND ./configure ${AUTOCONF_HOST_OPT} --with-pic --disable-shared --enable-static --prefix=${ONIGMO_DEST}
-  CFLAGS=-std=gnu99\ -Wall\ -pipe\ -g3\ -O3\ -funroll-loops
-  BUILD_COMMAND $(MAKE)
-  INSTALL_COMMAND $(MAKE) DESTDIR= install)
-endif()
-
-# Onigmo (Windows)
-# ================
-if(MSVC)
-  ExternalProject_Add(onigmo-windows
-    BUILD_IN_SOURCE TRUE
-    EXCLUDE_FROM_ALL TRUE
-    SOURCE_DIR ${ONIGMO_SRC}
-    CONFIGURE_COMMAND ${CMAKE_COMMAND} -E copy win32/Makefile win32/config.h ${ONIGMO_SRC}
-    BUILD_COMMAND nmake ARCH=${ONIGMO_ARCH}
-    INSTALL_COMMAND ${CMAKE_COMMAND} -E copy build_${ONIGMO_ARCH}/onigmo_s.lib ${ONIGMO_DEST}/lib/libonigmo.lib
-            COMMAND ${CMAKE_COMMAND} -E copy onigmo.h ${ONIGMO_DEST}/include/)
-endif()
-
-# Hook the buld definition to 'libonigmo' target
-if(MSVC)
-  add_dependencies(libonigmo onigmo-windows)
-  set(ONIGMO_STATIC_LIB "${ONIGMO_DEST}/lib/libonigmo.lib")
-
-  # We need this line in order to link libonigmo.lib statically.
-  # Read onigmo/README for details.
-  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DONIG_EXTERN=extern")
-else()
-  add_dependencies(libonigmo onigmo)
-  set(ONIGMO_STATIC_LIB "${ONIGMO_DEST}/lib/libonigmo.a")
-endif()
-
-set_target_properties(libonigmo PROPERTIES IMPORTED_LOCATION ${ONIGMO_STATIC_LIB})
-include_directories("${ONIGMO_DEST}/include/")
diff --git a/lib/onigmo/AUTHORS b/lib/onigmo/AUTHORS
index c6a707a34..b3cf1f363 100644
--- a/lib/onigmo/AUTHORS
+++ b/lib/onigmo/AUTHORS
@@ -1,2 +1,2 @@
 kentkt AT csc DOT jp (K.Takata)
-sndgk393 AT ybb DOT ne DOT jp (K.Kosako)
+<kkosako0@gmail.com> (K.Kosako)
diff --git a/lib/onigmo/CMakeLists.txt b/lib/onigmo/CMakeLists.txt
new file mode 100644
index 000000000..4a3b30d7d
--- /dev/null
+++ b/lib/onigmo/CMakeLists.txt
@@ -0,0 +1,341 @@
+cmake_minimum_required(VERSION 3.4)
+project(onigmo)
+
+# Onigmo Version
+set(ONIGMO_VERSION_MAJOR  6)
+set(ONIGMO_VERSION_MINOR  2)
+set(ONIGMO_VERSION_PATCH  0)
+set(ONIGMO_VERSION_STR "${ONIGMO_VERSION_MAJOR}.${ONIGMO_VERSION_MINOR}.${ONIGMO_VERSION_PATCH}")
+
+set(CMAKE_POSITION_INDEPENDENT_CODE ON)
+set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
+
+# Define macro to identify Windows system (without Cygwin)
+if(CMAKE_SYSTEM_NAME MATCHES "Windows")
+  set(ONIGMO_SYSTEM_WINDOWS On)
+  add_definitions(-DONIGMO_SYSTEM_WINDOWS)
+endif()
+
+# Define macro to identify macOS system
+if(CMAKE_SYSTEM_NAME MATCHES "Darwin")
+  set(ONIGMO_SYSTEM_MACOS On)
+  add_definitions(-DONIGMO_SYSTEM_MACOS)
+endif()
+
+# Define macro to identify Linux system
+if(CMAKE_SYSTEM_NAME MATCHES "Linux")
+  set(ONIGMO_SYSTEM_LINUX On)
+  add_definitions(-DONIGMO_SYSTEM_LINUX)
+endif()
+
+# Update CFLAGS
+if (MSVC)
+  add_definitions(-D_CRT_SECURE_NO_WARNINGS)
+  add_definitions(-D_CRT_NONSTDC_NO_WARNINGS)
+
+  # Use custom CFLAGS for MSVC
+  #
+  #   /Zi ...... Generate pdb files.
+  #   /MT ...... Static link C runtimes.
+  #   /wd4711 .. C4711 (function selected for inline expansion)
+  #   /wd4100 .. C4100 (unreferenced formal parameter)
+  #   /wd5045 .. C5045 (Spectre mitigation)
+  #
+  set(CMAKE_C_FLAGS "/DWIN32 /D_WINDOWS /DNDEBUG /O2 /Zi /wd4100 /wd4711 /wd5045")
+  set(CMAKE_EXE_LINKER_FLAGS "/Debug /INCREMENTAL:NO")
+  set(CMAKE_BUILD_TYPE None)
+
+  # We need this line in order to link libonigmo.lib statically.
+  # Read onigmo/README for details.
+  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DEXPORT -DHAVE_CONFIG_H")
+  # Use add_compile_options() to set /MT since Visual Studio
+  # Generator does not notice /MT in CMAKE_C_FLAGS.
+  add_compile_options(/MT)
+else()
+  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall")
+endif()
+
+set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D__FLB_FILENAME__=__FILE__")
+
+include(GNUInstallDirs)
+include(ExternalProject)
+include(CheckTypeSize)
+include(CheckIncludeFile)
+include(CheckSymbolExists)
+include(CheckCSourceCompiles)
+
+# Output paths
+set(ONIGMO_ROOT "${CMAKE_CURRENT_SOURCE_DIR}")
+set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/bin")
+set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/lib")
+set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/library")
+
+set(ONIGMO_OUT_NAME "onigmo")
+set(ONIGMO_PACKAGE_STRING "${ONIGMO_OUT_NAME} ${ONIGMO_VERSION_STR}")
+
+# For config.h
+set(PACKAGE_NAME ${ONIGMO_OUT_NAME})
+set(PACKAGE_TARNAME ${ONIGMO_OUT_NAME})
+set(PACKAGE_VERSION ${ONIGMO_VERSION_STR})
+set(PACKAGE_STRING ${ONIGMO_PACKAGE_STRING})
+set(PACKAGE_BUGREPORT "")
+set(PACKAGE_URL "")
+
+# Build Options
+option(USE_COMBINATION_EXPLOSION_CHECK "Enable combination explosion check"    No)
+option(USE_CRNL_AS_LINE_TERMINATOR     "Enable CR+NL as line terminator"       No)
+option(ONIGMO_SHARED_LIB               "Enable to build shared library"       Yes)
+option(ONIGMO_CTESTS                   "Enable testing with ctest"            Yes)
+option(ONIGMO_CTESTS_SAMPLE            "Enable testing with ctest on sample"  Yes)
+option(ONIGMO_PYTHON_TESTS             "Enable testing with python tests"     Yes)
+option(ONIGMO_MACOS_DEFAULTS           "Build with predefined macOS settings" Yes)
+
+if(USE_COMBINATION_EXPLOSION_CHECK)
+  add_definitions(-DUSE_COMBINATION_EXPLOSION_CHECK=1)
+endif()
+
+if(USE_CRNL_AS_LINE_TERMINATOR)
+  add_definitions(-DUSE_CRNL_AS_LINE_TERMINATOR=1)
+endif()
+
+# Search python executables
+if(ONIGMO_SYSTEM_WINDOWS)
+  # On Windows, we need to prioritize for Python for Windows installer installed python.
+  find_program(PYTHON_EXECUTABLE "python" "python3" "python2")
+else()
+  find_program(PYTHON_EXECUTABLE "python3" "python" "python2")
+endif()
+message(STATUS "Using python executable is: ${PYTHON_EXECUTABLE}")
+
+# Tweak build targets for macOS
+if(ONIGMO_SYSTEM_MACOS)
+  include(cmake/macos-setup.cmake)
+endif()
+
+check_type_size(int SIZEOF_INT)
+check_type_size(short SIZEOF_SHORT)
+check_type_size(long SIZEOF_LONG)
+check_type_size(void* SIZEOF_VOIDP)
+check_type_size("long long" SIZEOF_LONG_LONG)
+check_type_size("size_t" SIZEOF_SIZE_T)
+
+# AC_HEADERS_STDC
+check_c_source_compiles("
+  #include <stdlib.h>
+  #include <stdarg.h>
+  #include <string.h>
+  #include <float.h>
+  int main() {
+     return 0;
+  }" STDC_HEADERS)
+if(STDC_HEADERS)
+  add_definitions(-DSTDC_HEADERS=1)
+endif()
+
+check_include_file(dlfcn.h HAVE_DLFCN_H)
+check_include_file(inttypes.h HAVE_INTTYPES_H)
+check_include_file(memory.h HAVE_MEMORY_H)
+check_include_file(stdint.h HAVE_STDINT_H)
+check_include_file(stdlib.h HAVE_STDLIB_H)
+check_include_file(strings.h HAVE_STRINGS_H)
+check_include_file(string.h HAVE_STRING_H)
+check_include_file(sys/stat.h HAVE_SYS_STAT_H)
+
+check_c_source_compiles("
+  #include <sys/types.h>
+  #include <sys/time.h>
+  #include <time.h>
+  int main() {
+     struct tm *tm;
+     return 0;
+  }" TIME_WITH_SYS_TIME)
+if(TIME_WITH_SYS_TIME)
+  add_definitions(-DTIME_WITH_SYS_TIME=1)
+endif()
+
+check_include_file(sys/time.h HAVE_SYS_TIME_H)
+check_include_file(sys/times.h HAVE_SYS_TIMES_H)
+check_include_file(unistd.h HAVE_UNISTD_H)
+
+check_symbol_exists(alloca alloca.h HAVE_ALLOCA_H)
+check_symbol_exists(memcmp string.h HAVE_MEMCMP)
+
+
+# Installation Directories
+# ========================
+if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
+  set(ONIGMO_INSTALL_BINDIR "bin")
+  set(ONIGMO_INSTALL_LIBDIR "lib")
+  set(ONIGMO_INSTALL_CONFDIR "conf")
+  set(ONIGMO_INSTALL_DATADIR "share")
+  set(ONIGMO_INSTALL_INCLUDEDIR "include")
+else()
+  set(ONIGMO_INSTALL_BINDIR ${CMAKE_INSTALL_FULL_BINDIR})
+  set(ONIGMO_INSTALL_LIBDIR "${CMAKE_INSTALL_LIBDIR}")
+  set(ONIGMO_INSTALL_CONFDIR "${CMAKE_INSTALL_SYSCONFDIR}/${ONIGMO_OUT_NAME}/")
+  set(ONIGMO_INSTALL_DATADIR "${CMAKE_INSTALL_PREFIX}/share")
+  set(ONIGMO_INSTALL_INCLUDEDIR "${CMAKE_INSTALL_PREFIX}/include")
+endif()
+
+configure_file(${ONIGMO_ROOT}/config.h.cmake ${ONIGMO_ROOT}/config.h)
+configure_file(${ONIGMO_ROOT}/onigmo.pc.cmake ${ONIGMO_ROOT}/onigmo.pc @ONLY)
+
+include_directories(${ONIGMO_ROOT}
+  ${ONIGMO_ROOT}/enc/unicode/
+  ${ONIGMO_ROOT}/enc/
+  )
+
+# Source
+set(src
+  ${src}
+  regerror.c
+  regparse.c
+  regext.c
+  regcomp.c
+  regexec.c
+  reggnu.c
+  regenc.c
+  regsyntax.c
+  regtrav.c
+  regversion.c
+  st.c
+  regposix.c
+  regposerr.c
+  enc/unicode.c
+  enc/ascii.c
+  enc/utf_8.c
+  enc/utf_16be.c
+  enc/utf_16le.c
+  enc/utf_32be.c
+  enc/utf_32le.c
+  enc/euc_jp.c
+  enc/shift_jis.c
+  enc/windows_31j.c
+  enc/jis/props.kwd
+  enc/iso_8859.h
+  enc/iso_8859_1.c
+  enc/iso_8859_2.c
+  enc/iso_8859_3.c
+  enc/iso_8859_4.c
+  enc/iso_8859_5.c
+  enc/iso_8859_6.c
+  enc/iso_8859_7.c
+  enc/iso_8859_8.c
+  enc/iso_8859_9.c
+  enc/iso_8859_10.c
+  enc/iso_8859_11.c
+  enc/iso_8859_13.c
+  enc/iso_8859_14.c
+  enc/iso_8859_15.c
+  enc/iso_8859_16.c
+  enc/euc_tw.c
+  enc/euc_kr.c
+  enc/big5.c
+  enc/gb18030.c
+  enc/koi8_r.c
+  enc/koi8_u.c
+  enc/windows_1250.c
+  enc/windows_1251.c
+  enc/windows_1252.c
+  enc/windows_1253.c
+  enc/windows_1254.c
+  enc/windows_1257.c
+  )
+
+# Static Library
+add_library(onigmo-static STATIC ${src})
+
+# Shared Library
+if(ONIGMO_SHARED_LIB)
+  add_library(onigmo-shared SHARED ${src})
+  set_target_properties(onigmo-shared
+    PROPERTIES OUTPUT_NAME onigmo
+    WINDOWS_EXPORT_ALL_SYMBOLS ON)
+
+  if (MSVC)
+    set_target_properties(onigmo-shared
+      PROPERTIES PDB_NAME onigmo.dll)
+    target_link_options(onigmo-shared
+      PUBLIC /pdb:$<TARGET_PDB_FILE:onigmo-shared>
+      PRIVATE /LTCG)
+  endif()
+
+  # Library install routines
+  install(TARGETS onigmo-shared
+    LIBRARY DESTINATION ${ONIGMO_INSTALL_LIBDIR}
+    COMPONENT library
+    RUNTIME DESTINATION ${ONIGMO_INSTALL_BINDIR})
+endif()
+
+# Test Source
+
+if(ONIGMO_CTESTS)
+  enable_testing()
+  if(ONIGMO_SYSTEM_WINDOWS)
+    add_executable(testc win32/testc.c)
+    target_compile_options(testc PUBLIC -DONIG_EXTERN=extern)
+  else()
+    add_executable(testc testc.c)
+  endif()
+  add_test(NAME testc COMMAND testc)
+  target_link_libraries(testc onigmo-static)
+
+  if(ONIGMO_SYSTEM_WINDOWS)
+    add_executable(testp win32/testc.c)
+  else()
+    add_executable(testp testc.c)
+  endif()
+  target_compile_options(testp PUBLIC -DPOSIX_TEST)
+  add_test(NAME testp COMMAND testp)
+  target_link_libraries(testp onigmo-static)
+
+  add_executable(testu testu.c)
+  add_test(NAME testu COMMAND testu)
+  target_link_libraries(testu onigmo-static)
+
+  add_executable(test_enc_utf8 test_enc_utf8.c)
+  add_test(NAME test_enc_utf8 COMMAND test_enc_utf8)
+  target_link_libraries(test_enc_utf8 onigmo-static)
+endif()
+
+if(ONIGMO_CTESTS_SAMPLE)
+  enable_testing()
+  macro(SAMPLE_TEST_ADD name)
+    add_executable(${name} sample/${name}.c)
+    add_test(NAME ${name} COMMAND ${name})
+    target_link_libraries(${name} onigmo-static)
+  endmacro()
+  SAMPLE_TEST_ADD(encode)
+  SAMPLE_TEST_ADD(listcap)
+  SAMPLE_TEST_ADD(names)
+  SAMPLE_TEST_ADD(posix)
+  SAMPLE_TEST_ADD(simple)
+  SAMPLE_TEST_ADD(sql)
+  SAMPLE_TEST_ADD(syntax)
+  SAMPLE_TEST_ADD(scan)
+  SAMPLE_TEST_ADD(crnl)
+endif()
+
+if(PYTHON_EXECUTABLE AND ONIGMO_PYTHON_TESTS AND ONIGMO_SHARED_LIB)
+  enable_testing()
+  set(TEST_WORK_DIR "")
+  if (ONIGMO_SYSTEM_LINUX)
+    set(TEST_LIBRARY_PATH_ENV "LD_LIBRARY_PATH=${CMAKE_CURRENT_BINARY_DIR}/lib")
+  elseif(ONIGMO_SYSTEM_MACOS)
+    set(TEST_LIBRARY_PATH_ENV "DYLD_LIBRARY_PATH=${CMAKE_CURRENT_BINARY_DIR}/lib")
+  elseif(ONIGMO_SYSTEM_WINDOWS)
+    set(TEST_WORK_DIR ${CMAKE_CURRENT_BINARY_DIR}/bin)
+  endif()
+  macro(PYTHON_TEST_ADD name encoding)
+    add_test(NAME ${name} COMMAND ${PYTHON_EXECUTABLE} ${ONIGMO_ROOT}/testpy.py ${encoding}
+      WORKING_DIRECTORY ${TEST_WORK_DIR})
+    set_property(TEST ${name} PROPERTY ENVIRONMENT ${TEST_LIBRARY_PATH_ENV})
+  endmacro()
+  PYTHON_TEST_ADD(python-euc-jp  EUC-JP)
+  PYTHON_TEST_ADD(python-sjis    SJIS)
+  PYTHON_TEST_ADD(python-utf8    UTF-8)
+  PYTHON_TEST_ADD(python-utf16le UTF-16LE)
+  PYTHON_TEST_ADD(python-utf16be UTF-16BE)
+  PYTHON_TEST_ADD(python-utf32le UTF-32LE)
+  PYTHON_TEST_ADD(python-utf32be UTF-32BE)
+endif()
diff --git a/lib/onigmo/COPYING b/lib/onigmo/COPYING
index de0e7908a..957fa8cf1 100644
--- a/lib/onigmo/COPYING
+++ b/lib/onigmo/COPYING
@@ -1,63 +1,59 @@
 Onigmo (Oniguruma-mod) LICENSE
 ------------------------------
 
-/*-
- * Copyright (c) 2002-2009  K.Kosako  <sndgk393 AT ybb DOT ne DOT jp>
- * Copyright (c) 2011-2014  K.Takata  <kentkt AT csc DOT jp>
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
- * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
- * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- */
+Copyright (c) 2002-2018  K.Kosako  <kkosako0@gmail.com>
+Copyright (c) 2011-2019  K.Takata  <kentkt AT csc DOT jp>
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+
+THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
 
 
 
 Oniguruma LICENSE
 -----------------
 
-/*-
- * Copyright (c) 2002-2009  K.Kosako  <sndgk393 AT ybb DOT ne DOT jp>
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
- * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
- * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- */
+Copyright (c) 2002-2018  K.Kosako  <kkosako0@gmail.com>
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions
+are met:
+1. Redistributions of source code must retain the above copyright
+   notice, this list of conditions and the following disclaimer.
+2. Redistributions in binary form must reproduce the above copyright
+   notice, this list of conditions and the following disclaimer in the
+   documentation and/or other materials provided with the distribution.
+
+THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGE.
 
 
 
diff --git a/lib/onigmo/HISTORY b/lib/onigmo/HISTORY
index 43a14e5d3..9858cc638 100644
--- a/lib/onigmo/HISTORY
+++ b/lib/onigmo/HISTORY
@@ -1,5 +1,43 @@
 History of Onigmo (Oniguruma-mod)
 
+2019/01/30: Version 6.2.0
+
+2019/01/30: [dist] Update LTVERSION to "6:5:0".
+2019/01/30: [dist] Delete all autotools generated files from the repository.
+                   (PR #115)
+2019/01/30: [test] Update tests. (PR #127)
+2019/01/30: [impl] Add USE_CASE_MAP_API configuration. (PR #125)
+2019/01/29: [test] Add some tests. (PR #124)
+2019/01/29: [impl] Revise the code for searching. (PR #123)
+2019/01/28: [bug]  Fix initialization of the table for quick search.
+                   This was caused by PR #113.
+                   (Issue #120) (PR #121)
+2019/01/26: [spec] (thanks omochimetaru)
+                   Make it possible to extend UTF-8 to 31 bits. (PR #111)
+2019/01/25: [dist] Remove minor version from the py command. (PR #119)
+2019/01/25: [impl] Avoid negative character. (PR #118)
+2019/01/25: [impl] Fix lgtm.com warnings. (PR #117)
+2019/01/25: [bug]  Fix that "ss" in look-behind causes syntax error.
+                   (Issue #92) (PR #116)
+2019/01/24: [bug]  Fix performance regression if quantifier lower bound is 1.
+                   (Issue #100) (PR #114)
+2019/01/24: [bug]  Fix performance problem with /k/i and /s/i.
+                   (Issue #97) (PR #113)
+2019/01/24: [new]  Update Unicode data: Unicode 11.0.0, Emoji 11.0 (PR #112)
+2019/01/24: [bug]  Import the latest code from Ruby (PR #112)
+2019/01/24: [impl] (thanks aycabta)
+                   Support gperf 3.1 with backward compatibility. (PR #101)
+2018/12/10: [dist] (thanks Xavier RENE-CORAIL)
+                   Add LGTM.com code quality badges. (PR #108)
+2018/11/10: [impl] (thanks Urabe, Shyouhei)
+                   Avoid negative character. (PR #107)
+2018/01/19: [impl] (thanks Tom Lord)
+                   Remove unused variable. (PR #99)
+2017/09/27: [spec] Import Ruby r58965
+                   Change max byte length of UTF-8 to 4 bytes.
+2017/09/26: [new]  Update Unicode data: Unicode 10.0.0, Emoji 5.0 (PR #93)
+
+
 2017/09/26: Version 6.1.3
 
 2017/09/26: [dist] Update LTVERSION to "6:4:0".
diff --git a/lib/onigmo/Makefile.am b/lib/onigmo/Makefile.am
index a6b01dcaf..ed21e988a 100644
--- a/lib/onigmo/Makefile.am
+++ b/lib/onigmo/Makefile.am
@@ -18,26 +18,26 @@ libonigmo_la_SOURCES = regint.h regparse.h regenc.h st.h \
 	regerror.c regparse.c regext.c regcomp.c regexec.c reggnu.c \
 	regenc.c regsyntax.c regtrav.c regversion.c st.c \
 	regposix.c regposerr.c \
-	$(encdir)/unicode.c $(encdir)/ascii.c $(encdir)/utf_8.c \
-	$(encdir)/utf_16be.c $(encdir)/utf_16le.c \
-	$(encdir)/utf_32be.c $(encdir)/utf_32le.c \
-	$(encdir)/unicode/casefold.h $(encdir)/unicode/name2ctype.h \
-	$(encdir)/euc_jp.c $(encdir)/shift_jis.c $(encdir)/shift_jis.h \
-	$(encdir)/windows_31j.c \
-	$(encdir)/jis/props.h $(encdir)/jis/props.kwd \
-	$(encdir)/iso_8859.h $(encdir)/iso_8859_1.c \
-	$(encdir)/iso_8859_2.c  $(encdir)/iso_8859_3.c \
-	$(encdir)/iso_8859_4.c  $(encdir)/iso_8859_5.c \
-	$(encdir)/iso_8859_6.c  $(encdir)/iso_8859_7.c \
-	$(encdir)/iso_8859_8.c  $(encdir)/iso_8859_9.c \
-	$(encdir)/iso_8859_10.c $(encdir)/iso_8859_11.c \
-	$(encdir)/iso_8859_13.c $(encdir)/iso_8859_14.c \
-	$(encdir)/iso_8859_15.c $(encdir)/iso_8859_16.c \
-	$(encdir)/euc_tw.c $(encdir)/euc_kr.c $(encdir)/big5.c \
-	$(encdir)/gb18030.c $(encdir)/koi8_r.c $(encdir)/koi8_u.c \
-	$(encdir)/windows_1250.c $(encdir)/windows_1251.c \
-	$(encdir)/windows_1252.c $(encdir)/windows_1253.c \
-	$(encdir)/windows_1254.c $(encdir)/windows_1257.c
+	enc/unicode.c enc/ascii.c enc/utf_8.c \
+	enc/utf_16be.c enc/utf_16le.c \
+	enc/utf_32be.c enc/utf_32le.c \
+	enc/unicode/casefold.h enc/unicode/name2ctype.h \
+	enc/euc_jp.c enc/shift_jis.c enc/shift_jis.h \
+	enc/windows_31j.c \
+	enc/jis/props.h enc/jis/props.kwd \
+	enc/iso_8859.h enc/iso_8859_1.c \
+	enc/iso_8859_2.c  enc/iso_8859_3.c \
+	enc/iso_8859_4.c  enc/iso_8859_5.c \
+	enc/iso_8859_6.c  enc/iso_8859_7.c \
+	enc/iso_8859_8.c  enc/iso_8859_9.c \
+	enc/iso_8859_10.c enc/iso_8859_11.c \
+	enc/iso_8859_13.c enc/iso_8859_14.c \
+	enc/iso_8859_15.c enc/iso_8859_16.c \
+	enc/euc_tw.c enc/euc_kr.c enc/big5.c \
+	enc/gb18030.c enc/koi8_r.c enc/koi8_u.c \
+	enc/windows_1250.c enc/windows_1251.c \
+	enc/windows_1252.c enc/windows_1253.c \
+	enc/windows_1254.c enc/windows_1257.c
 
 libonigmo_la_LDFLAGS = -version-info $(LTVERSION) -no-undefined
 
@@ -81,18 +81,22 @@ mktable: $(encdir)/mktable.c $(srcdir)/regenc.h
 # TEST
 TESTS = testc testp testcu
 
-check_PROGRAMS = testc testp testcu
+check_PROGRAMS = testc testp testcu \
+	test_enc_utf8
 
 test: atest pytest
 	$(MAKE) -C sample test
 
-atest: testc$(EXEEXT) testp$(EXEEXT) testcu$(EXEEXT)
+atest: testc$(EXEEXT) testp$(EXEEXT) testcu$(EXEEXT) \
+    test_enc_utf8$(EXEEXT)
 	@echo "[Onigmo API, ASCII/EUC-JP check]"
 	@$(top_builddir)/testc  | grep RESULT
 	@echo "[POSIX API, ASCII/EUC-JP check]"
 	@$(top_builddir)/testp  | grep RESULT
 	@echo "[Onigmo API, UTF-16 check]"
 	@$(top_builddir)/testcu | grep RESULT
+	@echo "[UTF-8 encoding check]"
+	@$(top_builddir)/test_enc_utf8 | grep RESULT
 
 testc_SOURCES = testc.c
 testc_LDADD = libonigmo.la
@@ -104,6 +108,8 @@ testp_CFLAGS = -DPOSIX_TEST
 testcu_SOURCES = testu.c
 testcu_LDADD = libonigmo.la
 
+test_enc_utf8_SOURCES = test_enc_utf8.c
+test_enc_utf8_LDADD = libonigmo.la
 
 #$(srcdir)/testc.c: $(srcdir)/test.rb $(srcdir)/testconv.rb
 $(srcdir)/testc.c:
@@ -133,8 +139,8 @@ pytest:
 # Collect coverage data and write to coverage.info, then create HTML output
 # in the coverage directory.
 lcov:
-	if [ ! -f $(builddir)/enc/jis/props.kwd ]; then mkdir -p $(builddir)/enc/jis; cp $(srcdir)/enc/jis/props.kwd $(builddir)/enc/jis/props.kwd; fi
-	lcov -c -d .libs -o coverage.info
+	if [ ! -f $(builddir)/enc/jis/props.kwd ]; then mkdir -p $(builddir)/enc/jis; cp -p $(srcdir)/enc/jis/props.kwd $(builddir)/enc/jis/props.kwd; fi
+	lcov -c -d .libs -d enc/.libs -o coverage.info
 	genhtml -o coverage coverage.info
 
 # Clear coverage data.
diff --git a/lib/onigmo/README b/lib/onigmo/README
index 87a48fa25..8f468bb4a 100644
--- a/lib/onigmo/README
+++ b/lib/onigmo/README
@@ -92,9 +92,10 @@ Install
 
  Case 1: Unix and Cygwin platform
 
-   1. ./configure
-   2. make
-   3. make install
+   1. ./autogen.sh  (If `configure` doesn't exist.)
+   2. ./configure
+   3. make
+   4. make install
 
    * uninstall
 
diff --git a/lib/onigmo/README.ja b/lib/onigmo/README.ja
index f30e08a2e..3b50c27fb 100644
--- a/lib/onigmo/README.ja
+++ b/lib/onigmo/README.ja
@@ -92,9 +92,10 @@ http://www.geocities.jp/kosako3/oniguruma/
 
  ケース１: UnixとCygwin環境
 
-   1. ./configure
-   2. make
-   3. make install
+   1. .autogen.sh  (`configure` が存在しなかった場合)
+   2. ./configure
+   3. make
+   4. make install
 
    アンインストール
 
diff --git a/lib/onigmo/README.md b/lib/onigmo/README.md
index c85cd4fc8..ca29c0b7e 100644
--- a/lib/onigmo/README.md
+++ b/lib/onigmo/README.md
@@ -2,6 +2,8 @@
 [![Build status](https://ci.appveyor.com/api/projects/status/kndb924qaw1hq72i/branch/master?svg=true)](https://ci.appveyor.com/project/k-takata/onigmo/branch/master)
 [![Coverage Status](https://coveralls.io/repos/k-takata/Onigmo/badge.svg?branch=master&service=github)](https://coveralls.io/github/k-takata/Onigmo?branch=master)
 [![Coverity Scan Build Status](https://scan.coverity.com/projects/2778/badge.svg)](https://scan.coverity.com/projects/k-takata-onigmo)
+[![Code Quality: Cpp](https://img.shields.io/lgtm/grade/cpp/g/k-takata/Onigmo.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/k-takata/Onigmo/context:cpp)
+[![Total Alerts](https://img.shields.io/lgtm/alerts/g/k-takata/Onigmo.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/k-takata/Onigmo/alerts)
 
 Onigmo (Oniguruma-mod)
 ======================
@@ -30,9 +32,10 @@ Install
 
 ### Case 1: Unix and Cygwin platform
 
-   1. `./configure`
-   2. `make`
-   3. `make install`
+   1. `./autogen.sh`  (If `configure` doesn't exist.)
+   2. `./configure`
+   3. `make`
+   4. `make install`
 
    * test
 
diff --git a/lib/onigmo/appveyor.yml b/lib/onigmo/appveyor.yml
new file mode 100644
index 000000000..1984573bb
--- /dev/null
+++ b/lib/onigmo/appveyor.yml
@@ -0,0 +1,42 @@
+version: 1.0.{build}
+
+branches:
+  except:
+  - ruby-2.x
+  - onig-5.9.x-mod
+  - onig-5.9.x-mod_for_bregonig-v2
+
+environment:
+  matrix:
+  - ARCH: x64
+    PYOPT: -3
+  - ARCH: x86
+    PYOPT: -3.4-32
+
+install:
+- cmd: |-
+    rem Check environments.
+    rem path
+    rem dir C:\
+    rem dir "C:\Program Files"
+    rem dir "C:\Program Files\Microsoft SDKs\Windows"
+    rem dir "C:\Program Files (x86)"
+    rem dir "C:\Program Files (x86)\Windows Kits"
+    rem Using Windows SDK 7.1 (VC10)
+    rem "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /%ARCH% /release
+    rem Using VC12
+    "C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\vcvarsall.bat" %ARCH%
+    path
+
+build_script:
+- cmd: |-
+    nmake -f win32\Makefile
+    dir build_%ARCH%\onigmo.dll
+    \msys64\usr\bin\file build_%ARCH%\onigmo.dll
+
+test_script:
+- cmd: |-
+    py %PYOPT% -c "import locale; print(locale.getpreferredencoding())"
+    nmake -f win32\Makefile test
+
+# vim: ts=2 sw=2 sts=2 et
diff --git a/lib/onigmo/autogen.sh b/lib/onigmo/autogen.sh
new file mode 100755
index 000000000..57fb32a74
--- /dev/null
+++ b/lib/onigmo/autogen.sh
@@ -0,0 +1,3 @@
+#!/bin/sh
+
+autoreconf -vfi
diff --git a/lib/onigmo/build_nmake.cmd b/lib/onigmo/build_nmake.cmd
new file mode 100644
index 000000000..c5a622a64
--- /dev/null
+++ b/lib/onigmo/build_nmake.cmd
@@ -0,0 +1,2 @@
+@setlocal enabledelayedexpansion
+nmake -f "%~dp0win32\Makefile" %*
diff --git a/lib/onigmo/cmake/macos-setup.cmake b/lib/onigmo/cmake/macos-setup.cmake
new file mode 100644
index 000000000..c8977cca8
--- /dev/null
+++ b/lib/onigmo/cmake/macos-setup.cmake
@@ -0,0 +1,9 @@
+# Custom build settings for macOS
+#
+# pytest are not supported on macOS yet. This file tweaks
+# the build flags so that we can execute tests for onigmo on it.
+
+if(ONIGMO_MACOS_DEFAULTS)
+  message(STATUS "Overriding setttings with macos-setup.cmake")
+  set(ONIGMO_PYTHON_TESTS No)
+endif()
diff --git a/lib/onigmo/config.h.cmake b/lib/onigmo/config.h.cmake
new file mode 100644
index 000000000..51f7ede27
--- /dev/null
+++ b/lib/onigmo/config.h.cmake
@@ -0,0 +1,120 @@
+/* config.h.cmakein.  Handled by cmake.  */
+
+/* Define to one of `_getb67', `GETB67', `getb67' for Cray-2 and Cray-YMP
+   systems. This function is required for `alloca.c' support on those systems.
+   */
+#undef CRAY_STACKSEG_END
+
+/* Define to 1 if using `alloca.c'. */
+#undef C_ALLOCA
+
+/* Define to 1 if you have `alloca', as a function or macro. */
+#cmakedefine HAVE_ALLOCA 1
+
+/* Define to 1 if you have <alloca.h> and it should be used (not on Ultrix).
+   */
+#cmakedefine HAVE_ALLOCA_H 1
+
+/* Define to 1 if you have the <dlfcn.h> header file. */
+#cmakedefine HAVE_DLFCN_H 1
+
+/* Define to 1 if you have the <inttypes.h> header file. */
+#cmakedefine HAVE_INTTYPES_H 1
+
+/* Define to 1 if you have the <memory.h> header file. */
+#cmakedefine HAVE_MEMORY_H 1
+
+/* Define to 1 if you have the <stdint.h> header file. */
+#cmakedefine HAVE_STDINT_H 1
+
+/* Define to 1 if you have the <stdlib.h> header file. */
+#cmakedefine HAVE_STDLIB_H 1
+
+/* Define to 1 if you have the <strings.h> header file. */
+#cmakedefine HAVE_STRINGS_H 1
+
+/* Define to 1 if you have the <string.h> header file. */
+#cmakedefine HAVE_STRING_H 1
+
+/* Define to 1 if you have the <sys/stat.h> header file. */
+#cmakedefine HAVE_SYS_STAT_H 1
+
+/* Define to 1 if you have the <sys/times.h> header file. */
+#cmakedefine HAVE_SYS_TIMES_H 1
+
+/* Define to 1 if you have the <sys/time.h> header file. */
+#cmakedefine HAVE_SYS_TIME_H 1
+
+/* Define to 1 if you have the <sys/types.h> header file. */
+#cmakedefine HAVE_SYS_TYPES_H 1
+
+/* Define to 1 if you have the <unistd.h> header file. */
+#cmakedefine HAVE_UNISTD_H 1
+
+/* Define to the sub-directory where libtool stores uninstalled libraries. */
+#undef LT_OBJDIR
+
+/* Name of package */
+#cmakedefine PACKAGE
+
+/* Define to the address where bug reports for this package should be sent. */
+#undef PACKAGE_BUGREPORT
+
+/* Define to the full name of this package. */
+#cmakedefine PACKAGE_NAME @ONIGMO_OUT_NAME@
+
+/* Define to the full name and version of this package. */
+#cmakedefine PACKAGE_STRING @ONIGMO_PACKAGE_STRING@
+
+/* Define to the one symbol short name of this package. */
+#cmakedefine PACKAGE_TARNAME @ONIGMO_OUT_NAME@
+
+/* Define to the home page for this package. */
+#undef PACKAGE_URL
+
+/* Define to the version of this package. */
+#cmakedefine PACKAGE_VERSION @ONIGMO_VERSION_STR@
+
+/* The size of `int', as computed by sizeof. */
+#cmakedefine SIZEOF_INT @SIZEOF_INT@
+
+/* The size of `long', as computed by sizeof. */
+#cmakedefine SIZEOF_LONG @SIZEOF_LONG@
+
+/* The size of `long long', as computed by sizeof. */
+#cmakedefine SIZEOF_LONG_LONG @SIZEOF_LONG_LONG@
+
+/* The size of `short', as computed by sizeof. */
+#cmakedefine SIZEOF_SHORT @SIZEOF_SHORT@
+
+/* The size of `void*', as computed by sizeof. */
+#cmakedefine SIZEOF_VOIDP @SIZEOF_VOIDP@
+
+/* If using the C implementation of alloca, define if you know the
+   direction of stack growth for your system; otherwise it will be
+   automatically deduced at runtime.
+	STACK_DIRECTION > 0 => grows toward higher addresses
+	STACK_DIRECTION < 0 => grows toward lower addresses
+	STACK_DIRECTION = 0 => direction of growth unknown */
+#undef STACK_DIRECTION
+
+/* Define to 1 if you have the ANSI C header files. */
+#cmakedefine STDC_HEADERS 1
+
+/* Define to 1 if you can safely include both <sys/time.h> and <time.h>. */
+#cmakedefine TIME_WITH_SYS_TIME 1
+
+/* Define if combination explosion check */
+#cmakedefine USE_COMBINATION_EXPLOSION_CHECK 1
+
+/* Define if enable CR+NL as line terminator */
+#cmakedefine USE_CRNL_AS_LINE_TERMINATOR 1
+
+/* Version number of package */
+#cmakedefine VERSION @ONIGMO_VERSION_STR@
+
+/* Define to empty if `const' does not conform to ANSI C. */
+/* #cmakedefine const */
+
+/* Define to `unsigned int' if <sys/types.h> does not define. */
+/* #cmakedefine size_t */
diff --git a/lib/onigmo/configure.ac b/lib/onigmo/configure.ac
index c90f23876..f6841b19e 100644
--- a/lib/onigmo/configure.ac
+++ b/lib/onigmo/configure.ac
@@ -1,9 +1,9 @@
 dnl Process this file with autoconf to produce a configure script.
-AC_INIT(onigmo, 6.1.3)
+AC_INIT(onigmo, 6.2.0)
 
 AC_CONFIG_MACRO_DIR([m4])
 
-AM_INIT_AUTOMAKE(foreign)
+AM_INIT_AUTOMAKE([foreign subdir-objects])
 AC_CONFIG_HEADER(config.h)
 
 
@@ -42,7 +42,7 @@ dnl Checks for programs.
 AC_PROG_CC
 AC_PROG_LIBTOOL
 AM_PROG_CC_C_O
-LTVERSION="6:4:0"
+LTVERSION="6:5:0"
 AC_SUBST(LTVERSION)
 
 AC_PROG_INSTALL
diff --git a/lib/onigmo/doc/RE b/lib/onigmo/doc/RE
index 17c84ba98..4d2cdaba3 100644
--- a/lib/onigmo/doc/RE
+++ b/lib/onigmo/doc/RE
@@ -375,7 +375,7 @@ syntax: ONIG_SYNTAX_RUBY (default)
     \k<name+level> \k'name+level'
     \k<name-level> \k'name-level'
 
-    Destine a group on the recursion level relative to the referring position.
+    Refer a group on the recursion level relative to the referring position.
 
     ex 1.
 
diff --git a/lib/onigmo/doc/UnicodeProps.txt b/lib/onigmo/doc/UnicodeProps.txt
index 14ddd301b..bc5e15625 100644
--- a/lib/onigmo/doc/UnicodeProps.txt
+++ b/lib/onigmo/doc/UnicodeProps.txt
@@ -1,4 +1,4 @@
-Onigmo (Oniguruma-mod) Unicode Properties  Version 6.0.0    2016/10/15
+Onigmo (Oniguruma-mod) Unicode Properties  Version 6.2.1    2019/07/28
 
 * POSIX brackets
     Alpha
@@ -92,9 +92,11 @@ Onigmo (Oniguruma-mod) Unicode Properties  Version 6.0.0    2016/10/15
     Cyrillic
     Deseret
     Devanagari
+    Dogra
     Duployan
     Egyptian_Hieroglyphs
     Elbasan
+    Elymaic
     Ethiopic
     Georgian
     Glagolitic
@@ -102,9 +104,11 @@ Onigmo (Oniguruma-mod) Unicode Properties  Version 6.0.0    2016/10/15
     Grantha
     Greek
     Gujarati
+    Gunjala_Gondi
     Gurmukhi
     Han
     Hangul
+    Hanifi_Rohingya
     Hanunoo
     Hatran
     Hebrew
@@ -132,10 +136,13 @@ Onigmo (Oniguruma-mod) Unicode Properties  Version 6.0.0    2016/10/15
     Lycian
     Lydian
     Mahajani
+    Makasar
     Malayalam
     Mandaic
     Manichaean
     Marchen
+    Masaram_Gondi
+    Medefaidrin
     Meetei_Mayek
     Mende_Kikakui
     Meroitic_Cursive
@@ -147,9 +154,12 @@ Onigmo (Oniguruma-mod) Unicode Properties  Version 6.0.0    2016/10/15
     Multani
     Myanmar
     Nabataean
+    Nandinagari
     New_Tai_Lue
     Newa
     Nko
+    Nushu
+    Nyiakeng_Puachue_Hmong
     Ogham
     Ol_Chiki
     Old_Hungarian
@@ -157,6 +167,7 @@ Onigmo (Oniguruma-mod) Unicode Properties  Version 6.0.0    2016/10/15
     Old_North_Arabian
     Old_Permic
     Old_Persian
+    Old_Sogdian
     Old_South_Arabian
     Old_Turkic
     Oriya
@@ -177,7 +188,9 @@ Onigmo (Oniguruma-mod) Unicode Properties  Version 6.0.0    2016/10/15
     Siddham
     SignWriting
     Sinhala
+    Sogdian
     Sora_Sompeng
+    Soyombo
     Sundanese
     Syloti_Nagri
     Syriac
@@ -198,8 +211,10 @@ Onigmo (Oniguruma-mod) Unicode Properties  Version 6.0.0    2016/10/15
     Ugaritic
     Unknown
     Vai
+    Wancho
     Warang_Citi
     Yi
+    Zanabazar_Square
 
 * DerivedCoreProperties
     Alphabetic
@@ -250,6 +265,7 @@ Onigmo (Oniguruma-mod) Unicode Properties  Version 6.0.0    2016/10/15
     Prepended_Concatenation_Mark
     Quotation_Mark
     Radical
+    Regional_Indicator
     Sentence_Terminal
     Soft_Dotted
     Terminal_Punctuation
@@ -257,6 +273,13 @@ Onigmo (Oniguruma-mod) Unicode Properties  Version 6.0.0    2016/10/15
     Variation_Selector
     White_Space
 
+* Emoji
+    Emoji
+    Emoji_Component
+    Emoji_Modifier
+    Emoji_Modifier_Base
+    Emoji_Presentation
+
 * PropertyAliases
     AHex
     Bidi_C
@@ -294,6 +317,7 @@ Onigmo (Oniguruma-mod) Unicode Properties  Version 6.0.0    2016/10/15
     Pat_Syn
     Pat_WS
     QMark
+    RI
     SD
     STerm
     Term
@@ -371,13 +395,17 @@ Onigmo (Oniguruma-mod) Unicode Properties  Version 6.0.0    2016/10/15
     Cprt
     Cyrl
     Deva
+    Dogr
     Dsrt
     Dupl
     Egyp
     Elba
+    Elym
     Ethi
     Geor
     Glag
+    Gong
+    Gonm
     Goth
     Gran
     Grek
@@ -391,6 +419,7 @@ Onigmo (Oniguruma-mod) Unicode Properties  Version 6.0.0    2016/10/15
     Hira
     Hluw
     Hmng
+    Hmnp
     Hung
     Ital
     Java
@@ -411,9 +440,11 @@ Onigmo (Oniguruma-mod) Unicode Properties  Version 6.0.0    2016/10/15
     Lyci
     Lydi
     Mahj
+    Maka
     Mand
     Mani
     Marc
+    Medf
     Mend
     Merc
     Mero
@@ -423,9 +454,11 @@ Onigmo (Oniguruma-mod) Unicode Properties  Version 6.0.0    2016/10/15
     Mtei
     Mult
     Mymr
+    Nand
     Narb
     Nbat
     Nkoo
+    Nshu
     Ogam
     Olck
     Orkh
@@ -442,6 +475,7 @@ Onigmo (Oniguruma-mod) Unicode Properties  Version 6.0.0    2016/10/15
     Plrd
     Prti
     Rjng
+    Rohg
     Runr
     Samr
     Sarb
@@ -452,7 +486,10 @@ Onigmo (Oniguruma-mod) Unicode Properties  Version 6.0.0    2016/10/15
     Sidd
     Sind
     Sinh
+    Sogd
+    Sogo
     Sora
+    Soyo
     Sund
     Sylo
     Syrc
@@ -472,9 +509,11 @@ Onigmo (Oniguruma-mod) Unicode Properties  Version 6.0.0    2016/10/15
     Ugar
     Vaii
     Wara
+    Wcho
     Xpeo
     Xsux
     Yiii
+    Zanb
     Zinh
     Qaai
     Zyyy
@@ -482,6 +521,10 @@ Onigmo (Oniguruma-mod) Unicode Properties  Version 6.0.0    2016/10/15
 
 * DerivedAges
     Age=1.1
+    Age=10.0
+    Age=11.0
+    Age=12.0
+    Age=12.1
     Age=2.0
     Age=2.1
     Age=3.0
@@ -520,6 +563,7 @@ Onigmo (Oniguruma-mod) Unicode Properties  Version 6.0.0    2016/10/15
     In_NKo
     In_Samaritan
     In_Mandaic
+    In_Syriac_Supplement
     In_Arabic_Extended_A
     In_Devanagari
     In_Bengali
@@ -563,6 +607,7 @@ Onigmo (Oniguruma-mod) Unicode Properties  Version 6.0.0    2016/10/15
     In_Lepcha
     In_Ol_Chiki
     In_Cyrillic_Extended_C
+    In_Georgian_Extended
     In_Sundanese_Supplement
     In_Vedic_Extensions
     In_Phonetic_Extensions
@@ -702,7 +747,11 @@ Onigmo (Oniguruma-mod) Unicode Properties  Version 6.0.0    2016/10/15
     In_Psalter_Pahlavi
     In_Old_Turkic
     In_Old_Hungarian
+    In_Hanifi_Rohingya
     In_Rumi_Numeral_Symbols
+    In_Old_Sogdian
+    In_Sogdian
+    In_Elymaic
     In_Brahmi
     In_Kaithi
     In_Sora_Sompeng
@@ -721,36 +770,54 @@ Onigmo (Oniguruma-mod) Unicode Properties  Version 6.0.0    2016/10/15
     In_Mongolian_Supplement
     In_Takri
     In_Ahom
+    In_Dogra
     In_Warang_Citi
+    In_Nandinagari
+    In_Zanabazar_Square
+    In_Soyombo
     In_Pau_Cin_Hau
     In_Bhaiksuki
     In_Marchen
+    In_Masaram_Gondi
+    In_Gunjala_Gondi
+    In_Makasar
+    In_Tamil_Supplement
     In_Cuneiform
     In_Cuneiform_Numbers_and_Punctuation
     In_Early_Dynastic_Cuneiform
     In_Egyptian_Hieroglyphs
+    In_Egyptian_Hieroglyph_Format_Controls
     In_Anatolian_Hieroglyphs
     In_Bamum_Supplement
     In_Mro
     In_Bassa_Vah
     In_Pahawh_Hmong
+    In_Medefaidrin
     In_Miao
     In_Ideographic_Symbols_and_Punctuation
     In_Tangut
     In_Tangut_Components
     In_Kana_Supplement
+    In_Kana_Extended_A
+    In_Small_Kana_Extension
+    In_Nushu
     In_Duployan
     In_Shorthand_Format_Controls
     In_Byzantine_Musical_Symbols
     In_Musical_Symbols
     In_Ancient_Greek_Musical_Notation
+    In_Mayan_Numerals
     In_Tai_Xuan_Jing_Symbols
     In_Counting_Rod_Numerals
     In_Mathematical_Alphanumeric_Symbols
     In_Sutton_SignWriting
     In_Glagolitic_Supplement
+    In_Nyiakeng_Puachue_Hmong
+    In_Wancho
     In_Mende_Kikakui
     In_Adlam
+    In_Indic_Siyaq_Numbers
+    In_Ottoman_Siyaq_Numbers
     In_Arabic_Mathematical_Alphabetic_Symbols
     In_Mahjong_Tiles
     In_Domino_Tiles
@@ -765,10 +832,13 @@ Onigmo (Oniguruma-mod) Unicode Properties  Version 6.0.0    2016/10/15
     In_Geometric_Shapes_Extended
     In_Supplemental_Arrows_C
     In_Supplemental_Symbols_and_Pictographs
+    In_Chess_Symbols
+    In_Symbols_and_Pictographs_Extended_A
     In_CJK_Unified_Ideographs_Extension_B
     In_CJK_Unified_Ideographs_Extension_C
     In_CJK_Unified_Ideographs_Extension_D
     In_CJK_Unified_Ideographs_Extension_E
+    In_CJK_Unified_Ideographs_Extension_F
     In_CJK_Compatibility_Ideographs_Supplement
     In_Tags
     In_Variation_Selectors_Supplement
diff --git a/lib/onigmo/enc/ascii.c b/lib/onigmo/enc/ascii.c
index 8b32c414f..233971e2b 100644
--- a/lib/onigmo/enc/ascii.c
+++ b/lib/onigmo/enc/ascii.c
@@ -54,7 +54,11 @@ OnigEncodingDefine(ascii, ASCII) = {
   onigenc_not_support_get_ctype_code_range,
   onigenc_single_byte_left_adjust_char_head,
   onigenc_always_true_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   onigenc_single_byte_ascii_only_case_map,
+#else
+  NULL,
+#endif
   ENCINDEX_ASCII,
   ONIGENC_FLAG_NONE,
 };
diff --git a/lib/onigmo/enc/big5.c b/lib/onigmo/enc/big5.c
index ab4fb6981..e141ebdbe 100644
--- a/lib/onigmo/enc/big5.c
+++ b/lib/onigmo/enc/big5.c
@@ -300,7 +300,11 @@ OnigEncodingDefine(big5, BIG5) = {
   onigenc_not_support_get_ctype_code_range,
   big5_left_adjust_char_head,
   big5_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   onigenc_ascii_only_case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_NONE,
 };
@@ -335,7 +339,11 @@ OnigEncodingDefine(big5_hkscs, BIG5_HKSCS) = {
   onigenc_not_support_get_ctype_code_range,
   big5_left_adjust_char_head,
   big5_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   onigenc_ascii_only_case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_NONE,
 };
@@ -370,7 +378,11 @@ OnigEncodingDefine(big5_uao, BIG5_UAO) = {
   onigenc_not_support_get_ctype_code_range,
   big5_left_adjust_char_head,
   big5_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   onigenc_ascii_only_case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_NONE,
 };
diff --git a/lib/onigmo/enc/cp949.c b/lib/onigmo/enc/cp949.c
new file mode 100644
index 000000000..f9f52c0db
--- /dev/null
+++ b/lib/onigmo/enc/cp949.c
@@ -0,0 +1,226 @@
+/**********************************************************************
+  cp949.c -  Oniguruma (regular expression library)
+**********************************************************************/
+/*-
+ * Copyright (c) 2002-2007  K.Kosako  <sndgk393 AT ybb DOT ne DOT jp>
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include "regenc.h"
+
+static const int EncLen_CP949[] = {
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
+  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
+  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
+  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
+  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
+  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
+  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
+  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1
+};
+
+static const char CP949_CAN_BE_TRAIL_TABLE[256] = {
+  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0
+};
+
+#define CP949_ISMB_FIRST(byte)  (EncLen_CP949[byte] > 1)
+#define CP949_ISMB_TRAIL(byte)  CP949_CAN_BE_TRAIL_TABLE[(byte)]
+
+typedef enum { FAILURE = -2, ACCEPT = -1, S0 = 0, S1 } state_t;
+#define A ACCEPT
+#define F FAILURE
+static const signed char trans[][0x100] = {
+  { /* S0   0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f */
+    /* 0 */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* 1 */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* 2 */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* 3 */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* 4 */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* 5 */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* 6 */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* 7 */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* 8 */ A, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    /* 9 */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    /* a */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    /* b */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    /* c */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    /* d */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    /* e */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    /* f */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, F
+  },
+  { /* S1   0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f */
+    /* 0 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 1 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 2 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 3 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 4 */ F, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* 5 */ A, A, A, A, A, A, A, A, A, A, A, F, F, F, F, F,
+    /* 6 */ F, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* 7 */ A, A, A, A, A, A, A, A, A, A, A, F, F, F, F, F,
+    /* 8 */ F, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* 9 */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* a */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* b */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* c */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* d */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* e */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* f */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, F
+  }
+};
+#undef A
+#undef F
+
+static int
+cp949_mbc_enc_len(const UChar* p, const UChar* e, OnigEncoding enc ARG_UNUSED)
+{
+  int firstbyte = *p++;
+  state_t s = trans[0][firstbyte];
+#define RETURN(n) \
+    return s == ACCEPT ? ONIGENC_CONSTRUCT_MBCLEN_CHARFOUND(n) : \
+                         ONIGENC_CONSTRUCT_MBCLEN_INVALID()
+  if (s < 0) RETURN(1);
+  if (p == e) return ONIGENC_CONSTRUCT_MBCLEN_NEEDMORE(EncLen_CP949[firstbyte]-1);
+  s = trans[s][*p++];
+  RETURN(2);
+#undef RETURN
+}
+
+static OnigCodePoint
+cp949_mbc_to_code(const UChar* p, const UChar* end, OnigEncoding enc)
+{
+  return onigenc_mbn_mbc_to_code(enc, p, end);
+}
+
+static int
+cp949_code_to_mbc(OnigCodePoint code, UChar *buf, OnigEncoding enc)
+{
+  return onigenc_mb2_code_to_mbc(enc, code, buf);
+}
+
+static int
+cp949_mbc_case_fold(OnigCaseFoldType flag, const UChar** pp, const UChar* end,
+                    UChar* lower, OnigEncoding enc)
+{
+  return onigenc_mbn_mbc_case_fold(enc, flag,
+                                   pp, end, lower);
+}
+
+#if 0
+static int
+cp949_is_mbc_ambiguous(OnigCaseFoldType flag,
+		       const UChar** pp, const UChar* end, OnigEncoding enc)
+{
+  return onigenc_mbn_is_mbc_ambiguous(enc, flag, pp, end);
+}
+#endif
+
+static int
+cp949_is_code_ctype(OnigCodePoint code, unsigned int ctype, OnigEncoding enc)
+{
+  return onigenc_mb2_is_code_ctype(enc, code, ctype);
+}
+
+static UChar*
+cp949_left_adjust_char_head(const UChar* start, const UChar* s, const UChar* end, OnigEncoding enc)
+{
+  const UChar *p;
+  int len;
+
+  if (s <= start) return (UChar* )s;
+  p = s;
+
+  if (CP949_ISMB_TRAIL(*p)) {
+    while (p > start) {
+      if (! CP949_ISMB_FIRST(*--p)) {
+	p++;
+	break;
+      }
+    }
+  }
+  len = enclen(enc, p, end);
+  if (p + len > s) return (UChar* )p;
+  p += len;
+  return (UChar* )(p + ((s - p) & ~1));
+}
+
+static int
+cp949_is_allowed_reverse_match(const UChar* s, const UChar* end ARG_UNUSED, OnigEncoding enc ARG_UNUSED)
+{
+  const UChar c = *s;
+  return (CP949_ISMB_TRAIL(c) ? FALSE : TRUE);
+}
+
+OnigEncodingDefine(cp949, CP949) = {
+  cp949_mbc_enc_len,
+  "CP949",      /* name */
+  2,          /* max enc length */
+  1,          /* min enc length */
+  onigenc_is_mbc_newline_0x0a,
+  cp949_mbc_to_code,
+  onigenc_mb2_code_to_mbclen,
+  cp949_code_to_mbc,
+  cp949_mbc_case_fold,
+  onigenc_ascii_apply_all_case_fold,
+  onigenc_ascii_get_case_fold_codes_by_str,
+  onigenc_minimum_property_name_to_ctype,
+  cp949_is_code_ctype,
+  onigenc_not_support_get_ctype_code_range,
+  cp949_left_adjust_char_head,
+  cp949_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
+  onigenc_ascii_only_case_map,
+#else
+  NULL,
+#endif
+  0,
+  ONIGENC_FLAG_NONE,
+};
+/*
+ * Name: CP949
+ * Link: http://www.microsoft.com/globaldev/reference/dbcs/949.mspx
+ * Link: http://en.wikipedia.org/wiki/EUC-KR#EUC-KR
+ */
diff --git a/lib/onigmo/enc/emacs_mule.c b/lib/onigmo/enc/emacs_mule.c
new file mode 100644
index 000000000..abd986a18
--- /dev/null
+++ b/lib/onigmo/enc/emacs_mule.c
@@ -0,0 +1,346 @@
+/**********************************************************************
+  emacs_mule.c -  Oniguruma (regular expression library)
+**********************************************************************/
+/*-
+ * Copyright (c) 2002-2007  K.Kosako  <sndgk393 AT ybb DOT ne DOT jp>
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include "regenc.h"
+
+
+#define emacsmule_islead(c)    ((UChar )(c) < 0x9e)
+
+/*
+    CHARACTER := ASCII_CHAR | MULTIBYTE_CHAR
+    MULTIBYTE_CHAR := PRIMARY_CHAR_1 | PRIMARY_CHAR_2
+                      | SECONDARY_CHAR_1 | SECONDARY_CHAR_2
+    PRIMARY_CHAR_1   := LEADING_CODE_PRI C1
+    PRIMARY_CHAR_2   := LEADING_CODE_PRI C1 C2
+    SECONDARY_CHAR_1 := LEADING_CODE_SEC LEADING_CODE_EXT C1
+    SECONDARY_CHAR_2 := LEADING_CODE_SEC LEADING_CODE_EXT C1 C2
+    ASCII_CHAR := 0 | 1 | ... | 127
+    LEADING_CODE_PRI := 129 | 130 | ... | 153
+    LEADING_CODE_SEC := 154 | 155 | 156 | 157
+    C1, C2, LEADING_CODE_EXT := 160 | 161 | ... | 255
+ */
+
+static const int EncLen_EmacsMule[] = {
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
+  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+};
+
+typedef enum { FAILURE = -2, ACCEPT = -1, S0 = 0, S1, S2, S3, S4, S5, S6 } state_t;
+#define A ACCEPT
+#define F FAILURE
+static const signed char trans[][0x100] = {
+  { /* S0   0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f */
+    /* 0 */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* 1 */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* 2 */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* 3 */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* 4 */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* 5 */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* 6 */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* 7 */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* 8 */ F, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    /* 9 */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 5, 6, F, F,
+    /* a */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* b */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* c */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* d */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* e */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* f */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F
+  },
+  { /* S1   0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f */
+    /* 0 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 1 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 2 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 3 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 4 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 5 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 6 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 7 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 8 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 9 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* a */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* b */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* c */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* d */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* e */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* f */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A
+  },
+  { /* S2   0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f */
+    /* 0 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 1 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 2 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 3 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 4 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 5 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 6 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 7 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 8 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 9 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* a */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    /* b */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    /* c */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    /* d */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    /* e */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    /* f */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
+  },
+  { /* S3   0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f */
+    /* 0 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 1 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 2 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 3 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 4 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 5 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 6 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 7 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 8 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 9 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* a */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    /* b */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    /* c */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    /* d */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    /* e */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* f */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F
+  },
+  { /* S4   0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f */
+    /* 0 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 1 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 2 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 3 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 4 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 5 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 6 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 7 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 8 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 9 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* a */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* b */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* c */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* d */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* e */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    /* f */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F
+  },
+  { /* S5   0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f */
+    /* 0 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 1 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 2 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 3 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 4 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 5 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 6 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 7 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 8 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 9 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* a */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* b */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* c */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* d */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* e */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* f */ 2, 2, 2, 2, 2, F, F, F, F, F, F, F, F, F, F, F
+  },
+  { /* S6   0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f */
+    /* 0 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 1 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 2 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 3 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 4 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 5 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 6 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 7 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 8 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 9 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* a */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* b */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* c */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* d */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* e */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* f */ F, F, F, F, F, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, F
+  },
+
+};
+#undef A
+#undef F
+
+static int
+mbc_enc_len(const UChar* p, const UChar* e, OnigEncoding enc ARG_UNUSED)
+{
+  int firstbyte = *p++;
+  state_t s;
+  s = trans[0][firstbyte];
+  if (s < 0) return s == ACCEPT ? ONIGENC_CONSTRUCT_MBCLEN_CHARFOUND(1) :
+                                  ONIGENC_CONSTRUCT_MBCLEN_INVALID();
+  if (p == e) return ONIGENC_CONSTRUCT_MBCLEN_NEEDMORE(EncLen_EmacsMule[firstbyte]-1);
+  s = trans[s][*p++];
+  if (s < 0) return s == ACCEPT ? ONIGENC_CONSTRUCT_MBCLEN_CHARFOUND(2) :
+                                  ONIGENC_CONSTRUCT_MBCLEN_INVALID();
+  if (p == e) return ONIGENC_CONSTRUCT_MBCLEN_NEEDMORE(EncLen_EmacsMule[firstbyte]-2);
+  s = trans[s][*p++];
+  if (s < 0) return s == ACCEPT ? ONIGENC_CONSTRUCT_MBCLEN_CHARFOUND(3) :
+                                  ONIGENC_CONSTRUCT_MBCLEN_INVALID();
+  if (p == e) return ONIGENC_CONSTRUCT_MBCLEN_NEEDMORE(EncLen_EmacsMule[firstbyte]-3);
+  s = trans[s][*p++];
+  return s == ACCEPT ? ONIGENC_CONSTRUCT_MBCLEN_CHARFOUND(4) :
+                       ONIGENC_CONSTRUCT_MBCLEN_INVALID();
+}
+
+static OnigCodePoint
+mbc_to_code(const UChar* p, const UChar* end, OnigEncoding enc)
+{
+  int c, i, len;
+  OnigCodePoint n;
+
+  len = enclen(enc, p, end);
+  n = (OnigCodePoint )*p++;
+  if (len == 1) return n;
+
+  for (i = 1; i < len; i++) {
+    if (p >= end) break;
+    c = *p++;
+    n <<= 8;  n += c;
+  }
+  return n;
+}
+
+static int
+code_to_mbclen(OnigCodePoint code, OnigEncoding enc ARG_UNUSED)
+{
+  if (ONIGENC_IS_CODE_ASCII(code)) return 1;
+  else if (code > 0xffffffff) return 0;
+  else if ((code & 0xff000000) >= 0x80000000) return 4;
+  else if ((code &   0xff0000) >= 0x800000) return 3;
+  else if ((code &     0xff00) >= 0x8000) return 2;
+  else
+    return ONIGERR_INVALID_CODE_POINT_VALUE;
+}
+
+static int
+code_to_mbc(OnigCodePoint code, UChar *buf, OnigEncoding enc)
+{
+  UChar *p = buf;
+
+  if ((code & 0xff000000) != 0) *p++ = (UChar )(((code >> 24) & 0xff));
+  if ((code &   0xff0000) != 0) *p++ = (UChar )(((code >> 16) & 0xff));
+  if ((code &     0xff00) != 0) *p++ = (UChar )(((code >>  8) & 0xff));
+  *p++ = (UChar )(code & 0xff);
+
+  if (enclen(enc, buf, p) != (p - buf))
+    return ONIGERR_INVALID_CODE_POINT_VALUE;
+  return (int)(p - buf);
+}
+
+static int
+mbc_case_fold(OnigCaseFoldType flag,
+	      const UChar** pp, const UChar* end, UChar* lower,
+	      OnigEncoding enc)
+{
+  int len;
+  const UChar* p = *pp;
+
+  if (ONIGENC_IS_MBC_ASCII(p)) {
+    *lower = ONIGENC_ASCII_CODE_TO_LOWER_CASE(*p);
+    (*pp)++;
+    return 1;
+  }
+  else {
+    int i;
+
+    len = mbc_enc_len(p, end, enc);
+    for (i = 0; i < len; i++) {
+      *lower++ = *p++;
+    }
+    (*pp) += len;
+    return len; /* return byte length of converted char to lower */
+  }
+}
+
+static UChar*
+left_adjust_char_head(const UChar* start, const UChar* s, const UChar* end, OnigEncoding enc)
+{
+  const UChar *p;
+
+  if (s <= start) return (UChar* )s;
+  p = s;
+
+  while (!emacsmule_islead(*p) && p > start) p--;
+  return (UChar* )p;
+}
+
+static int
+is_code_ctype(OnigCodePoint code, unsigned int ctype, OnigEncoding enc ARG_UNUSED)
+{
+  if (code < 128)
+    return ONIGENC_IS_ASCII_CODE_CTYPE(code, ctype);
+  else
+    return (code_to_mbclen(code, enc) > 1 ? TRUE : FALSE);
+}
+
+/*
+ * Name: Emacs-Mule
+ * Link: http://www.m17n.org/mule/pricai96/mule.en.html
+ */
+OnigEncodingDefine(emacs_mule, Emacs_Mule) = {
+  mbc_enc_len,
+  "Emacs-Mule",   /* name */
+  4,          /* max enc length */
+  1,          /* min enc length */
+  onigenc_is_mbc_newline_0x0a,
+  mbc_to_code,
+  code_to_mbclen,
+  code_to_mbc,
+  mbc_case_fold,
+  onigenc_ascii_apply_all_case_fold,
+  onigenc_ascii_get_case_fold_codes_by_str,
+  onigenc_minimum_property_name_to_ctype,
+  is_code_ctype,
+  onigenc_not_support_get_ctype_code_range,
+  left_adjust_char_head,
+  onigenc_always_true_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
+  onigenc_ascii_only_case_map,
+#else
+  NULL,
+#endif
+  0,
+  ONIGENC_FLAG_NONE,
+};
+
+ENC_REPLICATE("stateless-ISO-2022-JP", "Emacs-Mule")
diff --git a/lib/onigmo/enc/euc_jp.c b/lib/onigmo/enc/euc_jp.c
index ded051af6..f3f87b3f5 100644
--- a/lib/onigmo/enc/euc_jp.c
+++ b/lib/onigmo/enc/euc_jp.c
@@ -576,7 +576,11 @@ OnigEncodingDefine(euc_jp, EUC_JP) = {
   get_ctype_code_range,
   left_adjust_char_head,
   is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   onigenc_ascii_only_case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_NONE,
 };
diff --git a/lib/onigmo/enc/euc_kr.c b/lib/onigmo/enc/euc_kr.c
index 21d6ab4e1..4079a0ece 100644
--- a/lib/onigmo/enc/euc_kr.c
+++ b/lib/onigmo/enc/euc_kr.c
@@ -188,7 +188,11 @@ OnigEncodingDefine(euc_kr, EUC_KR) = {
   onigenc_not_support_get_ctype_code_range,
   euckr_left_adjust_char_head,
   euckr_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   onigenc_ascii_only_case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_NONE,
 };
@@ -213,7 +217,11 @@ OnigEncodingDefine(euc_cn, EUC_CN) = {
   onigenc_not_support_get_ctype_code_range,
   euckr_left_adjust_char_head,
   euckr_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   onigenc_ascii_only_case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_NONE,
 };
diff --git a/lib/onigmo/enc/euc_tw.c b/lib/onigmo/enc/euc_tw.c
index 1c5659cb1..722e29a9d 100644
--- a/lib/onigmo/enc/euc_tw.c
+++ b/lib/onigmo/enc/euc_tw.c
@@ -221,7 +221,11 @@ OnigEncodingDefine(euc_tw, EUC_TW) = {
   onigenc_not_support_get_ctype_code_range,
   euctw_left_adjust_char_head,
   euctw_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   onigenc_ascii_only_case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_NONE,
 };
diff --git a/lib/onigmo/enc/gb18030.c b/lib/onigmo/enc/gb18030.c
index 63d2e633e..316737db1 100644
--- a/lib/onigmo/enc/gb18030.c
+++ b/lib/onigmo/enc/gb18030.c
@@ -597,7 +597,11 @@ OnigEncodingDefine(gb18030, GB18030) = {
   onigenc_not_support_get_ctype_code_range,
   gb18030_left_adjust_char_head,
   gb18030_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   onigenc_ascii_only_case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_NONE,
 };
diff --git a/lib/onigmo/enc/gb2312.c b/lib/onigmo/enc/gb2312.c
new file mode 100644
index 000000000..6fc15735f
--- /dev/null
+++ b/lib/onigmo/enc/gb2312.c
@@ -0,0 +1,13 @@
+#include <ruby/ruby.h>
+#include <ruby/encoding.h>
+#include "regenc.h"
+
+void
+Init_gb2312(void)
+{
+    rb_enc_register("GB2312", rb_enc_find("EUC-KR"));
+}
+
+ENC_ALIAS("EUC-CN", "GB2312")
+ENC_ALIAS("eucCN", "GB2312")
+ENC_REPLICATE("GB12345", "GB2312")
diff --git a/lib/onigmo/enc/gbk.c b/lib/onigmo/enc/gbk.c
new file mode 100644
index 000000000..3df4e4b6d
--- /dev/null
+++ b/lib/onigmo/enc/gbk.c
@@ -0,0 +1,229 @@
+/**********************************************************************
+  gbk.c -  Oniguruma (regular expression library)
+**********************************************************************/
+/*-
+ * Copyright (c) 2002-2007  K.Kosako  <sndgk393 AT ybb DOT ne DOT jp>
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include "regenc.h"
+
+static const int EncLen_GBK[] = {
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
+  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
+  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
+  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
+  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
+  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
+  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
+  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1
+};
+
+static const char GBK_CAN_BE_TRAIL_TABLE[256] = {
+  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0
+};
+
+#define GBK_ISMB_FIRST(byte)  (EncLen_GBK[byte] > 1)
+#define GBK_ISMB_TRAIL(byte)  GBK_CAN_BE_TRAIL_TABLE[(byte)]
+
+typedef enum { FAILURE = -2, ACCEPT = -1, S0 = 0, S1 } state_t;
+#define A ACCEPT
+#define F FAILURE
+static const signed char trans[][0x100] = {
+  { /* S0   0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f */
+    /* 0 */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* 1 */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* 2 */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* 3 */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* 4 */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* 5 */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* 6 */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* 7 */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* 8 */ A, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    /* 9 */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    /* a */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    /* b */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    /* c */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    /* d */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    /* e */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
+    /* f */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, F
+  },
+  { /* S1   0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f */
+    /* 0 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 1 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 2 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 3 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 4 */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* 5 */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* 6 */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* 7 */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, F,
+    /* 8 */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* 9 */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* a */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* b */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* c */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* d */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* e */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,
+    /* f */ A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, F
+  }
+};
+#undef A
+#undef F
+
+static int
+gbk_mbc_enc_len(const UChar* p, const UChar* e, OnigEncoding enc ARG_UNUSED)
+{
+  int firstbyte = *p++;
+  state_t s = trans[0][firstbyte];
+#define RETURN(n) \
+    return s == ACCEPT ? ONIGENC_CONSTRUCT_MBCLEN_CHARFOUND(n) : \
+                         ONIGENC_CONSTRUCT_MBCLEN_INVALID()
+  if (s < 0) RETURN(1);
+  if (p == e) return ONIGENC_CONSTRUCT_MBCLEN_NEEDMORE(EncLen_GBK[firstbyte]-1);
+  s = trans[s][*p++];
+  RETURN(2);
+#undef RETURN
+}
+
+static OnigCodePoint
+gbk_mbc_to_code(const UChar* p, const UChar* end, OnigEncoding enc)
+{
+  return onigenc_mbn_mbc_to_code(enc, p, end);
+}
+
+static int
+gbk_code_to_mbc(OnigCodePoint code, UChar *buf, OnigEncoding enc)
+{
+  return onigenc_mb2_code_to_mbc(enc, code, buf);
+}
+
+static int
+gbk_mbc_case_fold(OnigCaseFoldType flag, const UChar** pp, const UChar* end,
+                    UChar* lower, OnigEncoding enc)
+{
+  return onigenc_mbn_mbc_case_fold(enc, flag,
+                                   pp, end, lower);
+}
+
+#if 0
+static int
+gbk_is_mbc_ambiguous(OnigCaseFoldType flag,
+		       const UChar** pp, const UChar* end, OnigEncoding enc)
+{
+  return onigenc_mbn_is_mbc_ambiguous(enc, flag, pp, end);
+}
+#endif
+
+static int
+gbk_is_code_ctype(OnigCodePoint code, unsigned int ctype, OnigEncoding enc)
+{
+  return onigenc_mb2_is_code_ctype(enc, code, ctype);
+}
+
+static UChar*
+gbk_left_adjust_char_head(const UChar* start, const UChar* s, const UChar* end, OnigEncoding enc)
+{
+  const UChar *p;
+  int len;
+
+  if (s <= start) return (UChar* )s;
+  p = s;
+
+  if (GBK_ISMB_TRAIL(*p)) {
+    while (p > start) {
+      if (! GBK_ISMB_FIRST(*--p)) {
+	p++;
+	break;
+      }
+    }
+  }
+  len = enclen(enc, p, end);
+  if (p + len > s) return (UChar* )p;
+  p += len;
+  return (UChar* )(p + ((s - p) & ~1));
+}
+
+static int
+gbk_is_allowed_reverse_match(const UChar* s, const UChar* end ARG_UNUSED, OnigEncoding enc ARG_UNUSED)
+{
+  const UChar c = *s;
+  return (GBK_ISMB_TRAIL(c) ? FALSE : TRUE);
+}
+
+OnigEncodingDefine(gbk, GBK) = {
+  gbk_mbc_enc_len,
+  "GBK",      /* name */
+  2,          /* max enc length */
+  1,          /* min enc length */
+  onigenc_is_mbc_newline_0x0a,
+  gbk_mbc_to_code,
+  onigenc_mb2_code_to_mbclen,
+  gbk_code_to_mbc,
+  gbk_mbc_case_fold,
+  onigenc_ascii_apply_all_case_fold,
+  onigenc_ascii_get_case_fold_codes_by_str,
+  onigenc_minimum_property_name_to_ctype,
+  gbk_is_code_ctype,
+  onigenc_not_support_get_ctype_code_range,
+  gbk_left_adjust_char_head,
+  gbk_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
+  onigenc_ascii_only_case_map,
+#else
+  NULL,
+#endif
+  0,
+  ONIGENC_FLAG_NONE,
+};
+/*
+ * Name: GBK
+ * MIBenum: 113
+ * Link: http://www.iana.org/assignments/character-sets
+ * Link: http://www.iana.org/assignments/charset-reg/GBK
+ * Link: http://www.microsoft.com/globaldev/reference/dbcs/936.mspx
+ */
+ENC_ALIAS("CP936", "GBK")
diff --git a/lib/onigmo/enc/iso_8859_1.c b/lib/onigmo/enc/iso_8859_1.c
index 7af0888c3..78ea1fba6 100644
--- a/lib/onigmo/enc/iso_8859_1.c
+++ b/lib/onigmo/enc/iso_8859_1.c
@@ -255,6 +255,7 @@ is_code_ctype(OnigCodePoint code, unsigned int ctype, OnigEncoding enc ARG_UNUSE
     return FALSE;
 }
 
+#ifdef USE_CASE_MAP_API
 static int
 case_map(OnigCaseFoldType* flagP, const OnigUChar** pp,
 	 const OnigUChar* end, OnigUChar* to, OnigUChar* to_end,
@@ -297,6 +298,7 @@ case_map(OnigCaseFoldType* flagP, const OnigUChar** pp,
   *flagP = flags;
   return (int )(to - to_start);
 }
+#endif
 
 OnigEncodingDefine(iso_8859_1, ISO_8859_1) = {
   onigenc_single_byte_mbc_enc_len,
@@ -315,7 +317,11 @@ OnigEncodingDefine(iso_8859_1, ISO_8859_1) = {
   onigenc_not_support_get_ctype_code_range,
   onigenc_single_byte_left_adjust_char_head,
   onigenc_always_true_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_NONE,
 };
diff --git a/lib/onigmo/enc/iso_8859_10.c b/lib/onigmo/enc/iso_8859_10.c
index cae4be2db..bf1c884cb 100644
--- a/lib/onigmo/enc/iso_8859_10.c
+++ b/lib/onigmo/enc/iso_8859_10.c
@@ -224,6 +224,7 @@ get_case_fold_codes_by_str(OnigCaseFoldType flag,
 	     flag, p, end, items);
 }
 
+#ifdef USE_CASE_MAP_API
 static int
 case_map(OnigCaseFoldType* flagP, const OnigUChar** pp,
 	 const OnigUChar* end, OnigUChar* to, OnigUChar* to_end,
@@ -269,6 +270,7 @@ case_map(OnigCaseFoldType* flagP, const OnigUChar** pp,
   *flagP = flags;
   return (int )(to - to_start);
 }
+#endif
 
 OnigEncodingDefine(iso_8859_10, ISO_8859_10) = {
   onigenc_single_byte_mbc_enc_len,
@@ -287,7 +289,11 @@ OnigEncodingDefine(iso_8859_10, ISO_8859_10) = {
   onigenc_not_support_get_ctype_code_range,
   onigenc_single_byte_left_adjust_char_head,
   onigenc_always_true_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_NONE,
 };
diff --git a/lib/onigmo/enc/iso_8859_11.c b/lib/onigmo/enc/iso_8859_11.c
index 85e8f2cdb..b5d056828 100644
--- a/lib/onigmo/enc/iso_8859_11.c
+++ b/lib/onigmo/enc/iso_8859_11.c
@@ -93,7 +93,11 @@ OnigEncodingDefine(iso_8859_11, ISO_8859_11) = {
   onigenc_not_support_get_ctype_code_range,
   onigenc_single_byte_left_adjust_char_head,
   onigenc_always_true_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   onigenc_single_byte_ascii_only_case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_NONE,
 };
diff --git a/lib/onigmo/enc/iso_8859_13.c b/lib/onigmo/enc/iso_8859_13.c
index fe1ddd706..8c6e758b8 100644
--- a/lib/onigmo/enc/iso_8859_13.c
+++ b/lib/onigmo/enc/iso_8859_13.c
@@ -217,6 +217,7 @@ get_case_fold_codes_by_str(OnigCaseFoldType flag,
 	     flag, p, end, items);
 }
 
+#ifdef USE_CASE_MAP_API
 static int
 case_map(OnigCaseFoldType* flagP, const OnigUChar** pp,
 	 const OnigUChar* end, OnigUChar* to, OnigUChar* to_end,
@@ -264,6 +265,7 @@ case_map(OnigCaseFoldType* flagP, const OnigUChar** pp,
   *flagP = flags;
   return (int )(to - to_start);
 }
+#endif
 
 OnigEncodingDefine(iso_8859_13, ISO_8859_13) = {
   onigenc_single_byte_mbc_enc_len,
@@ -282,7 +284,11 @@ OnigEncodingDefine(iso_8859_13, ISO_8859_13) = {
   onigenc_not_support_get_ctype_code_range,
   onigenc_single_byte_left_adjust_char_head,
   onigenc_always_true_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_NONE,
 };
diff --git a/lib/onigmo/enc/iso_8859_14.c b/lib/onigmo/enc/iso_8859_14.c
index 647514a01..21dffea76 100644
--- a/lib/onigmo/enc/iso_8859_14.c
+++ b/lib/onigmo/enc/iso_8859_14.c
@@ -226,6 +226,7 @@ get_case_fold_codes_by_str(OnigCaseFoldType flag,
 	     flag, p, end, items);
 }
 
+#ifdef USE_CASE_MAP_API
 static int
 case_map(OnigCaseFoldType* flagP, const OnigUChar** pp,
 	 const OnigUChar* end, OnigUChar* to, OnigUChar* to_end,
@@ -280,6 +281,7 @@ case_map(OnigCaseFoldType* flagP, const OnigUChar** pp,
   *flagP = flags;
   return (int )(to - to_start);
 }
+#endif
 
 OnigEncodingDefine(iso_8859_14, ISO_8859_14) = {
   onigenc_single_byte_mbc_enc_len,
@@ -298,7 +300,11 @@ OnigEncodingDefine(iso_8859_14, ISO_8859_14) = {
   onigenc_not_support_get_ctype_code_range,
   onigenc_single_byte_left_adjust_char_head,
   onigenc_always_true_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_NONE,
 };
diff --git a/lib/onigmo/enc/iso_8859_15.c b/lib/onigmo/enc/iso_8859_15.c
index 377a3afc7..dd6c29a64 100644
--- a/lib/onigmo/enc/iso_8859_15.c
+++ b/lib/onigmo/enc/iso_8859_15.c
@@ -220,6 +220,7 @@ get_case_fold_codes_by_str(OnigCaseFoldType flag,
 	     flag, p, end, items);
 }
 
+#ifdef USE_CASE_MAP_API
 static int
 case_map(OnigCaseFoldType* flagP, const OnigUChar** pp,
 	 const OnigUChar* end, OnigUChar* to, OnigUChar* to_end,
@@ -271,6 +272,7 @@ case_map(OnigCaseFoldType* flagP, const OnigUChar** pp,
   *flagP = flags;
   return (int )(to - to_start);
 }
+#endif
 
 OnigEncodingDefine(iso_8859_15, ISO_8859_15) = {
   onigenc_single_byte_mbc_enc_len,
@@ -289,7 +291,11 @@ OnigEncodingDefine(iso_8859_15, ISO_8859_15) = {
   onigenc_not_support_get_ctype_code_range,
   onigenc_single_byte_left_adjust_char_head,
   onigenc_always_true_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_NONE,
 };
diff --git a/lib/onigmo/enc/iso_8859_16.c b/lib/onigmo/enc/iso_8859_16.c
index 135630eb7..aa7ce99fb 100644
--- a/lib/onigmo/enc/iso_8859_16.c
+++ b/lib/onigmo/enc/iso_8859_16.c
@@ -222,6 +222,7 @@ get_case_fold_codes_by_str(OnigCaseFoldType flag,
 	     flag, p, end, items);
 }
 
+#ifdef USE_CASE_MAP_API
 static int
 case_map(OnigCaseFoldType* flagP, const OnigUChar** pp,
 	 const OnigUChar* end, OnigUChar* to, OnigUChar* to_end,
@@ -275,6 +276,7 @@ case_map(OnigCaseFoldType* flagP, const OnigUChar** pp,
   *flagP = flags;
   return (int )(to - to_start);
 }
+#endif
 
 OnigEncodingDefine(iso_8859_16, ISO_8859_16) = {
   onigenc_single_byte_mbc_enc_len,
@@ -293,7 +295,11 @@ OnigEncodingDefine(iso_8859_16, ISO_8859_16) = {
   onigenc_not_support_get_ctype_code_range,
   onigenc_single_byte_left_adjust_char_head,
   onigenc_always_true_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_NONE,
 };
diff --git a/lib/onigmo/enc/iso_8859_2.c b/lib/onigmo/enc/iso_8859_2.c
index 3a05c6320..859073fd1 100644
--- a/lib/onigmo/enc/iso_8859_2.c
+++ b/lib/onigmo/enc/iso_8859_2.c
@@ -220,6 +220,7 @@ is_code_ctype(OnigCodePoint code, unsigned int ctype, OnigEncoding enc ARG_UNUSE
     return FALSE;
 }
 
+#ifdef USE_CASE_MAP_API
 static int
 case_map(OnigCaseFoldType* flagP, const OnigUChar** pp,
 	 const OnigUChar* end, OnigUChar* to, OnigUChar* to_end,
@@ -266,6 +267,7 @@ case_map(OnigCaseFoldType* flagP, const OnigUChar** pp,
   *flagP = flags;
   return (int )(to - to_start);
 }
+#endif
 
 OnigEncodingDefine(iso_8859_2, ISO_8859_2) = {
   onigenc_single_byte_mbc_enc_len,
@@ -284,7 +286,11 @@ OnigEncodingDefine(iso_8859_2, ISO_8859_2) = {
   onigenc_not_support_get_ctype_code_range,
   onigenc_single_byte_left_adjust_char_head,
   onigenc_always_true_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_NONE,
 };
diff --git a/lib/onigmo/enc/iso_8859_3.c b/lib/onigmo/enc/iso_8859_3.c
index 2a343eac6..d8199d512 100644
--- a/lib/onigmo/enc/iso_8859_3.c
+++ b/lib/onigmo/enc/iso_8859_3.c
@@ -220,6 +220,7 @@ get_case_fold_codes_by_str(OnigCaseFoldType flag,
 	     flag, p, end, items);
 }
 
+#ifdef USE_CASE_MAP_API
 #define DOTLESS_i        (0xB9)
 #define I_WITH_DOT_ABOVE (0xA9)
 static int
@@ -276,6 +277,7 @@ case_map(OnigCaseFoldType* flagP, const OnigUChar** pp,
   *flagP = flags;
   return (int )(to - to_start);
 }
+#endif
 
 OnigEncodingDefine(iso_8859_3, ISO_8859_3) = {
   onigenc_single_byte_mbc_enc_len,
@@ -294,7 +296,11 @@ OnigEncodingDefine(iso_8859_3, ISO_8859_3) = {
   onigenc_not_support_get_ctype_code_range,
   onigenc_single_byte_left_adjust_char_head,
   onigenc_always_true_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_NONE,
 };
diff --git a/lib/onigmo/enc/iso_8859_4.c b/lib/onigmo/enc/iso_8859_4.c
index e2134e8c0..5f01f0157 100644
--- a/lib/onigmo/enc/iso_8859_4.c
+++ b/lib/onigmo/enc/iso_8859_4.c
@@ -223,6 +223,7 @@ get_case_fold_codes_by_str(OnigCaseFoldType flag,
 	     flag, p, end, items);
 }
 
+#ifdef USE_CASE_MAP_API
 static int
 case_map(OnigCaseFoldType* flagP, const OnigUChar** pp,
 	 const OnigUChar* end, OnigUChar* to, OnigUChar* to_end,
@@ -272,6 +273,7 @@ case_map(OnigCaseFoldType* flagP, const OnigUChar** pp,
   *flagP = flags;
   return (int )(to - to_start);
 }
+#endif
 
 OnigEncodingDefine(iso_8859_4, ISO_8859_4) = {
   onigenc_single_byte_mbc_enc_len,
@@ -290,7 +292,11 @@ OnigEncodingDefine(iso_8859_4, ISO_8859_4) = {
   onigenc_not_support_get_ctype_code_range,
   onigenc_single_byte_left_adjust_char_head,
   onigenc_always_true_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_NONE,
 };
diff --git a/lib/onigmo/enc/iso_8859_5.c b/lib/onigmo/enc/iso_8859_5.c
index 6fafc3582..8223fc0ec 100644
--- a/lib/onigmo/enc/iso_8859_5.c
+++ b/lib/onigmo/enc/iso_8859_5.c
@@ -209,6 +209,7 @@ get_case_fold_codes_by_str(OnigCaseFoldType flag,
 	     flag, p, end, items);
 }
 
+#ifdef USE_CASE_MAP_API
 static int
 case_map(OnigCaseFoldType* flagP, const OnigUChar** pp,
 	 const OnigUChar* end, OnigUChar* to, OnigUChar* to_end,
@@ -240,6 +241,7 @@ case_map(OnigCaseFoldType* flagP, const OnigUChar** pp,
   *flagP = flags;
   return (int )(to - to_start);
 }
+#endif
 
 OnigEncodingDefine(iso_8859_5, ISO_8859_5) = {
   onigenc_single_byte_mbc_enc_len,
@@ -258,7 +260,11 @@ OnigEncodingDefine(iso_8859_5, ISO_8859_5) = {
   onigenc_not_support_get_ctype_code_range,
   onigenc_single_byte_left_adjust_char_head,
   onigenc_always_true_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_NONE,
 };
diff --git a/lib/onigmo/enc/iso_8859_6.c b/lib/onigmo/enc/iso_8859_6.c
index 6d852ac8c..10a1c357c 100644
--- a/lib/onigmo/enc/iso_8859_6.c
+++ b/lib/onigmo/enc/iso_8859_6.c
@@ -93,7 +93,11 @@ OnigEncodingDefine(iso_8859_6, ISO_8859_6) = {
   onigenc_not_support_get_ctype_code_range,
   onigenc_single_byte_left_adjust_char_head,
   onigenc_always_true_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   onigenc_single_byte_ascii_only_case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_NONE,
 };
diff --git a/lib/onigmo/enc/iso_8859_7.c b/lib/onigmo/enc/iso_8859_7.c
index ac973f74b..e84f5c346 100644
--- a/lib/onigmo/enc/iso_8859_7.c
+++ b/lib/onigmo/enc/iso_8859_7.c
@@ -205,6 +205,7 @@ get_case_fold_codes_by_str(OnigCaseFoldType flag,
 	     flag, p, end, items);
 }
 
+#ifdef USE_CASE_MAP_API
 static int
 case_map(OnigCaseFoldType* flagP, const OnigUChar** pp,
 	 const OnigUChar* end, OnigUChar* to, OnigUChar* to_end,
@@ -259,6 +260,7 @@ case_map(OnigCaseFoldType* flagP, const OnigUChar** pp,
   *flagP = flags;
   return (int )(to - to_start);
 }
+#endif
 
 OnigEncodingDefine(iso_8859_7, ISO_8859_7) = {
   onigenc_single_byte_mbc_enc_len,
@@ -277,7 +279,11 @@ OnigEncodingDefine(iso_8859_7, ISO_8859_7) = {
   onigenc_not_support_get_ctype_code_range,
   onigenc_single_byte_left_adjust_char_head,
   onigenc_always_true_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_NONE,
 };
diff --git a/lib/onigmo/enc/iso_8859_8.c b/lib/onigmo/enc/iso_8859_8.c
index 0a7a29e82..4cd6f31be 100644
--- a/lib/onigmo/enc/iso_8859_8.c
+++ b/lib/onigmo/enc/iso_8859_8.c
@@ -93,7 +93,11 @@ OnigEncodingDefine(iso_8859_8, ISO_8859_8) = {
   onigenc_not_support_get_ctype_code_range,
   onigenc_single_byte_left_adjust_char_head,
   onigenc_always_true_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   onigenc_single_byte_ascii_only_case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_NONE,
 };
diff --git a/lib/onigmo/enc/iso_8859_9.c b/lib/onigmo/enc/iso_8859_9.c
index 004eec310..f15953963 100644
--- a/lib/onigmo/enc/iso_8859_9.c
+++ b/lib/onigmo/enc/iso_8859_9.c
@@ -213,6 +213,7 @@ get_case_fold_codes_by_str(OnigCaseFoldType flag,
 	     flag, p, end, items);
 }
 
+#ifdef USE_CASE_MAP_API
 #define DOTLESS_i        (0xFD)
 #define I_WITH_DOT_ABOVE (0xDD)
 static int
@@ -265,6 +266,7 @@ case_map(OnigCaseFoldType* flagP, const OnigUChar** pp,
   *flagP = flags;
   return (int )(to - to_start);
 }
+#endif
 
 OnigEncodingDefine(iso_8859_9, ISO_8859_9) = {
   onigenc_single_byte_mbc_enc_len,
@@ -283,7 +285,11 @@ OnigEncodingDefine(iso_8859_9, ISO_8859_9) = {
   onigenc_not_support_get_ctype_code_range,
   onigenc_single_byte_left_adjust_char_head,
   onigenc_always_true_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_NONE,
 };
diff --git a/lib/onigmo/enc/jis/props.h b/lib/onigmo/enc/jis/props.h
index 4ae2e1fd2..207443765 100644
--- a/lib/onigmo/enc/jis/props.h
+++ b/lib/onigmo/enc/jis/props.h
@@ -1,4 +1,4 @@
-/* C code produced by gperf version 3.0.4 */
+/* ANSI-C code produced by gperf version 3.1 */
 /* Command-line: gperf -k1,3 -7 -c -j1 -i1 -t -C -P -t --ignore-case -H onig_jis_property_hash -Q onig_jis_property_pool -N onig_jis_property enc/jis/props.kwd  */
 
 #if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
@@ -25,7 +25,7 @@
       && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
       && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
 /* The character set is not based on ISO-646.  */
-error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gnu-gperf@gnu.org>."
+#error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
 #endif
 
 #line 1 "enc/jis/props.kwd"
@@ -68,7 +68,7 @@ struct enc_property {
     unsigned char ctype;
 };
 
-static const struct enc_property *onig_jis_property(const char *str, unsigned int len);
+static const struct enc_property *onig_jis_property(const char *str, size_t len);
 #line 43 "enc/jis/props.kwd"
 struct enc_property;
 
@@ -107,10 +107,7 @@ static unsigned char gperf_downcase[256] =
 #ifndef GPERF_CASE_STRNCMP
 #define GPERF_CASE_STRNCMP 1
 static int
-gperf_case_strncmp (s1, s2, n)
-     register const char *s1;
-     register const char *s2;
-     register unsigned int n;
+gperf_case_strncmp (register const char *s1, register const char *s2, register size_t n)
 {
   for (; n > 0;)
     {
@@ -127,15 +124,15 @@ gperf_case_strncmp (s1, s2, n)
 }
 #endif
 
-#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || defined(__cplusplus) || defined(__GNUC_STDC_INLINE__)
-inline
-#elif defined(__GNUC__)
+#ifdef __GNUC__
 __inline
+#else
+#ifdef __cplusplus
+inline
+#endif
 #endif
 static unsigned int
-onig_jis_property_hash (str, len)
-     register const char *str;
-     register unsigned int len;
+onig_jis_property_hash (register const char *str, register size_t len)
 {
   static const unsigned char asso_values[] =
     {
@@ -175,16 +172,8 @@ static const struct onig_jis_property_pool_t onig_jis_property_pool_contents =
     "cyrillic"
   };
 #define onig_jis_property_pool ((const char *) &onig_jis_property_pool_contents)
-#ifdef __GNUC__
-__inline
-#if defined __GNUC_STDC_INLINE__ || defined __GNUC_GNU_INLINE__
-__attribute__ ((__gnu_inline__))
-#endif
-#endif
 const struct enc_property *
-onig_jis_property (str, len)
-     register const char *str;
-     register unsigned int len;
+onig_jis_property (register const char *str, register size_t len)
 {
   static const struct enc_property wordlist[] =
     {
@@ -207,9 +196,9 @@ onig_jis_property (str, len)
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
     {
-      register int key = onig_jis_property_hash (str, len);
+      register unsigned int key = onig_jis_property_hash (str, len);
 
-      if (key <= MAX_HASH_VALUE && key >= 0)
+      if (key <= MAX_HASH_VALUE)
         {
           register int o = wordlist[key].name;
           if (o >= 0)
diff --git a/lib/onigmo/enc/koi8_r.c b/lib/onigmo/enc/koi8_r.c
index a52097577..39f248246 100644
--- a/lib/onigmo/enc/koi8_r.c
+++ b/lib/onigmo/enc/koi8_r.c
@@ -214,7 +214,11 @@ OnigEncodingDefine(koi8_r, KOI8_R) = {
   onigenc_not_support_get_ctype_code_range,
   onigenc_single_byte_left_adjust_char_head,
   onigenc_always_true_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   onigenc_single_byte_ascii_only_case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_NONE,
 };
diff --git a/lib/onigmo/enc/koi8_u.c b/lib/onigmo/enc/koi8_u.c
index 50bb78bd0..8cd890dd1 100644
--- a/lib/onigmo/enc/koi8_u.c
+++ b/lib/onigmo/enc/koi8_u.c
@@ -218,7 +218,11 @@ OnigEncodingDefine(koi8_u, KOI8_U) = {
   onigenc_not_support_get_ctype_code_range,
   onigenc_single_byte_left_adjust_char_head,
   onigenc_always_true_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   onigenc_single_byte_ascii_only_case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_NONE,
 };
diff --git a/lib/onigmo/enc/shift_jis.c b/lib/onigmo/enc/shift_jis.c
index 65fd5102d..5e4bbb9a3 100644
--- a/lib/onigmo/enc/shift_jis.c
+++ b/lib/onigmo/enc/shift_jis.c
@@ -47,7 +47,11 @@ OnigEncodingDefine(shift_jis, Shift_JIS) = {
   get_ctype_code_range,
   left_adjust_char_head,
   is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   onigenc_ascii_only_case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_NONE,
 };
diff --git a/lib/onigmo/enc/unicode.c b/lib/onigmo/enc/unicode.c
index 72ff5a96e..c0fdca4e0 100644
--- a/lib/onigmo/enc/unicode.c
+++ b/lib/onigmo/enc/unicode.c
@@ -651,6 +651,7 @@ onigenc_unicode_get_case_fold_codes_by_str(OnigEncoding enc,
   return n;
 }
 
+#ifdef USE_CASE_MAP_API
 /* length in bytes for three characters in UTF-32; e.g. needed for ffi (U+FB03) */
 #define CASE_MAPPING_SLACK 12
 #define MODIFIED (flags |= ONIGENC_CASE_MODIFIED)
@@ -678,13 +679,13 @@ onigenc_unicode_case_map(OnigCaseFoldType* flagP,
     *pp += codepoint_length;
 
     if (code <= 'z') { /* ASCII comes first */
-      if (code >= 'a' && code <= 'z') {
+      if (code >= 'a' /*&& code <= 'z'*/) {
 	if (flags & ONIGENC_CASE_UPCASE) {
 	  MODIFIED;
 	  if (flags & ONIGENC_CASE_FOLD_TURKISH_AZERI && code == 'i')
 	    code = I_WITH_DOT_ABOVE;
-	  else
-	    code += 'A' - 'a';
+          else
+            code -= 'a' - 'A';
 	}
       }
       else if (code >= 'A' && code <= 'Z') {
@@ -717,7 +718,11 @@ onigenc_unicode_case_map(OnigCaseFoldType* flagP,
 	}
       }
       else if ((folded = onigenc_unicode_fold_lookup(code)) != 0) { /* data about character found in CaseFold_11_Table */
-	if ((flags & ONIGENC_CASE_TITLECASE)                                 /* Titlecase needed, */
+	if ((flags & ONIGENC_CASE_TITLECASE) && code>=0x1C90 && code<=0x1CBF) { /* Georgian MTAVRULI */
+          MODIFIED;
+	  code += 0x10D0 - 0x1C90;
+        }
+        else if ((flags & ONIGENC_CASE_TITLECASE)                            /* Titlecase needed, */
 	    && (OnigCaseFoldFlags(folded->n) & ONIGENC_CASE_IS_TITLECASE)) { /* but already Titlecase  */
 	  /* already Titlecase, no changes needed */
 	}
@@ -770,10 +775,15 @@ SpecialsCopy:
 	  }
 	}
       }
-      else if ((folded = onigenc_unicode_unfold1_lookup(code)) != 0  /* data about character found in CaseUnfold_11_Table */
-	  && flags & OnigCaseFoldFlags(folded->n)) { /* needs and data availability match */
-	MODIFIED;
-	code = folded->code[(flags & OnigCaseFoldFlags(folded->n) & ONIGENC_CASE_TITLECASE) ? 1 : 0];
+      else if ((folded = onigenc_unicode_unfold1_lookup(code)) != 0) { /* data about character found in CaseUnfold_11_Table */
+	if ((flags & ONIGENC_CASE_TITLECASE)                                 /* Titlecase needed, */
+	    && (OnigCaseFoldFlags(folded->n) & ONIGENC_CASE_IS_TITLECASE)) { /* but already Titlecase */
+	  /* already Titlecase, no changes needed */
+	}
+	else if (flags & OnigCaseFoldFlags(folded->n)) { /* needs and data availability match */
+	  MODIFIED;
+	  code = folded->code[(flags & OnigCaseFoldFlags(folded->n) & ONIGENC_CASE_TITLECASE) ? 1 : 0];
+	}
       }
     }
     to += ONIGENC_CODE_TO_MBC(enc, code, to);
@@ -785,6 +795,7 @@ SpecialsCopy:
   *flagP = flags;
   return (int )(to - to_start);
 }
+#endif
 
 #if 0
 const char onigenc_unicode_version_string[] =
diff --git a/lib/onigmo/enc/unicode/casefold.h b/lib/onigmo/enc/unicode/casefold.h
index 2df4d15e2..5497e5afe 100644
--- a/lib/onigmo/enc/unicode/casefold.h
+++ b/lib/onigmo/enc/unicode/casefold.h
@@ -2,19 +2,19 @@
 /* Generated by tool/case-folding.rb */
 
 #if defined ONIG_UNICODE_VERSION_STRING && !( \
-      ONIG_UNICODE_VERSION_MAJOR == 9 && \
-      ONIG_UNICODE_VERSION_MINOR == 0 && \
+      ONIG_UNICODE_VERSION_MAJOR == 12 && \
+      ONIG_UNICODE_VERSION_MINOR == 1 && \
       ONIG_UNICODE_VERSION_TEENY == 0 && \
       1)
 # error ONIG_UNICODE_VERSION_STRING mismatch
 #endif
-#define ONIG_UNICODE_VERSION_STRING "9.0.0"
-#define ONIG_UNICODE_VERSION_MAJOR 9
-#define ONIG_UNICODE_VERSION_MINOR 0
+#define ONIG_UNICODE_VERSION_STRING "12.1.0"
+#define ONIG_UNICODE_VERSION_MAJOR 12
+#define ONIG_UNICODE_VERSION_MINOR 1
 #define ONIG_UNICODE_VERSION_TEENY 0
 
 static const CaseFold_11_Type CaseFold_11_Table[] = {
-#define CaseFold (*(CaseFold_11_Type (*)[1399])(CaseFold_11_Table+0))
+#define CaseFold (*(CaseFold_11_Type (*)[1485])(CaseFold_11_Table+0))
   {0x0041, {1|F|D, {0x0061}}},
   {0x0042, {1|F|D, {0x0062}}},
   {0x0043, {1|F|D, {0x0063}}},
@@ -554,6 +554,52 @@ static const CaseFold_11_Type CaseFold_11_Table[] = {
   {0x1c86, {1|F|SU|I(51), {0x044a}}},
   {0x1c87, {1|F|SU|I(52), {0x0463}}},
   {0x1c88, {1|F|SU|I(53), {0xa64b}}},
+  {0x1c90, {1|F|D, {0x10d0}}},
+  {0x1c91, {1|F|D, {0x10d1}}},
+  {0x1c92, {1|F|D, {0x10d2}}},
+  {0x1c93, {1|F|D, {0x10d3}}},
+  {0x1c94, {1|F|D, {0x10d4}}},
+  {0x1c95, {1|F|D, {0x10d5}}},
+  {0x1c96, {1|F|D, {0x10d6}}},
+  {0x1c97, {1|F|D, {0x10d7}}},
+  {0x1c98, {1|F|D, {0x10d8}}},
+  {0x1c99, {1|F|D, {0x10d9}}},
+  {0x1c9a, {1|F|D, {0x10da}}},
+  {0x1c9b, {1|F|D, {0x10db}}},
+  {0x1c9c, {1|F|D, {0x10dc}}},
+  {0x1c9d, {1|F|D, {0x10dd}}},
+  {0x1c9e, {1|F|D, {0x10de}}},
+  {0x1c9f, {1|F|D, {0x10df}}},
+  {0x1ca0, {1|F|D, {0x10e0}}},
+  {0x1ca1, {1|F|D, {0x10e1}}},
+  {0x1ca2, {1|F|D, {0x10e2}}},
+  {0x1ca3, {1|F|D, {0x10e3}}},
+  {0x1ca4, {1|F|D, {0x10e4}}},
+  {0x1ca5, {1|F|D, {0x10e5}}},
+  {0x1ca6, {1|F|D, {0x10e6}}},
+  {0x1ca7, {1|F|D, {0x10e7}}},
+  {0x1ca8, {1|F|D, {0x10e8}}},
+  {0x1ca9, {1|F|D, {0x10e9}}},
+  {0x1caa, {1|F|D, {0x10ea}}},
+  {0x1cab, {1|F|D, {0x10eb}}},
+  {0x1cac, {1|F|D, {0x10ec}}},
+  {0x1cad, {1|F|D, {0x10ed}}},
+  {0x1cae, {1|F|D, {0x10ee}}},
+  {0x1caf, {1|F|D, {0x10ef}}},
+  {0x1cb0, {1|F|D, {0x10f0}}},
+  {0x1cb1, {1|F|D, {0x10f1}}},
+  {0x1cb2, {1|F|D, {0x10f2}}},
+  {0x1cb3, {1|F|D, {0x10f3}}},
+  {0x1cb4, {1|F|D, {0x10f4}}},
+  {0x1cb5, {1|F|D, {0x10f5}}},
+  {0x1cb6, {1|F|D, {0x10f6}}},
+  {0x1cb7, {1|F|D, {0x10f7}}},
+  {0x1cb8, {1|F|D, {0x10f8}}},
+  {0x1cb9, {1|F|D, {0x10f9}}},
+  {0x1cba, {1|F|D, {0x10fa}}},
+  {0x1cbd, {1|F|D, {0x10fd}}},
+  {0x1cbe, {1|F|D, {0x10fe}}},
+  {0x1cbf, {1|F|D, {0x10ff}}},
   {0x1e00, {1|F|D, {0x1e01}}},
   {0x1e02, {1|F|D, {0x1e03}}},
   {0x1e04, {1|F|D, {0x1e05}}},
@@ -1103,6 +1149,14 @@ static const CaseFold_11_Type CaseFold_11_Table[] = {
   {0xa7b3, {1|F|D, {0xab53}}},
   {0xa7b4, {1|F|D, {0xa7b5}}},
   {0xa7b6, {1|F|D, {0xa7b7}}},
+  {0xa7b8, {1|F|D, {0xa7b9}}},
+  {0xa7ba, {1|F|D, {0xa7bb}}},
+  {0xa7bc, {1|F|D, {0xa7bd}}},
+  {0xa7be, {1|F|D, {0xa7bf}}},
+  {0xa7c2, {1|F|D, {0xa7c3}}},
+  {0xa7c4, {1|F|D, {0xa794}}},
+  {0xa7c5, {1|F|D, {0x0282}}},
+  {0xa7c6, {1|F|D, {0x1d8e}}},
   {0xab70, {1|F|U, {0x13a0}}},
   {0xab71, {1|F|U, {0x13a1}}},
   {0xab72, {1|F|U, {0x13a2}}},
@@ -1380,6 +1434,38 @@ static const CaseFold_11_Type CaseFold_11_Table[] = {
   {0x118bd, {1|F|D, {0x118dd}}},
   {0x118be, {1|F|D, {0x118de}}},
   {0x118bf, {1|F|D, {0x118df}}},
+  {0x16e40, {1|F|D, {0x16e60}}},
+  {0x16e41, {1|F|D, {0x16e61}}},
+  {0x16e42, {1|F|D, {0x16e62}}},
+  {0x16e43, {1|F|D, {0x16e63}}},
+  {0x16e44, {1|F|D, {0x16e64}}},
+  {0x16e45, {1|F|D, {0x16e65}}},
+  {0x16e46, {1|F|D, {0x16e66}}},
+  {0x16e47, {1|F|D, {0x16e67}}},
+  {0x16e48, {1|F|D, {0x16e68}}},
+  {0x16e49, {1|F|D, {0x16e69}}},
+  {0x16e4a, {1|F|D, {0x16e6a}}},
+  {0x16e4b, {1|F|D, {0x16e6b}}},
+  {0x16e4c, {1|F|D, {0x16e6c}}},
+  {0x16e4d, {1|F|D, {0x16e6d}}},
+  {0x16e4e, {1|F|D, {0x16e6e}}},
+  {0x16e4f, {1|F|D, {0x16e6f}}},
+  {0x16e50, {1|F|D, {0x16e70}}},
+  {0x16e51, {1|F|D, {0x16e71}}},
+  {0x16e52, {1|F|D, {0x16e72}}},
+  {0x16e53, {1|F|D, {0x16e73}}},
+  {0x16e54, {1|F|D, {0x16e74}}},
+  {0x16e55, {1|F|D, {0x16e75}}},
+  {0x16e56, {1|F|D, {0x16e76}}},
+  {0x16e57, {1|F|D, {0x16e77}}},
+  {0x16e58, {1|F|D, {0x16e78}}},
+  {0x16e59, {1|F|D, {0x16e79}}},
+  {0x16e5a, {1|F|D, {0x16e7a}}},
+  {0x16e5b, {1|F|D, {0x16e7b}}},
+  {0x16e5c, {1|F|D, {0x16e7c}}},
+  {0x16e5d, {1|F|D, {0x16e7d}}},
+  {0x16e5e, {1|F|D, {0x16e7e}}},
+  {0x16e5f, {1|F|D, {0x16e7f}}},
   {0x1e900, {1|F|D, {0x1e922}}},
   {0x1e901, {1|F|D, {0x1e923}}},
   {0x1e902, {1|F|D, {0x1e924}}},
@@ -1414,15 +1500,15 @@ static const CaseFold_11_Type CaseFold_11_Table[] = {
   {0x1e91f, {1|F|D, {0x1e941}}},
   {0x1e920, {1|F|D, {0x1e942}}},
   {0x1e921, {1|F|D, {0x1e943}}},
-#define CaseFold_Locale (*(CaseFold_11_Type (*)[2])(CaseFold_11_Table+1399))
+#define CaseFold_Locale (*(CaseFold_11_Type (*)[2])(CaseFold_11_Table+1485))
   {0x0049, {1|F|D, {0x0069}}},
   {0x0130, {2|F|D, {0x0069, 0x0307}}},
 };
 
-/* C code produced by gperf version 3.0.4 */
+/* ANSI-C code produced by gperf version 3.1 */
 /* Command-line: gperf -7 -k1,2,3 -F,-1 -c -j1 -i1 -t -T -E -C -H onigenc_unicode_CaseFold_11_hash -N onigenc_unicode_CaseFold_11_lookup -n  */
 
-/* maximum key range = 3623, duplicates = 0 */
+/* maximum key range = 3500, duplicates = 0 */
 
 #ifdef __GNUC__
 __inline
@@ -1437,37 +1523,31 @@ onigenc_unicode_CaseFold_11_hash(const OnigCodePoint code)
 {
   static const unsigned short asso_values[] =
     {
-         1, 3627,    2,   28,    3,  303,  218,    5,   21,  167,
-         2,  199,  194,    7, 3627, 3627, 3627, 3627, 3627, 3627,
-      3627, 3627, 3627, 3627, 3627, 3627, 3627,   28, 3627, 3627,
-      3627, 3627, 3627, 3627, 3627,  282, 3627, 3627, 3627, 3627,
-      3627,  113, 3627, 3627, 3627, 3627, 3627, 3627, 3627, 3627,
-      3627,  318, 3627, 3627, 3627, 3627, 3627, 3627, 3627, 1197,
-      3627, 3627,  149,   73,  513,    1, 3627, 3627,  267,   17,
-      3627, 3627, 3627, 3627, 3627,  286, 3627, 3627,  289,  617,
-       291,   28, 1163,  444,   36,  430,  954,  110, 1767,    5,
-        11,   22, 1761,  486, 1921,  250, 1746,  122, 1905,  163,
-      1716,  262, 1880,   80, 1503,   68, 1704,  157, 1681,  376,
-      1673,  209, 1822,  203, 1406,  498, 1622,  362, 1588,  316,
-       475,  599, 1228,  538, 1160,  585, 1510,  544,  331,  685,
-      1672,  603, 1536,  840, 1684,  786, 1594,  743, 1380,  700,
-       142,  839, 1302,  865, 1173, 1329, 1730, 1043, 1449,  969,
-      1437, 1108, 1360,  925, 1497,  723,  154,  810,  391, 1083,
-      1777, 1047,  436, 1051,   47, 1342,    8,  974,   98, 1318,
-       781, 1314,  148, 1403,   39, 1357,   18, 1265,   11,  928,
-        92, 1205,    2, 1295,    3, 1181,  187, 1151,  385, 1132,
-       107, 1280,    8, 1678,   41,  511,   42, 1655,   78,  294,
-       134, 1857,   17,  784,    2, 1113,   57,  496,   52
+         5,  273,    4,    8,    3,    1,   86,    9,    2,  289,
+       290,    3, 3510, 3510, 3510, 3510, 3510, 3510, 3510, 3510,
+      3510, 3510, 3510, 3510, 3510,   50, 3510, 3510, 3510, 3510,
+      3510, 3510, 3510,  225, 3510, 3510, 3510, 3510, 3510,   28,
+      3510, 3510, 3510, 3510, 3510, 3510, 3510, 3510, 3510,  394,
+      3510, 3510, 3510, 3510, 3510, 3510, 3510,   47, 3510, 3510,
+       255,   40,  286,    1, 3510, 3510,  599,    8, 3510, 3510,
+      3510, 3510, 3510,  282, 3510, 3510,  267,  667,  473,   39,
+      2019,  189,   47,  175, 2001,  107, 1626,    6,   12,   25,
+      1961,  678, 1128,  526, 1945,  148, 1923,  371, 1720,  134,
+      1857,   80, 1375,   66, 1705,  300, 1635,  445, 1611,  472,
+      1795,  216, 1303,  499, 1552,  270, 1511,  243,  121,  619,
+      1284,  540,  875,  592, 1484,  567,  412,  703, 1692,  387,
+      1782,  781, 1767,  664, 1718,  648, 1316,  608, 1647,  715,
+      1592,  771, 1544, 1029, 1563,  887, 1296,  861, 1194,  978,
+        95,  899, 1257,  835, 1335,  765, 1529,  984,  862,  938,
+      1460,  759,  329, 1079, 1159,  940,  234, 1101, 1204,  990,
+       949, 1493,   92, 1438,   77, 1391,    7, 1073,   44, 1377,
+         2, 1435,    4, 1321,  428, 1274,  332, 1206,   11, 1426,
+        46,  478,  200, 1502,   31, 1400,  153, 1663,  352, 1820,
+       229, 1733,  265, 1405,  315, 1879,  198
     };
-  return asso_values[bits_of(code, 2)+81] + asso_values[bits_of(code, 1)+2] + asso_values[bits_of(code, 0)];
+  return asso_values[bits_of(code, 2)+79] + asso_values[bits_of(code, 1)] + asso_values[bits_of(code, 0)];
 }
 
-#ifdef __GNUC__
-__inline
-#if defined __GNUC_STDC_INLINE__ || defined __GNUC_GNU_INLINE__
-__attribute__ ((__gnu_inline__))
-#endif
-#endif
 static const CodePointList3 *
 onigenc_unicode_CaseFold_11_lookup(const OnigCodePoint code)
 {
@@ -1475,1933 +1555,1950 @@ onigenc_unicode_CaseFold_11_lookup(const OnigCodePoint code)
     {
       MIN_CODE_VALUE = 0x41,
       MAX_CODE_VALUE = 0x1e921,
-      TOTAL_KEYWORDS = 1401,
+      TOTAL_KEYWORDS = 1487,
       MIN_WORD_LENGTH = 3,
       MAX_WORD_LENGTH = 3,
-      MIN_HASH_VALUE = 4,
-      MAX_HASH_VALUE = 3626
+      MIN_HASH_VALUE = 10,
+      MAX_HASH_VALUE = 3509
     };
 
   static const short wordlist[] =
     {
+      -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1,
-      /*0x1ffb*/ 816,
-      /*0x1fe7*/ 802,
-      /*0x017b*/ 118,
-      /*0x1f88*/ 729,
+      /*0x1fe7*/ 848,
+      /*0x10408*/ 1268,
+      /*0x1f88*/ 775,
       /*0x0408*/ 305,
+      /*0x0208*/ 194,
       /*0x0108*/ 61,
-      /*0x10408*/ 1214,
-      /*0x0055*/ 19,
-      /*0xab88*/ 1112,
-      /*0x1f89*/ 730,
+      /*0xab88*/ 1166,
+      /*0x10409*/ 1269,
+      /*0x1f89*/ 776,
       /*0x0409*/ 306,
-      /*0x2c67*/ 916,
-      /*0x10409*/ 1215,
-      /*0x2c08*/ 873,
-      /*0xab89*/ 1113,
-      /*0x1ff9*/ 814,
-      /*0x2c6f*/ 921,
-      /*0x0179*/ 117,
+      /*0x0388*/ 235,
+      /*0x2c67*/ 962,
+      /*0xab89*/ 1167,
+      /*0x2c08*/ 919,
+      -1,
+      /*0x0189*/ 126,
+      /*0x0389*/ 236,
       -1,
-      /*0x2c09*/ 874,
-      /*0x1f8a*/ 731,
+      /*0x2c6d*/ 965,
+      /*0x2c09*/ 920,
+      /*0x1040a*/ 1270,
+      /*0x1f8a*/ 777,
       /*0x040a*/ 307,
+      /*0x020a*/ 195,
       /*0x010a*/ 62,
-      /*0x1040a*/ 1216,
-      /*0x2c88*/ 931,
-      /*0xab8a*/ 1114,
-      /*0x1f80*/ 721,
+      /*0xab8a*/ 1168,
+      /*0x2c88*/ 977,
+      /*0x1ff3*/ 855,
+      /*0x018a*/ 127,
+      /*0x038a*/ 237,
+      -1,
+      /*0x2ced*/ 1024,
+      /*0x2c0a*/ 921,
+      -1,
+      /*0x10400*/ 1260,
+      /*0x1f80*/ 767,
       /*0x0400*/ 297,
+      /*0x0200*/ 190,
       /*0x0100*/ 57,
-      /*0x10400*/ 1206,
-      /*0x2c0a*/ 875,
-      /*0xab80*/ 1104,
-      /*0x10c88*/ 1290,
-      /*0x00d5*/ 47,
-      /*0x1f83*/ 724,
+      /*0xab80*/ 1158,
+      /*0x1fe3*/ 845,
+      /*0x1e88*/ 653,
+      /*0x10403*/ 1263,
+      /*0x1f83*/ 770,
       /*0x0403*/ 300,
-      /*0x2c00*/ 865,
-      /*0x10403*/ 1209,
-      /*0x10c89*/ 1291,
-      /*0xab83*/ 1107,
-      /*0x1ff3*/ 809,
-      /*0x2c8a*/ 932,
-      /*0x1e908*/ 1373,
-      /*0x00df*/ 56,
-      /*0x2c03*/ 868,
-      /*0x1fd3*/ 791,
-      /*0x0053*/ 17,
-      /*0x2c80*/ 927,
-      /*0x1e909*/ 1374,
-      /*0x10c8a*/ 1292,
-      /*0x2183*/ 838,
-      -1,
-      /*0x017f*/ 120,
-      -1,
-      /*0xa780*/ 1059,
-      /*0x10c80*/ 1282,
-      -1,
-      /*0x017d*/ 119,
-      -1,
-      /*0x1e90a*/ 1375,
-      /*0x2c7f*/ 926,
-      -1, -1,
-      /*0x10c83*/ 1285,
-      /*0x00dd*/ 54,
-      /*0x1e900*/ 1365,
-      /*0x1f98*/ 745,
+      /*0x2c8a*/ 978,
+      /*0x2c00*/ 911,
+      /*0xab83*/ 1161,
+      /*0x1c88*/ 538,
+      /*0x10c88*/ 1344,
+      /*0x2183*/ 884,
+      /*0x2c63*/ 960,
+      /*0x1e908*/ 1459,
+      /*0x2c6f*/ 967,
+      /*0x2c03*/ 914,
+      /*0x10c89*/ 1345,
+      -1, -1,
+      /*0x1e909*/ 1460,
+      /*0x2c80*/ 973,
+      /*0x1e8a*/ 654,
+      /*0x10418*/ 1284,
+      /*0x1f98*/ 791,
       /*0x0418*/ 321,
+      /*0x0218*/ 202,
       /*0x0118*/ 69,
-      /*0x10418*/ 1230,
-      /*0x037f*/ 233,
-      /*0xab98*/ 1128,
-      /*0x00d3*/ 45,
-      /*0x1e903*/ 1368,
+      /*0xab98*/ 1182,
       -1,
-      /*0x1e88*/ 607,
-      /*0x2c18*/ 889,
-      -1,
-      /*0x1f96*/ 743,
+      /*0x10c8a*/ 1346,
+      /*0x0198*/ 137,
+      /*0x0398*/ 249,
+      /*0x1e90a*/ 1461,
+      /*0xa780*/ 1105,
+      /*0x2c18*/ 935,
+      /*0x1e80*/ 649,
+      /*0x10416*/ 1282,
+      /*0x1f96*/ 789,
       /*0x0416*/ 319,
+      /*0x0216*/ 201,
       /*0x0116*/ 68,
-      /*0x10416*/ 1228,
-      -1,
-      /*0xab96*/ 1126,
-      -1, -1,
-      /*0x2c75*/ 924,
-      /*0x2c98*/ 939,
-      /*0x2c16*/ 887,
-      -1,
-      /*0x1fe3*/ 799,
+      /*0xab96*/ 1180,
+      /*0x1c80*/ 530,
+      /*0x10c80*/ 1336,
+      /*0x0196*/ 135,
+      /*0x0396*/ 247,
+      /*0x1e900*/ 1451,
+      /*0x2c98*/ 985,
+      /*0x2c16*/ 933,
       -1,
-      /*0x1e8a*/ 608,
+      /*0x1c83*/ 533,
+      /*0x10c83*/ 1339,
+      /*0x1fc7*/ 830,
       -1,
-      /*0xa798*/ 1068,
-      /*0x10c98*/ 1306,
-      /*0x1fd7*/ 793,
-      /*0x0057*/ 21,
-      /*0x1e80*/ 603,
-      /*0x2c96*/ 938,
-      /*0x2c63*/ 914,
-      -1, -1, -1, -1,
-      /*0x1e918*/ 1389,
-      /*0xa796*/ 1067,
-      /*0x10c96*/ 1304,
-      /*0x1f86*/ 727,
+      /*0x1e903*/ 1454,
+      /*0x0147*/ 91,
+      /*0x0047*/ 6,
+      -1, -1,
+      /*0x01c7*/ 159,
+      /*0xa798*/ 1114,
+      /*0x2c96*/ 984,
+      /*0x1e98*/ 662,
+      /*0x10406*/ 1266,
+      /*0x1f86*/ 773,
       /*0x0406*/ 303,
+      /*0x0206*/ 193,
       /*0x0106*/ 60,
-      /*0x10406*/ 1212,
-      /*0x13fb*/ 527,
-      /*0xab86*/ 1110,
-      -1,
-      /*0x2c6d*/ 919,
-      -1,
-      /*0x1e916*/ 1387,
-      /*0x2c06*/ 871,
+      /*0xab86*/ 1164,
+      /*0x1c98*/ 547,
+      /*0x10c98*/ 1360,
+      /*0x0186*/ 124,
+      /*0x0386*/ 234,
+      /*0x1e918*/ 1475,
+      /*0xa796*/ 1113,
+      /*0x2c06*/ 917,
+      /*0x1e96*/ 660,
+      /*0x10427*/ 1299,
+      /*0x1fa7*/ 806,
+      /*0x0427*/ 336,
+      -1, -1,
+      /*0xaba7*/ 1197,
+      /*0x1c96*/ 545,
+      /*0x10c96*/ 1358,
+      /*0x01a7*/ 145,
+      /*0x03a7*/ 263,
+      /*0x1e916*/ 1473,
+      /*0x2c86*/ 976,
+      /*0x2c27*/ 950,
+      /*0x10414*/ 1280,
+      /*0x1f94*/ 787,
+      /*0x0414*/ 317,
+      /*0x0214*/ 200,
+      /*0x0114*/ 67,
+      /*0xab94*/ 1178,
+      -1, -1,
+      /*0x0194*/ 134,
+      /*0x0394*/ 245,
       -1,
-      /*0x1f90*/ 737,
+      /*0xa786*/ 1108,
+      /*0x2c14*/ 931,
+      /*0x1e86*/ 652,
+      /*0x10410*/ 1276,
+      /*0x1f90*/ 783,
       /*0x0410*/ 313,
+      /*0x0210*/ 198,
       /*0x0110*/ 65,
-      /*0x10410*/ 1222,
+      /*0xab90*/ 1174,
+      /*0x1c86*/ 536,
+      /*0x10c86*/ 1342,
+      /*0x0190*/ 131,
+      /*0x0390*/ 241,
+      /*0x1e906*/ 1457,
+      /*0x2c94*/ 983,
+      /*0x2c10*/ 927,
       -1,
-      /*0xab90*/ 1120,
-      /*0x2ced*/ 978,
-      /*0x13f9*/ 525,
+      /*0x03f5*/ 290,
+      /*0xfb00*/ 1222,
       -1,
-      /*0x2c86*/ 930,
-      /*0x2c10*/ 881,
+      /*0x2c75*/ 970,
+      -1, -1,
+      /*0x1ca7*/ 562,
+      /*0x10ca7*/ 1375,
       -1,
-      /*0x1ff7*/ 812,
-      -1, -1, -1,
-      /*0xa786*/ 1062,
-      /*0x10c86*/ 1288,
-      /*0x1e98*/ 616,
+      /*0xfb03*/ 1225,
       -1,
-      /*0x1fbb*/ 777,
-      /*0x2c90*/ 935,
-      /*0x013b*/ 85,
-      -1, -1,
-      /*0xabbb*/ 1163,
-      /*0x1fdb*/ 797,
-      /*0x1e906*/ 1371,
-      /*0xa790*/ 1065,
-      /*0x10c90*/ 1298,
-      /*0x1e96*/ 614,
-      /*0x1e08*/ 543,
-      /*0x1fcb*/ 788,
-      /*0x004b*/ 9,
+      /*0x2c90*/ 981,
+      /*0x1e94*/ 659,
+      /*0x10404*/ 1264,
+      /*0x1f84*/ 771,
+      /*0x0404*/ 301,
+      /*0x0204*/ 192,
+      /*0x0104*/ 59,
+      /*0xab84*/ 1162,
+      /*0x1c94*/ 543,
+      /*0x10c94*/ 1356,
+      /*0x0184*/ 123,
       -1,
-      /*0x1f9a*/ 747,
-      /*0x041a*/ 323,
-      /*0x011a*/ 70,
-      /*0x1041a*/ 1232,
-      /*0x1e910*/ 1381,
-      /*0xab9a*/ 1130,
-      /*0x1f92*/ 739,
-      /*0x0412*/ 315,
-      /*0x0112*/ 66,
-      /*0x10412*/ 1224,
-      /*0x2c1a*/ 891,
-      /*0xab92*/ 1122,
-      /*0x13fd*/ 529,
-      /*0x1e0a*/ 544,
-      /*0x0388*/ 235,
+      /*0x1e914*/ 1471,
+      /*0xa790*/ 1111,
+      /*0x2c04*/ 915,
+      /*0x1e90*/ 657,
+      /*0x10402*/ 1262,
+      /*0x1f82*/ 769,
+      /*0x0402*/ 299,
+      /*0x0202*/ 191,
+      /*0x0102*/ 58,
+      /*0xab82*/ 1160,
+      /*0x1c90*/ 539,
+      /*0x10c90*/ 1352,
+      /*0x0182*/ 122,
       -1,
-      /*0x2c12*/ 883,
-      /*0x03d5*/ 273,
-      /*0x00db*/ 52,
-      /*0x1e00*/ 539,
-      /*0x0389*/ 236,
-      /*0x2c9a*/ 940,
+      /*0x1e910*/ 1467,
+      /*0x2c84*/ 975,
+      /*0x2c02*/ 913,
+      /*0x017f*/ 120,
+      -1,
+      /*0xfb16*/ 1232,
       -1, -1,
-      /*0x00cb*/ 37,
-      /*0x1e86*/ 606,
+      /*0x03ff*/ 296,
+      /*0x01f1*/ 181,
+      /*0x03f1*/ 288,
+      /*0x2c7f*/ 972,
+      -1, -1,
+      /*0xa784*/ 1107,
+      /*0x2c82*/ 974,
+      /*0x1e84*/ 651,
+      /*0x10420*/ 1292,
+      /*0x1fa0*/ 799,
+      /*0x0420*/ 329,
+      /*0x0220*/ 206,
+      /*0x0120*/ 73,
+      /*0xaba0*/ 1190,
+      /*0x1c84*/ 534,
+      /*0x10c84*/ 1340,
+      /*0x01a0*/ 141,
+      /*0x03a0*/ 257,
+      /*0x1e904*/ 1455,
+      /*0xa782*/ 1106,
+      /*0x2c20*/ 943,
+      /*0x1e82*/ 650,
+      /*0x1ff9*/ 860,
+      /*0xfb06*/ 1228,
+      -1,
+      /*0x0179*/ 117,
+      -1,
+      /*0x1fd7*/ 839,
+      /*0x1c82*/ 532,
+      /*0x10c82*/ 1338,
       /*0x03f9*/ 292,
-      /*0x2c92*/ 936,
-      /*0xa79a*/ 1069,
-      /*0x10c9a*/ 1308,
-      /*0x1fe9*/ 804,
-      /*0x038a*/ 237,
+      /*0x0057*/ 21,
+      /*0x1e902*/ 1453,
+      /*0x2ca0*/ 989,
+      /*0x01d7*/ 168,
+      /*0x10426*/ 1298,
+      /*0x1fa6*/ 805,
+      /*0x0426*/ 335,
+      /*0x0226*/ 209,
+      /*0x0126*/ 76,
+      /*0xaba6*/ 1196,
+      -1, -1,
+      /*0x01a6*/ 144,
+      /*0x03a6*/ 262,
+      -1,
+      /*0xa7a0*/ 1118,
+      /*0x2c26*/ 949,
+      /*0x1ea0*/ 667,
+      /*0x13f9*/ 525,
+      /*0xfb14*/ 1230,
       -1, -1,
-      /*0xa792*/ 1066,
-      /*0x10c92*/ 1300,
+      /*0x1e08*/ 589,
       -1,
-      /*0x1e90*/ 611,
+      /*0x1ca0*/ 555,
+      /*0x10ca0*/ 1368,
       -1,
-      /*0x1e91a*/ 1391,
-      /*0x2c69*/ 917,
+      /*0x1ffb*/ 862,
+      /*0x1e920*/ 1483,
+      /*0x2ca6*/ 992,
+      /*0x017b*/ 118,
+      /*0x10424*/ 1296,
+      /*0x1fa4*/ 803,
+      /*0x0424*/ 333,
+      /*0x0224*/ 208,
+      /*0x0124*/ 75,
+      /*0xaba4*/ 1194,
+      -1, -1,
+      /*0x01a4*/ 143,
+      /*0x03a4*/ 260,
+      /*0x1e0a*/ 590,
+      /*0xa7a6*/ 1121,
+      /*0x2c24*/ 947,
+      /*0x1ea6*/ 670,
+      /*0x037f*/ 233,
+      -1, -1, -1, -1, -1,
+      /*0x1ca6*/ 561,
+      /*0x10ca6*/ 1374,
+      /*0x1f08*/ 715,
+      /*0x13fb*/ 527,
+      /*0x1e00*/ 585,
+      /*0x2ca4*/ 991,
       /*0x0508*/ 425,
+      /*0x1f6d*/ 764,
+      /*0x1f09*/ 716,
+      /*0xfb04*/ 1226,
+      /*0x1041a*/ 1286,
+      /*0x1f9a*/ 793,
+      /*0x041a*/ 323,
+      /*0x021a*/ 203,
+      /*0x011a*/ 70,
+      /*0xab9a*/ 1184,
       -1, -1,
-      /*0x0555*/ 481,
-      /*0x1e912*/ 1383,
-      /*0x1fa0*/ 753,
-      /*0x0420*/ 329,
-      /*0x0120*/ 73,
-      /*0x10420*/ 1238,
-      /*0x03f1*/ 288,
-      /*0xaba0*/ 1136,
-      /*0x1f9e*/ 751,
-      /*0x041e*/ 327,
-      /*0x011e*/ 72,
-      /*0x1041e*/ 1236,
-      /*0x2c20*/ 897,
-      /*0xab9e*/ 1134,
+      /*0xa7a4*/ 1120,
+      /*0x039a*/ 251,
+      /*0x1ea4*/ 669,
+      /*0x1f0a*/ 717,
+      /*0x2c1a*/ 937,
+      /*0xfb02*/ 1224,
+      /*0x048a*/ 362,
       /*0x050a*/ 426,
-      /*0x1e18*/ 551,
       -1,
-      /*0x03ff*/ 296,
-      /*0x2c1e*/ 895,
-      /*0x048a*/ 362,
-      /*0x0500*/ 421,
-      /*0x0208*/ 194,
+      /*0x1ca4*/ 559,
+      /*0x10ca4*/ 1372,
+      /*0x017d*/ 119,
+      /*0x10c7*/ 522,
+      /*0x1e18*/ 597,
+      -1, -1,
       /*0x03fd*/ 294,
-      /*0x2ca0*/ 943,
-      -1,
+      /*0x2c9a*/ 986,
+      -1, -1,
       /*0x0480*/ 361,
+      /*0x0500*/ 421,
+      /*0x1fd3*/ 837,
       -1,
-      /*0x1e16*/ 550,
-      /*0x1e9a*/ 618,
-      /*0x2c9e*/ 942,
-      /*0xa7a0*/ 1072,
-      /*0x10ca0*/ 1314,
-      -1,
-      /*0x0398*/ 249,
-      /*0x1e92*/ 612,
+      /*0x1f6f*/ 766,
+      /*0x1feb*/ 852,
+      /*0x0053*/ 17,
+      /*0x1e16*/ 596,
       -1,
-      /*0xa79e*/ 1071,
-      /*0x10c9e*/ 1312,
-      /*0x020a*/ 195,
-      /*0x0553*/ 479,
+      /*0x01d3*/ 166,
+      /*0xa79a*/ 1115,
       -1,
-      /*0x1e920*/ 1397,
+      /*0x1e9a*/ 664,
+      -1, -1,
+      /*0x13fd*/ 529,
+      /*0x2c6b*/ 964,
       -1,
-      /*0x03f5*/ 290,
-      /*0x0200*/ 190,
-      /*0x0396*/ 247,
-      /*0x104d3*/ 1281,
-      /*0x1e91e*/ 1395,
+      /*0x10a7*/ 491,
+      /*0x1c9a*/ 549,
+      /*0x10c9a*/ 1362,
       -1,
-      /*0x1f8e*/ 735,
-      /*0x040e*/ 311,
-      /*0x010e*/ 64,
-      /*0x1040e*/ 1220,
+      /*0x00df*/ 56,
+      /*0x1e91a*/ 1477,
+      /*0x1f18*/ 723,
+      /*0x1ff7*/ 858,
       -1,
-      /*0xab8e*/ 1118,
+      /*0x0498*/ 369,
+      /*0x0518*/ 433,
+      /*0x2ceb*/ 1023,
       -1, -1,
-      /*0x1e06*/ 542,
+      /*0x01f7*/ 185,
+      /*0x03f7*/ 291,
+      /*0x1e06*/ 588,
+      /*0x1f5f*/ 758,
       -1,
-      /*0x2c0e*/ 879,
-      /*0x0518*/ 433,
-      /*0x1f94*/ 741,
-      /*0x0414*/ 317,
-      /*0x0114*/ 67,
-      /*0x10414*/ 1226,
-      /*0x0498*/ 369,
-      /*0xab94*/ 1124,
-      /*0x2165*/ 827,
-      /*0x2167*/ 829,
-      /*0x1e10*/ 547,
-      /*0x2c8e*/ 934,
-      /*0x2c14*/ 885,
-      /*0x0516*/ 432,
-      /*0x216f*/ 837,
-      /*0x1ea0*/ 621,
-      /*0x0386*/ 234,
-      /*0x2161*/ 823,
+      /*0x00dd*/ 54,
+      -1, -1,
+      /*0x00c7*/ 33,
       /*0x0496*/ 368,
-      /*0x10c8e*/ 1296,
-      -1,
-      /*0x1e9e*/ 620,
+      /*0x0516*/ 432,
+      /*0x10412*/ 1278,
+      /*0x1f92*/ 785,
+      /*0x0412*/ 315,
+      /*0x0212*/ 199,
+      /*0x0112*/ 66,
+      /*0xab92*/ 1176,
+      /*0x24c7*/ 902,
+      /*0x1f5d*/ 757,
       -1,
-      /*0x2c94*/ 937,
+      /*0x0392*/ 243,
       -1,
-      /*0x0218*/ 202,
+      /*0x104c7*/ 1323,
+      /*0x2c12*/ 929,
+      /*0x04c7*/ 393,
+      /*0x0547*/ 467,
       -1, -1,
-      /*0x0390*/ 241,
-      /*0x1e90e*/ 1379,
-      -1,
-      /*0x10c94*/ 1302,
-      -1,
-      /*0xa77b*/ 1056,
-      /*0x1ff6*/ 811,
-      /*0x0476*/ 356,
-      /*0x0176*/ 115,
-      /*0x0216*/ 201,
+      /*0x1fb2*/ 815,
+      /*0x1e14*/ 595,
+      /*0x0232*/ 215,
+      /*0x0132*/ 81,
+      /*0xabb2*/ 1208,
       -1, -1,
-      /*0x03f7*/ 291,
-      /*0x1e914*/ 1385,
-      -1,
+      /*0x01b2*/ 151,
+      /*0x2c92*/ 982,
       /*0x0506*/ 424,
+      -1, -1, -1, -1, -1,
+      /*0x1e10*/ 593,
+      -1, -1, -1, -1, -1,
+      /*0xa792*/ 1112,
       -1,
-      /*0x1e1a*/ 552,
+      /*0x1e92*/ 658,
+      /*0x2cb2*/ 998,
+      /*0x1faf*/ 814,
+      /*0x042f*/ 344,
       -1, -1,
-      /*0xa779*/ 1055,
+      /*0xabaf*/ 1205,
+      /*0x1c92*/ 541,
+      /*0x10c92*/ 1354,
+      /*0x01af*/ 149,
       -1,
-      /*0x01d5*/ 167,
-      /*0x1e12*/ 548,
+      /*0x1e912*/ 1469,
+      /*0x0494*/ 367,
+      /*0x0514*/ 431,
+      /*0xa7b2*/ 1130,
+      -1,
+      /*0x1eb2*/ 676,
+      -1,
+      /*0x1fe9*/ 850,
+      /*0x1e04*/ 587,
+      -1, -1, -1,
+      /*0x1cb2*/ 573,
+      /*0x10cb2*/ 1386,
       -1,
-      /*0x0189*/ 126,
-      /*0x0376*/ 232,
-      /*0x0510*/ 429,
-      /*0x1fa6*/ 759,
-      /*0x0426*/ 335,
-      /*0x0126*/ 76,
-      /*0x10426*/ 1244,
       /*0x0490*/ 365,
-      /*0xaba6*/ 1142,
-      /*0x1e8e*/ 610,
-      /*0x039a*/ 251,
-      /*0x018a*/ 127,
+      /*0x0510*/ 429,
       -1,
-      /*0x2c26*/ 903,
-      /*0x0206*/ 193,
+      /*0x2c69*/ 963,
+      /*0x10a0*/ 484,
+      -1, -1,
+      /*0x1e02*/ 586,
+      /*0x1041c*/ 1288,
+      /*0x1f9c*/ 795,
+      /*0x041c*/ 325,
+      /*0x021c*/ 204,
+      /*0x011c*/ 71,
+      /*0xab9c*/ 1186,
+      -1, -1,
+      /*0x019c*/ 138,
+      /*0x039c*/ 253,
+      -1, -1,
+      /*0x2c1c*/ 939,
       -1,
-      /*0x0392*/ 243,
+      /*0x1caf*/ 570,
+      /*0x10caf*/ 1383,
+      -1, -1, -1, -1,
+      /*0x0504*/ 423,
+      -1, -1,
+      /*0x10a6*/ 490,
       -1,
-      /*0x1faf*/ 768,
-      /*0x042f*/ 344,
+      /*0x2c9c*/ 987,
+      /*0x1e20*/ 601,
+      /*0x1041e*/ 1290,
+      /*0x1f9e*/ 797,
+      /*0x041e*/ 327,
+      /*0x021e*/ 205,
+      /*0x011e*/ 72,
+      /*0xab9e*/ 1188,
       -1,
-      /*0x1e94*/ 613,
-      /*0x053b*/ 455,
-      /*0xabaf*/ 1151,
-      /*0x2ca6*/ 946,
+      /*0x0502*/ 422,
+      /*0x0470*/ 353,
+      /*0x039e*/ 255,
+      /*0x0170*/ 112,
+      /*0xa79c*/ 1116,
+      /*0x2c1e*/ 941,
       -1,
-      /*0x0210*/ 198,
+      /*0x01f0*/ 180,
+      /*0x03f0*/ 287,
       -1, -1,
-      /*0x104bb*/ 1257,
-      /*0x01f1*/ 181,
-      /*0xa7a6*/ 1075,
-      /*0x10ca6*/ 1320,
+      /*0x2c70*/ 968,
       -1,
-      /*0x054b*/ 471,
-      /*0xa77d*/ 1057,
-      /*0x01d3*/ 166,
-      /*0x051a*/ 434,
-      /*0x1e20*/ 555,
-      /*0x04cb*/ 395,
+      /*0x1c9c*/ 551,
+      /*0x10c9c*/ 1364,
       -1,
-      /*0x104cb*/ 1273,
-      /*0x049a*/ 370,
-      /*0x0512*/ 430,
-      /*0x1e1e*/ 554,
-      /*0x2163*/ 825,
-      /*0x023b*/ 217,
-      /*0x10caf*/ 1329,
-      /*0x0492*/ 366,
-      /*0x1fa4*/ 757,
-      /*0x0424*/ 333,
-      /*0x0124*/ 75,
-      /*0x10424*/ 1242,
-      /*0x1ef6*/ 664,
-      /*0xaba4*/ 1140,
-      -1,
-      /*0x03a0*/ 257,
-      /*0x0198*/ 137,
-      -1,
-      /*0x2c24*/ 901,
-      /*0x216d*/ 835,
-      /*0x021a*/ 203,
-      /*0x039e*/ 255,
-      /*0x1f9c*/ 749,
-      /*0x041c*/ 325,
-      /*0x011c*/ 71,
-      /*0x1041c*/ 1234,
-      /*0x0212*/ 199,
-      /*0xab9c*/ 1132,
-      /*0x0196*/ 135,
-      /*0x2ca4*/ 945,
+      /*0x10a4*/ 488,
+      /*0x1e91c*/ 1479,
+      /*0x2c9e*/ 988,
+      /*0x1e26*/ 604,
+      /*0x10422*/ 1294,
+      /*0x1fa2*/ 801,
+      /*0x0422*/ 331,
+      /*0x0222*/ 207,
+      /*0x0122*/ 74,
+      /*0xaba2*/ 1192,
+      /*0x04a0*/ 373,
+      /*0x0520*/ 437,
+      /*0x01a2*/ 142,
+      -1, -1,
+      /*0xa79e*/ 1117,
+      /*0x2c22*/ 945,
+      /*0x1e9e*/ 666,
+      /*0x118a7*/ 1394,
+      -1, -1, -1, -1,
+      /*0x1ef0*/ 707,
+      /*0x1c9e*/ 553,
+      /*0x10c9e*/ 1366,
+      -1, -1,
+      /*0x1e91e*/ 1481,
+      /*0x2ca2*/ 990,
+      /*0x1e24*/ 603,
+      /*0x1040e*/ 1274,
+      /*0x1f8e*/ 781,
+      /*0x040e*/ 311,
+      /*0x020e*/ 197,
+      /*0x010e*/ 64,
+      /*0xab8e*/ 1172,
+      /*0x04a6*/ 376,
+      /*0x0526*/ 440,
+      /*0x018e*/ 129,
+      /*0x038e*/ 239,
+      /*0xff27*/ 1240,
+      /*0xa7a2*/ 1119,
+      /*0x2c0e*/ 925,
+      /*0x1ea2*/ 668,
       -1,
-      /*0x1feb*/ 806,
-      /*0x2c1c*/ 893,
+      /*0x1faa*/ 809,
+      /*0x042a*/ 339,
+      /*0x022a*/ 211,
+      /*0x012a*/ 78,
+      /*0xabaa*/ 1200,
+      /*0x1ca2*/ 557,
+      /*0x10ca2*/ 1370,
       -1,
-      /*0x1ea6*/ 624,
+      /*0x03aa*/ 266,
       -1,
-      /*0xa7a4*/ 1074,
-      /*0x10ca4*/ 1318,
-      /*0x004d*/ 11,
+      /*0x2c8e*/ 980,
+      /*0x2c2a*/ 953,
       -1, -1,
-      /*0x2c6b*/ 918,
-      /*0x0520*/ 437,
-      /*0x2c9c*/ 941,
-      /*0x1e0e*/ 546,
-      -1,
-      /*0x01d7*/ 168,
-      /*0x04a0*/ 373,
-      /*0x051e*/ 436,
+      /*0x1e1a*/ 598,
+      -1, -1, -1,
+      /*0x04a4*/ 375,
+      /*0x0524*/ 439,
+      -1, -1, -1,
+      /*0x0370*/ 230,
+      /*0x2caa*/ 994,
+      /*0x1e8e*/ 656,
       -1,
-      /*0xa79c*/ 1070,
-      /*0x10c9c*/ 1310,
-      /*0x2ceb*/ 977,
-      /*0x049e*/ 372,
-      -1, -1,
-      /*0x1e14*/ 549,
+      /*0x1fae*/ 813,
+      /*0x042e*/ 343,
+      /*0x022e*/ 213,
+      /*0x012e*/ 80,
+      /*0xabae*/ 1204,
       -1,
-      /*0x0186*/ 124,
-      -1, -1,
-      /*0x1e91c*/ 1393,
-      /*0x038e*/ 239,
+      /*0x10c8e*/ 1350,
+      /*0x01ae*/ 148,
       -1,
-      /*0x00cd*/ 39,
+      /*0x1e90e*/ 1465,
+      /*0xa7aa*/ 1123,
+      /*0x2c2e*/ 957,
+      /*0x1eaa*/ 672,
+      -1, -1, -1, -1, -1,
+      /*0x1f1a*/ 725,
+      /*0x1caa*/ 565,
+      /*0x10caa*/ 1378,
+      /*0x049a*/ 370,
+      /*0x051a*/ 434,
       -1,
-      /*0x0220*/ 206,
+      /*0x2cae*/ 996,
+      /*0x1fac*/ 811,
+      /*0x042c*/ 341,
+      /*0x022c*/ 212,
+      /*0x012c*/ 79,
+      /*0xabac*/ 1202,
       -1, -1,
-      /*0x10bb*/ 511,
-      /*0x0190*/ 131,
+      /*0x01ac*/ 147,
+      /*0x2165*/ 873,
+      /*0x00d3*/ 45,
+      /*0x2167*/ 875,
+      /*0x2c2c*/ 955,
+      /*0xa7ae*/ 1127,
+      /*0x2161*/ 869,
+      /*0x1eae*/ 674,
+      /*0x118a0*/ 1387,
+      /*0x1fba*/ 822,
+      /*0x216d*/ 881,
+      /*0x023a*/ 216,
+      /*0x10b2*/ 502,
+      /*0xabba*/ 1216,
+      /*0x1cae*/ 569,
+      /*0x10cae*/ 1382,
+      /*0x104d3*/ 1335,
+      /*0x2cac*/ 995,
+      /*0x1f6b*/ 762,
+      /*0x0553*/ 479,
+      /*0x1fa8*/ 807,
+      /*0x0428*/ 337,
+      /*0x0228*/ 210,
+      /*0x0128*/ 77,
+      /*0xaba8*/ 1198,
       -1,
-      /*0x021e*/ 205,
-      /*0x24bb*/ 844,
-      /*0x0394*/ 245,
+      /*0x1e12*/ 594,
       -1,
-      /*0x1f84*/ 725,
-      /*0x0404*/ 301,
-      /*0x0104*/ 59,
-      /*0x10404*/ 1210,
-      /*0x1ea4*/ 623,
-      /*0xab84*/ 1108,
-      /*0x01f7*/ 185,
-      /*0x0051*/ 15,
+      /*0x03a8*/ 264,
       -1,
-      /*0x24cb*/ 860,
-      /*0x2c04*/ 869,
+      /*0xa7ac*/ 1125,
+      /*0x2c28*/ 951,
+      /*0x1eac*/ 673,
+      /*0x2cba*/ 1002,
       -1,
-      /*0x1e76*/ 598,
-      /*0x050e*/ 428,
-      /*0x1f82*/ 723,
-      /*0x0402*/ 299,
-      /*0x0102*/ 58,
-      /*0x10402*/ 1208,
-      /*0x048e*/ 364,
-      /*0xab82*/ 1106,
-      /*0x01db*/ 170,
-      /*0x2c84*/ 929,
+      /*0x118a6*/ 1393,
       -1,
-      /*0x2169*/ 831,
-      /*0x2c02*/ 867,
-      /*0x0514*/ 431,
-      /*0x01cb*/ 162,
+      /*0x10af*/ 499,
       -1,
-      /*0xa784*/ 1061,
-      /*0x10c84*/ 1286,
-      /*0x0494*/ 367,
-      /*0x118bb*/ 1360,
+      /*0x1cac*/ 567,
+      /*0x10cac*/ 1380,
       -1,
-      /*0x00d1*/ 43,
-      /*0x1e26*/ 558,
-      /*0x2c82*/ 928,
+      /*0x1e32*/ 610,
+      /*0x2163*/ 871,
+      /*0x2ca8*/ 993,
+      /*0x216f*/ 883,
+      /*0xa7ba*/ 1135,
       -1,
-      /*0x020e*/ 197,
+      /*0x1eba*/ 680,
+      /*0x1fb8*/ 820,
+      -1, -1, -1,
+      /*0xabb8*/ 1214,
       -1,
-      /*0x1e904*/ 1369,
+      /*0x1cba*/ 581,
+      /*0x01b8*/ 155,
+      /*0xa7a8*/ 1122,
+      /*0xff26*/ 1239,
+      /*0x1ea8*/ 671,
+      /*0x0492*/ 366,
+      /*0x0512*/ 430,
+      /*0x118a4*/ 1391,
       -1, -1,
-      /*0xa782*/ 1060,
-      /*0x10c82*/ 1284,
-      -1,
-      /*0x1fa7*/ 760,
-      /*0x0427*/ 336,
-      -1,
-      /*0x10427*/ 1245,
-      /*0x0214*/ 200,
-      /*0xaba7*/ 1143,
+      /*0x1fb6*/ 818,
+      /*0x1ca8*/ 563,
+      /*0x10ca8*/ 1376,
+      /*0x0136*/ 83,
+      /*0xabb6*/ 1212,
+      -1, -1,
+      /*0xa688*/ 1053,
+      /*0x2cb8*/ 1001,
+      /*0x104b2*/ 1302,
       -1,
-      /*0x03a6*/ 262,
-      /*0x1e902*/ 1367,
-      /*0x10a0*/ 484,
-      /*0x2c27*/ 904,
-      /*0x1f8c*/ 733,
+      /*0x04b2*/ 382,
+      /*0x0532*/ 446,
+      /*0x1040c*/ 1272,
+      /*0x1f8c*/ 779,
       /*0x040c*/ 309,
+      /*0x020c*/ 196,
       /*0x010c*/ 63,
-      /*0x1040c*/ 1218,
+      /*0xab8c*/ 1170,
       -1,
-      /*0xab8c*/ 1116,
-      /*0x04f6*/ 416,
+      /*0xff24*/ 1237,
+      /*0xa7b8*/ 1134,
+      /*0x038c*/ 238,
+      /*0x1eb8*/ 679,
+      /*0x2cb6*/ 1000,
+      /*0x2c0c*/ 923,
+      /*0xa68a*/ 1054,
       -1, -1, -1,
-      /*0x2c0c*/ 877,
-      /*0x047e*/ 360,
-      /*0x1fa2*/ 755,
-      /*0x0422*/ 331,
-      /*0x0122*/ 74,
-      /*0x10422*/ 1240,
-      /*0x1e84*/ 605,
-      /*0xaba2*/ 1138,
-      /*0x10ca7*/ 1321,
-      /*0x01a0*/ 141,
-      /*0x2c7e*/ 925,
-      /*0x2c8c*/ 933,
-      /*0x2c22*/ 899,
-      /*0x0526*/ 440,
-      /*0x1e24*/ 557,
-      /*0x1ff2*/ 808,
-      /*0x0472*/ 354,
-      /*0x0172*/ 113,
-      /*0x04a6*/ 376,
-      /*0x10c8c*/ 1294,
-      /*0x1e82*/ 604,
-      /*0x1f08*/ 669,
-      -1,
-      /*0x2ca2*/ 944,
-      /*0x1f6f*/ 720,
-      /*0x2c72*/ 923,
-      /*0x118a0*/ 1333,
-      /*0x1f09*/ 670,
-      /*0x1e1c*/ 553,
-      /*0x1e90c*/ 1377,
-      /*0xa7a2*/ 1073,
-      /*0x10ca2*/ 1316,
-      /*0x03a4*/ 260,
-      /*0xfb00*/ 1168,
-      /*0x1f5f*/ 712,
-      /*0x0372*/ 231,
-      /*0x2cf2*/ 979,
-      /*0x0226*/ 209,
-      /*0x1f0a*/ 671,
+      /*0x1cb8*/ 579,
       -1, -1,
-      /*0xfb03*/ 1171,
-      /*0x1faa*/ 763,
-      /*0x042a*/ 339,
-      /*0x012a*/ 78,
-      -1,
-      /*0x039c*/ 253,
-      /*0xabaa*/ 1146,
-      /*0x1fae*/ 767,
-      /*0x042e*/ 343,
-      /*0x012e*/ 80,
-      -1,
-      /*0x2c2a*/ 907,
-      /*0xabae*/ 1150,
+      /*0x1f2f*/ 736,
       -1,
-      /*0x1f5d*/ 711,
-      /*0x018e*/ 129,
-      -1,
-      /*0x2c2e*/ 911,
-      /*0x0524*/ 439,
+      /*0x1e1c*/ 599,
+      /*0xa779*/ 1101,
+      /*0xa7b6*/ 1133,
+      /*0x2c8c*/ 979,
+      /*0x1eb6*/ 678,
+      /*0xa680*/ 1049,
+      /*0x0230*/ 214,
+      /*0x0130*/ 1486,
+      /*0xabb0*/ 1206,
       -1, -1,
-      /*0x1e8c*/ 609,
-      /*0x2caa*/ 948,
-      /*0x04a4*/ 375,
-      -1, -1, -1,
-      /*0x0194*/ 134,
-      /*0x2cae*/ 950,
-      /*0xa7aa*/ 1077,
-      /*0x10caa*/ 1324,
-      /*0x1efe*/ 668,
-      /*0x051c*/ 435,
-      /*0x1ea2*/ 622,
-      -1,
-      /*0xa7ae*/ 1081,
-      /*0x10cae*/ 1328,
-      /*0x049c*/ 371,
-      -1, -1, -1,
-      /*0x1e04*/ 541,
-      /*0x0224*/ 208,
-      /*0x1f18*/ 677,
-      /*0xfb16*/ 1178,
-      /*0x2126*/ 818,
-      /*0x1ef2*/ 662,
-      /*0x054d*/ 473,
-      /*0x1fac*/ 765,
-      /*0x042c*/ 341,
-      /*0x012c*/ 79,
-      -1,
-      /*0x04cd*/ 396,
-      /*0xabac*/ 1148,
-      /*0x104cd*/ 1275,
-      /*0x1e02*/ 540,
-      /*0x021c*/ 204,
-      -1,
-      /*0x2c2c*/ 909,
-      /*0x01f6*/ 184,
-      /*0x10a6*/ 490,
-      -1,
-      /*0x1fa8*/ 761,
-      /*0x0428*/ 337,
-      /*0x0128*/ 77,
-      /*0x03d1*/ 272,
-      /*0x1fb2*/ 769,
-      /*0xaba8*/ 1144,
-      /*0x0132*/ 81,
-      /*0x2cac*/ 949,
-      /*0xa726*/ 1019,
-      /*0xabb2*/ 1154,
-      /*0x2c28*/ 905,
-      /*0x1eaa*/ 626,
-      /*0xfb06*/ 1174,
-      /*0x10af*/ 499,
-      /*0xa7ac*/ 1079,
-      /*0x10cac*/ 1326,
+      /*0x1cb6*/ 577,
+      /*0x03b0*/ 268,
       -1,
-      /*0x1eae*/ 628,
+      /*0x1f69*/ 760,
+      /*0xa726*/ 1065,
+      /*0x1fbc*/ 824,
       -1,
-      /*0x01a6*/ 144,
-      /*0x1f6d*/ 718,
-      /*0x2ca8*/ 947,
+      /*0x1e8c*/ 655,
       -1,
-      /*0xa688*/ 1007,
-      /*0x0504*/ 423,
-      /*0x2cb2*/ 952,
+      /*0xabbc*/ 1218,
       -1, -1,
-      /*0xa7a8*/ 1076,
-      /*0x10ca8*/ 1322,
-      /*0x0551*/ 477,
-      -1,
-      /*0xa7b2*/ 1084,
-      /*0x10cb2*/ 1332,
-      /*0x01af*/ 149,
-      /*0x1e0c*/ 545,
-      /*0x118a6*/ 1339,
-      /*0x104d1*/ 1279,
-      /*0x0502*/ 422,
+      /*0x01bc*/ 156,
+      /*0x10a2*/ 486,
       -1,
-      /*0xa68a*/ 1008,
+      /*0x10c8c*/ 1348,
+      /*0x1e1e*/ 600,
+      /*0x2cb0*/ 997,
+      /*0x1e90c*/ 1463,
       -1,
-      /*0x03a7*/ 263,
+      /*0x1f1c*/ 727,
+      /*0xa698*/ 1061,
+      /*0x1e70*/ 641,
+      /*0x049c*/ 371,
+      /*0x051c*/ 435,
       -1,
-      /*0x10a4*/ 488,
-      /*0x1e7e*/ 602,
-      /*0xa680*/ 1003,
-      /*0x1e22*/ 556,
-      /*0x0204*/ 192,
+      /*0xa77b*/ 1102,
       -1, -1,
-      /*0x118af*/ 1348,
-      /*0x216b*/ 833,
-      /*0x038c*/ 238,
-      /*0xa724*/ 1018,
-      /*0x1f3b*/ 694,
+      /*0x2cbc*/ 1003,
+      /*0xa7b0*/ 1128,
+      /*0xa724*/ 1064,
+      /*0x1eb0*/ 675,
       -1, -1,
-      /*0x1eac*/ 627,
+      /*0xa696*/ 1060,
+      -1, -1, -1,
+      /*0x1cb0*/ 571,
+      /*0x10cb0*/ 1384,
       -1,
-      /*0x1e72*/ 596,
-      /*0x1f5b*/ 710,
-      /*0x0202*/ 191,
-      /*0x03fe*/ 295,
+      /*0xa7bc*/ 1136,
+      /*0x1e22*/ 602,
+      /*0x1ebc*/ 681,
+      -1, -1, -1, -1,
+      /*0x1fd2*/ 836,
+      /*0x049e*/ 372,
+      /*0x051e*/ 436,
+      /*0x0152*/ 97,
+      /*0x0052*/ 16,
+      /*0x10aa*/ 494,
+      /*0x1fcc*/ 835,
+      /*0x04f0*/ 413,
+      /*0x024c*/ 227,
+      /*0x014c*/ 94,
+      /*0x004c*/ 10,
       -1,
-      /*0x01a4*/ 143,
+      /*0x1fbe*/ 825,
+      /*0xa686*/ 1052,
+      /*0x023e*/ 219,
       -1,
-      /*0x1f4b*/ 702,
+      /*0xabbe*/ 1220,
       -1, -1,
-      /*0x1f1a*/ 679,
+      /*0x118b2*/ 1405,
       -1,
-      /*0x1ea8*/ 625,
-      /*0x10cd*/ 523,
-      /*0xff26*/ 1185,
-      -1,
-      /*0x1eb2*/ 630,
-      /*0x24cd*/ 862,
+      /*0x1e0e*/ 592,
+      /*0x1fb4*/ 817,
       -1,
-      /*0x019c*/ 138,
-      /*0x050c*/ 427,
+      /*0x2cd2*/ 1014,
+      /*0x0134*/ 82,
+      /*0xabb4*/ 1210,
+      /*0xa77d*/ 1103,
+      /*0x04a2*/ 374,
+      /*0x0522*/ 438,
+      /*0x2ccc*/ 1011,
       -1,
-      /*0x118a4*/ 1337,
+      /*0x10ae*/ 498,
       -1, -1,
-      /*0x048c*/ 363,
-      /*0xa698*/ 1015,
-      /*0x1e2a*/ 560,
-      /*0x0130*/ 1400,
-      /*0xff2f*/ 1194,
-      -1,
-      /*0xabb0*/ 1152,
-      /*0x0522*/ 438,
-      /*0x1e2e*/ 562,
-      /*0x01cd*/ 163,
-      /*0x04fe*/ 420,
+      /*0x1e2a*/ 606,
+      /*0x2cbe*/ 1004,
+      -1, -1,
+      /*0x1ed2*/ 692,
+      /*0xa694*/ 1059,
       -1,
-      /*0x04a2*/ 374,
-      /*0xa696*/ 1014,
+      /*0xff32*/ 1251,
       -1,
-      /*0x1f69*/ 714,
-      /*0x1fba*/ 776,
-      -1, -1,
-      /*0x020c*/ 196,
-      /*0x03aa*/ 266,
-      /*0xabba*/ 1162,
-      /*0x2cb0*/ 951,
+      /*0x118af*/ 1402,
+      /*0x1ecc*/ 689,
+      /*0x2cb4*/ 999,
       -1, -1,
-      /*0x04f2*/ 414,
-      -1, -1, -1,
-      /*0xa7b0*/ 1082,
-      /*0x10cb0*/ 1330,
-      /*0x0222*/ 207,
-      -1, -1, -1,
-      /*0xff24*/ 1183,
+      /*0xa7be*/ 1137,
       -1,
-      /*0x2cba*/ 956,
+      /*0x1ebe*/ 682,
+      /*0x1f0e*/ 721,
       -1,
-      /*0x1fca*/ 787,
-      /*0x004a*/ 8,
-      /*0x014a*/ 93,
+      /*0xa690*/ 1057,
+      /*0x048e*/ 364,
+      /*0x050e*/ 428,
+      /*0x10ac*/ 496,
+      /*0x1cbe*/ 583,
+      /*0xa7b4*/ 1132,
       -1,
-      /*0xa686*/ 1006,
+      /*0x1eb4*/ 677,
+      /*0x1e2e*/ 608,
       -1, -1, -1,
+      /*0x1f2a*/ 731,
+      /*0xff2f*/ 1248,
+      /*0x1cb4*/ 575,
+      /*0x04aa*/ 378,
       /*0x052a*/ 442,
-      /*0x0184*/ 123,
-      /*0x1e2c*/ 561,
       -1, -1,
-      /*0x04aa*/ 378,
-      /*0x052e*/ 444,
-      /*0x01d1*/ 165,
-      /*0xa690*/ 1011,
+      /*0x10ba*/ 510,
       -1, -1,
-      /*0x04ae*/ 380,
-      /*0x1fb8*/ 774,
-      /*0x2cca*/ 964,
-      -1,
-      /*0x0182*/ 122,
-      /*0x1e28*/ 559,
-      /*0xabb8*/ 1160,
-      -1,
-      /*0x00ca*/ 36,
-      /*0x1e32*/ 564,
-      -1, -1, -1,
-      /*0x022a*/ 211,
-      /*0x10a7*/ 491,
-      /*0x1eb0*/ 629,
-      -1, -1, -1,
-      /*0x022e*/ 213,
-      /*0x1f0e*/ 675,
-      /*0xfb14*/ 1176,
-      /*0x2cb8*/ 955,
-      /*0x03a8*/ 264,
-      -1, -1, -1, -1, -1, -1,
-      /*0x1eba*/ 634,
+      /*0x1fca*/ 833,
       -1,
-      /*0xa69a*/ 1016,
+      /*0x024a*/ 226,
+      /*0x014a*/ 93,
+      /*0x004a*/ 8,
+      /*0xa684*/ 1051,
+      /*0x2126*/ 864,
+      /*0x01ca*/ 161,
+      /*0x10a8*/ 492,
       -1, -1,
-      /*0x01a7*/ 145,
-      /*0x052c*/ 443,
-      /*0x10a2*/ 486,
-      /*0xa692*/ 1012,
-      /*0x1fd9*/ 795,
-      /*0x0059*/ 23,
-      /*0x04ac*/ 379,
-      /*0x1ffa*/ 815,
-      /*0x047a*/ 358,
-      /*0x1fb6*/ 772,
-      /*0xa77e*/ 1058,
-      /*0x0136*/ 83,
-      /*0xa722*/ 1017,
+      /*0x1e2c*/ 607,
+      -1, -1, -1, -1, -1,
+      /*0x1f2e*/ 735,
       -1,
-      /*0xabb6*/ 1158,
-      /*0x0528*/ 441,
+      /*0xa682*/ 1050,
+      /*0x04ae*/ 380,
+      /*0x052e*/ 444,
       -1,
-      /*0x118a7*/ 1340,
-      /*0x1eca*/ 642,
-      /*0x0532*/ 446,
-      /*0x04a8*/ 377,
-      /*0x01fe*/ 189,
+      /*0xa732*/ 1070,
+      /*0x2cca*/ 1010,
       -1,
-      /*0x01a2*/ 142,
-      /*0x04b2*/ 382,
-      /*0x022c*/ 212,
-      /*0x104b2*/ 1248,
-      /*0x212a*/ 819,
-      -1, -1,
-      /*0x2cb6*/ 954,
-      /*0x00d9*/ 50,
+      /*0x1fc4*/ 828,
+      /*0x1e3a*/ 614,
+      /*0x0244*/ 222,
       -1,
-      /*0x1fcc*/ 789,
-      /*0x004c*/ 10,
-      /*0x014c*/ 94,
-      /*0x01f2*/ 182,
-      /*0xa7b6*/ 1087,
-      /*0x1eb8*/ 633,
-      /*0x0228*/ 210,
-      /*0x118a2*/ 1335,
+      /*0x0044*/ 3,
+      /*0x004f*/ 13,
       -1,
-      /*0x10aa*/ 494,
-      /*0x0232*/ 215,
-      -1, -1, -1, -1,
-      /*0x10ae*/ 498,
-      -1, -1, -1,
-      /*0xa72a*/ 1021,
+      /*0x01c4*/ 157,
+      /*0x01cf*/ 164,
+      /*0x03cf*/ 270,
       -1,
-      /*0x2ccc*/ 965,
-      /*0xff27*/ 1186,
-      /*0x1e30*/ 563,
+      /*0x10b8*/ 508,
+      /*0x1e28*/ 605,
+      /*0x1eca*/ 688,
+      /*0x1fab*/ 810,
+      /*0x042b*/ 340,
+      /*0x1f2c*/ 733,
       -1,
-      /*0xa72e*/ 1023,
+      /*0xabab*/ 1201,
+      /*0x04ac*/ 379,
+      /*0x052c*/ 443,
       -1,
-      /*0x00cc*/ 38,
+      /*0x03ab*/ 267,
       -1,
-      /*0x1fbc*/ 778,
-      /*0x1fb4*/ 771,
+      /*0x2cc4*/ 1007,
+      /*0x2c2b*/ 954,
+      /*0x1fc2*/ 826,
+      /*0x10b6*/ 506,
+      /*0x24ba*/ 889,
+      /*0x118a2*/ 1389,
+      /*0x0042*/ 1,
       -1,
-      /*0x0134*/ 82,
-      /*0x1f2f*/ 690,
-      /*0xabbc*/ 1164,
-      /*0xabb4*/ 1156,
-      /*0x01ae*/ 148,
+      /*0x1f3a*/ 739,
+      /*0x104ba*/ 1310,
+      /*0x03c2*/ 269,
+      /*0x04ba*/ 386,
+      /*0x053a*/ 454,
+      /*0xa7c4*/ 1139,
+      /*0x1fc8*/ 831,
+      /*0x1ec4*/ 685,
+      /*0x0248*/ 225,
+      /*0x1e38*/ 613,
+      /*0x0048*/ 7,
+      /*0x1f28*/ 729,
       -1,
-      /*0x1e3a*/ 568,
+      /*0x01c8*/ 160,
+      /*0x04a8*/ 377,
+      /*0x0528*/ 441,
       -1, -1,
-      /*0x03b0*/ 268,
-      -1, -1, -1,
-      /*0xff22*/ 1181,
-      /*0x1efa*/ 666,
-      /*0x118aa*/ 1343,
-      /*0x1eb6*/ 632,
-      -1,
-      /*0x2cbc*/ 957,
-      /*0x2cb4*/ 953,
-      -1,
-      /*0x118ae*/ 1347,
-      -1,
-      /*0x1fbe*/ 779,
-      /*0x10ac*/ 496,
-      /*0xa68e*/ 1010,
-      /*0xa7b4*/ 1086,
-      /*0x2132*/ 821,
-      /*0xabbe*/ 1166,
-      /*0x1e4a*/ 576,
+      /*0x2cc2*/ 1006,
+      /*0xa7ab*/ 1124,
+      /*0xff22*/ 1235,
       -1, -1, -1, -1,
-      /*0xa72c*/ 1022,
+      /*0x1e36*/ 612,
       -1, -1,
-      /*0xa694*/ 1013,
-      /*0x10a8*/ 492,
+      /*0x1cab*/ 566,
+      /*0x10cab*/ 1379,
+      /*0x2cc8*/ 1009,
+      /*0xa7c2*/ 1138,
       -1,
-      /*0x1ecc*/ 643,
-      /*0x04b0*/ 381,
-      /*0x10b2*/ 502,
-      /*0x104b0*/ 1246,
-      /*0x2cbe*/ 958,
-      /*0x01ac*/ 147,
-      /*0x1f1c*/ 681,
+      /*0x1ec2*/ 684,
+      /*0x10b0*/ 500,
       -1,
-      /*0xa728*/ 1020,
-      /*0x1e38*/ 567,
+      /*0x24b8*/ 887,
+      /*0x216b*/ 879,
+      /*0x118aa*/ 1397,
+      /*0x1e0c*/ 591,
+      /*0x1f38*/ 737,
+      /*0x104b8*/ 1308,
       -1,
-      /*0x053a*/ 454,
-      /*0xa732*/ 1024,
-      /*0xff2a*/ 1189,
-      /*0x13fa*/ 526,
-      /*0x1f6b*/ 716,
-      /*0x04ba*/ 386,
+      /*0x04b8*/ 385,
+      /*0x0538*/ 452,
+      /*0x1ec8*/ 687,
+      /*0x10bc*/ 512,
+      /*0x1fd6*/ 838,
+      /*0x0150*/ 96,
+      /*0x0050*/ 14,
+      /*0x0156*/ 99,
+      /*0x0056*/ 20,
+      /*0x24b6*/ 885,
+      /*0x03d0*/ 271,
       -1,
-      /*0x104ba*/ 1256,
-      /*0xff2e*/ 1193,
-      /*0x0230*/ 214,
-      /*0x1f4d*/ 704,
-      /*0x118ac*/ 1345,
-      /*0x01b2*/ 151,
-      -1, -1, -1, -1, -1,
-      /*0x1ebc*/ 635,
-      /*0x1eb4*/ 631,
-      -1, -1, -1,
-      /*0x054a*/ 470,
-      /*0x023a*/ 216,
-      /*0x118a8*/ 1341,
+      /*0x03d6*/ 274,
+      /*0x1fdb*/ 843,
+      /*0x104b6*/ 1306,
+      -1,
+      /*0x04b6*/ 384,
+      /*0x0536*/ 450,
+      /*0xff2a*/ 1243,
+      -1,
+      /*0x01db*/ 170,
+      /*0x1e30*/ 609,
+      /*0x118ae*/ 1401,
       -1, -1, -1,
-      /*0x118b2*/ 1351,
-      /*0x104ca*/ 1272,
+      /*0x2cd0*/ 1013,
+      /*0x1f0c*/ 719,
+      /*0x2cd6*/ 1016,
+      /*0xa69a*/ 1062,
+      /*0x048c*/ 363,
+      /*0x050c*/ 427,
       -1,
-      /*0x1fc8*/ 785,
-      /*0x0048*/ 7,
+      /*0x1e3c*/ 615,
+      /*0xa722*/ 1063,
+      -1, -1, -1, -1, -1, -1,
+      /*0x1ed0*/ 691,
+      /*0x1fc6*/ 829,
+      /*0x1ed6*/ 694,
+      /*0x0246*/ 224,
+      /*0xff2e*/ 1247,
+      /*0x0046*/ 5,
+      /*0x118ac*/ 1399,
       -1,
-      /*0x1fe2*/ 798,
-      /*0x0462*/ 346,
-      /*0x0162*/ 105,
-      /*0xfb04*/ 1172,
-      /*0x1e7a*/ 600,
+      /*0x2132*/ 867,
+      /*0x024e*/ 228,
+      /*0x014e*/ 95,
+      /*0x004e*/ 12,
+      /*0x104b0*/ 1300,
+      /*0x1fda*/ 842,
+      /*0x04b0*/ 381,
       -1,
-      /*0x1e36*/ 566,
+      /*0x015a*/ 101,
+      /*0x005a*/ 24,
+      /*0x10be*/ 514,
+      /*0x24bc*/ 891,
       -1,
-      /*0x0538*/ 452,
-      /*0x1ebe*/ 636,
-      /*0x2c62*/ 913,
+      /*0x03da*/ 276,
+      /*0x118ba*/ 1413,
+      /*0x1f3c*/ 741,
+      /*0x104bc*/ 1312,
+      /*0x2cc6*/ 1008,
+      /*0x04bc*/ 387,
+      /*0x053c*/ 456,
+      /*0x10b4*/ 504,
+      /*0xff2c*/ 1245,
       -1,
-      /*0x024a*/ 226,
-      /*0x04b8*/ 385,
-      /*0xff2c*/ 1191,
-      /*0x104b8*/ 1254,
+      /*0x2cce*/ 1012,
       -1,
-      /*0xfb02*/ 1170,
-      /*0x2cc8*/ 963,
-      -1, -1,
-      /*0x2ce2*/ 976,
-      /*0x03fa*/ 293,
+      /*0x118a8*/ 1395,
+      /*0xa72a*/ 1067,
       -1,
-      /*0x00c8*/ 34,
+      /*0x1e52*/ 626,
+      /*0x2cda*/ 1018,
+      /*0xa7c6*/ 1141,
       -1,
-      /*0x1f85*/ 726,
-      /*0x0405*/ 302,
-      /*0xff28*/ 1187,
-      /*0x10405*/ 1211,
-      /*0x1e4c*/ 577,
-      /*0xab85*/ 1109,
-      /*0xff32*/ 1197,
-      -1, -1, -1,
-      /*0x2c05*/ 870,
+      /*0x1ec6*/ 686,
       -1,
-      /*0x10b0*/ 500,
+      /*0x1e4c*/ 623,
       -1, -1,
-      /*0x1fc4*/ 782,
-      /*0x0044*/ 3,
-      -1, -1, -1,
-      /*0x1fd6*/ 792,
-      /*0x0056*/ 20,
-      /*0x0156*/ 99,
+      /*0xff3a*/ 1259,
+      /*0x1ece*/ 690,
+      /*0xa652*/ 1035,
+      /*0x1e3e*/ 616,
+      /*0x2169*/ 877,
       -1, -1,
-      /*0x0536*/ 450,
-      -1,
-      /*0x10ba*/ 510,
-      /*0x04fa*/ 418,
-      /*0x10c85*/ 1287,
-      /*0x04b6*/ 384,
-      /*0x24ba*/ 843,
-      /*0x104b6*/ 1252,
-      /*0x1e3c*/ 569,
-      /*0x1e34*/ 565,
-      -1,
-      /*0x2cc4*/ 961,
-      /*0xa73a*/ 1028,
-      -1,
-      /*0x1e905*/ 1370,
+      /*0x1eda*/ 696,
+      /*0xa64c*/ 1032,
+      /*0x00d2*/ 44,
       -1,
-      /*0x2cd6*/ 970,
-      /*0x00c4*/ 30,
-      /*0x1ec8*/ 641,
-      /*0x1f0c*/ 673,
+      /*0xff28*/ 1241,
       -1,
-      /*0x1ee2*/ 654,
-      /*0x00d6*/ 48,
+      /*0x1e34*/ 611,
+      /*0xa692*/ 1058,
+      /*0x00cc*/ 38,
+      /*0xa72e*/ 1069,
+      /*0x118b8*/ 1411,
+      -1, -1, -1, -1,
+      /*0x1f52*/ 752,
+      /*0x104d2*/ 1334,
+      /*0x24cc*/ 907,
+      /*0x04d2*/ 398,
+      /*0x0552*/ 478,
       -1,
+      /*0x1f4c*/ 749,
+      /*0x104cc*/ 1328,
+      /*0x24be*/ 893,
+      /*0x2cc0*/ 1005,
       /*0x054c*/ 472,
-      /*0x118b0*/ 1349,
-      -1, -1, -1,
-      /*0x24ca*/ 859,
-      -1,
-      /*0x104cc*/ 1274,
+      /*0x118b6*/ 1409,
+      /*0x1f3e*/ 743,
+      /*0x104be*/ 1314,
       -1,
-      /*0xa64a*/ 985,
-      /*0x1e3e*/ 570,
-      /*0xa74a*/ 1036,
-      -1, -1, -1, -1,
-      /*0x118ba*/ 1359,
-      -1, -1, -1, -1,
-      /*0x10b8*/ 508,
-      /*0x01ca*/ 161,
+      /*0x04be*/ 388,
+      /*0x053e*/ 458,
       -1,
-      /*0x024c*/ 227,
-      /*0x24b8*/ 841,
+      /*0xff38*/ 1257,
+      /*0xa72c*/ 1068,
       -1, -1, -1,
-      /*0x053c*/ 456,
-      /*0x0534*/ 448,
-      /*0xa738*/ 1027,
-      -1, -1,
-      /*0x04bc*/ 387,
+      /*0x104b4*/ 1304,
+      /*0x1ec0*/ 683,
       /*0x04b4*/ 383,
-      /*0x104bc*/ 1258,
-      /*0x104b4*/ 1250,
-      /*0x1ec4*/ 639,
-      /*0xff30*/ 1195,
-      /*0x1fc2*/ 780,
-      /*0x0042*/ 1,
-      /*0x01b8*/ 155,
-      /*0x1ed6*/ 648,
-      /*0xa684*/ 1005,
-      /*0x0050*/ 14,
-      /*0x0150*/ 96,
-      /*0x1f2a*/ 685,
-      /*0x1fd2*/ 790,
-      /*0x0052*/ 16,
-      /*0x0152*/ 97,
-      -1, -1,
-      /*0x1f2e*/ 689,
-      /*0xff3a*/ 1205,
-      /*0x053e*/ 458,
+      /*0x0534*/ 448,
       -1, -1,
-      /*0xa682*/ 1004,
-      /*0x118b8*/ 1357,
-      /*0x04be*/ 388,
-      /*0x2cc2*/ 960,
-      /*0x104be*/ 1260,
-      -1,
-      /*0x10b6*/ 506,
-      /*0x2cd0*/ 967,
+      /*0x1fe2*/ 844,
+      /*0x0462*/ 346,
       -1,
-      /*0x00c2*/ 28,
-      /*0x24b6*/ 839,
-      /*0x2cd2*/ 968,
-      /*0x1e48*/ 575,
-      /*0x00d0*/ 42,
+      /*0x0162*/ 105,
       -1,
-      /*0x1e62*/ 588,
-      /*0xa736*/ 1026,
-      /*0x00d2*/ 44,
+      /*0xff36*/ 1255,
+      /*0xa73a*/ 1074,
+      /*0x01e2*/ 173,
+      /*0x03e2*/ 280,
+      /*0x0154*/ 98,
+      /*0x0054*/ 18,
+      /*0x2c62*/ 959,
+      /*0x10c4*/ 520,
       -1, -1, -1,
-      /*0x023e*/ 219,
-      /*0x01d9*/ 169,
-      /*0x004e*/ 12,
-      /*0x014e*/ 95,
-      /*0x01fa*/ 187,
-      -1, -1, -1, -1, -1, -1,
+      /*0x1e4a*/ 622,
+      /*0xa728*/ 1066,
+      -1, -1, -1,
+      /*0x118b0*/ 1403,
+      -1, -1,
+      /*0x2ce2*/ 1022,
       -1,
-      /*0x03e2*/ 280,
-      /*0x24cc*/ 861,
+      /*0x10ab*/ 495,
+      /*0xa64a*/ 1031,
+      /*0x1fd8*/ 840,
       -1,
-      /*0x1f2c*/ 687,
+      /*0x2cd4*/ 1015,
+      /*0x0158*/ 100,
+      /*0x0058*/ 22,
+      /*0x118bc*/ 1415,
+      /*0x00ca*/ 36,
       -1,
-      /*0xa64c*/ 986,
-      /*0xff38*/ 1203,
-      /*0xa74c*/ 1037,
+      /*0x03d8*/ 275,
       -1,
-      /*0xa68c*/ 1009,
-      /*0x2cce*/ 966,
-      /*0x118b6*/ 1355,
+      /*0x10c2*/ 518,
+      /*0x1ee2*/ 700,
       -1, -1,
-      /*0x1fc6*/ 783,
-      /*0x0046*/ 5,
-      /*0x00ce*/ 40,
-      /*0x1f28*/ 683,
-      -1,
-      /*0x1ffc*/ 817,
-      /*0x047c*/ 359,
-      /*0x1ec2*/ 638,
-      -1,
-      /*0x1e44*/ 573,
-      /*0x0548*/ 468,
-      /*0x1ed0*/ 645,
-      /*0x10bc*/ 512,
-      /*0x10b4*/ 504,
-      /*0x1e56*/ 582,
-      /*0x1ed2*/ 646,
-      /*0x24bc*/ 845,
-      /*0x104c8*/ 1270,
-      /*0x04e2*/ 406,
+      /*0x1e44*/ 619,
+      /*0x24ca*/ 905,
+      /*0xff30*/ 1249,
+      /*0x1ed4*/ 693,
+      /*0xa738*/ 1073,
+      /*0x1f4a*/ 747,
+      /*0x104ca*/ 1326,
       -1, -1,
-      /*0x2cc6*/ 962,
-      /*0xa73c*/ 1029,
-      /*0xa734*/ 1025,
-      /*0x1fec*/ 807,
-      /*0x046c*/ 351,
-      /*0x016c*/ 110,
-      /*0x00c6*/ 32,
-      -1, -1, -1, -1,
-      /*0x03d6*/ 274,
-      /*0x01bc*/ 156,
-      /*0x0248*/ 225,
-      /*0xff36*/ 1201,
+      /*0x054a*/ 470,
+      /*0x2cd8*/ 1017,
+      /*0xa644*/ 1028,
+      /*0x1040d*/ 1273,
+      /*0x1f8d*/ 780,
+      /*0x040d*/ 310,
       -1, -1,
-      /*0x10be*/ 514,
+      /*0xab8d*/ 1171,
+      /*0x00c4*/ 30,
+      /*0x00cf*/ 41,
+      /*0xa736*/ 1072,
+      -1, -1,
+      /*0x212a*/ 865,
+      /*0x2c0d*/ 924,
+      /*0x1ed8*/ 695,
+      /*0x1e42*/ 618,
+      /*0x24c4*/ 899,
+      /*0x24cf*/ 910,
       -1, -1, -1,
-      /*0x24be*/ 847,
-      /*0x1fea*/ 805,
-      /*0x046a*/ 350,
-      /*0x016a*/ 109,
-      -1,
-      /*0x1ece*/ 644,
-      /*0xa73e*/ 1030,
+      /*0x104c4*/ 1320,
+      /*0x104cf*/ 1331,
       -1,
-      /*0x118bc*/ 1361,
-      /*0x118b4*/ 1353,
-      /*0x1fab*/ 764,
-      /*0x042b*/ 340,
       /*0x0544*/ 464,
-      /*0x1f81*/ 722,
-      /*0x0401*/ 298,
-      /*0xabab*/ 1147,
-      /*0x10401*/ 1207,
-      /*0x0556*/ 482,
-      /*0xab81*/ 1105,
-      /*0x104c4*/ 1266,
-      /*0x2c2b*/ 908,
-      -1,
-      /*0x04d6*/ 400,
-      /*0x2c01*/ 866,
-      -1,
-      /*0x013f*/ 87,
-      -1, -1,
-      /*0xabbf*/ 1167,
-      -1,
-      /*0x1ec6*/ 640,
-      /*0x1fe8*/ 803,
-      /*0x0468*/ 349,
-      /*0x0168*/ 108,
-      /*0x118be*/ 1363,
-      /*0x1efc*/ 667,
-      /*0x0244*/ 222,
-      -1,
-      /*0xa7ab*/ 1078,
-      /*0x10cab*/ 1325,
-      -1,
-      /*0x1e42*/ 572,
-      /*0x10c81*/ 1283,
-      -1,
-      /*0x2162*/ 824,
-      /*0x1e50*/ 579,
-      -1,
-      /*0xff34*/ 1199,
-      -1,
-      /*0x1e52*/ 580,
-      -1,
-      /*0x1c88*/ 538,
-      /*0x1e901*/ 1366,
+      /*0x054f*/ 475,
+      /*0xa642*/ 1027,
+      /*0x1e48*/ 621,
+      -1, -1, -1, -1, -1,
+      /*0x00c2*/ 28,
+      /*0x1f2b*/ 732,
       -1,
-      /*0x1eec*/ 659,
-      /*0x1fe4*/ 800,
-      /*0x0464*/ 347,
-      /*0x0164*/ 106,
+      /*0x118be*/ 1417,
+      /*0x0055*/ 19,
+      /*0xa648*/ 1030,
+      /*0xa78d*/ 1110,
+      /*0x01d5*/ 167,
+      /*0x03d5*/ 273,
+      /*0x24c2*/ 897,
+      -1, -1,
+      /*0x00c8*/ 34,
+      /*0x118b4*/ 1407,
+      /*0x104c2*/ 1318,
       -1,
-      /*0x03c2*/ 269,
-      /*0x24c8*/ 857,
+      /*0x10c8d*/ 1349,
+      /*0x0542*/ 462,
       -1,
-      /*0x1f3a*/ 693,
-      /*0x03d0*/ 271,
-      /*0xa648*/ 984,
-      /*0x2c64*/ 915,
-      /*0xa748*/ 1035,
-      /*0xa662*/ 997,
+      /*0x1e90d*/ 1464,
       -1,
-      /*0xa762*/ 1048,
+      /*0x24c8*/ 903,
       -1, -1, -1,
-      /*0x1eea*/ 658,
-      /*0x1c80*/ 530,
-      /*0x13fc*/ 528,
+      /*0x1f48*/ 745,
+      /*0x104c8*/ 1324,
+      /*0xa73c*/ 1075,
       -1,
-      /*0x01c8*/ 160,
-      /*0x1fa9*/ 762,
-      /*0x0429*/ 338,
-      /*0x01e2*/ 173,
-      /*0x1e4e*/ 578,
-      /*0x1c83*/ 533,
-      /*0xaba9*/ 1145,
+      /*0x0548*/ 468,
+      -1, -1,
+      /*0xa68e*/ 1056,
+      /*0x1e50*/ 625,
       -1,
-      /*0x1f4a*/ 701,
-      /*0x0542*/ 462,
+      /*0x1e56*/ 628,
+      /*0xff34*/ 1253,
+      /*0x0245*/ 223,
+      /*0x0145*/ 90,
+      /*0x0045*/ 4,
       -1,
-      /*0x2c29*/ 906,
+      /*0x16e5f*/ 1450,
+      /*0x01c5*/ 158,
       -1,
-      /*0x0550*/ 476,
+      /*0xa650*/ 1034,
+      /*0x1fd9*/ 841,
+      /*0xa656*/ 1037,
+      /*0x1fec*/ 853,
+      /*0x046c*/ 351,
+      /*0x0059*/ 23,
+      /*0x016c*/ 110,
+      /*0x00d0*/ 42,
+      /*0x01d9*/ 169,
+      /*0x00d6*/ 48,
+      /*0x01ec*/ 178,
+      /*0x03ec*/ 285,
+      /*0x16e5d*/ 1448,
       -1, -1,
-      /*0x104c2*/ 1264,
-      /*0x0552*/ 478,
+      /*0x16e47*/ 1426,
+      -1, -1,
+      /*0x00db*/ 52,
+      -1,
+      /*0x1f50*/ 751,
+      /*0x104d0*/ 1332,
+      /*0x1f56*/ 754,
       /*0x04d0*/ 397,
+      /*0x0550*/ 476,
+      /*0x04d6*/ 400,
+      /*0x0556*/ 482,
+      /*0xa752*/ 1086,
+      /*0xa7c5*/ 1140,
+      /*0x1e46*/ 620,
       -1,
-      /*0x104d0*/ 1278,
+      /*0x1f5b*/ 756,
       -1,
-      /*0x04d2*/ 398,
-      /*0x10c4*/ 520,
-      /*0x104d2*/ 1280,
+      /*0xa74c*/ 1083,
       -1,
-      /*0x1ee8*/ 657,
-      /*0x24c4*/ 853,
-      /*0x1f38*/ 691,
-      /*0x1e46*/ 574,
-      /*0x10ca9*/ 1323,
-      /*0xa644*/ 982,
+      /*0x1e4e*/ 624,
+      -1, -1, -1,
+      /*0xa73e*/ 1076,
+      /*0xa646*/ 1029,
+      /*0x1e5a*/ 630,
+      /*0x1eec*/ 705,
+      -1, -1, -1,
+      /*0xa64e*/ 1033,
+      /*0x00c6*/ 32,
       -1,
-      /*0xa744*/ 1033,
-      /*0x1e7c*/ 601,
+      /*0xa734*/ 1071,
+      /*0x10c0*/ 516,
       -1,
-      /*0xa656*/ 991,
+      /*0xa65a*/ 1039,
+      /*0x00ce*/ 40,
+      /*0x1fc9*/ 832,
       -1,
-      /*0xa756*/ 1042,
-      /*0x0460*/ 345,
-      /*0x0160*/ 104,
-      -1, -1, -1,
-      /*0x01c4*/ 157,
-      -1, -1, -1,
-      /*0x2c60*/ 912,
-      /*0x054e*/ 474,
-      /*0x1ee4*/ 655,
-      -1, -1,
-      /*0x1e6c*/ 593,
-      /*0x046e*/ 352,
-      /*0x016e*/ 111,
-      /*0x104ce*/ 1276,
-      -1, -1,
-      /*0x2ce0*/ 975,
-      -1, -1, -1,
-      /*0x2c6e*/ 920,
-      -1, -1,
-      /*0x1f59*/ 709,
+      /*0x24c6*/ 901,
+      /*0x0149*/ 92,
+      /*0x0049*/ 1485,
+      /*0x00da*/ 51,
       -1,
-      /*0x1fe6*/ 801,
-      /*0x0466*/ 348,
-      /*0x0166*/ 107,
-      /*0x03ec*/ 285,
-      /*0x1e6a*/ 592,
-      /*0x024e*/ 228,
+      /*0x104c6*/ 1322,
+      /*0x24ce*/ 909,
+      /*0x118ab*/ 1398,
       /*0x0546*/ 466,
       -1, -1,
-      /*0x013d*/ 86,
-      -1,
-      /*0x1c86*/ 536,
-      /*0xabbd*/ 1165,
-      /*0x104c6*/ 1268,
-      -1, -1,
-      /*0x04fc*/ 419,
+      /*0x104ce*/ 1330,
       -1, -1,
-      /*0x1fda*/ 796,
-      /*0x005a*/ 24,
-      /*0x015a*/ 101,
+      /*0x054e*/ 474,
+      /*0x1fea*/ 851,
+      /*0x046a*/ 350,
+      -1,
+      /*0x016a*/ 109,
+      /*0x04da*/ 402,
+      /*0x0345*/ 229,
+      -1,
+      /*0x01ea*/ 177,
       /*0x03ea*/ 284,
-      /*0x1fd8*/ 794,
-      /*0x0058*/ 22,
-      /*0x0158*/ 100,
+      /*0x1e40*/ 617,
+      /*0x1fa9*/ 808,
+      /*0x0429*/ 338,
+      -1, -1,
+      /*0xaba9*/ 1199,
+      /*0xff2b*/ 1244,
       -1,
-      /*0x1f4c*/ 703,
+      /*0x01a9*/ 146,
+      /*0x03a9*/ 265,
       -1,
-      /*0x10c2*/ 518,
-      /*0x0246*/ 224,
-      /*0x03ab*/ 267,
+      /*0xa640*/ 1026,
+      /*0x2c29*/ 952,
+      /*0x1fc3*/ 827,
       -1,
-      /*0x24c2*/ 851,
-      /*0x1e68*/ 591,
-      /*0x04ec*/ 411,
+      /*0x0243*/ 221,
+      /*0x0143*/ 89,
+      /*0x0043*/ 2,
+      /*0x00c0*/ 26,
+      /*0x10421*/ 1293,
+      /*0x1fa1*/ 800,
+      /*0x0421*/ 330,
       -1,
-      /*0xa642*/ 981,
+      /*0xa74a*/ 1082,
+      /*0xaba1*/ 1191,
+      -1, -1,
+      /*0x24c0*/ 895,
+      /*0x03a1*/ 258,
       -1,
-      /*0xa742*/ 1032,
-      /*0x2cda*/ 972,
-      /*0xa650*/ 988,
-      /*0x1ee0*/ 653,
-      /*0xa750*/ 1039,
-      /*0x2cd8*/ 971,
-      /*0xa652*/ 989,
-      /*0x00da*/ 51,
-      /*0xa752*/ 1040,
-      /*0x0054*/ 18,
-      /*0x0154*/ 98,
-      /*0x00d8*/ 49,
+      /*0x1eea*/ 704,
+      /*0x2c21*/ 944,
+      /*0x104c0*/ 1316,
+      /*0x1fb9*/ 821,
+      /*0x04c0*/ 389,
+      /*0x0540*/ 460,
+      /*0x0139*/ 84,
+      /*0xabb9*/ 1215,
+      /*0x1fe8*/ 849,
+      /*0x0468*/ 349,
       -1,
+      /*0x0168*/ 108,
+      -1, -1,
+      /*0x1e62*/ 634,
+      /*0x01e8*/ 176,
       /*0x03e8*/ 283,
+      /*0x1ca9*/ 564,
+      /*0x10ca9*/ 1377,
+      /*0xa744*/ 1079,
+      /*0x1e54*/ 627,
       -1,
-      /*0x04ea*/ 410,
-      /*0x2cc0*/ 959,
-      /*0x1f3c*/ 695,
-      /*0x1eee*/ 660,
-      /*0x1e64*/ 589,
-      -1, -1,
-      /*0x00c0*/ 26,
+      /*0x1fcb*/ 834,
       -1, -1,
-      /*0x015e*/ 103,
-      /*0x1fc7*/ 784,
-      /*0x0047*/ 6,
-      /*0x0147*/ 91,
-      /*0x2cd4*/ 969,
+      /*0xa662*/ 1043,
+      /*0x004b*/ 9,
       -1, -1,
-      /*0x053f*/ 459,
-      /*0x1ee6*/ 656,
-      /*0x24ce*/ 863,
+      /*0x01cb*/ 162,
+      /*0xa68c*/ 1055,
+      /*0xa654*/ 1036,
+      -1, -1, -1, -1,
+      /*0x1ca1*/ 556,
+      /*0x10ca1*/ 1369,
       /*0x00d4*/ 46,
       -1,
-      /*0x03e4*/ 281,
-      /*0xa64e*/ 987,
-      /*0x104bf*/ 1261,
-      /*0xa74e*/ 1038,
-      -1, -1,
-      /*0x1f3e*/ 697,
-      /*0x2cde*/ 974,
-      /*0x04e8*/ 409,
-      /*0x1fb9*/ 775,
+      /*0x1e921*/ 1484,
       -1,
-      /*0x0139*/ 84,
+      /*0x1e58*/ 629,
       -1,
-      /*0x00de*/ 55,
-      /*0xabb9*/ 1161,
-      /*0x1eda*/ 650,
-      /*0x00c7*/ 33,
-      -1, -1,
-      /*0x1ed8*/ 649,
-      -1, -1,
-      /*0x24c6*/ 855,
-      /*0x03a9*/ 265,
-      -1, -1,
-      /*0xa646*/ 983,
-      /*0x216c*/ 834,
-      /*0xa746*/ 1034,
+      /*0x16e57*/ 1442,
+      /*0xa742*/ 1078,
       -1,
-      /*0x1ec0*/ 637,
+      /*0x1ee8*/ 703,
+      /*0x04e2*/ 406,
+      /*0x1cb9*/ 580,
       -1,
-      /*0x04e4*/ 407,
+      /*0x1f54*/ 753,
       -1,
-      /*0x015c*/ 102,
-      /*0x1fa1*/ 754,
-      /*0x0421*/ 330,
+      /*0xa658*/ 1038,
+      /*0x04d4*/ 399,
+      /*0x0554*/ 480,
       -1,
-      /*0x10421*/ 1239,
+      /*0xa748*/ 1081,
+      -1, -1,
+      /*0x00d8*/ 49,
+      /*0x10417*/ 1283,
+      /*0x1f97*/ 790,
+      /*0x0417*/ 320,
+      /*0x1fe4*/ 846,
+      /*0x0464*/ 347,
+      /*0xab97*/ 1181,
+      /*0x0164*/ 106,
       -1,
-      /*0xaba1*/ 1137,
+      /*0x0197*/ 136,
+      /*0x0397*/ 248,
+      /*0x01e4*/ 174,
+      /*0x03e4*/ 281,
+      /*0x2c17*/ 934,
       -1,
-      /*0x1e60*/ 587,
-      /*0x1ed4*/ 647,
-      /*0x01fc*/ 188,
-      /*0x2c21*/ 898,
-      /*0x216a*/ 832,
+      /*0x2c64*/ 961,
+      /*0x04d8*/ 401,
+      -1, -1,
+      /*0x0460*/ 345,
+      -1,
+      /*0x0160*/ 104,
       -1, -1, -1,
-      /*0xa66c*/ 1002,
+      /*0x01e0*/ 172,
+      /*0x03e0*/ 279,
+      /*0x1ff4*/ 856,
+      /*0x0474*/ 355,
+      /*0x2c60*/ 958,
+      /*0x0174*/ 114,
       -1,
-      /*0xa76c*/ 1053,
-      /*0x2cdc*/ 973,
+      /*0x1ffc*/ 863,
+      /*0x047c*/ 359,
+      /*0x01f4*/ 183,
+      /*0x03f4*/ 289,
+      /*0xa750*/ 1085,
       -1,
-      /*0x212b*/ 820,
+      /*0xa756*/ 1088,
+      /*0x01fc*/ 188,
+      /*0x1f0d*/ 720,
+      /*0x1e97*/ 661,
+      /*0x2ce0*/ 1021,
+      /*0x1ee4*/ 701,
       -1,
-      /*0x1e6e*/ 594,
-      /*0x1ede*/ 652,
-      /*0x00dc*/ 53,
-      /*0x03e0*/ 279,
+      /*0x10c5*/ 521,
       -1, -1,
-      /*0x01ec*/ 178,
-      /*0x10ca1*/ 1315,
+      /*0x1c97*/ 546,
+      /*0x10c97*/ 1359,
+      -1, -1,
+      /*0x1e917*/ 1474,
       -1,
-      /*0x1f48*/ 699,
-      /*0x0045*/ 4,
-      /*0x0145*/ 90,
-      /*0xa66a*/ 1001,
-      /*0x10ab*/ 495,
-      /*0xa76a*/ 1052,
-      /*0x1e66*/ 590,
+      /*0x046e*/ 352,
       -1,
-      /*0x1e921*/ 1398,
+      /*0x016e*/ 111,
+      /*0x1ee0*/ 699,
+      /*0x00d5*/ 47,
+      /*0x13fc*/ 528,
+      /*0x01ee*/ 179,
       /*0x03ee*/ 286,
-      /*0x2168*/ 830,
-      -1,
-      /*0x1fc3*/ 781,
-      /*0x0043*/ 2,
-      /*0x0143*/ 89,
-      -1,
-      /*0x01ea*/ 177,
-      /*0x10bf*/ 515,
-      /*0xfb05*/ 1173,
+      /*0x1fe6*/ 847,
+      /*0x0466*/ 348,
+      /*0x2c6e*/ 966,
+      /*0x0166*/ 107,
+      /*0x1ef4*/ 709,
       -1,
-      /*0x0345*/ 229,
-      /*0x24bf*/ 848,
-      -1, -1,
+      /*0x015e*/ 103,
+      /*0x01e6*/ 175,
       /*0x03e6*/ 282,
-      /*0x1e5a*/ 584,
-      /*0x04e0*/ 405,
-      /*0x00c5*/ 31,
-      /*0x0181*/ 121,
-      /*0x1e58*/ 583,
-      -1, -1, -1,
-      /*0xa668*/ 1000,
-      /*0x2164*/ 826,
-      /*0xa768*/ 1051,
+      /*0x1efc*/ 713,
+      /*0x01de*/ 171,
+      /*0x03de*/ 278,
+      -1,
+      /*0x0555*/ 481,
+      /*0xa746*/ 1080,
       -1, -1,
-      /*0x1edc*/ 651,
-      /*0x00c3*/ 29,
-      /*0x1e40*/ 571,
-      /*0x04ee*/ 412,
-      /*0x118ab*/ 1344,
-      /*0x03da*/ 276,
+      /*0x16e53*/ 1438,
       -1, -1,
-      /*0x01e8*/ 176,
-      /*0x03d8*/ 275,
-      -1,
-      /*0x1f56*/ 708,
-      -1, -1, -1,
-      /*0x1e54*/ 581,
+      /*0xa74e*/ 1084,
+      -1, -1, -1, -1,
+      /*0x1e6c*/ 639,
+      /*0xa75a*/ 1090,
+      /*0x2cde*/ 1020,
       -1,
-      /*0x118bf*/ 1364,
-      /*0x04e6*/ 408,
-      /*0xa664*/ 998,
-      /*0x053d*/ 457,
-      /*0xa764*/ 1049,
-      /*0x1fc9*/ 786,
-      /*0x0049*/ 1399,
-      /*0x0149*/ 92,
+      /*0x0051*/ 15,
+      /*0x1eee*/ 706,
+      /*0x00c5*/ 31,
+      /*0x01d1*/ 165,
+      /*0x03d1*/ 272,
       -1, -1,
-      /*0x104bd*/ 1259,
-      /*0x1f97*/ 744,
-      /*0x0417*/ 320,
-      /*0x1e5e*/ 586,
-      /*0x10417*/ 1229,
-      /*0x01e4*/ 174,
-      /*0xab97*/ 1127,
-      /*0x10a9*/ 493,
-      /*0x1fad*/ 766,
-      /*0x042d*/ 342,
-      /*0x04da*/ 402,
-      /*0x2c17*/ 888,
-      -1,
-      /*0xabad*/ 1149,
-      /*0x04d8*/ 401,
-      /*0xff2b*/ 1190,
+      /*0xa66c*/ 1048,
       -1,
-      /*0x023d*/ 218,
-      /*0x2c2d*/ 910,
-      -1,
-      /*0x0540*/ 460,
-      /*0x03de*/ 278,
-      /*0x00c9*/ 35,
+      /*0x212b*/ 866,
+      /*0x1ee6*/ 702,
+      /*0x24c5*/ 900,
+      /*0x00d9*/ 50,
+      /*0x1ede*/ 698,
       -1, -1,
-      /*0x04c0*/ 389,
+      /*0x104c5*/ 1321,
       -1,
-      /*0x104c0*/ 1262,
-      /*0x01a9*/ 146,
-      /*0x2160*/ 822,
-      /*0x10c97*/ 1305,
+      /*0x04c5*/ 392,
+      /*0x0545*/ 465,
+      /*0x1fad*/ 812,
+      /*0x042d*/ 342,
       -1, -1,
-      /*0x0554*/ 480,
-      /*0x1fb3*/ 770,
+      /*0xabad*/ 1203,
+      /*0x1f59*/ 755,
       -1,
-      /*0xa7ad*/ 1080,
-      /*0x10cad*/ 1327,
-      /*0x04d4*/ 399,
-      /*0xabb3*/ 1155,
-      /*0x1e917*/ 1388,
-      -1, -1, -1,
-      /*0x216e*/ 836,
-      /*0x118a9*/ 1342,
-      -1, -1, -1,
-      /*0x1e5c*/ 585,
+      /*0x1f6c*/ 763,
+      -1, -1,
+      /*0x04ec*/ 411,
+      /*0x2c2d*/ 956,
+      /*0x015c*/ 102,
       -1,
-      /*0x0547*/ 467,
-      /*0xa660*/ 996,
-      /*0x04de*/ 404,
-      /*0xa760*/ 1047,
+      /*0xfb17*/ 1233,
       -1,
-      /*0x04c7*/ 393,
-      /*0x1f50*/ 705,
-      /*0x104c7*/ 1269,
-      /*0x2166*/ 828,
+      /*0xa740*/ 1077,
+      /*0x03dc*/ 277,
+      /*0x1ff2*/ 854,
+      /*0x0472*/ 354,
       -1,
-      /*0x1f52*/ 706,
-      /*0xa7b3*/ 1085,
+      /*0x0172*/ 113,
       -1, -1,
-      /*0x01e0*/ 172,
-      -1,
-      /*0x03dc*/ 277,
+      /*0x10a9*/ 493,
+      /*0x01f2*/ 182,
+      /*0x10425*/ 1297,
+      /*0x1fa5*/ 804,
+      /*0x0425*/ 334,
+      /*0x2c72*/ 969,
       -1,
-      /*0xa76e*/ 1054,
-      /*0x03a1*/ 258,
-      /*0x0539*/ 453,
+      /*0xaba5*/ 1195,
       -1,
-      /*0x1e97*/ 615,
-      -1, -1, -1, -1,
-      /*0x104b9*/ 1255,
+      /*0x2cdc*/ 1019,
       -1,
-      /*0x01ee*/ 179,
-      /*0x10bd*/ 513,
-      /*0xa666*/ 999,
-      /*0xff29*/ 1188,
-      /*0xa766*/ 1050,
-      /*0x24bd*/ 846,
-      /*0x1fa5*/ 758,
-      /*0x0425*/ 334,
+      /*0x03a5*/ 261,
+      /*0x10c3*/ 519,
+      /*0xa7ad*/ 1126,
+      /*0x2c25*/ 948,
+      -1, -1, -1,
+      /*0x2cf2*/ 1025,
+      /*0x10a1*/ 485,
+      /*0x1e6a*/ 638,
+      /*0x00c9*/ 35,
+      /*0x1cad*/ 568,
+      /*0x10cad*/ 1381,
+      /*0x1edc*/ 697,
+      /*0x004d*/ 11,
+      -1, -1,
+      /*0x01cd*/ 163,
       -1,
-      /*0x10425*/ 1243,
+      /*0x24c9*/ 904,
+      /*0xa66a*/ 1047,
+      /*0x10b9*/ 509,
+      /*0x1ef2*/ 708,
+      /*0x1f49*/ 746,
+      /*0x104c9*/ 1325,
+      /*0xa762*/ 1094,
+      /*0x04c9*/ 394,
+      /*0x0549*/ 469,
+      /*0x013f*/ 87,
+      /*0xabbf*/ 1221,
       -1,
-      /*0xaba5*/ 1141,
-      /*0x1fb7*/ 773,
+      /*0xa754*/ 1087,
+      /*0x10423*/ 1295,
+      /*0x1fa3*/ 802,
+      /*0x0423*/ 332,
       -1, -1,
-      /*0x01e6*/ 175,
-      /*0x2c25*/ 902,
-      /*0xabb7*/ 1159,
-      -1,
-      /*0x04dc*/ 403,
+      /*0xaba3*/ 1193,
+      /*0x1ca5*/ 560,
+      /*0x10ca5*/ 1373,
+      /*0x1f6a*/ 761,
+      /*0x03a3*/ 259,
       -1,
-      /*0xa65a*/ 993,
+      /*0x04ea*/ 410,
+      /*0x2c23*/ 946,
       -1,
-      /*0xa75a*/ 1044,
+      /*0x0241*/ 220,
+      /*0x0141*/ 88,
+      /*0x0041*/ 0,
+      /*0x00c3*/ 29,
+      /*0x1f29*/ 730,
+      -1, -1,
+      /*0xa758*/ 1089,
+      -1, -1,
+      /*0x1e68*/ 637,
       -1,
-      /*0xa658*/ 992,
+      /*0x24c3*/ 898,
+      -1, -1, -1, -1,
+      /*0x104c3*/ 1319,
       -1,
-      /*0xa758*/ 1043,
-      /*0x10c0*/ 516,
-      -1, -1, -1,
-      /*0x24c0*/ 849,
+      /*0x04c3*/ 391,
+      /*0x0543*/ 463,
+      /*0xa668*/ 1046,
+      /*0x0372*/ 231,
       -1, -1,
-      /*0x10ca5*/ 1319,
-      /*0xa640*/ 980,
+      /*0x1cbf*/ 584,
+      -1, -1, -1,
+      /*0x023d*/ 218,
+      /*0x013d*/ 86,
+      /*0xabbd*/ 1219,
+      /*0x24b9*/ 888,
+      /*0x1ca3*/ 558,
+      /*0x10ca3*/ 1371,
       -1,
-      /*0xa740*/ 1031,
-      /*0x118bd*/ 1362,
-      /*0x1fa3*/ 756,
-      /*0x0423*/ 332,
+      /*0x1f39*/ 738,
+      /*0x104b9*/ 1309,
+      -1, -1,
+      /*0x0539*/ 453,
+      /*0x1f68*/ 759,
+      /*0x00cb*/ 37,
       -1,
-      /*0x10423*/ 1241,
-      /*0x1c84*/ 534,
-      /*0xaba3*/ 1139,
+      /*0x04e8*/ 409,
+      /*0x1041d*/ 1289,
+      /*0x1f9d*/ 796,
+      /*0x041d*/ 326,
       -1, -1,
-      /*0x0545*/ 465,
-      /*0xa654*/ 990,
-      /*0x2c23*/ 900,
-      /*0xa754*/ 1041,
+      /*0xab9d*/ 1187,
+      /*0x24cb*/ 906,
       -1,
-      /*0x04c5*/ 392,
+      /*0x019d*/ 139,
+      /*0x039d*/ 254,
+      /*0x1f4b*/ 748,
+      /*0x104cb*/ 1327,
+      /*0x2c1d*/ 940,
+      /*0x04cb*/ 395,
+      /*0x054b*/ 471,
+      /*0x10407*/ 1267,
+      /*0x1f87*/ 774,
+      /*0x0407*/ 304,
+      /*0x0587*/ 483,
       -1,
-      /*0x104c5*/ 1267,
+      /*0xab87*/ 1165,
+      /*0x1e64*/ 635,
+      -1,
+      /*0x0187*/ 125,
+      /*0x1041b*/ 1287,
+      /*0x1f9b*/ 794,
+      /*0x041b*/ 324,
+      /*0x2c07*/ 918,
+      /*0x1cbd*/ 582,
+      /*0xab9b*/ 1185,
       -1, -1,
-      /*0x1c82*/ 532,
-      /*0x10c7*/ 522,
-      /*0x0543*/ 463,
+      /*0xa664*/ 1044,
+      /*0x039b*/ 252,
       -1,
-      /*0x1f6c*/ 717,
-      /*0x24c7*/ 856,
-      /*0xa65e*/ 995,
-      /*0x04c3*/ 391,
-      /*0xa75e*/ 1046,
-      /*0x104c3*/ 1265,
+      /*0x1e60*/ 633,
+      /*0x2c1b*/ 938,
+      /*0x1fbb*/ 823,
       -1,
-      /*0x10ca3*/ 1317,
+      /*0x023b*/ 217,
+      /*0x013b*/ 85,
+      /*0xabbb*/ 1217,
       -1, -1,
-      /*0x0245*/ 223,
-      /*0x1ff4*/ 810,
-      /*0x0474*/ 355,
-      /*0x0174*/ 114,
+      /*0x1e74*/ 643,
+      /*0xab73*/ 1145,
+      /*0xa660*/ 1042,
+      /*0x1c9d*/ 552,
+      /*0x10c9d*/ 1365,
+      /*0x1e7c*/ 647,
       -1,
-      /*0x01de*/ 171,
+      /*0x1e91d*/ 1480,
       -1,
-      /*0x10b9*/ 509,
-      /*0x01c7*/ 159,
-      /*0x1f6a*/ 715,
-      /*0xfb01*/ 1169,
-      /*0x24b9*/ 842,
-      /*0x0243*/ 221,
+      /*0x1ff6*/ 857,
+      /*0x0476*/ 356,
+      /*0x04e4*/ 407,
+      /*0x0176*/ 115,
+      -1, -1, -1,
+      /*0x01f6*/ 184,
+      /*0x2162*/ 870,
+      /*0x1c87*/ 537,
+      /*0x10c87*/ 1343,
+      /*0x1e9b*/ 665,
+      /*0x118a9*/ 1396,
+      /*0x1e907*/ 1458,
+      /*0xa76c*/ 1099,
+      -1,
+      /*0x04e0*/ 405,
+      /*0x1e6e*/ 640,
+      /*0x1c9b*/ 550,
+      /*0x10c9b*/ 1363,
       -1, -1,
-      /*0x0397*/ 248,
+      /*0x1e91b*/ 1478,
       -1, -1,
-      /*0x1f2b*/ 686,
-      /*0x1f9d*/ 750,
-      /*0x041d*/ 326,
+      /*0x04f4*/ 415,
+      /*0x1e66*/ 636,
+      -1, -1,
+      /*0x1e5e*/ 632,
+      /*0x04fc*/ 419,
+      /*0x118a1*/ 1388,
       -1,
-      /*0x1041d*/ 1235,
-      /*0xabb1*/ 1153,
-      /*0xab9d*/ 1133,
-      /*0x0470*/ 353,
-      /*0x0170*/ 112,
-      /*0x1f9b*/ 748,
-      /*0x041b*/ 324,
-      /*0x2c1d*/ 894,
-      /*0x1041b*/ 1233,
-      /*0x1f3f*/ 698,
-      /*0xab9b*/ 1131,
-      /*0x10a1*/ 485,
-      /*0x2c70*/ 922,
-      /*0xabb5*/ 1157,
-      /*0x0549*/ 469,
-      /*0x2c1b*/ 892,
-      /*0xa65c*/ 994,
-      /*0x1f68*/ 713,
-      /*0xa75c*/ 1045,
-      /*0x04c9*/ 394,
+      /*0xabb1*/ 1207,
       -1,
-      /*0x104c9*/ 1271,
-      /*0x0370*/ 230,
-      /*0x118b9*/ 1358,
-      /*0xa7b1*/ 1083,
-      /*0x10cb1*/ 1331,
-      /*0x10c9d*/ 1311,
+      /*0xff29*/ 1242,
+      /*0x01b1*/ 150,
+      /*0xa666*/ 1045,
       -1,
-      /*0x1f99*/ 746,
+      /*0x1ef6*/ 710,
+      /*0xa65e*/ 1041,
+      /*0x10419*/ 1285,
+      /*0x1f99*/ 792,
       /*0x0419*/ 322,
+      /*0x118b9*/ 1412,
+      /*0x10ad*/ 497,
+      /*0xab99*/ 1183,
+      /*0x00de*/ 55,
+      /*0x1f6e*/ 765,
       -1,
-      /*0x10419*/ 1231,
-      -1,
-      /*0xab99*/ 1129,
-      /*0x10c9b*/ 1309,
-      /*0x00b5*/ 25,
-      /*0x1e91d*/ 1394,
-      -1,
-      /*0x2c19*/ 890,
+      /*0x0399*/ 250,
+      /*0x04ee*/ 412,
       -1,
-      /*0x1f93*/ 740,
+      /*0x2c19*/ 936,
+      /*0xff21*/ 1234,
+      /*0x1fb7*/ 819,
+      /*0x10413*/ 1279,
+      /*0x1f93*/ 786,
       /*0x0413*/ 316,
-      /*0x10c5*/ 521,
-      /*0x10413*/ 1225,
-      /*0x1e91b*/ 1392,
-      /*0xab93*/ 1123,
-      /*0x24c5*/ 854,
+      /*0xabb7*/ 1213,
+      /*0x04e6*/ 408,
+      /*0xab93*/ 1177,
+      /*0x01b7*/ 154,
+      /*0x04de*/ 404,
+      /*0x0193*/ 133,
+      /*0x0393*/ 244,
+      /*0xa7b1*/ 1129,
+      /*0xff39*/ 1258,
+      /*0x2c13*/ 930,
+      /*0x00d1*/ 43,
+      /*0x1ffa*/ 861,
+      /*0x047a*/ 358,
+      /*0x10a5*/ 489,
       -1, -1,
-      /*0x118a1*/ 1334,
-      /*0x2c13*/ 884,
-      /*0x1ef4*/ 663,
-      -1,
-      /*0x0533*/ 447,
-      /*0x10c3*/ 519,
-      /*0x0041*/ 0,
-      /*0x0141*/ 88,
-      /*0x10c99*/ 1307,
-      /*0x24c3*/ 852,
-      -1,
-      /*0x104b3*/ 1249,
-      /*0xff39*/ 1204,
-      -1,
-      /*0x01c5*/ 158,
-      /*0x1f29*/ 684,
+      /*0x1cb1*/ 572,
+      /*0x10cb1*/ 1385,
+      /*0x01fa*/ 187,
+      /*0x03fa*/ 293,
       -1, -1,
-      /*0x1e919*/ 1390,
+      /*0x1e99*/ 663,
+      /*0xa76a*/ 1098,
+      /*0x104d1*/ 1333,
+      /*0x1e5c*/ 631,
+      /*0x0376*/ 232,
+      /*0x0551*/ 477,
       -1,
-      /*0x10c93*/ 1301,
-      /*0x1f8f*/ 736,
-      /*0x040f*/ 312,
+      /*0x1c99*/ 548,
+      /*0x10c99*/ 1361,
+      /*0x10cd*/ 523,
       -1,
-      /*0x1040f*/ 1221,
-      /*0x1ef0*/ 661,
-      /*0xab8f*/ 1119,
+      /*0x1e919*/ 1476,
+      /*0x1e72*/ 642,
       -1,
-      /*0x1e9b*/ 619,
-      /*0x03a5*/ 261,
-      /*0x1e913*/ 1384,
-      /*0x2c0f*/ 880,
-      /*0x00c1*/ 27,
+      /*0xa65c*/ 1040,
+      -1,
+      /*0x13fa*/ 526,
       -1, -1, -1,
-      /*0x1f8b*/ 732,
-      /*0x040b*/ 308,
-      /*0xff21*/ 1180,
-      /*0x1040b*/ 1217,
+      /*0x1cb7*/ 578,
+      /*0x00dc*/ 53,
+      /*0x1c93*/ 542,
+      /*0x10c93*/ 1355,
+      /*0x10bf*/ 515,
+      /*0x1f2d*/ 734,
+      /*0x1e913*/ 1470,
+      /*0xabb5*/ 1211,
+      /*0x1efa*/ 712,
       -1,
-      /*0xab8b*/ 1115,
-      /*0x1f87*/ 728,
-      /*0x0407*/ 304,
-      /*0xab7b*/ 1099,
-      /*0x10407*/ 1213,
-      /*0x2c0b*/ 876,
-      /*0xab87*/ 1111,
-      /*0x0587*/ 483,
+      /*0x01b5*/ 153,
       -1,
-      /*0x10c8f*/ 1297,
-      /*0x1e99*/ 617,
-      /*0x2c07*/ 872,
-      /*0x004f*/ 13,
+      /*0x10a3*/ 487,
+      /*0xab75*/ 1147,
       -1, -1, -1,
-      /*0x24c9*/ 858,
+      /*0x04dc*/ 403,
+      /*0x1fb3*/ 816,
+      -1, -1, -1,
+      /*0xabb3*/ 1209,
+      /*0x10c1*/ 517,
       -1,
-      /*0xab79*/ 1097,
-      /*0x1e90f*/ 1380,
+      /*0x01b3*/ 152,
+      /*0x04f2*/ 414,
       -1,
-      /*0x0537*/ 451,
-      /*0x03a3*/ 259,
-      /*0xa78b*/ 1063,
-      /*0x10c8b*/ 1293,
-      /*0x10ad*/ 497,
-      /*0x1f6e*/ 719,
+      /*0xa768*/ 1097,
       -1,
-      /*0x104b7*/ 1253,
+      /*0x1041f*/ 1291,
+      /*0x1f9f*/ 798,
+      /*0x041f*/ 328,
+      -1, -1,
+      /*0xab9f*/ 1189,
+      -1,
+      /*0x00cd*/ 39,
+      /*0x019f*/ 140,
+      /*0x039f*/ 256,
+      /*0x216c*/ 880,
       -1,
-      /*0x10c87*/ 1289,
+      /*0x2c1f*/ 942,
       -1, -1, -1,
-      /*0x1e90b*/ 1376,
+      /*0x24cd*/ 908,
       -1, -1,
-      /*0x1e74*/ 597,
-      /*0x00cf*/ 41,
-      /*0x0197*/ 136,
-      /*0x1e907*/ 1372,
+      /*0x1cb5*/ 576,
+      /*0x1f4d*/ 750,
+      /*0x104cd*/ 1329,
+      /*0x10bd*/ 513,
+      /*0x04cd*/ 396,
+      /*0x054d*/ 473,
+      /*0xa7b3*/ 1131,
+      /*0x1ff8*/ 859,
+      /*0x0478*/ 357,
+      /*0xab7f*/ 1157,
+      /*0x0178*/ 116,
+      /*0xab71*/ 1143,
+      /*0x24bf*/ 894,
       -1,
-      /*0xab71*/ 1089,
-      /*0xab73*/ 1091,
-      -1, -1, -1, -1,
-      /*0x1f3d*/ 696,
+      /*0x01f8*/ 186,
+      /*0x1cb3*/ 574,
+      /*0x1f3f*/ 744,
+      /*0x104bf*/ 1315,
       -1, -1,
-      /*0x10b3*/ 503,
+      /*0x053f*/ 459,
       -1,
-      /*0xab7f*/ 1103,
+      /*0x00c1*/ 27,
+      -1, -1, -1, -1, -1,
+      /*0x1c9f*/ 554,
+      /*0x10c9f*/ 1367,
+      /*0xfb13*/ 1229,
+      /*0x24c1*/ 896,
+      /*0x1e91f*/ 1482,
       -1,
-      /*0x03f4*/ 289,
-      /*0x1f9f*/ 752,
-      /*0x041f*/ 328,
-      /*0xab7d*/ 1101,
-      /*0x1041f*/ 1237,
-      /*0x1e70*/ 595,
-      /*0xab9f*/ 1135,
+      /*0x13f8*/ 524,
+      /*0xa764*/ 1095,
+      /*0x104c1*/ 1317,
       -1,
-      /*0x118ad*/ 1346,
+      /*0x04c1*/ 390,
+      /*0x0541*/ 461,
+      /*0xab79*/ 1151,
       -1, -1,
-      /*0x2c1f*/ 896,
-      -1, -1, -1, -1, -1,
-      /*0x01b3*/ 152,
-      /*0x039d*/ 254,
-      -1, -1, -1, -1,
-      /*0x03f0*/ 287,
-      /*0xab75*/ 1093,
+      /*0x10415*/ 1281,
+      /*0x1f95*/ 788,
+      /*0x0415*/ 318,
+      /*0x1ef8*/ 711,
       -1,
-      /*0x039b*/ 252,
-      -1, -1, -1,
-      /*0x10c9f*/ 1313,
+      /*0xab95*/ 1179,
+      /*0xa760*/ 1093,
+      -1, -1,
+      /*0x0395*/ 246,
+      -1, -1,
+      /*0x2c15*/ 932,
+      -1, -1,
+      /*0x10bb*/ 511,
+      /*0x216a*/ 878,
+      /*0x24bd*/ 892,
       -1,
-      /*0x04f4*/ 415,
-      /*0x1f54*/ 707,
-      /*0x118b3*/ 1352,
+      /*0x118ad*/ 1400,
       -1,
-      /*0x1ff8*/ 813,
-      /*0x0478*/ 357,
-      /*0x0178*/ 116,
+      /*0x1f3d*/ 742,
+      /*0x104bd*/ 1313,
       -1,
-      /*0x1e91f*/ 1396,
+      /*0x047e*/ 360,
+      /*0x053d*/ 457,
+      /*0x16e52*/ 1437,
       -1, -1, -1,
-      /*0x0531*/ 445,
+      /*0x01fe*/ 189,
+      /*0x03fe*/ 295,
+      /*0x16e4c*/ 1431,
+      /*0xab7b*/ 1153,
+      /*0x2c7e*/ 971,
+      -1, -1, -1, -1, -1,
+      /*0x1f1d*/ 728,
+      /*0xa76e*/ 1100,
+      /*0xff2d*/ 1246,
+      -1, -1, -1,
+      /*0x118a5*/ 1392,
+      /*0x1c95*/ 544,
+      /*0x10c95*/ 1357,
       -1,
-      /*0xff2d*/ 1192,
+      /*0xa766*/ 1096,
+      /*0x1e915*/ 1472,
       -1,
-      /*0x10a5*/ 489,
-      /*0x0399*/ 250,
+      /*0xa75e*/ 1092,
+      -1, -1, -1, -1, -1, -1,
+      /*0x10b1*/ 501,
+      /*0x1e76*/ 644,
+      /*0x1efe*/ 714,
+      /*0x2168*/ 876,
+      /*0x1f1b*/ 726,
       -1,
-      /*0x104b1*/ 1247,
-      -1, -1,
-      /*0x10b7*/ 507,
-      /*0x04f0*/ 413,
-      /*0x0535*/ 449,
+      /*0x10411*/ 1277,
+      /*0x1f91*/ 784,
+      /*0x0411*/ 314,
+      /*0xff25*/ 1238,
       -1,
-      /*0x24b7*/ 840,
-      /*0x1f95*/ 742,
-      /*0x0415*/ 318,
-      /*0x0393*/ 244,
-      /*0x10415*/ 1227,
-      /*0x104b5*/ 1251,
-      /*0xab95*/ 1125,
-      -1, -1, -1, -1,
-      /*0x2c15*/ 886,
+      /*0xab91*/ 1175,
+      /*0x24bb*/ 890,
       -1,
-      /*0x1f39*/ 692,
-      /*0xff33*/ 1198,
+      /*0x0191*/ 132,
+      /*0x0391*/ 242,
+      /*0x1f3b*/ 740,
+      /*0x104bb*/ 1311,
+      /*0x2c11*/ 928,
+      /*0x118bf*/ 1418,
+      /*0x053b*/ 455,
       -1, -1,
-      /*0x01b7*/ 154,
-      -1, -1, -1, -1,
-      /*0xab77*/ 1095,
-      -1,
-      /*0x10a3*/ 487,
-      -1,
-      /*0x1f91*/ 738,
-      /*0x0411*/ 314,
-      /*0x118a5*/ 1338,
-      /*0x10411*/ 1223,
-      /*0x10c95*/ 1303,
-      /*0xab91*/ 1121,
+      /*0xab7d*/ 1155,
+      -1, -1,
+      /*0x10b7*/ 507,
+      /*0x118a3*/ 1390,
+      /*0x1040f*/ 1275,
+      /*0x1f8f*/ 782,
+      /*0x040f*/ 312,
+      -1, -1,
+      /*0xab8f*/ 1173,
       -1,
+      /*0x04f6*/ 416,
+      /*0x018f*/ 130,
       /*0x038f*/ 240,
-      /*0x118b7*/ 1356,
+      -1, -1,
+      /*0x2c0f*/ 926,
       -1,
-      /*0x2c11*/ 882,
-      -1, -1, -1,
-      /*0x1e915*/ 1386,
+      /*0x16e4a*/ 1429,
       -1,
-      /*0x1f8d*/ 734,
-      /*0x040d*/ 310,
-      /*0x0541*/ 461,
-      /*0x1040d*/ 1219,
+      /*0x1040b*/ 1271,
+      /*0x1f8b*/ 778,
+      /*0x040b*/ 308,
       -1,
-      /*0xab8d*/ 1117,
+      /*0xa75c*/ 1091,
+      /*0xab8b*/ 1169,
+      /*0xff23*/ 1236,
       -1,
-      /*0x04c1*/ 390,
-      /*0x1ef8*/ 665,
-      /*0x104c1*/ 1263,
-      /*0x2c0d*/ 878,
-      -1, -1,
-      /*0x10c91*/ 1299,
-      -1, -1, -1, -1, -1, -1,
-      /*0x118a3*/ 1336,
+      /*0x018b*/ 128,
+      /*0x1c91*/ 540,
+      /*0x10c91*/ 1353,
       -1,
-      /*0x03cf*/ 270,
-      /*0x1e911*/ 1382,
-      /*0xff25*/ 1184,
+      /*0x2c0b*/ 922,
+      /*0x1e911*/ 1468,
       -1,
-      /*0x0241*/ 220,
+      /*0x2164*/ 872,
+      /*0xab77*/ 1149,
       -1,
-      /*0xa78d*/ 1064,
-      /*0x10c8d*/ 1295,
-      /*0xff37*/ 1202,
+      /*0x104b1*/ 1301,
       -1,
-      /*0x10b1*/ 501,
-      -1, -1, -1,
-      /*0x01f4*/ 183,
-      -1, -1,
-      /*0x1e90d*/ 1378,
-      -1, -1, -1, -1,
-      /*0x10b5*/ 505,
-      -1, -1, -1,
-      /*0x13f8*/ 524,
-      /*0x054f*/ 475,
-      -1, -1, -1,
-      /*0x01b1*/ 150,
-      /*0x019d*/ 139,
+      /*0xfb15*/ 1231,
+      /*0x0531*/ 445,
       -1,
-      /*0x104cf*/ 1277,
+      /*0x118bd*/ 1416,
+      /*0x16e44*/ 1423,
+      /*0x16e4f*/ 1434,
       -1,
-      /*0xff23*/ 1182,
-      /*0x01f0*/ 180,
-      -1, -1, -1, -1, -1,
-      /*0x01b5*/ 153,
+      /*0x1e7a*/ 646,
       -1,
-      /*0x039f*/ 256,
+      /*0x2160*/ 868,
+      /*0x1f19*/ 724,
+      /*0x10b5*/ 505,
+      /*0x10c8f*/ 1351,
       -1, -1,
-      /*0x118b1*/ 1350,
-      -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1, -1,
-      /*0x118b5*/ 1354,
-      /*0xfb17*/ 1179,
-      /*0x1e78*/ 599,
-      -1, -1, -1,
-      /*0x1f49*/ 700,
-      -1,
-      /*0x10c1*/ 517,
-      -1, -1, -1,
-      /*0x24c1*/ 850,
+      /*0x1e90f*/ 1466,
       -1, -1,
-      /*0x0193*/ 133,
-      -1, -1, -1,
-      /*0x1f2d*/ 688,
-      -1, -1, -1, -1, -1, -1,
-      /*0xff31*/ 1196,
-      -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1, -1,
-      /*0xff35*/ 1200,
-      -1, -1, -1, -1,
-      /*0x0395*/ 246,
+      /*0xa78b*/ 1109,
+      /*0x24b7*/ 886,
+      /*0x10405*/ 1265,
+      /*0x1f85*/ 772,
+      /*0x0405*/ 302,
       -1,
-      /*0x018f*/ 130,
-      -1, -1, -1, -1, -1, -1,
-      /*0x04f8*/ 417,
-      -1, -1, -1, -1, -1,
-      /*0xab76*/ 1094,
-      /*0x24cf*/ 864,
-      /*0x018b*/ 128,
-      -1, -1, -1, -1, -1,
-      /*0x0187*/ 125,
+      /*0x104b7*/ 1307,
+      /*0xab85*/ 1163,
+      /*0x10b3*/ 503,
+      /*0x0537*/ 451,
+      /*0x10c8b*/ 1347,
       -1,
-      /*0x0391*/ 242,
-      -1, -1, -1, -1, -1, -1,
+      /*0x16e42*/ 1421,
+      /*0x1e90b*/ 1462,
+      /*0x2c05*/ 916,
+      -1, -1, -1, -1, -1,
+      /*0x10401*/ 1261,
+      /*0x1f81*/ 768,
+      /*0x0401*/ 298,
+      /*0x04fa*/ 418,
+      /*0x16e48*/ 1427,
+      /*0xab81*/ 1159,
+      /*0x216e*/ 882,
       -1,
-      /*0x01cf*/ 164,
-      -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1, -1, -1,
+      /*0x0181*/ 121,
+      -1, -1, -1,
+      /*0x2c01*/ 912,
       -1, -1,
-      /*0x019f*/ 140,
-      -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1, -1, -1,
+      /*0x2166*/ 874,
+      -1, -1, -1, -1,
+      /*0x118bb*/ 1414,
+      /*0x00b5*/ 25,
       -1, -1, -1, -1, -1, -1,
       -1,
       /*0x1c85*/ 535,
-      -1, -1, -1, -1, -1, -1,
+      /*0x10c85*/ 1341,
       -1, -1,
-      /*0x01f8*/ 186,
-      -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1, -1, -1,
+      /*0x1e905*/ 1456,
       -1,
-      /*0x1f1d*/ 682,
-      -1, -1, -1, -1, -1, -1,
+      /*0x104b5*/ 1305,
+      -1, -1,
+      /*0x0535*/ 449,
+      -1, -1, -1, -1,
+      /*0x16e50*/ 1435,
       -1,
-      /*0x1f1b*/ 680,
-      -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1, -1, -1,
+      /*0x16e56*/ 1441,
       -1,
-      /*0x0191*/ 132,
+      /*0x1c81*/ 531,
+      /*0x10c81*/ 1337,
+      -1,
+      /*0x104b3*/ 1303,
+      /*0x1e901*/ 1452,
+      -1,
+      /*0x0533*/ 447,
+      /*0x16e5b*/ 1446,
+      -1,
+      /*0x1e78*/ 645,
       -1, -1, -1, -1, -1, -1,
       -1, -1,
-      /*0x1f19*/ 678,
-      /*0xfb13*/ 1175,
-      -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1, -1, -1,
+      /*0x118b1*/ 1404,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1,
-      /*0x1f0f*/ 676,
-      -1, -1, -1, -1,
-      /*0xab7e*/ 1102,
-      -1, -1, -1, -1, -1, -1,
+      -1, -1, -1, -1, -1,
+      /*0x16e46*/ 1425,
+      /*0xab70*/ 1142,
       -1, -1, -1,
-      /*0x1f0b*/ 672,
-      -1, -1, -1, -1,
-      /*0xab72*/ 1090,
-      -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1, -1, -1,
+      /*0xff31*/ 1250,
+      /*0x16e4e*/ 1433,
+      /*0x04f8*/ 417,
+      /*0x118b7*/ 1410,
+      -1, -1, -1,
+      /*0x16e5a*/ 1445,
       -1, -1, -1, -1, -1, -1,
+      -1, -1, -1, -1,
+      /*0xfb05*/ 1227,
       -1, -1, -1, -1, -1, -1,
+      -1,
+      /*0xff37*/ 1256,
+      /*0x1e7e*/ 648,
       -1, -1, -1, -1, -1, -1,
+      -1, -1,
+      /*0xfb01*/ 1223,
       -1, -1, -1, -1, -1, -1,
+      -1, -1, -1,
+      /*0x16e40*/ 1419,
+      -1, -1, -1, -1, -1,
+      /*0x118b5*/ 1408,
       -1, -1, -1, -1, -1, -1,
+      -1, -1,
+      /*0x04fe*/ 420,
+      -1, -1, -1, -1, -1,
+      /*0x118b3*/ 1406,
       -1, -1, -1, -1, -1, -1,
+      -1,
+      /*0xff35*/ 1254,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1,
-      /*0x1c81*/ 531,
+      /*0xff33*/ 1252,
+      -1, -1, -1, -1, -1,
+      /*0x16e54*/ 1439,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1,
-      /*0xfb15*/ 1177,
-      -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1, -1, -1,
+      /*0x16e58*/ 1443,
+      -1, -1, -1, -1, -1,
+      /*0x1f0f*/ 722,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
+      -1, -1, -1,
+      /*0x1f0b*/ 718,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
-      -1, -1, -1,
-      /*0x1f0d*/ 674,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
+      -1, -1, -1, -1, -1,
+      /*0x16e55*/ 1440,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
+      -1, -1, -1, -1,
+      /*0x16e45*/ 1424,
       -1, -1, -1, -1, -1, -1,
+      -1, -1, -1,
+      /*0x16e59*/ 1444,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
+      -1, -1, -1, -1,
+      /*0xa77e*/ 1104,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
+      -1, -1, -1, -1, -1,
+      /*0x16e49*/ 1428,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
-      -1, -1, -1,
-      /*0xab7a*/ 1098,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
+      -1, -1,
+      /*0x16e43*/ 1422,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
+      -1, -1,
+      /*0x16e4b*/ 1430,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
@@ -3419,24 +3516,33 @@ onigenc_unicode_CaseFold_11_lookup(const OnigCodePoint code)
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
+      /*0x16e5e*/ 1449,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
+      -1, -1, -1,
+      /*0x16e51*/ 1436,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
+      -1, -1,
+      /*0x16e5c*/ 1447,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
+      -1, -1, -1, -1, -1,
+      /*0x16e4d*/ 1432,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
+      -1, -1, -1,
+      /*0x16e41*/ 1420,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
@@ -3448,8 +3554,6 @@ onigenc_unicode_CaseFold_11_lookup(const OnigCodePoint code)
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1,
-      /*0xab7c*/ 1100,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
@@ -3463,8 +3567,6 @@ onigenc_unicode_CaseFold_11_lookup(const OnigCodePoint code)
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1,
-      /*0x1c87*/ 537,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
@@ -3497,6 +3599,10 @@ onigenc_unicode_CaseFold_11_lookup(const OnigCodePoint code)
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
+      -1,
+      /*0xab74*/ 1146,
+      -1, -1, -1, -1,
+      /*0xab7c*/ 1154,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
@@ -3513,6 +3619,7 @@ onigenc_unicode_CaseFold_11_lookup(const OnigCodePoint code)
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
+      /*0xab72*/ 1144,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
@@ -3539,21 +3646,21 @@ onigenc_unicode_CaseFold_11_lookup(const OnigCodePoint code)
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
+      -1, -1, -1, -1,
+      /*0xab76*/ 1148,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
-      -1, -1,
-      /*0xab74*/ 1092,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1,
-      /*0xab70*/ 1088,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
+      -1, -1, -1,
+      /*0xab7a*/ 1152,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
@@ -3568,6 +3675,8 @@ onigenc_unicode_CaseFold_11_lookup(const OnigCodePoint code)
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
+      -1, -1,
+      /*0xab78*/ 1150,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
@@ -3578,14 +3687,14 @@ onigenc_unicode_CaseFold_11_lookup(const OnigCodePoint code)
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1,
-      /*0xab78*/ 1096
+      /*0xab7e*/ 1156
     };
 
   if (code <= MAX_CODE_VALUE && code >= MIN_CODE_VALUE)
     {
-      register int key = onigenc_unicode_CaseFold_11_hash(code);
+      register unsigned int key = onigenc_unicode_CaseFold_11_hash(code);
 
-      if (key <= MAX_HASH_VALUE && key >= 0)
+      if (key <= MAX_HASH_VALUE)
         {
           register short s = wordlist[key];
 
@@ -3597,7 +3706,7 @@ onigenc_unicode_CaseFold_11_lookup(const OnigCodePoint code)
 }
 
 static const CaseUnfold_11_Type CaseUnfold_11_Table[] = {
-#define CaseUnfold_11 (*(CaseUnfold_11_Type (*)[1266])(CaseUnfold_11_Table+0))
+#define CaseUnfold_11 (*(CaseUnfold_11_Type (*)[1352])(CaseUnfold_11_Table+0))
   {0x0061, {1|U, {0x0041}}},
   {0x0062, {1|U, {0x0042}}},
   {0x0063, {1|U, {0x0043}}},
@@ -3823,6 +3932,7 @@ static const CaseUnfold_11_Type CaseUnfold_11_Table[] = {
   {0x0275, {1|U, {0x019f}}},
   {0x027d, {1|U, {0x2c64}}},
   {0x0280, {1|U, {0x01a6}}},
+  {0x0282, {1|U, {0xa7c5}}},
   {0x0283, {1|U, {0x01a9}}},
   {0x0287, {1|U, {0xa7b1}}},
   {0x0288, {1|U, {0x01ae}}},
@@ -4075,6 +4185,52 @@ static const CaseUnfold_11_Type CaseUnfold_11_Table[] = {
   {0x0584, {1|U, {0x0554}}},
   {0x0585, {1|U, {0x0555}}},
   {0x0586, {1|U, {0x0556}}},
+  {0x10d0, {1|U|IT, {0x1c90}}},
+  {0x10d1, {1|U|IT, {0x1c91}}},
+  {0x10d2, {1|U|IT, {0x1c92}}},
+  {0x10d3, {1|U|IT, {0x1c93}}},
+  {0x10d4, {1|U|IT, {0x1c94}}},
+  {0x10d5, {1|U|IT, {0x1c95}}},
+  {0x10d6, {1|U|IT, {0x1c96}}},
+  {0x10d7, {1|U|IT, {0x1c97}}},
+  {0x10d8, {1|U|IT, {0x1c98}}},
+  {0x10d9, {1|U|IT, {0x1c99}}},
+  {0x10da, {1|U|IT, {0x1c9a}}},
+  {0x10db, {1|U|IT, {0x1c9b}}},
+  {0x10dc, {1|U|IT, {0x1c9c}}},
+  {0x10dd, {1|U|IT, {0x1c9d}}},
+  {0x10de, {1|U|IT, {0x1c9e}}},
+  {0x10df, {1|U|IT, {0x1c9f}}},
+  {0x10e0, {1|U|IT, {0x1ca0}}},
+  {0x10e1, {1|U|IT, {0x1ca1}}},
+  {0x10e2, {1|U|IT, {0x1ca2}}},
+  {0x10e3, {1|U|IT, {0x1ca3}}},
+  {0x10e4, {1|U|IT, {0x1ca4}}},
+  {0x10e5, {1|U|IT, {0x1ca5}}},
+  {0x10e6, {1|U|IT, {0x1ca6}}},
+  {0x10e7, {1|U|IT, {0x1ca7}}},
+  {0x10e8, {1|U|IT, {0x1ca8}}},
+  {0x10e9, {1|U|IT, {0x1ca9}}},
+  {0x10ea, {1|U|IT, {0x1caa}}},
+  {0x10eb, {1|U|IT, {0x1cab}}},
+  {0x10ec, {1|U|IT, {0x1cac}}},
+  {0x10ed, {1|U|IT, {0x1cad}}},
+  {0x10ee, {1|U|IT, {0x1cae}}},
+  {0x10ef, {1|U|IT, {0x1caf}}},
+  {0x10f0, {1|U|IT, {0x1cb0}}},
+  {0x10f1, {1|U|IT, {0x1cb1}}},
+  {0x10f2, {1|U|IT, {0x1cb2}}},
+  {0x10f3, {1|U|IT, {0x1cb3}}},
+  {0x10f4, {1|U|IT, {0x1cb4}}},
+  {0x10f5, {1|U|IT, {0x1cb5}}},
+  {0x10f6, {1|U|IT, {0x1cb6}}},
+  {0x10f7, {1|U|IT, {0x1cb7}}},
+  {0x10f8, {1|U|IT, {0x1cb8}}},
+  {0x10f9, {1|U|IT, {0x1cb9}}},
+  {0x10fa, {1|U|IT, {0x1cba}}},
+  {0x10fd, {1|U|IT, {0x1cbd}}},
+  {0x10fe, {1|U|IT, {0x1cbe}}},
+  {0x10ff, {1|U|IT, {0x1cbf}}},
   {0x13a0, {1|D, {0xab70}}},
   {0x13a1, {1|D, {0xab71}}},
   {0x13a2, {1|D, {0xab72}}},
@@ -4163,6 +4319,7 @@ static const CaseUnfold_11_Type CaseUnfold_11_Table[] = {
   {0x13f5, {1|D, {0x13fd}}},
   {0x1d79, {1|U, {0xa77d}}},
   {0x1d7d, {1|U, {0x2c63}}},
+  {0x1d8e, {1|U, {0xa7c6}}},
   {0x1e01, {1|U, {0x1e00}}},
   {0x1e03, {1|U, {0x1e02}}},
   {0x1e05, {1|U, {0x1e04}}},
@@ -4632,6 +4789,7 @@ static const CaseUnfold_11_Type CaseUnfold_11_Table[] = {
   {0xa78c, {1|U, {0xa78b}}},
   {0xa791, {1|U, {0xa790}}},
   {0xa793, {1|U, {0xa792}}},
+  {0xa794, {1|U, {0xa7c4}}},
   {0xa797, {1|U, {0xa796}}},
   {0xa799, {1|U, {0xa798}}},
   {0xa79b, {1|U, {0xa79a}}},
@@ -4644,6 +4802,11 @@ static const CaseUnfold_11_Type CaseUnfold_11_Table[] = {
   {0xa7a9, {1|U, {0xa7a8}}},
   {0xa7b5, {1|U, {0xa7b4}}},
   {0xa7b7, {1|U, {0xa7b6}}},
+  {0xa7b9, {1|U, {0xa7b8}}},
+  {0xa7bb, {1|U, {0xa7ba}}},
+  {0xa7bd, {1|U, {0xa7bc}}},
+  {0xa7bf, {1|U, {0xa7be}}},
+  {0xa7c3, {1|U, {0xa7c2}}},
   {0xab53, {1|U, {0xa7b3}}},
   {0xff41, {1|U, {0xff21}}},
   {0xff42, {1|U, {0xff22}}},
@@ -4830,6 +4993,38 @@ static const CaseUnfold_11_Type CaseUnfold_11_Table[] = {
   {0x118dd, {1|U, {0x118bd}}},
   {0x118de, {1|U, {0x118be}}},
   {0x118df, {1|U, {0x118bf}}},
+  {0x16e60, {1|U, {0x16e40}}},
+  {0x16e61, {1|U, {0x16e41}}},
+  {0x16e62, {1|U, {0x16e42}}},
+  {0x16e63, {1|U, {0x16e43}}},
+  {0x16e64, {1|U, {0x16e44}}},
+  {0x16e65, {1|U, {0x16e45}}},
+  {0x16e66, {1|U, {0x16e46}}},
+  {0x16e67, {1|U, {0x16e47}}},
+  {0x16e68, {1|U, {0x16e48}}},
+  {0x16e69, {1|U, {0x16e49}}},
+  {0x16e6a, {1|U, {0x16e4a}}},
+  {0x16e6b, {1|U, {0x16e4b}}},
+  {0x16e6c, {1|U, {0x16e4c}}},
+  {0x16e6d, {1|U, {0x16e4d}}},
+  {0x16e6e, {1|U, {0x16e4e}}},
+  {0x16e6f, {1|U, {0x16e4f}}},
+  {0x16e70, {1|U, {0x16e50}}},
+  {0x16e71, {1|U, {0x16e51}}},
+  {0x16e72, {1|U, {0x16e52}}},
+  {0x16e73, {1|U, {0x16e53}}},
+  {0x16e74, {1|U, {0x16e54}}},
+  {0x16e75, {1|U, {0x16e55}}},
+  {0x16e76, {1|U, {0x16e56}}},
+  {0x16e77, {1|U, {0x16e57}}},
+  {0x16e78, {1|U, {0x16e58}}},
+  {0x16e79, {1|U, {0x16e59}}},
+  {0x16e7a, {1|U, {0x16e5a}}},
+  {0x16e7b, {1|U, {0x16e5b}}},
+  {0x16e7c, {1|U, {0x16e5c}}},
+  {0x16e7d, {1|U, {0x16e5d}}},
+  {0x16e7e, {1|U, {0x16e5e}}},
+  {0x16e7f, {1|U, {0x16e5f}}},
   {0x1e922, {1|U, {0x1e900}}},
   {0x1e923, {1|U, {0x1e901}}},
   {0x1e924, {1|U, {0x1e902}}},
@@ -4864,14 +5059,14 @@ static const CaseUnfold_11_Type CaseUnfold_11_Table[] = {
   {0x1e941, {1|U, {0x1e91f}}},
   {0x1e942, {1|U, {0x1e920}}},
   {0x1e943, {1|U, {0x1e921}}},
-#define CaseUnfold_11_Locale (*(CaseUnfold_11_Type (*)[1])(CaseUnfold_11_Table+1266))
+#define CaseUnfold_11_Locale (*(CaseUnfold_11_Type (*)[1])(CaseUnfold_11_Table+1352))
   {0x0069, {1|U, {0x0049}}},
 };
 
-/* C code produced by gperf version 3.0.4 */
+/* ANSI-C code produced by gperf version 3.1 */
 /* Command-line: gperf -7 -k1,2,3 -F,-1 -c -j1 -i1 -t -T -E -C -H onigenc_unicode_CaseUnfold_11_hash -N onigenc_unicode_CaseUnfold_11_lookup -n  */
 
-/* maximum key range = 2216, duplicates = 0 */
+/* maximum key range = 2507, duplicates = 0 */
 
 #ifdef __GNUC__
 __inline
@@ -4886,36 +5081,30 @@ onigenc_unicode_CaseUnfold_11_hash(const OnigCodePoint code)
 {
   static const unsigned short asso_values[] =
     {
-         1, 2219,    2,   14,    4,  807,    9,  379,   10,  179,
-        70,  161,    2,    3,  411,    4, 2219, 2219, 2219, 2219,
-      2219, 2219, 2219, 2219, 2219, 2219, 2219, 2219, 2219,   80,
-      2219, 2219, 2219, 2219, 2219, 2219, 2219, 2219, 2219, 2219,
-      2219, 2219, 2219,    1, 2219, 2219, 2219, 2219, 2219, 2219,
-      2219, 2219, 2219,  210, 2219, 2219, 2219, 2219, 2219, 2219,
-      2219, 2219,   53, 2219,    7,    8,  306,  607,  169,  844,
-       431,  722,  125, 1047,  489, 1394,   15,   16,  324, 1361,
-       140,  521,   47,  461,  221,  985,   70,  965,    9, 1085,
-        51, 1029,  223,   11,  430, 1168,  122, 1457,  344,  930,
-        91,  711,   31,  651,  157,  772,  224,  876,  262,  900,
-       254,  686,  221,  830, 1335,  755,  432,  623, 1382,  675,
-      1275,  587,   99,  821, 1530,  958,  195,  810, 1518,  739,
-       330,  361,  767,  313,  941,  400,  925,  384, 1142,  295,
-      1295,  242, 1103,  229, 1082,  206, 1066,  104, 1317,  137,
-      1249,  263, 1229,  115, 1154,   71,  135,   60, 1211,  158,
-      1472,  175, 1232,    1, 1345,   27, 1269,   38, 1111,   87,
-      1189,   49, 1256,  503, 1157,  574, 1410,  556, 1200,  787,
-       948,  486, 1316,  797, 1218, 1044, 1282, 1007, 1126,  996,
-       818, 1019,  218, 1072
+         1, 2510,    2,    7,    4,  582,    9,  308,  197,  674,
+       297,   20,    2,    3,  303,  351, 2510, 2510, 2510, 2510,
+      2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,  112,
+      2510, 2510, 2510, 2510, 2510, 2510, 2510,  120, 2510, 2510,
+      2510, 2510, 2510,    1, 2510, 2510, 2510, 2510, 2510, 2510,
+      2510, 2510, 2510,  278, 2510, 2510, 2510, 2510, 2510, 2510,
+      2510, 2510,   12,    1,    7,    8,  218,  878,  222, 1178,
+       480, 1102,   54, 1340,  151, 1615,    8,   15,  106, 1607,
+       225,  854,   87,  490,   44, 1351,    5, 1281,    3, 1470,
+        11, 1215,  377,   10,  441,  599,  152, 1642,  127, 1334,
+       702,  841,  594,  827,  123,  916,  146, 1118,  117, 1363,
+       254,  812,  249, 1096, 1630,  945,  437,  745, 1600,  718,
+      1593,  704,  152, 1005,  383, 1064, 1493,  975,  236,  676,
+       761,  579, 1017,  557, 1241,  628, 1195,  614, 1506,  464,
+      1576,  535, 1432,  513, 1159,  423, 1026,  276, 1460,  291,
+      1453,  392, 1263,  201, 1442,   85, 1412,   70, 1430,  100,
+      1632,  129, 1410,    1, 1386,   25, 1373,   35,  656,   55,
+      1188,   45, 1308,  160,  687,  227,  355,  175, 1201,  328,
+      1030,  367, 1483,  414, 1479, 1166, 1418,  783,  994,  937,
+      1083,  959, 1463,  967
     };
   return asso_values[bits_of(code, 2)+66] + asso_values[bits_of(code, 1)+4] + asso_values[bits_of(code, 0)];
 }
 
-#ifdef __GNUC__
-__inline
-#if defined __GNUC_STDC_INLINE__ || defined __GNUC_GNU_INLINE__
-__attribute__ ((__gnu_inline__))
-#endif
-#endif
 static const CodePointList3 *
 onigenc_unicode_CaseUnfold_11_lookup(const OnigCodePoint code)
 {
@@ -4923,1688 +5112,1871 @@ onigenc_unicode_CaseUnfold_11_lookup(const OnigCodePoint code)
     {
       MIN_CODE_VALUE = 0x61,
       MAX_CODE_VALUE = 0x1e943,
-      TOTAL_KEYWORDS = 1267,
+      TOTAL_KEYWORDS = 1353,
       MIN_WORD_LENGTH = 3,
       MAX_WORD_LENGTH = 3,
       MIN_HASH_VALUE = 3,
-      MAX_HASH_VALUE = 2218
+      MAX_HASH_VALUE = 2509
     };
 
   static const short wordlist[] =
     {
       -1, -1, -1,
-      /*0x13e1*/ 542,
-      /*0x0461*/ 339,
-      /*0x04e1*/ 399,
+      /*0x13e1*/ 589,
+      /*0x0461*/ 340,
+      /*0x04e1*/ 400,
       /*0x0061*/ 0,
       -1,
-      /*0x104e1*/ 1122,
-      /*0x1e61*/ 613,
-      /*0x1ee1*/ 672,
+      /*0x104e1*/ 1176,
+      /*0x1e61*/ 661,
+      /*0x1ee1*/ 720,
       /*0x0161*/ 102,
-      /*0x0261*/ 210,
-      /*0x2ce1*/ 904,
+      /*0x2ce1*/ 952,
       -1,
-      /*0x049b*/ 364,
+      /*0x049b*/ 365,
       -1, -1,
-      /*0x24e1*/ 792,
-      /*0x1e1b*/ 578,
-      /*0x048b*/ 356,
+      /*0x24e1*/ 840,
+      /*0x1e1b*/ 626,
+      /*0x048b*/ 357,
       /*0x011b*/ 69,
-      /*0x021b*/ 178,
-      /*0x2c9b*/ 869,
-      /*0x1e0b*/ 570,
-      /*0x1e8b*/ 634,
+      /*0x2c9b*/ 917,
+      /*0x03e1*/ 280,
+      /*0x1e0b*/ 618,
+      /*0x1e8b*/ 682,
       /*0x010b*/ 61,
-      /*0x020b*/ 170,
-      /*0x2c8b*/ 861,
-      /*0x13e3*/ 544,
-      /*0x0463*/ 340,
-      /*0x04e3*/ 400,
+      /*0x2c8b*/ 909,
+      /*0x13e3*/ 591,
+      /*0x0463*/ 341,
+      /*0x04e3*/ 401,
       /*0x0063*/ 2,
-      /*0x13a4*/ 481,
-      /*0x104e3*/ 1124,
-      /*0x1e63*/ 614,
-      /*0x1ee3*/ 673,
+      -1,
+      /*0x104e3*/ 1178,
+      /*0x1e63*/ 662,
+      /*0x1ee3*/ 721,
       /*0x0163*/ 103,
-      /*0x0263*/ 211,
-      /*0x2ce3*/ 905,
-      /*0x13e5*/ 546,
-      /*0x0465*/ 341,
-      /*0x04e5*/ 401,
+      /*0x2ce3*/ 953,
+      /*0x13e5*/ 593,
+      /*0x0465*/ 342,
+      /*0x04e5*/ 402,
       /*0x0065*/ 4,
-      /*0x24e3*/ 794,
-      /*0x104e5*/ 1126,
-      /*0x1e65*/ 615,
-      /*0x1ee5*/ 674,
+      /*0x24e3*/ 842,
+      /*0x104e5*/ 1180,
+      /*0x1e65*/ 663,
+      /*0x1ee5*/ 722,
       /*0x0165*/ 104,
-      /*0x0265*/ 212,
-      /*0xa761*/ 1016,
-      /*0x13e9*/ 550,
-      /*0x0469*/ 343,
-      /*0x04e9*/ 403,
-      /*0x0069*/ 1266,
-      /*0x24e5*/ 796,
-      /*0x104e9*/ 1130,
-      /*0x1e69*/ 617,
-      /*0x1ee9*/ 676,
+      /*0x03e3*/ 281,
+      /*0x13e9*/ 597,
+      /*0x0469*/ 344,
+      /*0x04e9*/ 404,
+      /*0x0069*/ 1352,
+      /*0x24e5*/ 844,
+      /*0x104e9*/ 1184,
+      /*0x1e69*/ 665,
+      /*0x1ee9*/ 724,
       /*0x0169*/ 106,
-      /*0x0269*/ 215,
-      -1,
-      /*0x13db*/ 536,
-      /*0x045b*/ 334,
-      /*0x04db*/ 396,
-      -1,
-      /*0x24e9*/ 800,
-      /*0x104db*/ 1116,
-      /*0x1e5b*/ 610,
-      /*0x1edb*/ 669,
+      /*0x03e5*/ 282,
+      /*0x13e7*/ 595,
+      /*0x0467*/ 343,
+      /*0x04e7*/ 403,
+      /*0x0067*/ 6,
+      /*0x24e9*/ 848,
+      /*0x104e7*/ 1182,
+      /*0x1e67*/ 664,
+      /*0x1ee7*/ 723,
+      /*0x0167*/ 105,
+      /*0x03e9*/ 284,
+      -1, -1, -1, -1,
+      /*0x24e7*/ 846,
+      /*0x13db*/ 583,
+      /*0x045b*/ 335,
+      /*0x04db*/ 397,
+      -1,
+      /*0x03e7*/ 283,
+      /*0x104db*/ 1170,
+      /*0x1e5b*/ 658,
+      /*0x1edb*/ 717,
       /*0x015b*/ 99,
-      /*0x025b*/ 207,
-      /*0x2cdb*/ 901,
-      /*0x13d9*/ 534,
-      /*0x0459*/ 332,
-      /*0x04d9*/ 395,
-      /*0xa763*/ 1017,
-      /*0x24db*/ 786,
-      /*0x104d9*/ 1114,
-      /*0x1e59*/ 609,
-      /*0x1ed9*/ 668,
+      /*0x2cdb*/ 949,
+      -1, -1, -1, -1,
+      /*0x24db*/ 834,
+      /*0x13d9*/ 581,
+      /*0x0459*/ 333,
+      /*0x04d9*/ 396,
+      /*0xa761*/ 1064,
+      /*0x03db*/ 277,
+      /*0x104d9*/ 1168,
+      /*0x1e59*/ 657,
+      /*0x1ed9*/ 716,
       /*0x0159*/ 98,
-      /*0x0259*/ 206,
-      /*0x2cd9*/ 900,
+      /*0x2cd9*/ 948,
+      -1, -1, -1, -1,
+      /*0x24d9*/ 832,
+      /*0x13dd*/ 585,
+      /*0x045d*/ 337,
+      /*0x04dd*/ 398,
+      -1,
+      /*0x03d9*/ 276,
+      /*0x104dd*/ 1172,
+      /*0x1e5d*/ 659,
+      /*0x1edd*/ 718,
+      /*0x015d*/ 100,
+      /*0x2cdd*/ 950,
+      -1, -1,
+      /*0xa763*/ 1065,
       -1,
-      /*0x10ce1*/ 1182,
+      /*0x24dd*/ 836,
+      /*0x10ce1*/ 1236,
       -1,
-      /*0xa765*/ 1018,
-      /*0x24d9*/ 784,
-      /*0x13e7*/ 548,
-      /*0x0467*/ 342,
-      /*0x04e7*/ 402,
-      /*0x0067*/ 6,
-      /*0x13a2*/ 479,
-      /*0x104e7*/ 1128,
-      /*0x1e67*/ 616,
-      /*0x1ee7*/ 675,
-      /*0x0167*/ 105,
-      /*0xa769*/ 1020,
+      /*0x13aa*/ 534,
+      -1,
+      /*0x03dd*/ 278,
+      /*0x10e1*/ 495,
+      /*0x1042a*/ 1129,
+      /*0xa765*/ 1066,
+      /*0x13a6*/ 530,
+      -1, -1, -1,
+      /*0x13a0*/ 524,
+      -1,
+      /*0x13df*/ 587,
+      /*0x045f*/ 339,
+      /*0x04df*/ 399,
+      /*0xa769*/ 1068,
+      -1,
+      /*0x104df*/ 1174,
+      /*0x1e5f*/ 660,
+      /*0x1edf*/ 719,
+      /*0x015f*/ 101,
+      /*0x2cdf*/ 951,
+      /*0x10ce3*/ 1238,
       -1, -1,
-      /*0x13b8*/ 501,
-      /*0x0438*/ 299,
+      /*0xa767*/ 1067,
+      /*0x24df*/ 838,
+      /*0x10e3*/ 497,
       -1,
-      /*0x24e7*/ 798,
-      /*0x10438*/ 1089,
-      /*0x13d1*/ 526,
-      /*0x0451*/ 324,
-      /*0x04d1*/ 391,
-      /*0xa75b*/ 1013,
+      /*0x13a8*/ 532,
       -1,
-      /*0x10ce3*/ 1184,
-      /*0x1e51*/ 605,
-      /*0x1ed1*/ 664,
-      /*0x0151*/ 94,
-      /*0x0251*/ 200,
-      /*0x2cd1*/ 896,
-      /*0x13d7*/ 532,
-      /*0x0457*/ 330,
-      /*0x04d7*/ 394,
-      /*0xa759*/ 1012,
-      /*0x24d1*/ 776,
-      /*0x10ce5*/ 1186,
-      /*0x1e57*/ 608,
-      /*0x1ed7*/ 667,
+      /*0x03df*/ 279,
+      /*0x10ce5*/ 1240,
+      /*0x10428*/ 1127,
+      -1,
+      /*0x13b8*/ 548,
+      /*0x0438*/ 300,
+      /*0x10e5*/ 499,
+      -1,
+      /*0x10438*/ 1143,
+      /*0xa75b*/ 1061,
+      -1,
+      /*0x10ce9*/ 1244,
+      /*0x13eb*/ 599,
+      /*0x046b*/ 345,
+      /*0x04eb*/ 405,
+      /*0x006b*/ 9,
+      /*0x10e9*/ 503,
+      /*0x104eb*/ 1186,
+      /*0x1e6b*/ 666,
+      /*0x1eeb*/ 725,
+      /*0x016b*/ 107,
+      /*0x10ce7*/ 1242,
+      -1,
+      /*0x03b8*/ 253,
+      /*0xa759*/ 1060,
+      -1,
+      /*0x10e7*/ 501,
+      /*0x13ef*/ 603,
+      /*0x046f*/ 347,
+      /*0x04ef*/ 407,
+      /*0x006f*/ 13,
+      /*0x03eb*/ 285,
+      /*0x104ef*/ 1190,
+      /*0x1e6f*/ 668,
+      /*0x1eef*/ 727,
+      /*0x016f*/ 109,
+      /*0x10cdb*/ 1230,
+      -1, -1,
+      /*0xa75d*/ 1062,
+      -1,
+      /*0x10db*/ 489,
+      -1, -1, -1, -1,
+      /*0x03ef*/ 287,
+      -1, -1,
+      /*0x0261*/ 210,
+      -1,
+      /*0x10cd9*/ 1228,
+      -1,
+      /*0x13d7*/ 579,
+      /*0x0457*/ 331,
+      /*0x04d7*/ 395,
+      /*0x10d9*/ 487,
+      -1,
+      /*0x021b*/ 178,
+      /*0x1e57*/ 656,
+      /*0x1ed7*/ 715,
       /*0x0157*/ 97,
-      /*0x0257*/ 205,
-      /*0x2cd7*/ 899,
-      -1, -1,
-      /*0x0586*/ 476,
-      -1,
-      /*0x24d7*/ 782,
-      /*0x10ce9*/ 1190,
-      -1, -1,
-      /*0xa767*/ 1019,
-      /*0x13da*/ 535,
-      /*0x045a*/ 333,
-      /*0x13d3*/ 528,
-      /*0x0453*/ 326,
-      /*0x04d3*/ 392,
-      /*0x104da*/ 1115,
-      /*0xa661*/ 965,
-      /*0x10cdb*/ 1176,
-      /*0x1e53*/ 606,
-      /*0x1ed3*/ 665,
-      /*0x0153*/ 95,
-      /*0x0253*/ 202,
-      /*0x2cd3*/ 897,
+      /*0x2cd7*/ 947,
+      /*0x020b*/ 170,
+      -1, -1,
+      /*0x10cdd*/ 1232,
+      /*0x24d7*/ 830,
+      /*0xa75f*/ 1063,
+      -1,
+      /*0x1f61*/ 777,
+      /*0x10dd*/ 491,
+      /*0x03d7*/ 275,
+      /*0x0263*/ 211,
+      /*0x1f14*/ 748,
+      -1, -1,
+      /*0x1d8e*/ 612,
+      /*0xa661*/ 1013,
+      /*0x13ed*/ 601,
+      /*0x046d*/ 346,
+      /*0x04ed*/ 406,
+      /*0x006d*/ 11,
+      /*0x0265*/ 212,
+      /*0x104ed*/ 1188,
+      /*0x1e6d*/ 667,
+      /*0x1eed*/ 726,
+      /*0x016d*/ 108,
+      /*0x13be*/ 554,
+      /*0x043e*/ 306,
       -1, -1,
-      /*0x24da*/ 785,
-      /*0xa751*/ 1008,
-      /*0x24d3*/ 778,
-      /*0x10cd9*/ 1174,
+      /*0x1043e*/ 1149,
+      /*0x0269*/ 215,
+      /*0x1f63*/ 779,
+      /*0x10cdf*/ 1234,
+      /*0x013e*/ 85,
+      -1,
+      /*0x03ed*/ 286,
+      /*0xa76b*/ 1069,
+      /*0x10df*/ 493,
+      /*0x13ae*/ 538,
+      /*0xa663*/ 1014,
+      -1,
+      /*0x1f65*/ 781,
+      /*0x1042e*/ 1133,
+      /*0x13ac*/ 536,
+      /*0x03be*/ 259,
+      -1, -1,
+      /*0x1042c*/ 1131,
+      -1,
+      /*0xa665*/ 1015,
+      /*0x1f12*/ 746,
+      /*0xa76f*/ 1071,
       -1, -1, -1,
-      /*0x13a6*/ 483,
-      /*0x13dd*/ 538,
-      /*0x045d*/ 336,
-      /*0x04dd*/ 397,
-      /*0x03e1*/ 279,
-      /*0xa757*/ 1011,
-      /*0x104dd*/ 1118,
-      /*0x1e5d*/ 611,
-      /*0x1edd*/ 670,
-      /*0x015d*/ 100,
-      /*0xa663*/ 966,
-      /*0x2cdd*/ 902,
-      /*0x10ce7*/ 1188,
+      /*0x025b*/ 207,
+      -1,
+      /*0x03ae*/ 244,
+      -1,
+      /*0xa669*/ 1017,
+      /*0x1f06*/ 742,
+      /*0x1f67*/ 783,
+      /*0x03ac*/ 242,
+      /*0x10ceb*/ 1246,
+      -1,
+      /*0x13d1*/ 573,
+      /*0x0451*/ 325,
+      /*0x04d1*/ 392,
+      /*0x10eb*/ 505,
+      /*0xa667*/ 1016,
+      /*0x0259*/ 206,
+      /*0x1e51*/ 653,
+      /*0x1ed1*/ 712,
+      /*0x0151*/ 94,
+      /*0x2cd1*/ 944,
+      -1, -1,
+      /*0xa757*/ 1059,
+      /*0x10cef*/ 1250,
+      /*0x24d1*/ 824,
+      /*0x13d3*/ 575,
+      /*0x0453*/ 327,
+      /*0x04d3*/ 393,
+      /*0x10ef*/ 509,
+      /*0xa65b*/ 1010,
+      -1,
+      /*0x1e53*/ 654,
+      /*0x1ed3*/ 713,
+      /*0x0153*/ 95,
+      /*0x2cd3*/ 945,
+      -1,
+      /*0xab53*/ 1100,
+      /*0x0561*/ 440,
+      /*0x1f10*/ 744,
+      /*0x24d3*/ 826,
       -1, -1,
-      /*0x0582*/ 472,
-      /*0x24dd*/ 788,
+      /*0x01e1*/ 151,
       -1,
-      /*0x13df*/ 540,
-      /*0x045f*/ 338,
-      /*0x04df*/ 398,
-      /*0xa665*/ 967,
+      /*0xa659*/ 1009,
       -1,
-      /*0x104df*/ 1120,
-      /*0x1e5f*/ 612,
-      /*0x1edf*/ 671,
-      /*0x015f*/ 101,
-      /*0xa753*/ 1009,
-      /*0x2cdf*/ 903,
-      /*0x10cd1*/ 1166,
-      /*0x03e3*/ 280,
-      /*0xab53*/ 1046,
-      /*0xa669*/ 969,
-      /*0x24df*/ 790,
-      -1, -1,
-      /*0x028a*/ 229,
-      /*0x028b*/ 230,
-      /*0x13bc*/ 505,
-      /*0x043c*/ 303,
-      /*0x10cd7*/ 1172,
-      /*0x03e5*/ 281,
-      /*0x1043c*/ 1093,
-      /*0xa65b*/ 962,
+      /*0x051b*/ 429,
+      -1,
+      /*0xa76d*/ 1070,
+      /*0x10cd7*/ 1226,
+      -1,
+      /*0x050b*/ 421,
       -1, -1,
-      /*0x013c*/ 84,
-      /*0x023c*/ 190,
-      /*0xa75d*/ 1014,
-      /*0x13cf*/ 524,
-      /*0x044f*/ 322,
-      /*0x04cf*/ 390,
-      /*0x03e9*/ 283,
-      /*0x1044f*/ 1112,
-      /*0xa659*/ 961,
-      /*0x1e4f*/ 604,
-      /*0x1ecf*/ 663,
+      /*0x10d7*/ 485,
+      -1, -1, -1, -1,
+      /*0xa65d*/ 1011,
+      -1,
+      /*0x0563*/ 442,
+      /*0x13f1*/ 605,
+      /*0x0471*/ 348,
+      /*0x04f1*/ 408,
+      /*0x0071*/ 15,
+      /*0x01e3*/ 152,
+      /*0x104f1*/ 1192,
+      /*0x1e71*/ 669,
+      /*0x1ef1*/ 728,
+      /*0x0171*/ 110,
+      /*0x0565*/ 444,
+      -1, -1,
+      /*0x1f26*/ 756,
+      /*0x10ced*/ 1248,
+      /*0x01e5*/ 153,
+      -1,
+      /*0x1f20*/ 750,
+      -1,
+      /*0x10ed*/ 507,
+      /*0x0569*/ 448,
+      -1, -1,
+      /*0x118db*/ 1281,
+      /*0x0192*/ 122,
+      /*0x01e9*/ 155,
+      -1,
+      /*0xa65f*/ 1012,
+      /*0x13ee*/ 602,
+      /*0x026b*/ 217,
+      /*0x0567*/ 446,
+      /*0x006e*/ 12,
+      -1,
+      /*0x104ee*/ 1189,
+      -1,
+      /*0x01e7*/ 154,
+      /*0xa751*/ 1056,
+      /*0x2cee*/ 955,
+      /*0x118d9*/ 1279,
+      -1,
+      /*0x13f3*/ 607,
+      /*0x0473*/ 349,
+      /*0x04f3*/ 409,
+      /*0x0073*/ 17,
+      /*0x026f*/ 219,
+      /*0x104f3*/ 1194,
+      /*0x1e73*/ 670,
+      /*0x1ef3*/ 729,
+      /*0x0173*/ 111,
+      /*0x2cf3*/ 956,
+      /*0x2c61*/ 896,
+      /*0xa753*/ 1057,
+      -1,
+      /*0x118dd*/ 1283,
+      -1, -1,
+      /*0x13ba*/ 550,
+      /*0x043a*/ 302,
+      /*0xa66b*/ 1018,
+      /*0x03f3*/ 289,
+      /*0x1043a*/ 1145,
+      -1, -1,
+      /*0x10cd1*/ 1220,
+      /*0x013a*/ 83,
+      /*0x13d5*/ 577,
+      /*0x0455*/ 329,
+      /*0x04d5*/ 394,
+      /*0x10d1*/ 479,
+      -1,
+      /*0x0257*/ 205,
+      /*0x1e55*/ 655,
+      /*0x1ed5*/ 714,
+      /*0x0155*/ 96,
+      /*0x2cd5*/ 946,
+      /*0x03ba*/ 255,
+      -1,
+      /*0x0586*/ 477,
+      /*0x10cd3*/ 1222,
+      /*0x24d5*/ 828,
+      /*0x01dd*/ 149,
+      -1,
+      /*0x118df*/ 1285,
+      /*0x10d3*/ 481,
+      /*0x2c65*/ 897,
+      -1,
+      /*0x018c*/ 121,
+      /*0x13f5*/ 609,
+      /*0x0475*/ 350,
+      /*0x04f5*/ 410,
+      /*0x0075*/ 19,
+      /*0x1f57*/ 775,
+      /*0x104f5*/ 1196,
+      /*0x1e75*/ 671,
+      /*0x1ef5*/ 730,
+      /*0x0175*/ 112,
+      /*0x13cf*/ 571,
+      /*0x044f*/ 323,
+      /*0x04cf*/ 391,
+      /*0xa657*/ 1008,
+      /*0x1044f*/ 1166,
+      /*0x1e92a*/ 1326,
+      /*0x1e4f*/ 652,
+      /*0x1ecf*/ 711,
       /*0x014f*/ 93,
-      /*0x024f*/ 198,
-      /*0x2ccf*/ 895,
-      /*0x10cda*/ 1175,
-      -1,
-      /*0x10cd3*/ 1168,
-      /*0x03db*/ 276,
-      /*0x13ae*/ 491,
-      /*0xa75f*/ 1015,
-      /*0x2c61*/ 848,
-      /*0x13a8*/ 485,
-      /*0x1042e*/ 1079,
-      /*0x017e*/ 116,
-      /*0xa667*/ 968,
-      /*0x10428*/ 1073,
-      /*0x13cd*/ 522,
-      /*0x044d*/ 320,
-      /*0x03d9*/ 275,
+      /*0x2ccf*/ 943,
+      -1,
+      /*0x1e926*/ 1322,
+      /*0x1f00*/ 736,
+      /*0x01df*/ 150,
+      /*0x13b2*/ 542,
+      /*0x0432*/ 294,
+      /*0x1f02*/ 738,
+      -1,
+      /*0x10432*/ 1137,
+      /*0x10cf1*/ 1252,
+      /*0x2d16*/ 979,
+      -1,
+      /*0x2d14*/ 977,
+      /*0x2c5b*/ 892,
+      /*0x10f1*/ 511,
+      /*0x2d0a*/ 967,
+      -1,
+      /*0x2d1b*/ 984,
+      /*0x2d18*/ 981,
+      /*0xa66d*/ 1019,
+      /*0x01a8*/ 130,
+      -1,
+      /*0x2d0b*/ 968,
+      /*0x03b2*/ 247,
+      /*0x1e928*/ 1324,
+      /*0x0188*/ 120,
+      /*0x019e*/ 126,
+      -1,
+      /*0x2c59*/ 890,
+      /*0x056b*/ 450,
+      /*0x1e938*/ 1340,
+      /*0x13c9*/ 565,
+      /*0x0449*/ 317,
+      -1,
+      /*0x01eb*/ 156,
+      /*0x10449*/ 1160,
+      /*0x10cee*/ 1249,
+      /*0x1e49*/ 649,
+      /*0x1ec9*/ 708,
+      /*0x0251*/ 200,
+      /*0x2cc9*/ 940,
+      /*0x10ee*/ 508,
+      -1,
+      /*0x2c5d*/ 894,
+      /*0x056f*/ 454,
+      -1,
+      /*0xa755*/ 1058,
+      -1,
+      /*0x118d7*/ 1277,
+      /*0x01ef*/ 158,
+      /*0x03c9*/ 269,
+      /*0x2d12*/ 975,
+      -1,
+      /*0x10f3*/ 513,
+      /*0x0253*/ 202,
+      -1, -1, -1, -1,
+      /*0x0491*/ 360,
+      /*0x1f51*/ 772,
+      /*0x2d06*/ 963,
+      /*0xa794*/ 1082,
+      /*0x1e11*/ 621,
+      /*0x1e91*/ 685,
+      /*0x0111*/ 64,
+      /*0x2c91*/ 912,
+      /*0xa79b*/ 1085,
+      /*0xa651*/ 1005,
+      -1, -1, -1, -1,
+      /*0x10cd5*/ 1224,
+      -1,
+      /*0x1f53*/ 773,
+      -1,
+      /*0xa74f*/ 1055,
+      /*0x10d5*/ 483,
       -1,
-      /*0x1044d*/ 1110,
+      /*0x13cd*/ 569,
+      /*0x044d*/ 321,
       -1,
-      /*0x1e4d*/ 603,
-      /*0x1ecd*/ 662,
+      /*0xa653*/ 1006,
+      /*0x1044d*/ 1164,
+      -1,
+      /*0x1e4d*/ 651,
+      /*0x1ecd*/ 710,
       /*0x014d*/ 92,
-      /*0x024d*/ 197,
-      /*0x2ccd*/ 894,
-      /*0x10cdd*/ 1178,
+      /*0x2ccd*/ 942,
       -1,
-      /*0x13cb*/ 520,
-      /*0x044b*/ 318,
-      /*0xa651*/ 957,
+      /*0x0271*/ 220,
+      /*0x0180*/ 117,
       -1,
-      /*0x1044b*/ 1108,
-      /*0x03e7*/ 282,
-      /*0x1e4b*/ 602,
-      /*0x1ecb*/ 661,
-      /*0x014b*/ 91,
-      /*0x024b*/ 196,
-      /*0x2ccb*/ 893,
-      /*0xa74f*/ 1007,
-      /*0x13ac*/ 489,
-      /*0xa657*/ 960,
-      -1,
-      /*0x10cdf*/ 1180,
-      /*0x1042c*/ 1077,
-      /*0x03b8*/ 252,
-      /*0x2c65*/ 849,
-      -1,
-      /*0x13aa*/ 487,
-      /*0x13d5*/ 530,
-      /*0x0455*/ 328,
-      /*0x04d5*/ 393,
-      /*0x1042a*/ 1075,
-      -1, -1,
-      /*0x1e55*/ 607,
-      /*0x1ed5*/ 666,
-      /*0x0155*/ 96,
-      /*0x118db*/ 1227,
-      /*0x2cd5*/ 898,
+      /*0x2d10*/ 973,
+      /*0x2c38*/ 857,
+      /*0x056d*/ 452,
+      -1, -1,
+      /*0x03cd*/ 273,
+      /*0x10f5*/ 515,
+      /*0x01ed*/ 157,
+      /*0x13cb*/ 567,
+      /*0x044b*/ 319,
+      /*0x10ccf*/ 1218,
+      -1,
+      /*0x1044b*/ 1162,
       -1,
-      /*0x03d7*/ 274,
-      /*0xa74d*/ 1006,
-      /*0xa653*/ 958,
-      /*0x24d5*/ 780,
+      /*0x1e4b*/ 650,
+      /*0x1ecb*/ 709,
+      /*0x014b*/ 91,
+      /*0x2ccb*/ 941,
+      /*0x1f71*/ 785,
+      /*0x2d0c*/ 969,
+      /*0x1e93e*/ 1346,
       -1, -1, -1,
-      /*0x2c5b*/ 844,
-      /*0x118d9*/ 1225,
-      -1, -1, -1, -1,
-      /*0x10ccf*/ 1164,
-      /*0xa74b*/ 1005,
+      /*0xa749*/ 1052,
+      -1, -1,
+      /*0x03cb*/ 271,
+      -1,
+      /*0x118d1*/ 1271,
+      /*0x13c3*/ 559,
+      /*0x0443*/ 311,
+      -1,
+      /*0x1e92e*/ 1330,
+      /*0x10443*/ 1154,
+      -1,
+      /*0x1e43*/ 646,
+      /*0x1ec3*/ 705,
+      /*0x1e92c*/ 1328,
+      /*0x2cc3*/ 937,
+      /*0x2d20*/ 989,
+      /*0x0580*/ 471,
+      -1, -1,
+      /*0x118d3*/ 1273,
+      /*0x0582*/ 473,
       -1, -1, -1,
-      /*0x2c59*/ 842,
+      /*0x03c3*/ 263,
+      /*0x2c57*/ 888,
+      /*0x10cc9*/ 1212,
+      /*0x13c1*/ 557,
+      /*0x0441*/ 309,
+      -1,
+      /*0x00e1*/ 26,
+      /*0x10441*/ 1152,
+      /*0x1f73*/ 787,
+      /*0x1e41*/ 645,
+      /*0x1ec1*/ 704,
+      -1,
+      /*0x2cc1*/ 936,
+      -1, -1,
+      /*0x2d08*/ 965,
+      /*0x2d1e*/ 987,
+      -1,
+      /*0x13a4*/ 528,
+      -1,
+      /*0xa78c*/ 1079,
+      -1,
+      /*0x03c1*/ 262,
       -1,
-      /*0x13c9*/ 518,
-      /*0x0449*/ 316,
+      /*0xa74d*/ 1054,
+      /*0x049d*/ 366,
+      -1, -1, -1,
+      /*0x1e1d*/ 627,
+      /*0x00e3*/ 28,
+      /*0x011d*/ 70,
+      /*0x2c9d*/ 918,
+      /*0x1f55*/ 774,
+      /*0x0275*/ 222,
       -1,
-      /*0xa65d*/ 963,
-      /*0x10449*/ 1106,
-      /*0x029e*/ 234,
-      /*0x1e49*/ 601,
-      /*0x1ec9*/ 660,
+      /*0x2c3e*/ 863,
       -1,
-      /*0x0249*/ 195,
-      /*0x2cc9*/ 892,
-      /*0x1f61*/ 729,
-      -1, -1,
-      /*0x0580*/ 470,
-      /*0xa755*/ 1010,
-      /*0x10ccd*/ 1162,
-      -1,
-      /*0x13c3*/ 512,
-      /*0x0443*/ 310,
-      /*0xa65f*/ 964,
-      /*0x118d1*/ 1217,
-      /*0x10443*/ 1100,
-      /*0x03dd*/ 277,
-      /*0x1e43*/ 598,
-      /*0x1ec3*/ 657,
-      /*0x2c38*/ 809,
-      -1,
-      /*0x2cc3*/ 889,
-      /*0x10ccb*/ 1160,
-      -1,
-      /*0x2c51*/ 834,
-      /*0x118d7*/ 1223,
-      -1, -1,
-      /*0x13c0*/ 509,
-      /*0x0440*/ 307,
-      /*0x1f63*/ 731,
-      -1,
-      /*0x10440*/ 1097,
-      /*0x03df*/ 278,
-      /*0x1f24*/ 706,
-      /*0x2c57*/ 840,
-      /*0x0140*/ 86,
-      /*0x0240*/ 192,
-      -1, -1,
-      /*0xa749*/ 1004,
-      /*0x1f65*/ 733,
-      /*0x13a0*/ 477,
-      /*0x10cd5*/ 1170,
-      /*0xa64f*/ 956,
-      /*0x118da*/ 1226,
+      /*0x13c7*/ 563,
+      /*0x0447*/ 315,
+      /*0x00e5*/ 30,
+      /*0xa655*/ 1007,
+      /*0x10447*/ 1158,
+      /*0x024f*/ 198,
+      /*0x1e47*/ 648,
+      /*0x1ec7*/ 707,
+      /*0xa74b*/ 1053,
+      /*0x2cc7*/ 939,
+      /*0x0371*/ 236,
       -1,
-      /*0x118d3*/ 1219,
+      /*0x00e9*/ 34,
+      /*0x10ccd*/ 1216,
+      /*0x13c5*/ 561,
+      /*0x0445*/ 313,
+      /*0x0571*/ 456,
+      /*0x1f75*/ 789,
+      /*0x10445*/ 1156,
+      /*0x03c7*/ 267,
+      /*0x1e45*/ 647,
+      /*0x1ec5*/ 706,
+      /*0x00e7*/ 32,
+      /*0x2cc5*/ 938,
+      -1, -1, -1, -1, -1, -1,
+      /*0xa743*/ 1049,
       -1, -1,
-      /*0x1f10*/ 696,
+      /*0x03c5*/ 265,
+      /*0xa64f*/ 1004,
+      /*0x10ccb*/ 1214,
       -1, -1,
-      /*0x03bc*/ 256,
+      /*0x2c51*/ 882,
       -1,
-      /*0x2c5a*/ 843,
+      /*0x1f32*/ 760,
       -1,
-      /*0x2c53*/ 836,
-      /*0xa743*/ 1001,
-      /*0x13c1*/ 510,
-      /*0x0441*/ 308,
-      -1, -1,
-      /*0x10441*/ 1098,
+      /*0x13e6*/ 594,
+      /*0x056e*/ 453,
+      /*0x2d00*/ 957,
+      /*0x0066*/ 5,
+      /*0x0249*/ 195,
+      /*0x104e6*/ 1181,
+      /*0x2d02*/ 959,
+      /*0x0373*/ 237,
       -1,
-      /*0x1e41*/ 597,
-      /*0x1ec1*/ 656,
-      /*0xa64d*/ 955,
-      /*0x118dd*/ 1229,
-      /*0x2cc1*/ 888,
-      -1, -1, -1,
-      /*0x1f14*/ 700,
+      /*0x2d0e*/ 971,
+      /*0xa741*/ 1048,
+      /*0x2c53*/ 884,
       -1,
-      /*0x10cc9*/ 1158,
+      /*0x0573*/ 458,
+      /*0x24e6*/ 845,
+      /*0x10cc3*/ 1206,
+      /*0x118d5*/ 1275,
       -1,
-      /*0x01e1*/ 151,
-      /*0x2c5d*/ 846,
-      /*0x03ae*/ 243,
-      /*0xa64b*/ 954,
-      -1,
-      /*0x13c7*/ 516,
-      /*0x0447*/ 314,
-      -1,
-      /*0x118df*/ 1231,
-      /*0x10447*/ 1104,
-      /*0x03cd*/ 272,
-      /*0x1e47*/ 600,
-      /*0x1ec7*/ 659,
-      /*0x1f67*/ 735,
-      /*0x0247*/ 194,
-      /*0x2cc7*/ 891,
-      /*0x10cc3*/ 1152,
-      /*0x1f22*/ 704,
-      -1, -1,
-      /*0x0292*/ 232,
-      /*0x13c5*/ 514,
-      /*0x0445*/ 312,
-      /*0x03cb*/ 270,
-      /*0xa655*/ 959,
-      /*0x10445*/ 1102,
-      /*0x01e3*/ 152,
-      /*0x1e45*/ 599,
-      /*0x1ec5*/ 658,
-      /*0xa741*/ 1000,
-      /*0x1f51*/ 724,
-      /*0x2cc5*/ 890,
-      /*0x0561*/ 439,
-      /*0x10cc0*/ 1149,
-      /*0xff59*/ 1071,
-      /*0x03ac*/ 241,
+      /*0x01f3*/ 159,
       -1,
-      /*0x01e5*/ 153,
-      /*0x2c3c*/ 813,
-      /*0x118cf*/ 1215,
+      /*0x13bf*/ 555,
+      /*0x043f*/ 307,
+      /*0x04bf*/ 383,
       -1,
-      /*0x1f57*/ 727,
-      /*0x051b*/ 428,
-      -1, -1, -1, -1,
-      /*0x050b*/ 420,
-      /*0x01e9*/ 155,
-      /*0x2c4f*/ 832,
-      -1,
-      /*0x1f06*/ 694,
-      /*0xa747*/ 1003,
-      /*0x13b2*/ 495,
-      /*0x0432*/ 293,
-      /*0x0584*/ 474,
-      /*0xa649*/ 953,
-      /*0x10432*/ 1083,
-      /*0x0563*/ 441,
-      /*0x2d16*/ 931,
-      -1,
-      /*0x2d1b*/ 936,
-      /*0x118cd*/ 1213,
-      /*0x1f53*/ 725,
-      /*0x10cc1*/ 1150,
-      /*0x2d0a*/ 919,
-      /*0x2d0b*/ 920,
-      /*0xff51*/ 1063,
-      /*0xa745*/ 1002,
-      /*0x0565*/ 443,
-      -1, -1,
-      /*0x2c4d*/ 830,
-      -1,
-      /*0xa643*/ 950,
-      /*0x118cb*/ 1211,
-      /*0x03c9*/ 268,
-      -1,
-      /*0xff57*/ 1069,
-      -1,
-      /*0x0569*/ 447,
-      /*0x2d24*/ 945,
-      -1,
-      /*0x1f26*/ 708,
-      /*0x0491*/ 359,
-      /*0x2c4b*/ 828,
-      /*0x01e7*/ 154,
-      /*0x10cc7*/ 1156,
-      /*0x1e11*/ 573,
-      /*0x1e91*/ 637,
-      /*0x0111*/ 64,
+      /*0x1043f*/ 1150,
+      /*0x028a*/ 230,
+      /*0x1e3f*/ 644,
+      /*0x1ebf*/ 703,
+      /*0x019a*/ 125,
+      /*0x2cbf*/ 935,
       /*0x0211*/ 173,
-      /*0x2c91*/ 864,
-      /*0xa79b*/ 1036,
-      /*0x03c3*/ 262,
-      /*0x1f02*/ 690,
-      /*0x118d5*/ 1221,
-      /*0x2d10*/ 925,
-      /*0xff5a*/ 1072,
-      /*0x1e924*/ 1234,
-      /*0xff53*/ 1065,
-      /*0x2d18*/ 933,
-      -1,
-      /*0x10cc5*/ 1154,
-      -1,
-      /*0x0280*/ 224,
-      /*0x2c55*/ 838,
-      /*0x13f3*/ 560,
-      /*0x0473*/ 348,
-      /*0x04f3*/ 408,
-      /*0x0073*/ 17,
-      /*0x03c0*/ 260,
-      /*0x104f3*/ 1140,
-      /*0x1e73*/ 622,
-      /*0x1ef3*/ 681,
-      /*0x0173*/ 111,
+      /*0x13ec*/ 600,
+      /*0x028b*/ 231,
+      /*0xa649*/ 1001,
+      /*0x006c*/ 10,
       -1,
-      /*0x2cf3*/ 908,
-      /*0x0567*/ 445,
+      /*0x104ec*/ 1187,
+      /*0x10cc1*/ 1204,
+      /*0x1e93a*/ 1342,
+      /*0x03bf*/ 260,
+      /*0x2cec*/ 954,
+      /*0x1f04*/ 740,
+      -1, -1, -1,
+      /*0xa747*/ 1051,
+      /*0x13a2*/ 526,
+      /*0x118cf*/ 1269,
+      /*0x13b7*/ 547,
+      /*0x0437*/ 299,
+      /*0x04b7*/ 379,
+      /*0x1f11*/ 745,
+      /*0x10437*/ 1142,
+      /*0x024d*/ 197,
+      /*0x1e37*/ 640,
+      /*0x1eb7*/ 699,
+      /*0x0137*/ 82,
+      /*0x2cb7*/ 931,
+      -1,
+      /*0xa745*/ 1050,
+      /*0x0575*/ 460,
+      /*0x0292*/ 233,
+      /*0x13b5*/ 545,
+      /*0x0435*/ 297,
+      /*0x04b5*/ 378,
+      /*0x01f5*/ 160,
+      /*0x10435*/ 1140,
+      /*0x03b7*/ 252,
+      /*0x1e35*/ 639,
+      /*0x1eb5*/ 698,
+      /*0x0135*/ 81,
+      /*0x2cb5*/ 930,
+      /*0x10cc7*/ 1210,
+      -1, -1,
+      /*0x024b*/ 196,
       -1,
-      /*0x2d14*/ 929,
-      /*0x019e*/ 126,
-      /*0xa641*/ 949,
-      /*0x028c*/ 231,
-      /*0x13eb*/ 552,
-      /*0x046b*/ 344,
-      /*0x04eb*/ 404,
-      /*0x006b*/ 9,
-      /*0x118c9*/ 1209,
-      /*0x104eb*/ 1132,
-      /*0x1e6b*/ 618,
-      /*0x1eeb*/ 677,
-      /*0x016b*/ 107,
-      /*0x026b*/ 217,
-      /*0x01da*/ 147,
+      /*0x16e61*/ 1287,
       -1, -1, -1,
-      /*0x2c49*/ 826,
+      /*0x03b5*/ 250,
+      /*0xa64d*/ 1003,
       -1, -1,
-      /*0x2d22*/ 943,
-      /*0x03c1*/ 261,
+      /*0x00eb*/ 36,
+      /*0x10cc5*/ 1208,
+      /*0x2c73*/ 902,
+      /*0x118c9*/ 1263,
+      /*0x13b3*/ 543,
+      /*0x0433*/ 295,
+      /*0x04b3*/ 377,
+      /*0x1e932*/ 1334,
+      /*0x10433*/ 1138,
+      -1,
+      /*0x1e33*/ 638,
+      /*0x1eb3*/ 697,
+      /*0x0133*/ 80,
+      /*0x2cb3*/ 929,
       -1,
-      /*0x048f*/ 358,
-      /*0xa647*/ 952,
-      /*0x118c3*/ 1203,
-      /*0x1f12*/ 698,
-      /*0x1e0f*/ 572,
-      /*0x1e8f*/ 636,
-      /*0x010f*/ 63,
-      /*0x020f*/ 172,
-      /*0x2c8f*/ 863,
-      /*0xa69b*/ 985,
+      /*0x00ef*/ 40,
+      /*0x16e63*/ 1289,
+      -1,
+      /*0x2c3a*/ 859,
+      /*0xa64b*/ 1002,
+      /*0x13c0*/ 556,
+      /*0x0440*/ 308,
+      /*0xa73f*/ 1047,
+      /*0x03b3*/ 248,
+      /*0x10440*/ 1151,
+      -1,
+      /*0x16e65*/ 1291,
+      /*0x2c55*/ 886,
+      /*0x0140*/ 86,
+      /*0x10ce6*/ 1241,
+      /*0x01c9*/ 139,
       -1, -1,
-      /*0x2c43*/ 820,
-      /*0x01dd*/ 149,
-      /*0xa68b*/ 977,
-      /*0x1e922*/ 1232,
+      /*0x1f43*/ 769,
+      /*0x10e6*/ 500,
       -1,
-      /*0xa645*/ 951,
+      /*0x16e69*/ 1295,
       -1,
-      /*0x118c0*/ 1200,
+      /*0x028c*/ 232,
+      /*0x03c0*/ 261,
       -1,
-      /*0x03c7*/ 266,
+      /*0xa643*/ 998,
       -1,
-      /*0x1e938*/ 1254,
+      /*0x0479*/ 352,
+      /*0x04f9*/ 412,
+      /*0x0079*/ 23,
+      /*0x16e67*/ 1293,
+      /*0x104f9*/ 1200,
+      /*0x1e79*/ 673,
+      /*0x1ef9*/ 732,
+      /*0xa737*/ 1043,
+      /*0x0511*/ 424,
+      /*0x118cd*/ 1267,
+      /*0x1d79*/ 610,
+      /*0x021d*/ 179,
+      /*0x1f41*/ 767,
+      -1, -1,
+      /*0x2c4f*/ 880,
       -1,
-      /*0xff4f*/ 1061,
+      /*0x10cec*/ 1247,
+      -1, -1,
+      /*0xa641*/ 997,
+      /*0xa735*/ 1042,
+      /*0x10ec*/ 506,
+      /*0x2171*/ 807,
+      /*0x00ed*/ 38,
       -1,
-      /*0xa76b*/ 1021,
-      /*0x2d1e*/ 939,
-      /*0x2c40*/ 817,
-      /*0x01df*/ 150,
-      /*0x2d06*/ 915,
-      /*0x0373*/ 236,
-      /*0x13ef*/ 556,
-      /*0x046f*/ 346,
-      /*0x04ef*/ 406,
-      /*0x006f*/ 13,
-      /*0x03c5*/ 264,
-      /*0x104ef*/ 1136,
-      /*0x1e6f*/ 620,
-      /*0x1eef*/ 679,
-      /*0x016f*/ 109,
-      /*0x026f*/ 219,
+      /*0x0247*/ 194,
+      /*0x1f24*/ 754,
+      /*0x13ad*/ 537,
+      /*0x2c32*/ 851,
+      /*0x04ad*/ 374,
+      /*0x118cb*/ 1265,
+      /*0x1042d*/ 1132,
+      /*0x2d1a*/ 983,
+      /*0x1e2d*/ 635,
+      /*0x1ead*/ 694,
+      /*0x012d*/ 78,
+      /*0x2cad*/ 926,
       -1, -1,
-      /*0x1f55*/ 726,
-      /*0x2d0e*/ 923,
+      /*0x0288*/ 228,
+      /*0x029e*/ 235,
       -1,
-      /*0xff4d*/ 1059,
+      /*0x13a5*/ 529,
       -1,
-      /*0x118c1*/ 1201,
-      /*0x13ed*/ 554,
-      /*0x046d*/ 345,
-      /*0x04ed*/ 405,
-      /*0x006d*/ 11,
+      /*0x04a5*/ 370,
+      /*0x0584*/ 475,
+      /*0x03ad*/ 243,
+      /*0xa733*/ 1041,
+      /*0x1e25*/ 631,
+      /*0x1ea5*/ 690,
+      /*0x0125*/ 74,
+      /*0x2ca5*/ 922,
+      /*0x118c3*/ 1257,
       -1,
-      /*0x104ed*/ 1134,
-      /*0x1e6d*/ 619,
-      /*0x1eed*/ 678,
-      /*0x016d*/ 108,
-      /*0x2c41*/ 818,
-      /*0xff4b*/ 1057,
-      /*0x10ceb*/ 1192,
-      -1,
-      /*0x13b7*/ 500,
-      /*0x0437*/ 298,
-      /*0x04b7*/ 378,
-      -1,
-      /*0x10437*/ 1088,
-      /*0x03b2*/ 246,
-      /*0x1e37*/ 592,
-      /*0x1eb7*/ 651,
-      /*0x0137*/ 82,
-      /*0x118c7*/ 1207,
-      /*0x2cb7*/ 883,
-      /*0x2d02*/ 911,
-      /*0x0192*/ 122,
+      /*0xa647*/ 1000,
+      /*0x2c49*/ 874,
+      /*0x13a3*/ 527,
       -1,
-      /*0x019a*/ 125,
-      /*0x01a8*/ 130,
-      /*0xa76f*/ 1023,
-      /*0x1e926*/ 1236,
-      /*0xff55*/ 1067,
-      /*0x2c47*/ 824,
-      /*0x1fe1*/ 755,
-      -1,
-      /*0x0481*/ 355,
-      /*0x0581*/ 471,
-      /*0x1f00*/ 688,
-      /*0x118c5*/ 1205,
-      /*0x1e01*/ 565,
-      /*0x1e81*/ 629,
-      /*0x0101*/ 56,
-      /*0x0201*/ 165,
-      /*0x2c81*/ 856,
-      /*0x1f43*/ 721,
-      -1, -1,
-      /*0xa76d*/ 1022,
-      /*0x2c45*/ 822,
-      /*0x13b3*/ 496,
-      /*0x0433*/ 294,
-      /*0x04b3*/ 376,
-      -1,
-      /*0x10433*/ 1084,
-      /*0x057e*/ 468,
-      /*0x1e33*/ 590,
-      /*0x1eb3*/ 649,
-      /*0x0133*/ 80,
-      /*0x0233*/ 189,
-      /*0x2cb3*/ 881,
-      /*0xa737*/ 995,
-      /*0x1f40*/ 718,
+      /*0x04a3*/ 369,
       -1,
-      /*0xff49*/ 1055,
-      /*0x10cef*/ 1196,
+      /*0x1f45*/ 771,
+      /*0x2173*/ 809,
+      /*0x1e23*/ 630,
+      /*0x1ea3*/ 689,
+      /*0x0123*/ 73,
+      /*0x2ca3*/ 921,
+      /*0xff59*/ 1125,
+      /*0x0266*/ 213,
+      /*0xa645*/ 999,
+      -1, -1,
+      /*0x048f*/ 359,
+      -1, -1,
+      /*0x118c1*/ 1255,
+      /*0x1e0f*/ 620,
+      /*0x1e8f*/ 684,
+      /*0x010f*/ 63,
+      /*0x2c8f*/ 911,
+      /*0xa69b*/ 1033,
       -1, -1, -1,
-      /*0x1e93c*/ 1258,
-      /*0xa66b*/ 970,
-      /*0x1fe5*/ 756,
-      -1,
-      /*0x03f3*/ 288,
-      -1,
-      /*0x217e*/ 772,
-      /*0x1f20*/ 702,
-      /*0x2d12*/ 927,
-      /*0x13a5*/ 482,
-      /*0x2d1a*/ 935,
-      /*0x04a5*/ 369,
-      /*0x2c32*/ 803,
-      /*0xff43*/ 1049,
-      /*0x10ced*/ 1194,
-      /*0x1e25*/ 583,
-      /*0x1ea5*/ 642,
-      /*0x0125*/ 74,
-      /*0x0225*/ 182,
-      /*0x2ca5*/ 874,
+      /*0x1e943*/ 1351,
+      /*0xa68b*/ 1025,
+      -1, -1,
+      /*0x023f*/ 191,
+      /*0x1f66*/ 782,
       -1,
-      /*0x03eb*/ 284,
+      /*0x10cc0*/ 1203,
       -1, -1,
-      /*0x1f41*/ 719,
-      /*0x0288*/ 227,
-      /*0x1e92e*/ 1244,
+      /*0x1fe1*/ 803,
       -1,
-      /*0xa733*/ 993,
-      /*0x1e928*/ 1238,
+      /*0x0481*/ 356,
+      /*0x2d1c*/ 985,
       -1,
-      /*0x01c9*/ 139,
+      /*0x026c*/ 218,
+      /*0x1e01*/ 613,
+      /*0x1e81*/ 677,
+      /*0x0101*/ 56,
+      /*0x2c81*/ 904,
       -1,
-      /*0x13b5*/ 498,
-      /*0x0435*/ 296,
-      /*0x04b5*/ 377,
+      /*0x2c4d*/ 878,
+      /*0x1e941*/ 1349,
+      /*0x0280*/ 224,
+      /*0x16e6b*/ 1297,
+      /*0x2175*/ 811,
+      /*0x118c7*/ 1261,
+      /*0x0282*/ 225,
+      -1, -1, -1,
+      /*0xa72d*/ 1039,
       -1,
-      /*0x10435*/ 1086,
+      /*0x051d*/ 430,
+      /*0x10f9*/ 519,
+      -1, -1,
+      /*0x1e924*/ 1320,
       -1,
-      /*0x1e35*/ 591,
-      /*0x1eb5*/ 650,
-      /*0x0135*/ 81,
-      /*0x0180*/ 117,
-      /*0x2cb5*/ 882,
-      /*0x13ad*/ 490,
+      /*0x16e6f*/ 1301,
+      /*0x118c5*/ 1259,
+      /*0x00f1*/ 42,
       -1,
-      /*0x04ad*/ 373,
+      /*0x2c4b*/ 876,
+      /*0x1fe5*/ 804,
       -1,
-      /*0x1042d*/ 1078,
+      /*0xa725*/ 1035,
       -1,
-      /*0x1e2d*/ 587,
-      /*0x1ead*/ 646,
-      /*0x012d*/ 78,
-      /*0x022d*/ 186,
-      /*0x2cad*/ 878,
+      /*0x13a7*/ 531,
       -1,
-      /*0xa725*/ 987,
+      /*0x04a7*/ 371,
+      /*0x1f22*/ 752,
+      /*0x2d04*/ 961,
+      /*0x1f37*/ 765,
+      /*0x1e27*/ 632,
+      /*0x1ea7*/ 691,
+      /*0x0127*/ 75,
+      /*0x2ca7*/ 923,
       -1, -1,
-      /*0x1e92c*/ 1242,
-      /*0x018c*/ 121,
-      /*0xff41*/ 1047,
+      /*0xa723*/ 1034,
       -1,
-      /*0x1f45*/ 723,
+      /*0x2d11*/ 974,
       -1, -1,
-      /*0x2c73*/ 854,
-      /*0x1e92a*/ 1240,
-      /*0x1fd1*/ 753,
-      /*0x13a3*/ 480,
+      /*0x2c43*/ 868,
       -1,
-      /*0x04a3*/ 368,
-      /*0xa66d*/ 971,
+      /*0x1f35*/ 763,
+      /*0x00ee*/ 39,
       -1,
-      /*0x03ef*/ 286,
-      /*0x1e23*/ 582,
-      /*0x1ea3*/ 641,
-      /*0x0123*/ 73,
-      /*0x0223*/ 181,
-      /*0x2ca3*/ 873,
-      /*0xa735*/ 994,
+      /*0x047b*/ 353,
+      /*0x04fb*/ 413,
+      -1,
+      /*0x0233*/ 189,
+      /*0x104fb*/ 1202,
+      /*0x1e7b*/ 674,
+      /*0x1efb*/ 733,
+      /*0x13b1*/ 541,
+      /*0x0431*/ 293,
+      /*0x04b1*/ 376,
+      /*0x00f3*/ 44,
+      /*0x10431*/ 1136,
+      -1,
+      /*0x1e31*/ 637,
+      /*0x1eb1*/ 696,
+      -1,
+      /*0x2cb1*/ 928,
+      /*0x2c41*/ 866,
+      /*0x03fb*/ 291,
+      /*0x0240*/ 192,
+      /*0x0566*/ 445,
+      /*0x16e6d*/ 1299,
+      /*0x047d*/ 354,
+      /*0x04fd*/ 414,
+      /*0x1f33*/ 761,
+      -1,
+      /*0x03b1*/ 246,
+      /*0x1e7d*/ 675,
+      /*0x1efd*/ 734,
+      /*0xff57*/ 1123,
+      /*0x047f*/ 355,
+      /*0x04ff*/ 415,
+      /*0x1d7d*/ 611,
+      -1, -1,
+      /*0x1e7f*/ 676,
+      /*0x1eff*/ 735,
+      /*0x13bd*/ 553,
+      /*0x043d*/ 305,
+      /*0x04bd*/ 382,
+      /*0x1f40*/ 766,
+      /*0x1043d*/ 1148,
+      /*0xa791*/ 1080,
+      /*0x1e3d*/ 643,
+      /*0x1ebd*/ 702,
+      /*0x01bf*/ 137,
+      /*0x2cbd*/ 934,
       -1, -1,
-      /*0x0585*/ 475,
-      /*0xff47*/ 1053,
+      /*0x1e93f*/ 1347,
       -1,
-      /*0x1e05*/ 567,
-      /*0x1e85*/ 631,
-      /*0x0105*/ 58,
-      /*0x0205*/ 167,
-      /*0x2c85*/ 858,
-      /*0xa72d*/ 991,
-      /*0x03ed*/ 285,
-      /*0x2d00*/ 909,
-      /*0x1f04*/ 692,
-      /*0x1f32*/ 712,
-      -1,
-      /*0x13bf*/ 508,
-      /*0x043f*/ 306,
-      /*0x04bf*/ 382,
-      /*0xff45*/ 1051,
-      /*0x1043f*/ 1096,
-      -1,
-      /*0x1e3f*/ 596,
-      /*0x1ebf*/ 655,
-      /*0x03b7*/ 251,
-      /*0x023f*/ 191,
-      /*0x2cbf*/ 887,
+      /*0x056c*/ 451,
+      /*0x2c47*/ 872,
       -1, -1, -1,
-      /*0x2d0c*/ 921,
+      /*0x03bd*/ 258,
+      /*0x00f5*/ 46,
       -1,
-      /*0x13b1*/ 494,
-      /*0x0431*/ 292,
-      /*0x04b1*/ 375,
-      /*0xa723*/ 986,
-      /*0x10431*/ 1082,
-      /*0x1e943*/ 1265,
-      /*0x1e31*/ 589,
-      /*0x1eb1*/ 648,
+      /*0x007a*/ 24,
       -1,
-      /*0x0231*/ 188,
-      /*0x2cb1*/ 880,
-      /*0x1f11*/ 697,
-      /*0x13c2*/ 511,
-      /*0x0442*/ 309,
-      /*0x04c2*/ 383,
-      -1,
-      /*0x10442*/ 1099,
-      /*0x13a7*/ 484,
-      /*0x2d20*/ 941,
-      /*0x04a7*/ 370,
-      /*0x0142*/ 87,
-      /*0x0242*/ 193,
-      /*0x1e940*/ 1262,
-      /*0x1e27*/ 584,
-      /*0x1ea7*/ 643,
-      /*0x0127*/ 75,
-      /*0x0227*/ 183,
-      /*0x2ca7*/ 875,
-      /*0x03b3*/ 247,
-      -1,
-      /*0xa78c*/ 1031,
-      /*0xa73f*/ 999,
-      /*0x13f1*/ 558,
-      /*0x0471*/ 347,
-      /*0x04f1*/ 407,
-      /*0x0071*/ 15,
-      /*0x1f73*/ 739,
-      /*0x104f1*/ 1138,
-      /*0x1e71*/ 621,
-      /*0x1ef1*/ 680,
-      /*0x0171*/ 110,
-      /*0x0271*/ 220,
-      /*0x13f5*/ 562,
-      /*0x0475*/ 349,
-      /*0x04f5*/ 409,
-      /*0x0075*/ 19,
+      /*0x104fa*/ 1201,
+      /*0x1f79*/ 793,
       -1,
-      /*0x104f5*/ 1142,
-      /*0x1e75*/ 623,
-      /*0x1ef5*/ 682,
-      /*0x0175*/ 112,
-      /*0x0275*/ 222,
-      /*0x00e1*/ 26,
-      /*0x1e941*/ 1263,
-      /*0x2c37*/ 808,
-      /*0x13bd*/ 506,
-      /*0x043d*/ 304,
-      /*0x04bd*/ 381,
+      /*0x017a*/ 114,
+      /*0xa727*/ 1036,
+      /*0x2c45*/ 870,
+      /*0x13b9*/ 549,
+      /*0x0439*/ 301,
+      /*0x04b9*/ 380,
+      /*0x022d*/ 186,
+      /*0x10439*/ 1144,
       -1,
-      /*0x1043d*/ 1094,
+      /*0x1e39*/ 641,
+      /*0x1eb9*/ 700,
+      /*0x1e922*/ 1318,
+      /*0x2cb9*/ 932,
+      /*0x1e937*/ 1339,
       -1,
-      /*0x1e3d*/ 595,
-      /*0x1ebd*/ 654,
+      /*0x13c2*/ 558,
+      /*0x0442*/ 310,
+      /*0x04c2*/ 384,
       -1,
-      /*0xa727*/ 988,
-      /*0x2cbd*/ 886,
-      /*0x13b9*/ 502,
-      /*0x0439*/ 300,
-      /*0x04b9*/ 379,
+      /*0x10442*/ 1153,
       -1,
-      /*0x10439*/ 1090,
-      /*0x017c*/ 115,
-      /*0x1e39*/ 593,
-      /*0x1eb9*/ 652,
+      /*0x0225*/ 182,
+      /*0x03b9*/ 254,
+      /*0x0142*/ 87,
+      /*0x13d0*/ 572,
+      /*0x0450*/ 324,
       -1,
-      /*0x13af*/ 492,
-      /*0x2cb9*/ 884,
-      /*0x04af*/ 374,
-      /*0x00e3*/ 28,
-      /*0x1042f*/ 1080,
-      /*0x03b5*/ 249,
-      /*0x1e2f*/ 588,
-      /*0x1eaf*/ 647,
-      /*0x012f*/ 79,
-      /*0x022f*/ 187,
-      /*0x2caf*/ 879,
-      -1, -1, -1,
-      /*0x00e5*/ 30,
-      /*0x2c33*/ 804,
-      /*0x03ad*/ 242,
-      /*0x0583*/ 473,
+      /*0x1e935*/ 1337,
+      /*0x13f2*/ 606,
       -1,
-      /*0x10cc2*/ 1151,
-      /*0x1e03*/ 566,
-      /*0x1e83*/ 630,
-      /*0x0103*/ 57,
-      /*0x0203*/ 166,
-      /*0x2c83*/ 857,
-      /*0x00e9*/ 34,
-      /*0x0371*/ 235,
-      /*0xa73d*/ 998,
+      /*0x2c66*/ 898,
+      /*0x0072*/ 16,
+      /*0x2d24*/ 993,
+      /*0x104f2*/ 1193,
       -1,
-      /*0x2d1c*/ 937,
-      /*0x2d04*/ 913,
-      -1, -1, -1,
-      /*0x01f3*/ 159,
-      /*0xa77c*/ 1025,
+      /*0x0223*/ 181,
       -1,
-      /*0x0188*/ 120,
-      /*0xa739*/ 996,
-      /*0x10cf1*/ 1198,
+      /*0x2d1d*/ 986,
+      /*0x24d0*/ 823,
+      /*0x118c0*/ 1254,
+      /*0xff51*/ 1117,
       -1,
-      /*0x0511*/ 423,
-      -1, -1, -1, -1,
-      /*0x13a9*/ 486,
-      /*0xa72f*/ 992,
-      /*0x04a9*/ 371,
-      /*0x1e932*/ 1248,
-      /*0x10429*/ 1074,
-      /*0x01eb*/ 156,
-      /*0x1e29*/ 585,
-      /*0x1ea9*/ 644,
-      /*0x0129*/ 76,
-      /*0x0229*/ 184,
-      /*0x2ca9*/ 876,
-      /*0x037c*/ 239,
+      /*0x1f25*/ 755,
       -1, -1,
-      /*0x2d11*/ 926,
+      /*0xa7c3*/ 1099,
       -1,
-      /*0x1f37*/ 717,
-      /*0x00e7*/ 32,
-      -1, -1,
-      /*0x0573*/ 457,
-      /*0x2c35*/ 806,
+      /*0x03f2*/ 288,
+      /*0x020f*/ 172,
       -1,
-      /*0x03bf*/ 259,
-      /*0x13ab*/ 488,
+      /*0x2c3f*/ 864,
       -1,
-      /*0x04ab*/ 372,
+      /*0xa77f*/ 1074,
       -1,
-      /*0x1042b*/ 1076,
+      /*0x1e933*/ 1335,
+      /*0xff53*/ 1119,
+      /*0x1f23*/ 753,
       -1,
-      /*0x1e2b*/ 586,
-      /*0x1eab*/ 645,
-      /*0x012b*/ 77,
-      /*0x022b*/ 185,
-      /*0x2cab*/ 877,
+      /*0x16e71*/ 1303,
       -1,
-      /*0x1f01*/ 689,
-      /*0x056b*/ 449,
+      /*0xa73d*/ 1046,
+      /*0x2c6c*/ 901,
+      /*0x13bb*/ 551,
+      /*0x043b*/ 303,
+      /*0x04bb*/ 381,
       -1,
-      /*0x03b1*/ 245,
-      /*0x2173*/ 761,
+      /*0x1043b*/ 1146,
       -1,
-      /*0x2d08*/ 917,
+      /*0x1e3b*/ 642,
+      /*0x1ebb*/ 701,
+      /*0x1e940*/ 1348,
+      /*0x2cbb*/ 933,
+      /*0x0201*/ 165,
       -1, -1, -1,
-      /*0xa791*/ 1032,
-      /*0xa729*/ 989,
-      -1,
-      /*0x13c6*/ 515,
-      /*0x0446*/ 313,
-      /*0x04c6*/ 385,
-      /*0x1f33*/ 713,
-      /*0x10446*/ 1103,
-      /*0x13a1*/ 478,
-      /*0x050f*/ 422,
-      /*0x04a1*/ 367,
-      /*0x0146*/ 89,
-      /*0x01ef*/ 158,
+      /*0x10fd*/ 521,
       -1,
-      /*0x1e21*/ 581,
-      /*0x1ea1*/ 640,
-      /*0x0121*/ 72,
+      /*0x2c37*/ 856,
+      /*0xa77a*/ 1072,
       -1,
-      /*0x2ca1*/ 872,
-      /*0x13c4*/ 513,
-      /*0x0444*/ 311,
-      /*0x04c4*/ 384,
+      /*0x03bb*/ 256,
       -1,
-      /*0x10444*/ 1101,
+      /*0x0579*/ 464,
+      /*0x10ff*/ 523,
+      /*0x16e6e*/ 1300,
       -1,
-      /*0xa72b*/ 990,
-      /*0x13f2*/ 559,
-      /*0x0144*/ 88,
-      /*0x2d0f*/ 924,
-      /*0x0072*/ 16,
-      /*0x01ed*/ 157,
-      /*0x104f2*/ 1139,
-      -1, -1,
-      /*0x1f25*/ 707,
-      /*0x0272*/ 221,
-      /*0x13bb*/ 504,
-      /*0x043b*/ 302,
-      /*0x04bb*/ 380,
-      /*0x2c3f*/ 816,
-      /*0x1043b*/ 1092,
-      -1,
-      /*0x1e3b*/ 594,
-      /*0x1ebb*/ 653,
-      /*0x056f*/ 453,
-      /*0x0495*/ 361,
-      /*0x2cbb*/ 885,
-      -1,
-      /*0x03bd*/ 257,
-      /*0x1e15*/ 575,
-      /*0x1e95*/ 639,
-      /*0x0115*/ 66,
-      /*0x0215*/ 175,
-      /*0x2c95*/ 866,
+      /*0xa79d*/ 1086,
+      /*0x01f9*/ 161,
+      /*0x017c*/ 115,
+      /*0xa739*/ 1044,
       -1,
-      /*0x2c31*/ 802,
+      /*0x2c35*/ 854,
+      /*0x1f01*/ 737,
+      /*0x13af*/ 539,
       -1,
-      /*0x118c2*/ 1202,
-      /*0x1f35*/ 715,
-      /*0x03b9*/ 253,
-      /*0xa691*/ 980,
+      /*0x04af*/ 375,
+      /*0x16e73*/ 1305,
+      /*0x1042f*/ 1134,
       -1,
-      /*0x056d*/ 451,
+      /*0x1e2f*/ 636,
+      /*0x1eaf*/ 695,
+      /*0x012f*/ 79,
+      /*0x2caf*/ 927,
       -1, -1,
-      /*0x0493*/ 360,
-      -1,
-      /*0x2c42*/ 819,
-      /*0x03af*/ 244,
-      /*0x1e13*/ 574,
-      /*0x1e93*/ 638,
-      /*0x0113*/ 65,
-      /*0x0213*/ 174,
-      /*0x2c93*/ 865,
-      -1,
-      /*0x047b*/ 352,
-      /*0x04fb*/ 412,
+      /*0x1e05*/ 615,
+      /*0x1e85*/ 679,
+      /*0x0105*/ 58,
+      /*0x2c85*/ 906,
+      /*0x0227*/ 183,
+      /*0x10fa*/ 520,
+      /*0x052d*/ 438,
+      /*0x03af*/ 245,
       -1, -1,
-      /*0x104fb*/ 1148,
-      /*0x1e7b*/ 626,
-      /*0x1efb*/ 685,
-      -1,
-      /*0xa73b*/ 997,
+      /*0x13a9*/ 533,
+      /*0x01ad*/ 131,
+      /*0x04a9*/ 372,
+      /*0x2c33*/ 852,
+      /*0x10429*/ 1128,
+      /*0x1e92d*/ 1329,
+      /*0x1e29*/ 633,
+      /*0x1ea9*/ 692,
+      /*0x0129*/ 76,
+      /*0x2ca9*/ 924,
       -1,
-      /*0x10cc6*/ 1155,
-      /*0x0479*/ 351,
-      /*0x04f9*/ 411,
-      /*0x0079*/ 23,
+      /*0x0525*/ 434,
       -1,
-      /*0x104f9*/ 1146,
-      /*0x1e79*/ 625,
-      /*0x1ef9*/ 684,
+      /*0x10cc2*/ 1205,
       -1,
-      /*0x1f23*/ 705,
-      /*0x0501*/ 415,
-      -1, -1,
-      /*0x047d*/ 353,
-      /*0x04fd*/ 413,
-      /*0x0283*/ 225,
-      /*0x10cc4*/ 1153,
-      /*0x00fe*/ 54,
-      /*0x1e7d*/ 627,
-      /*0x1efd*/ 686,
-      /*0x1f05*/ 693,
-      /*0x027d*/ 223,
+      /*0x1f27*/ 757,
       /*0x01a5*/ 129,
-      /*0x10cf2*/ 1199,
-      /*0x0499*/ 363,
-      /*0x2c3d*/ 814,
-      -1,
-      /*0x1e937*/ 1253,
-      /*0x1e19*/ 577,
-      /*0x2d01*/ 910,
-      /*0x0119*/ 68,
-      /*0x0219*/ 177,
-      /*0x2c99*/ 868,
       -1, -1,
-      /*0xa68f*/ 979,
-      /*0x2c39*/ 810,
+      /*0x2c40*/ 865,
+      /*0x1e925*/ 1321,
+      -1,
+      /*0x10cd0*/ 1219,
+      /*0x0231*/ 188,
+      /*0x2d22*/ 991,
+      /*0x0523*/ 433,
+      /*0x10cf2*/ 1253,
+      /*0x10d0*/ 478,
+      /*0x16e75*/ 1307,
+      -1,
+      /*0x01a3*/ 128,
+      /*0x10f2*/ 512,
       -1,
-      /*0x0477*/ 350,
-      /*0x04f7*/ 410,
+      /*0xa73b*/ 1045,
+      /*0x1e923*/ 1319,
+      /*0x1fd1*/ 801,
+      /*0x1f7b*/ 795,
+      /*0x027d*/ 223,
+      /*0x050f*/ 423,
+      -1,
+      /*0xff55*/ 1121,
+      /*0x13ce*/ 570,
+      /*0x044e*/ 322,
+      /*0x04ce*/ 390,
+      /*0x1f31*/ 759,
+      /*0x1044e*/ 1165,
+      -1, -1,
+      /*0xa7bf*/ 1098,
+      /*0x0477*/ 351,
+      /*0x04f7*/ 411,
       /*0x0077*/ 21,
-      /*0xa7b7*/ 1045,
-      /*0x104f7*/ 1144,
-      /*0x1e77*/ 624,
-      /*0x1ef7*/ 683,
+      /*0xa77c*/ 1073,
+      /*0x104f7*/ 1198,
+      /*0x1e77*/ 672,
+      /*0x1ef7*/ 731,
       /*0x0177*/ 113,
-      /*0x1e07*/ 568,
-      /*0x1e87*/ 632,
-      /*0x0107*/ 59,
-      /*0x0207*/ 168,
-      /*0x2c87*/ 859,
       -1,
-      /*0x1d79*/ 563,
-      /*0x1f31*/ 711,
-      /*0x0525*/ 433,
+      /*0x1f7d*/ 797,
+      -1,
+      /*0x03ce*/ 274,
+      -1,
+      /*0x0501*/ 416,
       -1, -1,
-      /*0x01ad*/ 131,
-      /*0x037b*/ 238,
-      /*0x13d0*/ 525,
-      /*0x0450*/ 323,
-      /*0xa781*/ 1027,
-      -1,
-      /*0x1e933*/ 1249,
-      /*0x1d7d*/ 564,
-      /*0x1f42*/ 720,
-      /*0x047f*/ 354,
-      /*0x04ff*/ 414,
-      /*0x0250*/ 199,
+      /*0xa72f*/ 1040,
+      /*0x1e03*/ 614,
+      /*0x1e83*/ 678,
+      /*0x0103*/ 57,
+      /*0x2c83*/ 905,
+      /*0x13e8*/ 596,
+      /*0xff4f*/ 1115,
       -1,
-      /*0x1f27*/ 709,
-      /*0x1e7f*/ 628,
-      /*0x1eff*/ 687,
-      /*0x2d25*/ 946,
-      /*0x24d0*/ 775,
-      /*0x13ce*/ 523,
-      /*0x044e*/ 321,
-      /*0x04ce*/ 389,
-      /*0x03c6*/ 265,
-      /*0x1044e*/ 1111,
-      /*0x0497*/ 362,
-      /*0x037d*/ 240,
-      /*0x01a3*/ 128,
+      /*0x0068*/ 7,
       -1,
-      /*0x1e17*/ 576,
-      /*0x1f71*/ 737,
-      /*0x0117*/ 67,
-      /*0x0217*/ 176,
-      /*0x2c97*/ 867,
-      /*0x052d*/ 437,
+      /*0x104e8*/ 1183,
+      /*0xa7b7*/ 1094,
+      /*0x13c6*/ 562,
+      /*0x0446*/ 314,
+      /*0x04c6*/ 386,
       -1,
-      /*0x1e925*/ 1235,
+      /*0x10446*/ 1157,
       -1,
-      /*0x0185*/ 119,
-      /*0x03c4*/ 263,
-      /*0x1f75*/ 741,
-      /*0x13cc*/ 521,
-      /*0x044c*/ 319,
-      /*0x04cc*/ 388,
-      -1,
-      /*0x1044c*/ 1109,
-      /*0x03f2*/ 287,
-      /*0xff42*/ 1048,
-      -1,
-      /*0x13e6*/ 547,
-      /*0xa7a5*/ 1041,
-      /*0x0377*/ 237,
-      /*0x0066*/ 5,
-      /*0x2d2d*/ 948,
-      /*0x104e6*/ 1127,
-      /*0x01bf*/ 137,
-      /*0x03bb*/ 255,
-      /*0xa77f*/ 1026,
-      /*0x0266*/ 213,
-      /*0x0523*/ 432,
-      /*0x1e935*/ 1251,
-      /*0x1f7c*/ 748,
+      /*0x13f0*/ 604,
+      /*0x24e8*/ 847,
+      /*0x0146*/ 89,
+      /*0x0070*/ 14,
+      /*0xa729*/ 1037,
+      /*0x104f0*/ 1191,
+      -1,
+      /*0xa7b5*/ 1093,
       -1, -1,
-      /*0x24e6*/ 797,
+      /*0x1f7a*/ 794,
       -1,
-      /*0xa681*/ 972,
-      /*0x007a*/ 24,
+      /*0x0242*/ 193,
+      /*0x03c6*/ 266,
+      -1, -1,
+      /*0x0499*/ 364,
+      /*0x0527*/ 435,
+      -1, -1,
+      /*0x1e19*/ 625,
+      /*0x0250*/ 199,
+      /*0x0119*/ 68,
+      /*0x2c99*/ 916,
       -1,
-      /*0x104fa*/ 1147,
-      /*0x0505*/ 417,
-      /*0x1e92d*/ 1243,
-      /*0x017a*/ 114,
+      /*0x0272*/ 221,
+      /*0x1e927*/ 1323,
+      /*0x0581*/ 472,
       -1,
-      /*0xa7b5*/ 1044,
-      /*0x118c6*/ 1206,
+      /*0xff49*/ 1109,
       -1, -1,
-      /*0x2d23*/ 944,
+      /*0x037b*/ 239,
+      /*0x1f42*/ 768,
+      -1, -1,
+      /*0x00e6*/ 31,
       -1,
-      /*0x13c8*/ 517,
-      /*0x0448*/ 315,
-      /*0x04c8*/ 386,
+      /*0x057b*/ 466,
       -1,
-      /*0x10448*/ 1105,
-      /*0x2c46*/ 823,
-      /*0x10cd0*/ 1165,
-      /*0x1f03*/ 691,
-      /*0x0148*/ 90,
-      /*0x2d05*/ 914,
-      /*0x2184*/ 774,
-      /*0x118c4*/ 1204,
-      /*0x13d8*/ 533,
-      /*0x0458*/ 331,
-      /*0x03fb*/ 290,
-      /*0x13ec*/ 553,
-      /*0x1e923*/ 1233,
-      /*0x104d8*/ 1113,
-      /*0x006c*/ 10,
+      /*0x13c4*/ 560,
+      /*0x0444*/ 312,
+      /*0x04c4*/ 385,
+      /*0x01fb*/ 162,
+      /*0x10444*/ 1155,
       -1,
-      /*0x104ec*/ 1133,
-      /*0x2c44*/ 821,
-      /*0x10cce*/ 1163,
+      /*0x1f72*/ 786,
       -1,
-      /*0x026c*/ 218,
-      /*0x2cec*/ 906,
+      /*0x0144*/ 88,
+      -1, -1,
+      /*0x2d2d*/ 996,
+      -1, -1,
+      /*0x037d*/ 241,
+      /*0x1e931*/ 1333,
+      -1, -1, -1,
+      /*0x03c4*/ 264,
+      /*0x057d*/ 468,
+      /*0x2179*/ 815,
+      /*0x13d6*/ 578,
+      /*0x0456*/ 330,
+      -1,
+      /*0x01fd*/ 163,
+      /*0x2d25*/ 994,
+      /*0x00ec*/ 37,
+      /*0x057f*/ 470,
+      -1, -1,
+      /*0x029d*/ 234,
+      /*0x10cce*/ 1217,
+      /*0x01ff*/ 164,
+      -1, -1,
+      /*0x24d6*/ 829,
       -1,
-      /*0x24d8*/ 783,
-      /*0x049d*/ 365,
+      /*0xff4d*/ 1113,
       -1,
-      /*0xa7a3*/ 1040,
-      /*0xa77a*/ 1024,
-      /*0x1e1d*/ 579,
-      /*0x01f5*/ 160,
-      /*0x011d*/ 70,
-      /*0x021d*/ 179,
-      /*0x2c9d*/ 870,
+      /*0x2d23*/ 992,
+      /*0x01bd*/ 136,
+      /*0x0495*/ 362,
+      -1,
+      /*0x10f7*/ 517,
+      /*0x1e93d*/ 1345,
+      /*0x1e15*/ 623,
+      /*0x1e95*/ 687,
+      /*0x0115*/ 66,
+      /*0x2c95*/ 914,
       -1,
-      /*0x2c3b*/ 812,
+      /*0x022f*/ 187,
       -1,
-      /*0x0527*/ 434,
-      /*0xa785*/ 1029,
+      /*0x2d0f*/ 972,
       -1,
-      /*0x10ccc*/ 1161,
-      /*0x1e93f*/ 1261,
+      /*0x057a*/ 465,
+      /*0x118c2*/ 1256,
+      /*0x0205*/ 167,
       -1,
-      /*0x01bd*/ 136,
-      /*0x13e8*/ 549,
-      -1, -1,
-      /*0x0068*/ 7,
-      /*0x10ce6*/ 1187,
-      /*0x104e8*/ 1129,
-      -1, -1,
-      /*0x0571*/ 455,
-      /*0x0268*/ 214,
+      /*0x1f7c*/ 796,
+      /*0xff4b*/ 1111,
+      /*0x10ce8*/ 1243,
+      -1, -1, -1,
+      /*0x118d0*/ 1270,
+      /*0x10e8*/ 502,
+      /*0x13ea*/ 598,
+      /*0x10cc6*/ 1209,
+      -1,
+      /*0x006a*/ 8,
       /*0x01b9*/ 135,
-      /*0x13f0*/ 557,
-      /*0x2d27*/ 947,
-      /*0x1e931*/ 1247,
-      /*0x0070*/ 14,
-      /*0x24e8*/ 799,
-      /*0x104f0*/ 1137,
+      /*0x104ea*/ 1185,
+      /*0x0229*/ 184,
+      /*0x10cf0*/ 1251,
+      /*0x1e939*/ 1341,
+      /*0xa7a5*/ 1090,
+      /*0x2d01*/ 958,
+      /*0x1f05*/ 741,
+      /*0x10f0*/ 510,
+      /*0x2c31*/ 850,
+      -1,
+      /*0xff43*/ 1103,
+      -1, -1, -1, -1,
+      /*0x1e942*/ 1350,
+      -1, -1,
+      /*0xa7a3*/ 1089,
+      /*0x0572*/ 457,
+      /*0x01d0*/ 142,
+      /*0x13a1*/ 525,
       -1,
-      /*0x0575*/ 459,
+      /*0x04a1*/ 368,
       -1, -1, -1,
-      /*0x13dc*/ 537,
-      /*0x045c*/ 335,
+      /*0x1e21*/ 629,
+      /*0x1ea1*/ 688,
+      /*0x0121*/ 72,
+      /*0x2ca1*/ 920,
+      /*0xa691*/ 1028,
+      /*0xff41*/ 1101,
+      /*0x1e07*/ 616,
+      /*0x1e87*/ 680,
+      /*0x0107*/ 59,
+      /*0x2c87*/ 907,
+      -1,
+      /*0x2c3d*/ 862,
       -1,
-      /*0x1e942*/ 1264,
+      /*0x0493*/ 361,
+      -1,
+      /*0x10cc4*/ 1207,
+      /*0x2d27*/ 995,
+      /*0x1e13*/ 622,
+      /*0x1e93*/ 686,
+      /*0x0113*/ 65,
+      /*0x2c93*/ 913,
+      -1, -1,
+      /*0x13ab*/ 535,
+      /*0x00f9*/ 49,
+      /*0x04ab*/ 373,
       -1,
-      /*0x104dc*/ 1117,
-      /*0x2171*/ 759,
+      /*0x1042b*/ 1130,
+      /*0xa781*/ 1075,
+      /*0x1e2b*/ 634,
+      /*0x1eab*/ 693,
+      /*0x012b*/ 77,
+      /*0x2cab*/ 925,
+      /*0x13e4*/ 592,
+      /*0x0203*/ 166,
+      /*0x1e93b*/ 1343,
+      /*0x0064*/ 3,
+      /*0x10cd6*/ 1225,
+      /*0x104e4*/ 1179,
+      /*0x037c*/ 240,
+      /*0xff47*/ 1107,
+      /*0x2c39*/ 858,
+      /*0x10d6*/ 484,
+      /*0x1f77*/ 791,
+      /*0x0268*/ 214,
+      /*0x057c*/ 467,
+      /*0x13e2*/ 590,
+      /*0x24e4*/ 843,
+      /*0x16e66*/ 1292,
+      /*0x0062*/ 1,
       -1,
-      /*0x1e927*/ 1237,
-      /*0x025c*/ 208,
-      /*0x0076*/ 20,
-      /*0x0183*/ 118,
-      /*0x104f6*/ 1143,
-      /*0x10cc8*/ 1157,
-      /*0x0287*/ 226,
-      /*0x24dc*/ 787,
-      /*0x2175*/ 763,
-      /*0x057c*/ 466,
-      /*0x13d6*/ 531,
-      /*0x0456*/ 329,
-      -1,
-      /*0x13e0*/ 541,
-      /*0xa7a7*/ 1042,
-      -1,
-      /*0x1f21*/ 703,
-      /*0x10cd8*/ 1173,
-      /*0x104e0*/ 1121,
-      /*0x0256*/ 204,
-      /*0x10cec*/ 1193,
-      /*0x052f*/ 438,
-      /*0x0260*/ 209,
-      /*0x03ce*/ 273,
-      /*0xa685*/ 974,
-      /*0x24d6*/ 781,
+      /*0x104e2*/ 1177,
       -1,
-      /*0x1f44*/ 722,
-      /*0x24e0*/ 791,
-      /*0x217c*/ 770,
-      /*0x13d4*/ 529,
-      /*0x0454*/ 327,
+      /*0x2c42*/ 867,
+      /*0xff45*/ 1105,
+      /*0x1f03*/ 739,
       -1, -1,
-      /*0x1f72*/ 738,
-      /*0x0503*/ 416,
+      /*0x052f*/ 439,
       -1,
-      /*0x13ea*/ 551,
-      /*0x1e93d*/ 1259,
-      /*0x0254*/ 203,
-      /*0x006a*/ 8,
+      /*0x24e2*/ 841,
       -1,
-      /*0x104ea*/ 1131,
+      /*0x2c50*/ 881,
       -1,
-      /*0x03cc*/ 271,
-      /*0x24d4*/ 779,
-      /*0x026a*/ 216,
+      /*0x0505*/ 418,
       -1,
-      /*0xff46*/ 1052,
-      /*0x1e939*/ 1255,
-      /*0x13e4*/ 545,
-      /*0x1f15*/ 701,
-      /*0x10ce8*/ 1189,
-      /*0x0064*/ 3,
-      /*0x2d03*/ 912,
-      /*0x104e4*/ 1125,
-      /*0x13b6*/ 499,
-      /*0x0436*/ 297,
-      /*0x1e92f*/ 1245,
-      /*0x118d0*/ 1216,
-      /*0x10436*/ 1087,
-      -1, -1,
-      /*0x10cf0*/ 1197,
-      /*0xff44*/ 1050,
-      /*0x24e4*/ 795,
+      /*0xa7a7*/ 1091,
+      /*0x1e92f*/ 1331,
+      -1,
+      /*0x0185*/ 119,
+      /*0x13e0*/ 588,
+      /*0x0219*/ 177,
+      /*0x13da*/ 582,
+      /*0x045a*/ 334,
+      -1,
+      /*0x104e0*/ 1175,
+      /*0x217b*/ 817,
+      /*0x104da*/ 1169,
+      /*0x1f70*/ 784,
+      /*0x16e6c*/ 1298,
+      /*0x0529*/ 436,
       /*0x0078*/ 22,
-      /*0x0529*/ 435,
-      /*0x104f8*/ 1145,
-      /*0x2c50*/ 833,
+      /*0x10cea*/ 1245,
+      /*0x104f8*/ 1199,
+      /*0x24e0*/ 839,
+      -1,
+      /*0x24da*/ 833,
+      /*0x10ea*/ 504,
+      -1,
+      /*0x1e929*/ 1325,
+      /*0x13dc*/ 584,
+      /*0x045c*/ 336,
+      /*0x13cc*/ 568,
+      /*0x044c*/ 320,
+      /*0x04cc*/ 389,
+      /*0x104dc*/ 1171,
+      /*0x1044c*/ 1163,
+      /*0x03f8*/ 290,
+      /*0x217d*/ 819,
+      /*0x118ce*/ 1268,
+      /*0x2c3b*/ 860,
+      -1,
+      /*0x13d8*/ 580,
+      /*0x0458*/ 332,
+      /*0x24dc*/ 835,
+      -1,
+      /*0x217f*/ 821,
+      /*0x104d8*/ 1167,
+      -1, -1,
+      /*0xa72b*/ 1038,
+      /*0x03cc*/ 272,
+      /*0x0585*/ 476,
+      /*0x13d4*/ 576,
+      /*0x0454*/ 328,
+      -1,
+      /*0x24d8*/ 831,
+      -1,
+      /*0x1f44*/ 770,
+      /*0x0256*/ 204,
+      /*0x13d2*/ 574,
+      /*0x0452*/ 326,
+      /*0x0377*/ 238,
+      -1, -1,
+      /*0xa7bd*/ 1097,
+      /*0x01ce*/ 141,
+      /*0x24d4*/ 827,
+      /*0x0577*/ 462,
+      -1, -1,
+      /*0x017e*/ 116,
+      /*0x0497*/ 363,
+      /*0x217a*/ 816,
+      /*0x24d2*/ 825,
+      /*0x118c6*/ 1260,
+      /*0x1e17*/ 624,
+      /*0x0215*/ 175,
+      /*0x0117*/ 67,
+      /*0x2c97*/ 915,
+      /*0x0503*/ 417,
+      -1,
+      /*0x0076*/ 20,
+      /*0x13f4*/ 608,
+      /*0x104f6*/ 1197,
+      /*0x0183*/ 118,
+      /*0x0074*/ 18,
+      /*0x10ce4*/ 1239,
+      /*0x104f4*/ 1195,
       -1,
-      /*0x1f13*/ 699,
+      /*0x0568*/ 447,
       -1,
-      /*0x00f3*/ 44,
-      /*0x10cdc*/ 1177,
-      /*0x118ce*/ 1214,
-      /*0x13ca*/ 519,
-      /*0x044a*/ 317,
-      /*0x04ca*/ 387,
+      /*0x10e4*/ 498,
+      /*0x13bc*/ 552,
+      /*0x043c*/ 304,
+      /*0xa7b9*/ 1095,
       -1,
-      /*0x1044a*/ 1107,
+      /*0x1043c*/ 1147,
+      /*0x1f15*/ 749,
       -1,
-      /*0x1f7b*/ 747,
-      /*0x03c8*/ 267,
+      /*0x10ce2*/ 1237,
+      /*0x013c*/ 84,
       /*0x01c6*/ 138,
-      /*0x2c4e*/ 831,
-      /*0xa783*/ 1028,
-      -1, -1,
-      /*0x01a1*/ 127,
-      /*0x00eb*/ 36,
-      /*0x052b*/ 436,
-      /*0x10cd6*/ 1171,
-      /*0x1f79*/ 745,
-      -1,
-      /*0x10ce0*/ 1181,
-      /*0x118cc*/ 1212,
-      /*0x13f4*/ 561,
-      /*0x13d2*/ 527,
-      /*0x0452*/ 325,
-      /*0x0074*/ 18,
+      /*0x0570*/ 455,
+      /*0x026a*/ 216,
+      /*0x10e2*/ 496,
+      /*0x13c8*/ 564,
+      /*0x0448*/ 316,
+      /*0x04c8*/ 387,
+      /*0x2172*/ 808,
+      /*0x10448*/ 1159,
       -1,
-      /*0x104f4*/ 1141,
+      /*0x03bc*/ 257,
       -1,
-      /*0x1e929*/ 1239,
-      /*0x1f7d*/ 749,
-      /*0x2c4c*/ 829,
-      /*0x0252*/ 201,
-      -1, -1, -1, -1,
-      /*0x10cd4*/ 1169,
-      /*0x24d2*/ 777,
-      /*0x2c66*/ 850,
+      /*0x0148*/ 90,
+      /*0x16e79*/ 1311,
       -1,
-      /*0x13b0*/ 493,
-      /*0x0430*/ 291,
-      /*0xa7a9*/ 1043,
-      /*0x10cea*/ 1191,
-      /*0x10430*/ 1081,
-      /*0x0521*/ 431,
+      /*0x0519*/ 428,
+      /*0x00fb*/ 51,
       -1, -1,
-      /*0x0195*/ 123,
+      /*0x118c4*/ 1258,
+      /*0x0199*/ 124,
       -1,
-      /*0x13e2*/ 543,
-      /*0x029d*/ 233,
-      /*0x1e92b*/ 1241,
-      /*0x0062*/ 1,
-      /*0x1f77*/ 743,
-      /*0x104e2*/ 1123,
-      /*0x10ce4*/ 1185,
-      /*0x1f07*/ 695,
+      /*0x10ce0*/ 1235,
+      /*0x03c8*/ 268,
+      /*0x10cda*/ 1229,
       -1,
-      /*0x118c8*/ 1208,
+      /*0x0583*/ 474,
+      /*0x10e0*/ 494,
+      -1,
+      /*0x10da*/ 488,
       -1, -1, -1,
-      /*0x0572*/ 456,
-      /*0x2d21*/ 942,
-      /*0x24e2*/ 793,
-      /*0x1fb1*/ 751,
-      /*0x00ef*/ 40,
-      /*0x048d*/ 357,
-      /*0x2c48*/ 825,
-      /*0xa683*/ 973,
-      /*0x118d8*/ 1224,
-      /*0x1e0d*/ 571,
-      /*0x1e8d*/ 635,
-      /*0x010d*/ 62,
-      /*0x020d*/ 171,
-      /*0x2c8d*/ 862,
+      /*0x2c4e*/ 879,
+      /*0x0207*/ 168,
+      /*0x10f8*/ 518,
       -1, -1,
-      /*0x01fb*/ 162,
-      /*0x0515*/ 425,
-      /*0x2c58*/ 841,
-      /*0x10cca*/ 1159,
-      /*0x2172*/ 760,
-      /*0x2c6c*/ 853,
-      /*0x00ed*/ 38,
+      /*0x00fd*/ 53,
       -1,
-      /*0x13b4*/ 497,
-      /*0x0434*/ 295,
+      /*0x2d05*/ 962,
+      /*0x118d6*/ 1276,
+      /*0x10cdc*/ 1231,
       -1,
-      /*0x01f9*/ 161,
-      /*0x10434*/ 1085,
-      -1, -1, -1, -1,
-      /*0xa7a1*/ 1039,
+      /*0x10ccc*/ 1215,
+      /*0x0213*/ 174,
+      /*0x00ff*/ 55,
+      /*0x10dc*/ 490,
+      -1,
+      /*0x1f21*/ 751,
       -1, -1,
-      /*0x2d15*/ 930,
-      /*0x0513*/ 424,
+      /*0xa7bb*/ 1096,
       -1,
-      /*0x01fd*/ 163,
+      /*0x10cd8*/ 1227,
+      /*0x1f07*/ 743,
       -1,
-      /*0x10cd2*/ 1167,
-      /*0x1e09*/ 569,
-      /*0x1e89*/ 633,
-      /*0x0109*/ 60,
-      /*0x0209*/ 169,
-      /*0x2c89*/ 860,
-      /*0x1e93b*/ 1257,
-      /*0x057b*/ 465,
-      /*0x0199*/ 124,
-      /*0xff50*/ 1062,
+      /*0x022b*/ 185,
       -1,
-      /*0x13ee*/ 555,
-      /*0x2c68*/ 851,
+      /*0x10d8*/ 486,
+      /*0x217c*/ 818,
       -1,
-      /*0x006e*/ 12,
-      /*0x2d13*/ 928,
-      /*0x104ee*/ 1135,
-      /*0x1f66*/ 734,
-      /*0x0579*/ 463,
-      -1, -1,
-      /*0x2cee*/ 907,
+      /*0x2c68*/ 899,
       -1, -1,
-      /*0x118dc*/ 1228,
-      /*0xff4e*/ 1060,
+      /*0x10cd4*/ 1223,
+      /*0x1f13*/ 747,
       -1,
-      /*0x217b*/ 769,
-      /*0x10ce2*/ 1183,
+      /*0x01d6*/ 145,
+      /*0x2c46*/ 871,
+      /*0x10d4*/ 482,
+      -1,
+      /*0x10cd2*/ 1221,
+      /*0x00fa*/ 50,
+      /*0x13ca*/ 566,
+      /*0x044a*/ 318,
+      /*0x04ca*/ 388,
+      /*0x10d2*/ 480,
+      /*0x1044a*/ 1161,
+      /*0x2184*/ 822,
+      /*0x10fe*/ 522,
+      /*0x0515*/ 426,
+      -1, -1, -1, -1,
+      /*0x0195*/ 123,
       -1,
-      /*0x057d*/ 467,
+      /*0x1f64*/ 780,
       -1,
-      /*0x1f7a*/ 746,
+      /*0xa785*/ 1077,
+      /*0x13b6*/ 546,
+      /*0x0436*/ 298,
+      /*0x03ca*/ 270,
       -1,
-      /*0x2c5c*/ 845,
+      /*0x10436*/ 1141,
+      /*0x10f6*/ 516,
       -1,
-      /*0x03b6*/ 250,
+      /*0x13b4*/ 544,
+      /*0x0434*/ 296,
+      /*0x10f4*/ 514,
+      /*0x1f62*/ 778,
+      /*0x10434*/ 1139,
       -1,
-      /*0x2179*/ 767,
+      /*0x0260*/ 209,
       -1,
-      /*0x0519*/ 427,
-      /*0x2c76*/ 855,
-      /*0x118d6*/ 1222,
-      /*0x03f8*/ 289,
+      /*0xa7a9*/ 1092,
+      /*0x048d*/ 358,
+      /*0x056a*/ 449,
+      /*0x00f2*/ 43,
+      /*0x03b6*/ 251,
+      /*0x1e0d*/ 619,
+      /*0x1e8d*/ 683,
+      /*0x010d*/ 62,
+      /*0x2c8d*/ 910,
+      /*0x2c44*/ 869,
+      /*0x2d03*/ 960,
+      /*0x03b4*/ 249,
+      /*0x10cc8*/ 1211,
+      /*0x1e09*/ 617,
+      /*0x1e89*/ 681,
+      /*0x0109*/ 60,
+      /*0x2c89*/ 908,
       -1,
-      /*0x01d0*/ 142,
-      /*0xff4c*/ 1058,
-      /*0xa793*/ 1033,
-      -1, -1,
-      /*0x217d*/ 771,
-      /*0x01ff*/ 164,
-      /*0x2c56*/ 839,
-      -1, -1,
-      /*0x0577*/ 461,
-      /*0x03ca*/ 269,
+      /*0x025c*/ 208,
+      /*0x1f60*/ 776,
+      -1, -1,
+      /*0x13b0*/ 540,
+      /*0x0430*/ 292,
+      /*0x13de*/ 586,
+      /*0x045e*/ 338,
+      /*0x10430*/ 1135,
+      /*0x1f78*/ 792,
+      /*0x0521*/ 432,
+      /*0x104de*/ 1173,
+      /*0x214e*/ 805,
+      /*0x2c56*/ 887,
       -1,
-      /*0x0507*/ 418,
-      /*0x2d19*/ 934,
-      /*0x049f*/ 366,
-      /*0x01ce*/ 141,
-      /*0x118d4*/ 1220,
+      /*0x01a1*/ 127,
+      /*0x0507*/ 419,
       -1,
-      /*0x1e1f*/ 580,
+      /*0x049f*/ 367,
+      /*0x2177*/ 813,
+      /*0x24de*/ 837,
       -1,
+      /*0x1e1f*/ 628,
+      /*0x0254*/ 203,
       /*0x011f*/ 71,
-      /*0x021f*/ 180,
-      /*0x2c9f*/ 871,
-      -1, -1, -1,
-      /*0x2c54*/ 837,
-      /*0x13de*/ 539,
-      /*0x045e*/ 337,
-      /*0x2177*/ 765,
+      /*0x2c9f*/ 919,
       -1,
-      /*0x2d07*/ 916,
-      /*0x104de*/ 1119,
-      /*0x2c6a*/ 852,
-      -1, -1,
-      /*0x01cc*/ 140,
-      /*0x057f*/ 469,
+      /*0x0513*/ 425,
       -1,
-      /*0xff48*/ 1054,
+      /*0x2d19*/ 982,
+      /*0x0252*/ 201,
+      -1, -1, -1, -1, -1, -1,
       -1,
-      /*0xa695*/ 982,
-      /*0x24de*/ 789,
-      -1, -1,
-      /*0xa799*/ 1035,
+      /*0x00fc*/ 52,
+      /*0x052b*/ 437,
+      /*0x0217*/ 176,
       -1,
-      /*0x10cee*/ 1195,
+      /*0xa783*/ 1076,
+      /*0x16e7b*/ 1313,
+      -1, -1, -1, -1,
+      /*0x1e92b*/ 1327,
+      /*0x0564*/ 443,
+      -1, -1, -1, -1,
+      /*0x2170*/ 806,
+      -1, -1, -1,
+      /*0x2c6a*/ 900,
+      -1, -1, -1,
+      /*0x0562*/ 441,
+      /*0x023c*/ 190,
+      /*0x10cca*/ 1213,
+      /*0x16e7d*/ 1315,
+      /*0x118da*/ 1280,
+      -1, -1, -1,
+      /*0x1f76*/ 790,
       -1, -1,
-      /*0x0517*/ 426,
-      /*0xff58*/ 1070,
-      /*0x2c36*/ 807,
+      /*0x16e7f*/ 1317,
+      /*0x1f74*/ 788,
       -1, -1, -1, -1,
-      /*0x217f*/ 773,
+      /*0xa799*/ 1084,
       -1, -1,
-      /*0x1f70*/ 736,
-      /*0xa693*/ 981,
-      /*0x118ca*/ 1210,
-      /*0xa787*/ 1030,
+      /*0xa68f*/ 1027,
+      -1,
+      /*0x118dc*/ 1282,
+      -1,
+      /*0x118cc*/ 1266,
+      -1, -1, -1, -1, -1, -1,
+      /*0x01da*/ 147,
+      /*0x0578*/ 463,
+      /*0x2d15*/ 978,
+      /*0x118d8*/ 1278,
       -1, -1, -1,
-      /*0x214e*/ 757,
+      /*0x16e7a*/ 1312,
+      -1, -1, -1, -1, -1,
+      /*0xa681*/ 1020,
+      /*0x118d4*/ 1274,
+      -1, -1, -1,
+      /*0x01dc*/ 148,
       -1,
-      /*0x2d17*/ 932,
+      /*0x01cc*/ 140,
+      /*0x118d2*/ 1272,
+      -1, -1, -1, -1, -1,
+      /*0x10cde*/ 1233,
       -1, -1,
-      /*0x2c4a*/ 827,
-      /*0x13be*/ 507,
-      /*0x043e*/ 305,
+      /*0x01d8*/ 146,
       -1,
-      /*0x0566*/ 444,
-      /*0x1043e*/ 1095,
-      /*0x1f76*/ 742,
+      /*0x10de*/ 492,
+      -1, -1, -1, -1, -1, -1,
       -1, -1,
-      /*0x013e*/ 85,
+      /*0x01d4*/ 144,
+      -1,
+      /*0x16e72*/ 1304,
       -1, -1,
-      /*0x118d2*/ 1218,
-      /*0x13ba*/ 503,
-      /*0x043a*/ 301,
-      /*0x01d8*/ 146,
+      /*0x057e*/ 469,
       -1,
-      /*0x1043a*/ 1091,
+      /*0x01d2*/ 143,
       -1,
-      /*0x057a*/ 464,
-      /*0x1f60*/ 728,
-      /*0x013a*/ 83,
-      /*0x2c52*/ 835,
+      /*0x00e8*/ 33,
       -1, -1,
-      /*0x03b4*/ 248,
-      -1, -1, -1,
-      /*0xa797*/ 1034,
-      -1, -1, -1,
-      /*0xa699*/ 984,
-      -1, -1, -1,
-      /*0x10cde*/ 1179,
+      /*0x0517*/ 427,
       -1,
-      /*0x217a*/ 768,
-      /*0x2c30*/ 801,
-      -1, -1, -1, -1, -1, -1,
-      -1, -1, -1,
-      /*0x056c*/ 450,
-      /*0xa687*/ 975,
-      -1, -1,
-      /*0xff56*/ 1068,
-      /*0x0289*/ 228,
+      /*0x2d21*/ 990,
+      -1, -1, -1, -1, -1,
+      /*0x2d07*/ 964,
+      /*0x0576*/ 461,
+      /*0x00f0*/ 41,
+      /*0xff42*/ 1102,
       -1,
-      /*0x1f64*/ 732,
-      -1, -1, -1,
-      /*0x051d*/ 429,
+      /*0x0574*/ 459,
+      /*0x118c8*/ 1262,
       -1,
-      /*0x1f36*/ 716,
+      /*0x2c5a*/ 891,
+      -1, -1,
+      /*0x2d13*/ 976,
+      /*0xff50*/ 1116,
       -1, -1, -1, -1, -1, -1,
-      /*0x1f78*/ 744,
+      -1, -1, -1, -1,
+      /*0x020d*/ 171,
+      /*0x1e93c*/ 1344,
       -1,
-      /*0x01dc*/ 148,
+      /*0x2c5c*/ 893,
       -1,
-      /*0xff54*/ 1066,
+      /*0x2c4c*/ 877,
       -1,
-      /*0x00f1*/ 42,
+      /*0x1f36*/ 764,
+      /*0x0209*/ 169,
       -1, -1, -1,
-      /*0x2d1d*/ 938,
+      /*0x16e7c*/ 1314,
       -1,
-      /*0x0568*/ 446,
+      /*0x1f34*/ 762,
+      /*0x2c58*/ 889,
       -1, -1, -1,
-      /*0x00f5*/ 46,
-      /*0x2c34*/ 805,
+      /*0x1fb1*/ 799,
       -1,
-      /*0xa697*/ 983,
-      /*0x01d6*/ 145,
-      -1, -1,
-      /*0x0570*/ 454,
-      -1, -1, -1, -1, -1, -1,
+      /*0xa7a1*/ 1088,
       -1, -1, -1, -1,
-      /*0x1f74*/ 740,
-      -1, -1,
-      /*0x00fc*/ 52,
+      /*0x2c54*/ 885,
+      /*0xa787*/ 1078,
+      -1, -1, -1, -1, -1,
+      /*0x2c52*/ 883,
+      -1,
+      /*0x021f*/ 180,
       -1, -1,
-      /*0x01d4*/ 144,
-      /*0x0576*/ 460,
-      /*0xa79d*/ 1037,
-      /*0x2170*/ 758,
+      /*0xa793*/ 1081,
+      -1, -1, -1, -1, -1,
+      /*0x1f30*/ 758,
+      -1, -1, -1,
+      /*0x0283*/ 226,
+      -1, -1, -1,
+      /*0x2c76*/ 903,
+      /*0x118ca*/ 1264,
       -1, -1, -1, -1, -1, -1,
-      /*0xff4a*/ 1056,
-      -1, -1,
-      /*0x1f30*/ 710,
+      -1, -1, -1, -1, -1, -1,
+      /*0x2c3c*/ 861,
+      -1, -1, -1, -1, -1, -1,
+      -1, -1, -1, -1, -1, -1,
+      /*0x2c48*/ 873,
+      -1, -1, -1, -1, -1, -1,
+      /*0x00ea*/ 35,
       -1, -1, -1, -1, -1, -1,
       -1,
-      /*0x2176*/ 764,
+      /*0x2178*/ 814,
+      /*0x16e77*/ 1309,
       -1,
-      /*0x1f62*/ 730,
-      -1, -1,
       /*0x01b6*/ 134,
-      -1, -1, -1, -1, -1,
-      /*0xff52*/ 1064,
-      -1, -1, -1, -1, -1, -1,
-      /*0x056a*/ 448,
-      -1, -1, -1, -1, -1,
-      /*0x1fd0*/ 752,
-      -1, -1, -1, -1, -1,
-      /*0x03be*/ 258,
-      /*0x0564*/ 442,
-      -1, -1, -1, -1,
-      /*0x118de*/ 1230,
       -1, -1,
-      /*0x1f34*/ 714,
+      /*0x1fd0*/ 800,
+      /*0x1e936*/ 1338,
       -1, -1,
-      /*0x03ba*/ 254,
-      -1,
-      /*0x0578*/ 462,
+      /*0x01b4*/ 133,
       -1,
-      /*0x2c5e*/ 847,
-      /*0x01d2*/ 143,
-      -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1, -1, -1,
+      /*0x050d*/ 422,
+      /*0x2d17*/ 980,
+      /*0x1e934*/ 1336,
+      /*0x118de*/ 1284,
       -1, -1, -1, -1,
-      /*0x2178*/ 766,
-      /*0x01b0*/ 132,
-      -1, -1, -1, -1, -1, -1,
+      /*0x0509*/ 420,
       -1, -1,
-      /*0x1e936*/ 1252,
-      -1, -1, -1,
-      /*0x0574*/ 458,
+      /*0x16e68*/ 1294,
+      -1, -1, -1, -1,
+      /*0xff4e*/ 1114,
       -1, -1, -1, -1, -1, -1,
+      -1,
+      /*0x16e70*/ 1302,
+      -1, -1, -1,
+      /*0x01b0*/ 132,
+      -1, -1, -1,
+      /*0x1e930*/ 1332,
+      /*0x217e*/ 820,
+      -1,
+      /*0x051f*/ 431,
       -1, -1, -1, -1, -1, -1,
       -1,
-      /*0x2c3e*/ 815,
-      -1, -1, -1, -1, -1,
-      /*0x2174*/ 762,
-      -1, -1, -1, -1, -1,
-      /*0x2c3a*/ 811,
+      /*0x2c4a*/ 875,
       -1,
-      /*0x00f2*/ 43,
-      /*0x0562*/ 440,
+      /*0x00e4*/ 29,
+      -1,
+      /*0xa685*/ 1022,
+      -1,
+      /*0x2176*/ 812,
+      -1,
+      /*0xa797*/ 1083,
+      /*0xff46*/ 1106,
+      /*0x2174*/ 810,
       -1, -1, -1, -1,
-      /*0x01b4*/ 133,
+      /*0x00e2*/ 27,
+      -1,
+      /*0x2c36*/ 855,
       -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1,
-      /*0x050d*/ 421,
+      /*0x2c34*/ 853,
       -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1,
-      /*0x1e930*/ 1246,
       -1, -1, -1, -1, -1, -1,
-      -1,
-      /*0x2d0d*/ 922,
+      -1, -1,
+      /*0x00e0*/ 25,
       -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1, -1,
-      /*0x00fb*/ 51,
       -1,
-      /*0x0509*/ 419,
+      /*0x00f8*/ 48,
+      -1, -1, -1, -1, -1, -1,
+      /*0x2c30*/ 849,
+      /*0xff44*/ 1104,
+      /*0x2c5e*/ 895,
+      -1, -1, -1, -1,
+      /*0x0287*/ 227,
       -1, -1, -1, -1, -1, -1,
-      -1, -1,
-      /*0x00f9*/ 49,
       -1, -1, -1, -1, -1, -1,
-      /*0x056e*/ 452,
+      -1, -1, -1,
+      /*0xff56*/ 1122,
       -1, -1,
-      /*0x2d09*/ 918,
+      /*0xa683*/ 1021,
+      -1, -1, -1, -1, -1, -1,
       -1,
-      /*0x00fd*/ 53,
+      /*0x16e6a*/ 1296,
       -1, -1, -1,
-      /*0x1e934*/ 1250,
-      -1, -1, -1, -1, -1, -1,
+      /*0x00fe*/ 54,
       -1, -1,
-      /*0x1fe0*/ 754,
+      /*0x2d0d*/ 970,
+      -1, -1, -1, -1, -1, -1,
+      -1,
+      /*0x2d09*/ 966,
+      -1, -1, -1, -1,
+      /*0x00f6*/ 47,
+      -1, -1, -1,
+      /*0x00f4*/ 45,
+      -1, -1, -1, -1,
+      /*0xa699*/ 1032,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
+      /*0x2d1f*/ 988,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1,
-      /*0x051f*/ 430,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1,
-      /*0x00ff*/ 55,
-      -1, -1, -1,
-      /*0xa68d*/ 978,
-      -1, -1, -1,
-      /*0x2d1f*/ 940,
+      /*0x16e64*/ 1290,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
+      /*0x16e62*/ 1288,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1,
-      /*0xa689*/ 976,
       -1,
-      /*0x00e6*/ 31,
-      /*0xa79f*/ 1038,
+      /*0xa79f*/ 1087,
+      -1, -1,
+      /*0xa695*/ 1030,
       -1, -1, -1, -1, -1, -1,
+      /*0x16e60*/ 1286,
       -1, -1, -1, -1, -1, -1,
       -1,
-      /*0x00fa*/ 50,
+      /*0x16e78*/ 1310,
+      -1, -1, -1, -1, -1, -1,
+      -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
+      -1, -1, -1, -1, -1, -1,
+      -1, -1, -1,
+      /*0xff5a*/ 1126,
+      -1, -1, -1, -1, -1, -1,
+      -1, -1, -1, -1, -1, -1,
+      -1, -1, -1,
+      /*0xa687*/ 1023,
+      /*0x16e7e*/ 1316,
+      -1, -1,
+      /*0xff4c*/ 1112,
+      -1, -1, -1, -1, -1, -1,
+      /*0xa693*/ 1029,
+      -1, -1,
+      /*0xff58*/ 1124,
       -1, -1,
-      /*0x1fb0*/ 750,
+      /*0x16e76*/ 1308,
+      -1, -1, -1,
+      /*0x16e74*/ 1306,
+      -1, -1, -1,
+      /*0xff54*/ 1120,
+      -1, -1, -1, -1, -1, -1,
+      /*0xff52*/ 1118,
+      -1, -1, -1, -1, -1, -1,
+      -1, -1, -1, -1, -1, -1,
+      -1, -1, -1, -1, -1, -1,
+      -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1,
-      /*0x00ec*/ 37,
-      -1,
-      /*0x1e93e*/ 1260,
+      /*0xff48*/ 1108,
       -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1, -1,
-      /*0x1e93a*/ 1256,
+      -1, -1, -1, -1, -1, -1,
+      -1, -1,
+      /*0x1fe0*/ 802,
+      /*0x0289*/ 229,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1, -1,
-      /*0x00e8*/ 33,
       -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1,
-      /*0x00f0*/ 41,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1,
-      /*0x00f6*/ 47,
+      /*0xa697*/ 1031,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
-      -1,
-      /*0x00e0*/ 25,
+      -1, -1, -1, -1, -1,
+      /*0xff4a*/ 1110,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1, -1,
-      /*0x00ea*/ 35,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
-      /*0x00e4*/ 29,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
-      /*0x00f8*/ 48,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
-      -1, -1, -1,
-      /*0x00f4*/ 45,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1,
-      /*0x00e2*/ 27,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
+      -1, -1, -1, -1,
+      /*0xa68d*/ 1026,
       -1, -1, -1, -1, -1, -1,
+      -1,
+      /*0xa689*/ 1024,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1,
-      -1, -1, -1, -1,
-      /*0x00ee*/ 39
+      -1,
+      /*0x1fb0*/ 798
     };
 
   if (code <= MAX_CODE_VALUE && code >= MIN_CODE_VALUE)
     {
-      register int key = onigenc_unicode_CaseUnfold_11_hash(code);
+      register unsigned int key = onigenc_unicode_CaseUnfold_11_hash(code);
 
-      if (key <= MAX_HASH_VALUE && key >= 0)
+      if (key <= MAX_HASH_VALUE)
         {
           register short s = wordlist[key];
 
@@ -6679,7 +7051,7 @@ static const CaseUnfold_12_Type CaseUnfold_12_Table[] = {
   {{0x0069, 0x0307}, {1, {0x0130}}},
 };
 
-/* C code produced by gperf version 3.0.4 */
+/* ANSI-C code produced by gperf version 3.1 */
 /* Command-line: gperf -7 -k1,2,3,4,5,6 -F,-1 -c -j1 -i1 -t -T -E -C -H onigenc_unicode_CaseUnfold_12_hash -N onigenc_unicode_CaseUnfold_12_lookup -n  */
 
 /* maximum key range = 71, duplicates = 0 */
@@ -6714,12 +7086,6 @@ onigenc_unicode_CaseUnfold_12_hash(const OnigCodePoint *codes)
   return asso_values[bits_at(codes, 5)] + asso_values[bits_at(codes, 4)] + asso_values[bits_at(codes, 3)] + asso_values[bits_at(codes, 2)] + asso_values[bits_at(codes, 1)] + asso_values[bits_at(codes, 0)];
 }
 
-#ifdef __GNUC__
-__inline
-#if defined __GNUC_STDC_INLINE__ || defined __GNUC_GNU_INLINE__
-__attribute__ ((__gnu_inline__))
-#endif
-#endif
 static const CodePointList2 *
 onigenc_unicode_CaseUnfold_12_lookup(const OnigCodePoint *codes)
 {
@@ -6804,9 +7170,9 @@ onigenc_unicode_CaseUnfold_12_lookup(const OnigCodePoint *codes)
   if (codes[0] <= MAX_CODE_VALUE && codes[0] >= MIN_CODE_VALUE &&
       codes[1] <= MAX_CODE_VALUE && codes[1] >= MIN_CODE_VALUE)
     {
-      register int key = onigenc_unicode_CaseUnfold_12_hash(codes);
+      register unsigned int key = onigenc_unicode_CaseUnfold_12_hash(codes);
 
-      if (key <= MAX_HASH_VALUE && key >= 0)
+      if (key <= MAX_HASH_VALUE)
         {
           register short s = wordlist[key];
 
@@ -6835,7 +7201,7 @@ static const CaseUnfold_13_Type CaseUnfold_13_Table[] = {
   {{0x03c9, 0x0342, 0x03b9}, {1, {0x1ff7}}},
 };
 
-/* C code produced by gperf version 3.0.4 */
+/* ANSI-C code produced by gperf version 3.1 */
 /* Command-line: gperf -7 -k1,2,3,4,5,6,7,8,9 -F,-1 -c -j1 -i1 -t -T -E -C -H onigenc_unicode_CaseUnfold_13_hash -N onigenc_unicode_CaseUnfold_13_lookup -n  */
 
 /* maximum key range = 20, duplicates = 0 */
@@ -6870,12 +7236,6 @@ onigenc_unicode_CaseUnfold_13_hash(const OnigCodePoint *codes)
   return asso_values[bits_at(codes, 8)] + asso_values[bits_at(codes, 7)] + asso_values[bits_at(codes, 6)] + asso_values[bits_at(codes, 5)] + asso_values[bits_at(codes, 4)] + asso_values[bits_at(codes, 3)] + asso_values[bits_at(codes, 2)] + asso_values[bits_at(codes, 1)] + asso_values[bits_at(codes, 0)];
 }
 
-#ifdef __GNUC__
-__inline
-#if defined __GNUC_STDC_INLINE__ || defined __GNUC_GNU_INLINE__
-__attribute__ ((__gnu_inline__))
-#endif
-#endif
 static const CodePointList2 *
 onigenc_unicode_CaseUnfold_13_lookup(const OnigCodePoint *codes)
 {
@@ -6918,9 +7278,9 @@ onigenc_unicode_CaseUnfold_13_lookup(const OnigCodePoint *codes)
       codes[1] <= MAX_CODE_VALUE && codes[1] >= MIN_CODE_VALUE &&
       codes[2] <= MAX_CODE_VALUE && codes[2] >= MIN_CODE_VALUE)
     {
-      register int key = onigenc_unicode_CaseUnfold_13_hash(codes);
+      register unsigned int key = onigenc_unicode_CaseUnfold_13_hash(codes);
 
-      if (key <= MAX_HASH_VALUE && key >= 0)
+      if (key <= MAX_HASH_VALUE)
         {
           register short s = wordlist[key];
 
diff --git a/lib/onigmo/enc/unicode/name2ctype.h b/lib/onigmo/enc/unicode/name2ctype.h
index 2ee162fa5..394057973 100644
--- a/lib/onigmo/enc/unicode/name2ctype.h
+++ b/lib/onigmo/enc/unicode/name2ctype.h
@@ -1,4 +1,4 @@
-/* C code produced by gperf version 3.0.4 */
+/* ANSI-C code produced by gperf version 3.1 */
 /* Command-line: gperf -7 -c -j1 -i1 -t -C -P -T -H uniname2ctype_hash -Q uniname2ctype_pool -N uniname2ctype_p  */
 #ifndef USE_UNICODE_PROPERTIES
 /* Computed positions: -k'1,3' */
@@ -30,7 +30,7 @@
       && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
       && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
 /* The character set is not based on ISO-646.  */
-error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gnu-gperf@gnu.org>."
+#error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
 #endif
 
 
@@ -43,7 +43,7 @@ static const OnigCodePoint CR_NEWLINE[] = {
 
 /* 'Alpha': [[:Alpha:]] */
 static const OnigCodePoint CR_Alpha[] = {
-	644,
+	679,
 	0x0041, 0x005a,
 	0x0061, 0x007a,
 	0x00aa, 0x00aa,
@@ -70,14 +70,14 @@ static const OnigCodePoint CR_Alpha[] = {
 	0x048a, 0x052f,
 	0x0531, 0x0556,
 	0x0559, 0x0559,
-	0x0561, 0x0587,
+	0x0560, 0x0588,
 	0x05b0, 0x05bd,
 	0x05bf, 0x05bf,
 	0x05c1, 0x05c2,
 	0x05c4, 0x05c5,
 	0x05c7, 0x05c7,
 	0x05d0, 0x05ea,
-	0x05f0, 0x05f2,
+	0x05ef, 0x05f2,
 	0x0610, 0x061a,
 	0x0620, 0x0657,
 	0x0659, 0x065f,
@@ -95,6 +95,7 @@ static const OnigCodePoint CR_Alpha[] = {
 	0x0800, 0x0817,
 	0x081a, 0x082c,
 	0x0840, 0x0858,
+	0x0860, 0x086a,
 	0x08a0, 0x08b4,
 	0x08b6, 0x08bd,
 	0x08d4, 0x08df,
@@ -118,6 +119,7 @@ static const OnigCodePoint CR_Alpha[] = {
 	0x09dc, 0x09dd,
 	0x09df, 0x09e3,
 	0x09f0, 0x09f1,
+	0x09fc, 0x09fc,
 	0x0a01, 0x0a03,
 	0x0a05, 0x0a0a,
 	0x0a0f, 0x0a10,
@@ -145,7 +147,7 @@ static const OnigCodePoint CR_Alpha[] = {
 	0x0acb, 0x0acc,
 	0x0ad0, 0x0ad0,
 	0x0ae0, 0x0ae3,
-	0x0af9, 0x0af9,
+	0x0af9, 0x0afc,
 	0x0b01, 0x0b03,
 	0x0b05, 0x0b0c,
 	0x0b0f, 0x0b10,
@@ -199,7 +201,7 @@ static const OnigCodePoint CR_Alpha[] = {
 	0x0cde, 0x0cde,
 	0x0ce0, 0x0ce3,
 	0x0cf1, 0x0cf2,
-	0x0d01, 0x0d03,
+	0x0d00, 0x0d03,
 	0x0d05, 0x0d0c,
 	0x0d0e, 0x0d10,
 	0x0d12, 0x0d3a,
@@ -225,16 +227,10 @@ static const OnigCodePoint CR_Alpha[] = {
 	0x0e4d, 0x0e4d,
 	0x0e81, 0x0e82,
 	0x0e84, 0x0e84,
-	0x0e87, 0x0e88,
-	0x0e8a, 0x0e8a,
-	0x0e8d, 0x0e8d,
-	0x0e94, 0x0e97,
-	0x0e99, 0x0e9f,
-	0x0ea1, 0x0ea3,
+	0x0e86, 0x0e8a,
+	0x0e8c, 0x0ea3,
 	0x0ea5, 0x0ea5,
-	0x0ea7, 0x0ea7,
-	0x0eaa, 0x0eab,
-	0x0ead, 0x0eb9,
+	0x0ea7, 0x0eb9,
 	0x0ebb, 0x0ebd,
 	0x0ec0, 0x0ec4,
 	0x0ec6, 0x0ec6,
@@ -249,11 +245,8 @@ static const OnigCodePoint CR_Alpha[] = {
 	0x1000, 0x1036,
 	0x1038, 0x1038,
 	0x103b, 0x103f,
-	0x1050, 0x1062,
-	0x1065, 0x1068,
-	0x106e, 0x1086,
-	0x108e, 0x108e,
-	0x109c, 0x109d,
+	0x1050, 0x108f,
+	0x109a, 0x109d,
 	0x10a0, 0x10c5,
 	0x10c7, 0x10c7,
 	0x10cd, 0x10cd,
@@ -274,7 +267,6 @@ static const OnigCodePoint CR_Alpha[] = {
 	0x12d8, 0x1310,
 	0x1312, 0x1315,
 	0x1318, 0x135a,
-	0x135f, 0x135f,
 	0x1380, 0x138f,
 	0x13a0, 0x13f5,
 	0x13f8, 0x13fd,
@@ -294,7 +286,7 @@ static const OnigCodePoint CR_Alpha[] = {
 	0x17b6, 0x17c8,
 	0x17d7, 0x17d7,
 	0x17dc, 0x17dc,
-	0x1820, 0x1877,
+	0x1820, 0x1878,
 	0x1880, 0x18aa,
 	0x18b0, 0x18f5,
 	0x1900, 0x191e,
@@ -315,13 +307,16 @@ static const OnigCodePoint CR_Alpha[] = {
 	0x1bac, 0x1baf,
 	0x1bba, 0x1be5,
 	0x1be7, 0x1bf1,
-	0x1c00, 0x1c35,
+	0x1c00, 0x1c36,
 	0x1c4d, 0x1c4f,
 	0x1c5a, 0x1c7d,
 	0x1c80, 0x1c88,
+	0x1c90, 0x1cba,
+	0x1cbd, 0x1cbf,
 	0x1ce9, 0x1cec,
 	0x1cee, 0x1cf3,
 	0x1cf5, 0x1cf6,
+	0x1cfa, 0x1cfa,
 	0x1d00, 0x1dbf,
 	0x1de7, 0x1df4,
 	0x1e00, 0x1f15,
@@ -390,12 +385,12 @@ static const OnigCodePoint CR_Alpha[] = {
 	0x309d, 0x309f,
 	0x30a1, 0x30fa,
 	0x30fc, 0x30ff,
-	0x3105, 0x312d,
+	0x3105, 0x312f,
 	0x3131, 0x318e,
 	0x31a0, 0x31ba,
 	0x31f0, 0x31ff,
 	0x3400, 0x4db5,
-	0x4e00, 0x9fd5,
+	0x4e00, 0x9fef,
 	0xa000, 0xa48c,
 	0xa4d0, 0xa4fd,
 	0xa500, 0xa60c,
@@ -406,32 +401,28 @@ static const OnigCodePoint CR_Alpha[] = {
 	0xa67f, 0xa6ef,
 	0xa717, 0xa71f,
 	0xa722, 0xa788,
-	0xa78b, 0xa7ae,
-	0xa7b0, 0xa7b7,
-	0xa7f7, 0xa801,
-	0xa803, 0xa805,
-	0xa807, 0xa80a,
-	0xa80c, 0xa827,
+	0xa78b, 0xa7bf,
+	0xa7c2, 0xa7c6,
+	0xa7f7, 0xa805,
+	0xa807, 0xa827,
 	0xa840, 0xa873,
 	0xa880, 0xa8c3,
 	0xa8c5, 0xa8c5,
 	0xa8f2, 0xa8f7,
 	0xa8fb, 0xa8fb,
-	0xa8fd, 0xa8fd,
+	0xa8fd, 0xa8ff,
 	0xa90a, 0xa92a,
 	0xa930, 0xa952,
 	0xa960, 0xa97c,
 	0xa980, 0xa9b2,
 	0xa9b4, 0xa9bf,
 	0xa9cf, 0xa9cf,
-	0xa9e0, 0xa9e4,
-	0xa9e6, 0xa9ef,
+	0xa9e0, 0xa9ef,
 	0xa9fa, 0xa9fe,
 	0xaa00, 0xaa36,
 	0xaa40, 0xaa4d,
 	0xaa60, 0xaa76,
-	0xaa7a, 0xaa7a,
-	0xaa7e, 0xaabe,
+	0xaa7a, 0xaabe,
 	0xaac0, 0xaac0,
 	0xaac2, 0xaac2,
 	0xaadb, 0xaadd,
@@ -443,7 +434,7 @@ static const OnigCodePoint CR_Alpha[] = {
 	0xab20, 0xab26,
 	0xab28, 0xab2e,
 	0xab30, 0xab5a,
-	0xab5c, 0xab65,
+	0xab5c, 0xab67,
 	0xab70, 0xabea,
 	0xac00, 0xd7a3,
 	0xd7b0, 0xd7c6,
@@ -483,7 +474,7 @@ static const OnigCodePoint CR_Alpha[] = {
 	0x10280, 0x1029c,
 	0x102a0, 0x102d0,
 	0x10300, 0x1031f,
-	0x10330, 0x1034a,
+	0x1032d, 0x1034a,
 	0x10350, 0x1037a,
 	0x10380, 0x1039d,
 	0x103a0, 0x103c3,
@@ -515,7 +506,7 @@ static const OnigCodePoint CR_Alpha[] = {
 	0x10a05, 0x10a06,
 	0x10a0c, 0x10a13,
 	0x10a15, 0x10a17,
-	0x10a19, 0x10a33,
+	0x10a19, 0x10a35,
 	0x10a60, 0x10a7c,
 	0x10a80, 0x10a9c,
 	0x10ac0, 0x10ac7,
@@ -527,10 +518,16 @@ static const OnigCodePoint CR_Alpha[] = {
 	0x10c00, 0x10c48,
 	0x10c80, 0x10cb2,
 	0x10cc0, 0x10cf2,
+	0x10d00, 0x10d27,
+	0x10f00, 0x10f1c,
+	0x10f27, 0x10f27,
+	0x10f30, 0x10f45,
+	0x10fe0, 0x10ff6,
 	0x11000, 0x11045,
 	0x11082, 0x110b8,
 	0x110d0, 0x110e8,
 	0x11100, 0x11132,
+	0x11144, 0x11146,
 	0x11150, 0x11172,
 	0x11176, 0x11176,
 	0x11180, 0x111bf,
@@ -563,6 +560,7 @@ static const OnigCodePoint CR_Alpha[] = {
 	0x11400, 0x11441,
 	0x11443, 0x11445,
 	0x11447, 0x1144a,
+	0x1145f, 0x1145f,
 	0x11480, 0x114c1,
 	0x114c4, 0x114c5,
 	0x114c7, 0x114c7,
@@ -573,10 +571,21 @@ static const OnigCodePoint CR_Alpha[] = {
 	0x11640, 0x11640,
 	0x11644, 0x11644,
 	0x11680, 0x116b5,
-	0x11700, 0x11719,
+	0x116b8, 0x116b8,
+	0x11700, 0x1171a,
 	0x1171d, 0x1172a,
+	0x11800, 0x11838,
 	0x118a0, 0x118df,
 	0x118ff, 0x118ff,
+	0x119a0, 0x119a7,
+	0x119aa, 0x119d7,
+	0x119da, 0x119df,
+	0x119e1, 0x119e1,
+	0x119e3, 0x119e4,
+	0x11a00, 0x11a32,
+	0x11a35, 0x11a3e,
+	0x11a50, 0x11a97,
+	0x11a9d, 0x11a9d,
 	0x11ac0, 0x11af8,
 	0x11c00, 0x11c08,
 	0x11c0a, 0x11c36,
@@ -585,6 +594,21 @@ static const OnigCodePoint CR_Alpha[] = {
 	0x11c72, 0x11c8f,
 	0x11c92, 0x11ca7,
 	0x11ca9, 0x11cb6,
+	0x11d00, 0x11d06,
+	0x11d08, 0x11d09,
+	0x11d0b, 0x11d36,
+	0x11d3a, 0x11d3a,
+	0x11d3c, 0x11d3d,
+	0x11d3f, 0x11d41,
+	0x11d43, 0x11d43,
+	0x11d46, 0x11d47,
+	0x11d60, 0x11d65,
+	0x11d67, 0x11d68,
+	0x11d6a, 0x11d8e,
+	0x11d90, 0x11d91,
+	0x11d93, 0x11d96,
+	0x11d98, 0x11d98,
+	0x11ee0, 0x11ef6,
 	0x12000, 0x12399,
 	0x12400, 0x1246e,
 	0x12480, 0x12543,
@@ -593,17 +617,22 @@ static const OnigCodePoint CR_Alpha[] = {
 	0x16800, 0x16a38,
 	0x16a40, 0x16a5e,
 	0x16ad0, 0x16aed,
-	0x16b00, 0x16b36,
+	0x16b00, 0x16b2f,
 	0x16b40, 0x16b43,
 	0x16b63, 0x16b77,
 	0x16b7d, 0x16b8f,
-	0x16f00, 0x16f44,
-	0x16f50, 0x16f7e,
-	0x16f93, 0x16f9f,
-	0x16fe0, 0x16fe0,
-	0x17000, 0x187ec,
+	0x16e40, 0x16e7f,
+	0x16f00, 0x16f4a,
+	0x16f4f, 0x16f87,
+	0x16f8f, 0x16f9f,
+	0x16fe0, 0x16fe1,
+	0x16fe3, 0x16fe3,
+	0x17000, 0x187f7,
 	0x18800, 0x18af2,
-	0x1b000, 0x1b001,
+	0x1b000, 0x1b11e,
+	0x1b150, 0x1b152,
+	0x1b164, 0x1b167,
+	0x1b170, 0x1b2fb,
 	0x1bc00, 0x1bc6a,
 	0x1bc70, 0x1bc7c,
 	0x1bc80, 0x1bc88,
@@ -644,9 +673,14 @@ static const OnigCodePoint CR_Alpha[] = {
 	0x1e01b, 0x1e021,
 	0x1e023, 0x1e024,
 	0x1e026, 0x1e02a,
+	0x1e100, 0x1e12c,
+	0x1e137, 0x1e13d,
+	0x1e14e, 0x1e14e,
+	0x1e2c0, 0x1e2eb,
 	0x1e800, 0x1e8c4,
 	0x1e900, 0x1e943,
 	0x1e947, 0x1e947,
+	0x1e94b, 0x1e94b,
 	0x1ee00, 0x1ee03,
 	0x1ee05, 0x1ee1f,
 	0x1ee21, 0x1ee22,
@@ -687,6 +721,7 @@ static const OnigCodePoint CR_Alpha[] = {
 	0x2a700, 0x2b734,
 	0x2b740, 0x2b81d,
 	0x2b820, 0x2cea1,
+	0x2ceb0, 0x2ebe0,
 	0x2f800, 0x2fa1d,
 }; /* CR_Alpha */
 
@@ -712,7 +747,7 @@ static const OnigCodePoint CR_Cntrl[] = {
 
 /* 'Digit': [[:Digit:]] */
 static const OnigCodePoint CR_Digit[] = {
-	54,
+	59,
 	0x0030, 0x0039,
 	0x0660, 0x0669,
 	0x06f0, 0x06f9,
@@ -751,6 +786,7 @@ static const OnigCodePoint CR_Digit[] = {
 	0xabf0, 0xabf9,
 	0xff10, 0xff19,
 	0x104a0, 0x104a9,
+	0x10d30, 0x10d39,
 	0x11066, 0x1106f,
 	0x110f0, 0x110f9,
 	0x11136, 0x1113f,
@@ -763,15 +799,19 @@ static const OnigCodePoint CR_Digit[] = {
 	0x11730, 0x11739,
 	0x118e0, 0x118e9,
 	0x11c50, 0x11c59,
+	0x11d50, 0x11d59,
+	0x11da0, 0x11da9,
 	0x16a60, 0x16a69,
 	0x16b50, 0x16b59,
 	0x1d7ce, 0x1d7ff,
+	0x1e140, 0x1e149,
+	0x1e2f0, 0x1e2f9,
 	0x1e950, 0x1e959,
 }; /* CR_Digit */
 
 /* 'Graph': [[:Graph:]] */
 static const OnigCodePoint CR_Graph[] = {
-	643,
+	671,
 	0x0021, 0x007e,
 	0x00a1, 0x0377,
 	0x037a, 0x037f,
@@ -780,25 +820,24 @@ static const OnigCodePoint CR_Graph[] = {
 	0x038e, 0x03a1,
 	0x03a3, 0x052f,
 	0x0531, 0x0556,
-	0x0559, 0x055f,
-	0x0561, 0x0587,
-	0x0589, 0x058a,
+	0x0559, 0x058a,
 	0x058d, 0x058f,
 	0x0591, 0x05c7,
 	0x05d0, 0x05ea,
-	0x05f0, 0x05f4,
+	0x05ef, 0x05f4,
 	0x0600, 0x061c,
 	0x061e, 0x070d,
 	0x070f, 0x074a,
 	0x074d, 0x07b1,
 	0x07c0, 0x07fa,
-	0x0800, 0x082d,
+	0x07fd, 0x082d,
 	0x0830, 0x083e,
 	0x0840, 0x085b,
 	0x085e, 0x085e,
+	0x0860, 0x086a,
 	0x08a0, 0x08b4,
 	0x08b6, 0x08bd,
-	0x08d4, 0x0983,
+	0x08d3, 0x0983,
 	0x0985, 0x098c,
 	0x098f, 0x0990,
 	0x0993, 0x09a8,
@@ -811,7 +850,7 @@ static const OnigCodePoint CR_Graph[] = {
 	0x09d7, 0x09d7,
 	0x09dc, 0x09dd,
 	0x09df, 0x09e3,
-	0x09e6, 0x09fb,
+	0x09e6, 0x09fe,
 	0x0a01, 0x0a03,
 	0x0a05, 0x0a0a,
 	0x0a0f, 0x0a10,
@@ -827,7 +866,7 @@ static const OnigCodePoint CR_Graph[] = {
 	0x0a51, 0x0a51,
 	0x0a59, 0x0a5c,
 	0x0a5e, 0x0a5e,
-	0x0a66, 0x0a75,
+	0x0a66, 0x0a76,
 	0x0a81, 0x0a83,
 	0x0a85, 0x0a8d,
 	0x0a8f, 0x0a91,
@@ -841,7 +880,7 @@ static const OnigCodePoint CR_Graph[] = {
 	0x0ad0, 0x0ad0,
 	0x0ae0, 0x0ae3,
 	0x0ae6, 0x0af1,
-	0x0af9, 0x0af9,
+	0x0af9, 0x0aff,
 	0x0b01, 0x0b03,
 	0x0b05, 0x0b0c,
 	0x0b0f, 0x0b10,
@@ -872,8 +911,7 @@ static const OnigCodePoint CR_Graph[] = {
 	0x0bd0, 0x0bd0,
 	0x0bd7, 0x0bd7,
 	0x0be6, 0x0bfa,
-	0x0c00, 0x0c03,
-	0x0c05, 0x0c0c,
+	0x0c00, 0x0c0c,
 	0x0c0e, 0x0c10,
 	0x0c12, 0x0c28,
 	0x0c2a, 0x0c39,
@@ -884,8 +922,7 @@ static const OnigCodePoint CR_Graph[] = {
 	0x0c58, 0x0c5a,
 	0x0c60, 0x0c63,
 	0x0c66, 0x0c6f,
-	0x0c78, 0x0c83,
-	0x0c85, 0x0c8c,
+	0x0c77, 0x0c8c,
 	0x0c8e, 0x0c90,
 	0x0c92, 0x0ca8,
 	0x0caa, 0x0cb3,
@@ -898,11 +935,10 @@ static const OnigCodePoint CR_Graph[] = {
 	0x0ce0, 0x0ce3,
 	0x0ce6, 0x0cef,
 	0x0cf1, 0x0cf2,
-	0x0d01, 0x0d03,
+	0x0d00, 0x0d03,
 	0x0d05, 0x0d0c,
 	0x0d0e, 0x0d10,
-	0x0d12, 0x0d3a,
-	0x0d3d, 0x0d44,
+	0x0d12, 0x0d44,
 	0x0d46, 0x0d48,
 	0x0d4a, 0x0d4f,
 	0x0d54, 0x0d63,
@@ -923,17 +959,10 @@ static const OnigCodePoint CR_Graph[] = {
 	0x0e3f, 0x0e5b,
 	0x0e81, 0x0e82,
 	0x0e84, 0x0e84,
-	0x0e87, 0x0e88,
-	0x0e8a, 0x0e8a,
-	0x0e8d, 0x0e8d,
-	0x0e94, 0x0e97,
-	0x0e99, 0x0e9f,
-	0x0ea1, 0x0ea3,
+	0x0e86, 0x0e8a,
+	0x0e8c, 0x0ea3,
 	0x0ea5, 0x0ea5,
-	0x0ea7, 0x0ea7,
-	0x0eaa, 0x0eab,
-	0x0ead, 0x0eb9,
-	0x0ebb, 0x0ebd,
+	0x0ea7, 0x0ebd,
 	0x0ec0, 0x0ec4,
 	0x0ec6, 0x0ec6,
 	0x0ec8, 0x0ecd,
@@ -983,7 +1012,7 @@ static const OnigCodePoint CR_Graph[] = {
 	0x17f0, 0x17f9,
 	0x1800, 0x180e,
 	0x1810, 0x1819,
-	0x1820, 0x1877,
+	0x1820, 0x1878,
 	0x1880, 0x18aa,
 	0x18b0, 0x18f5,
 	0x1900, 0x191e,
@@ -1008,10 +1037,10 @@ static const OnigCodePoint CR_Graph[] = {
 	0x1bfc, 0x1c37,
 	0x1c3b, 0x1c49,
 	0x1c4d, 0x1c88,
-	0x1cc0, 0x1cc7,
-	0x1cd0, 0x1cf6,
-	0x1cf8, 0x1cf9,
-	0x1d00, 0x1df5,
+	0x1c90, 0x1cba,
+	0x1cbd, 0x1cc7,
+	0x1cd0, 0x1cfa,
+	0x1d00, 0x1df9,
 	0x1dfb, 0x1f15,
 	0x1f18, 0x1f1d,
 	0x1f20, 0x1f45,
@@ -1035,19 +1064,14 @@ static const OnigCodePoint CR_Graph[] = {
 	0x2066, 0x2071,
 	0x2074, 0x208e,
 	0x2090, 0x209c,
-	0x20a0, 0x20be,
+	0x20a0, 0x20bf,
 	0x20d0, 0x20f0,
 	0x2100, 0x218b,
-	0x2190, 0x23fe,
-	0x2400, 0x2426,
+	0x2190, 0x2426,
 	0x2440, 0x244a,
 	0x2460, 0x2b73,
 	0x2b76, 0x2b95,
-	0x2b98, 0x2bb9,
-	0x2bbd, 0x2bc8,
-	0x2bca, 0x2bd1,
-	0x2bec, 0x2bef,
-	0x2c00, 0x2c2e,
+	0x2b98, 0x2c2e,
 	0x2c30, 0x2c5e,
 	0x2c60, 0x2cf3,
 	0x2cf9, 0x2d25,
@@ -1064,7 +1088,7 @@ static const OnigCodePoint CR_Graph[] = {
 	0x2dc8, 0x2dce,
 	0x2dd0, 0x2dd6,
 	0x2dd8, 0x2dde,
-	0x2de0, 0x2e44,
+	0x2de0, 0x2e4f,
 	0x2e80, 0x2e99,
 	0x2e9b, 0x2ef3,
 	0x2f00, 0x2fd5,
@@ -1072,27 +1096,25 @@ static const OnigCodePoint CR_Graph[] = {
 	0x3001, 0x303f,
 	0x3041, 0x3096,
 	0x3099, 0x30ff,
-	0x3105, 0x312d,
+	0x3105, 0x312f,
 	0x3131, 0x318e,
 	0x3190, 0x31ba,
 	0x31c0, 0x31e3,
 	0x31f0, 0x321e,
-	0x3220, 0x32fe,
-	0x3300, 0x4db5,
-	0x4dc0, 0x9fd5,
+	0x3220, 0x4db5,
+	0x4dc0, 0x9fef,
 	0xa000, 0xa48c,
 	0xa490, 0xa4c6,
 	0xa4d0, 0xa62b,
 	0xa640, 0xa6f7,
-	0xa700, 0xa7ae,
-	0xa7b0, 0xa7b7,
+	0xa700, 0xa7bf,
+	0xa7c2, 0xa7c6,
 	0xa7f7, 0xa82b,
 	0xa830, 0xa839,
 	0xa840, 0xa877,
 	0xa880, 0xa8c5,
 	0xa8ce, 0xa8d9,
-	0xa8e0, 0xa8fd,
-	0xa900, 0xa953,
+	0xa8e0, 0xa953,
 	0xa95f, 0xa97c,
 	0xa980, 0xa9cd,
 	0xa9cf, 0xa9d9,
@@ -1107,7 +1129,7 @@ static const OnigCodePoint CR_Graph[] = {
 	0xab11, 0xab16,
 	0xab20, 0xab26,
 	0xab28, 0xab2e,
-	0xab30, 0xab65,
+	0xab30, 0xab67,
 	0xab70, 0xabed,
 	0xabf0, 0xabf9,
 	0xac00, 0xd7a3,
@@ -1159,7 +1181,7 @@ static const OnigCodePoint CR_Graph[] = {
 	0x102a0, 0x102d0,
 	0x102e0, 0x102fb,
 	0x10300, 0x10323,
-	0x10330, 0x1034a,
+	0x1032d, 0x1034a,
 	0x10350, 0x1037a,
 	0x10380, 0x1039d,
 	0x1039f, 0x103c3,
@@ -1193,9 +1215,9 @@ static const OnigCodePoint CR_Graph[] = {
 	0x10a05, 0x10a06,
 	0x10a0c, 0x10a13,
 	0x10a15, 0x10a17,
-	0x10a19, 0x10a33,
+	0x10a19, 0x10a35,
 	0x10a38, 0x10a3a,
-	0x10a3f, 0x10a47,
+	0x10a3f, 0x10a48,
 	0x10a50, 0x10a58,
 	0x10a60, 0x10a9f,
 	0x10ac0, 0x10ae6,
@@ -1209,15 +1231,20 @@ static const OnigCodePoint CR_Graph[] = {
 	0x10c00, 0x10c48,
 	0x10c80, 0x10cb2,
 	0x10cc0, 0x10cf2,
-	0x10cfa, 0x10cff,
+	0x10cfa, 0x10d27,
+	0x10d30, 0x10d39,
 	0x10e60, 0x10e7e,
+	0x10f00, 0x10f27,
+	0x10f30, 0x10f59,
+	0x10fe0, 0x10ff6,
 	0x11000, 0x1104d,
 	0x11052, 0x1106f,
 	0x1107f, 0x110c1,
+	0x110cd, 0x110cd,
 	0x110d0, 0x110e8,
 	0x110f0, 0x110f9,
 	0x11100, 0x11134,
-	0x11136, 0x11143,
+	0x11136, 0x11146,
 	0x11150, 0x11176,
 	0x11180, 0x111cd,
 	0x111d0, 0x111df,
@@ -1238,7 +1265,7 @@ static const OnigCodePoint CR_Graph[] = {
 	0x1132a, 0x11330,
 	0x11332, 0x11333,
 	0x11335, 0x11339,
-	0x1133c, 0x11344,
+	0x1133b, 0x11344,
 	0x11347, 0x11348,
 	0x1134b, 0x1134d,
 	0x11350, 0x11350,
@@ -1248,7 +1275,7 @@ static const OnigCodePoint CR_Graph[] = {
 	0x11370, 0x11374,
 	0x11400, 0x11459,
 	0x1145b, 0x1145b,
-	0x1145d, 0x1145d,
+	0x1145d, 0x1145f,
 	0x11480, 0x114c7,
 	0x114d0, 0x114d9,
 	0x11580, 0x115b5,
@@ -1256,13 +1283,19 @@ static const OnigCodePoint CR_Graph[] = {
 	0x11600, 0x11644,
 	0x11650, 0x11659,
 	0x11660, 0x1166c,
-	0x11680, 0x116b7,
+	0x11680, 0x116b8,
 	0x116c0, 0x116c9,
-	0x11700, 0x11719,
+	0x11700, 0x1171a,
 	0x1171d, 0x1172b,
 	0x11730, 0x1173f,
+	0x11800, 0x1183b,
 	0x118a0, 0x118f2,
 	0x118ff, 0x118ff,
+	0x119a0, 0x119a7,
+	0x119aa, 0x119d7,
+	0x119da, 0x119e4,
+	0x11a00, 0x11a47,
+	0x11a50, 0x11aa2,
 	0x11ac0, 0x11af8,
 	0x11c00, 0x11c08,
 	0x11c0a, 0x11c36,
@@ -1271,11 +1304,27 @@ static const OnigCodePoint CR_Graph[] = {
 	0x11c70, 0x11c8f,
 	0x11c92, 0x11ca7,
 	0x11ca9, 0x11cb6,
-	0x12000, 0x12399,
+	0x11d00, 0x11d06,
+	0x11d08, 0x11d09,
+	0x11d0b, 0x11d36,
+	0x11d3a, 0x11d3a,
+	0x11d3c, 0x11d3d,
+	0x11d3f, 0x11d47,
+	0x11d50, 0x11d59,
+	0x11d60, 0x11d65,
+	0x11d67, 0x11d68,
+	0x11d6a, 0x11d8e,
+	0x11d90, 0x11d91,
+	0x11d93, 0x11d98,
+	0x11da0, 0x11da9,
+	0x11ee0, 0x11ef8,
+	0x11fc0, 0x11ff1,
+	0x11fff, 0x12399,
 	0x12400, 0x1246e,
 	0x12470, 0x12474,
 	0x12480, 0x12543,
 	0x13000, 0x1342e,
+	0x13430, 0x13438,
 	0x14400, 0x14646,
 	0x16800, 0x16a38,
 	0x16a40, 0x16a5e,
@@ -1288,13 +1337,17 @@ static const OnigCodePoint CR_Graph[] = {
 	0x16b5b, 0x16b61,
 	0x16b63, 0x16b77,
 	0x16b7d, 0x16b8f,
-	0x16f00, 0x16f44,
-	0x16f50, 0x16f7e,
+	0x16e40, 0x16e9a,
+	0x16f00, 0x16f4a,
+	0x16f4f, 0x16f87,
 	0x16f8f, 0x16f9f,
-	0x16fe0, 0x16fe0,
-	0x17000, 0x187ec,
+	0x16fe0, 0x16fe3,
+	0x17000, 0x187f7,
 	0x18800, 0x18af2,
-	0x1b000, 0x1b001,
+	0x1b000, 0x1b11e,
+	0x1b150, 0x1b152,
+	0x1b164, 0x1b167,
+	0x1b170, 0x1b2fb,
 	0x1bc00, 0x1bc6a,
 	0x1bc70, 0x1bc7c,
 	0x1bc80, 0x1bc88,
@@ -1304,8 +1357,9 @@ static const OnigCodePoint CR_Graph[] = {
 	0x1d100, 0x1d126,
 	0x1d129, 0x1d1e8,
 	0x1d200, 0x1d245,
+	0x1d2e0, 0x1d2f3,
 	0x1d300, 0x1d356,
-	0x1d360, 0x1d371,
+	0x1d360, 0x1d378,
 	0x1d400, 0x1d454,
 	0x1d456, 0x1d49c,
 	0x1d49e, 0x1d49f,
@@ -1334,11 +1388,19 @@ static const OnigCodePoint CR_Graph[] = {
 	0x1e01b, 0x1e021,
 	0x1e023, 0x1e024,
 	0x1e026, 0x1e02a,
+	0x1e100, 0x1e12c,
+	0x1e130, 0x1e13d,
+	0x1e140, 0x1e149,
+	0x1e14e, 0x1e14f,
+	0x1e2c0, 0x1e2f9,
+	0x1e2ff, 0x1e2ff,
 	0x1e800, 0x1e8c4,
 	0x1e8c7, 0x1e8d6,
-	0x1e900, 0x1e94a,
+	0x1e900, 0x1e94b,
 	0x1e950, 0x1e959,
 	0x1e95e, 0x1e95f,
+	0x1ec71, 0x1ecb4,
+	0x1ed01, 0x1ed3d,
 	0x1ee00, 0x1ee03,
 	0x1ee05, 0x1ee1f,
 	0x1ee21, 0x1ee22,
@@ -1380,35 +1442,41 @@ static const OnigCodePoint CR_Graph[] = {
 	0x1f0c1, 0x1f0cf,
 	0x1f0d1, 0x1f0f5,
 	0x1f100, 0x1f10c,
-	0x1f110, 0x1f12e,
-	0x1f130, 0x1f16b,
+	0x1f110, 0x1f16c,
 	0x1f170, 0x1f1ac,
 	0x1f1e6, 0x1f202,
 	0x1f210, 0x1f23b,
 	0x1f240, 0x1f248,
 	0x1f250, 0x1f251,
-	0x1f300, 0x1f6d2,
+	0x1f260, 0x1f265,
+	0x1f300, 0x1f6d5,
 	0x1f6e0, 0x1f6ec,
-	0x1f6f0, 0x1f6f6,
+	0x1f6f0, 0x1f6fa,
 	0x1f700, 0x1f773,
-	0x1f780, 0x1f7d4,
+	0x1f780, 0x1f7d8,
+	0x1f7e0, 0x1f7eb,
 	0x1f800, 0x1f80b,
 	0x1f810, 0x1f847,
 	0x1f850, 0x1f859,
 	0x1f860, 0x1f887,
 	0x1f890, 0x1f8ad,
-	0x1f910, 0x1f91e,
-	0x1f920, 0x1f927,
-	0x1f930, 0x1f930,
-	0x1f933, 0x1f93e,
-	0x1f940, 0x1f94b,
-	0x1f950, 0x1f95e,
-	0x1f980, 0x1f991,
-	0x1f9c0, 0x1f9c0,
+	0x1f900, 0x1f90b,
+	0x1f90d, 0x1f971,
+	0x1f973, 0x1f976,
+	0x1f97a, 0x1f9a2,
+	0x1f9a5, 0x1f9aa,
+	0x1f9ae, 0x1f9ca,
+	0x1f9cd, 0x1fa53,
+	0x1fa60, 0x1fa6d,
+	0x1fa70, 0x1fa73,
+	0x1fa78, 0x1fa7a,
+	0x1fa80, 0x1fa82,
+	0x1fa90, 0x1fa95,
 	0x20000, 0x2a6d6,
 	0x2a700, 0x2b734,
 	0x2b740, 0x2b81d,
 	0x2b820, 0x2cea1,
+	0x2ceb0, 0x2ebe0,
 	0x2f800, 0x2fa1d,
 	0xe0001, 0xe0001,
 	0xe0020, 0xe007f,
@@ -1419,7 +1487,7 @@ static const OnigCodePoint CR_Graph[] = {
 
 /* 'Lower': [[:Lower:]] */
 static const OnigCodePoint CR_Lower[] = {
-	640,
+	649,
 	0x0061, 0x007a,
 	0x00aa, 0x00aa,
 	0x00b5, 0x00b5,
@@ -1694,7 +1762,9 @@ static const OnigCodePoint CR_Lower[] = {
 	0x052b, 0x052b,
 	0x052d, 0x052d,
 	0x052f, 0x052f,
-	0x0561, 0x0587,
+	0x0560, 0x0588,
+	0x10d0, 0x10fa,
+	0x10fd, 0x10ff,
 	0x13f8, 0x13fd,
 	0x1c80, 0x1c88,
 	0x1d00, 0x1dbf,
@@ -2018,11 +2088,17 @@ static const OnigCodePoint CR_Lower[] = {
 	0xa7a5, 0xa7a5,
 	0xa7a7, 0xa7a7,
 	0xa7a9, 0xa7a9,
+	0xa7af, 0xa7af,
 	0xa7b5, 0xa7b5,
 	0xa7b7, 0xa7b7,
+	0xa7b9, 0xa7b9,
+	0xa7bb, 0xa7bb,
+	0xa7bd, 0xa7bd,
+	0xa7bf, 0xa7bf,
+	0xa7c3, 0xa7c3,
 	0xa7f8, 0xa7fa,
 	0xab30, 0xab5a,
-	0xab5c, 0xab65,
+	0xab5c, 0xab67,
 	0xab70, 0xabbf,
 	0xfb00, 0xfb06,
 	0xfb13, 0xfb17,
@@ -2031,6 +2107,7 @@ static const OnigCodePoint CR_Lower[] = {
 	0x104d8, 0x104fb,
 	0x10cc0, 0x10cf2,
 	0x118c0, 0x118df,
+	0x16e60, 0x16e7f,
 	0x1d41a, 0x1d433,
 	0x1d44e, 0x1d454,
 	0x1d456, 0x1d467,
@@ -2064,7 +2141,7 @@ static const OnigCodePoint CR_Lower[] = {
 
 /* 'Print': [[:Print:]] */
 static const OnigCodePoint CR_Print[] = {
-	640,
+	668,
 	0x0020, 0x007e,
 	0x00a0, 0x0377,
 	0x037a, 0x037f,
@@ -2073,25 +2150,24 @@ static const OnigCodePoint CR_Print[] = {
 	0x038e, 0x03a1,
 	0x03a3, 0x052f,
 	0x0531, 0x0556,
-	0x0559, 0x055f,
-	0x0561, 0x0587,
-	0x0589, 0x058a,
+	0x0559, 0x058a,
 	0x058d, 0x058f,
 	0x0591, 0x05c7,
 	0x05d0, 0x05ea,
-	0x05f0, 0x05f4,
+	0x05ef, 0x05f4,
 	0x0600, 0x061c,
 	0x061e, 0x070d,
 	0x070f, 0x074a,
 	0x074d, 0x07b1,
 	0x07c0, 0x07fa,
-	0x0800, 0x082d,
+	0x07fd, 0x082d,
 	0x0830, 0x083e,
 	0x0840, 0x085b,
 	0x085e, 0x085e,
+	0x0860, 0x086a,
 	0x08a0, 0x08b4,
 	0x08b6, 0x08bd,
-	0x08d4, 0x0983,
+	0x08d3, 0x0983,
 	0x0985, 0x098c,
 	0x098f, 0x0990,
 	0x0993, 0x09a8,
@@ -2104,7 +2180,7 @@ static const OnigCodePoint CR_Print[] = {
 	0x09d7, 0x09d7,
 	0x09dc, 0x09dd,
 	0x09df, 0x09e3,
-	0x09e6, 0x09fb,
+	0x09e6, 0x09fe,
 	0x0a01, 0x0a03,
 	0x0a05, 0x0a0a,
 	0x0a0f, 0x0a10,
@@ -2120,7 +2196,7 @@ static const OnigCodePoint CR_Print[] = {
 	0x0a51, 0x0a51,
 	0x0a59, 0x0a5c,
 	0x0a5e, 0x0a5e,
-	0x0a66, 0x0a75,
+	0x0a66, 0x0a76,
 	0x0a81, 0x0a83,
 	0x0a85, 0x0a8d,
 	0x0a8f, 0x0a91,
@@ -2134,7 +2210,7 @@ static const OnigCodePoint CR_Print[] = {
 	0x0ad0, 0x0ad0,
 	0x0ae0, 0x0ae3,
 	0x0ae6, 0x0af1,
-	0x0af9, 0x0af9,
+	0x0af9, 0x0aff,
 	0x0b01, 0x0b03,
 	0x0b05, 0x0b0c,
 	0x0b0f, 0x0b10,
@@ -2165,8 +2241,7 @@ static const OnigCodePoint CR_Print[] = {
 	0x0bd0, 0x0bd0,
 	0x0bd7, 0x0bd7,
 	0x0be6, 0x0bfa,
-	0x0c00, 0x0c03,
-	0x0c05, 0x0c0c,
+	0x0c00, 0x0c0c,
 	0x0c0e, 0x0c10,
 	0x0c12, 0x0c28,
 	0x0c2a, 0x0c39,
@@ -2177,8 +2252,7 @@ static const OnigCodePoint CR_Print[] = {
 	0x0c58, 0x0c5a,
 	0x0c60, 0x0c63,
 	0x0c66, 0x0c6f,
-	0x0c78, 0x0c83,
-	0x0c85, 0x0c8c,
+	0x0c77, 0x0c8c,
 	0x0c8e, 0x0c90,
 	0x0c92, 0x0ca8,
 	0x0caa, 0x0cb3,
@@ -2191,11 +2265,10 @@ static const OnigCodePoint CR_Print[] = {
 	0x0ce0, 0x0ce3,
 	0x0ce6, 0x0cef,
 	0x0cf1, 0x0cf2,
-	0x0d01, 0x0d03,
+	0x0d00, 0x0d03,
 	0x0d05, 0x0d0c,
 	0x0d0e, 0x0d10,
-	0x0d12, 0x0d3a,
-	0x0d3d, 0x0d44,
+	0x0d12, 0x0d44,
 	0x0d46, 0x0d48,
 	0x0d4a, 0x0d4f,
 	0x0d54, 0x0d63,
@@ -2216,17 +2289,10 @@ static const OnigCodePoint CR_Print[] = {
 	0x0e3f, 0x0e5b,
 	0x0e81, 0x0e82,
 	0x0e84, 0x0e84,
-	0x0e87, 0x0e88,
-	0x0e8a, 0x0e8a,
-	0x0e8d, 0x0e8d,
-	0x0e94, 0x0e97,
-	0x0e99, 0x0e9f,
-	0x0ea1, 0x0ea3,
+	0x0e86, 0x0e8a,
+	0x0e8c, 0x0ea3,
 	0x0ea5, 0x0ea5,
-	0x0ea7, 0x0ea7,
-	0x0eaa, 0x0eab,
-	0x0ead, 0x0eb9,
-	0x0ebb, 0x0ebd,
+	0x0ea7, 0x0ebd,
 	0x0ec0, 0x0ec4,
 	0x0ec6, 0x0ec6,
 	0x0ec8, 0x0ecd,
@@ -2275,7 +2341,7 @@ static const OnigCodePoint CR_Print[] = {
 	0x17f0, 0x17f9,
 	0x1800, 0x180e,
 	0x1810, 0x1819,
-	0x1820, 0x1877,
+	0x1820, 0x1878,
 	0x1880, 0x18aa,
 	0x18b0, 0x18f5,
 	0x1900, 0x191e,
@@ -2300,10 +2366,10 @@ static const OnigCodePoint CR_Print[] = {
 	0x1bfc, 0x1c37,
 	0x1c3b, 0x1c49,
 	0x1c4d, 0x1c88,
-	0x1cc0, 0x1cc7,
-	0x1cd0, 0x1cf6,
-	0x1cf8, 0x1cf9,
-	0x1d00, 0x1df5,
+	0x1c90, 0x1cba,
+	0x1cbd, 0x1cc7,
+	0x1cd0, 0x1cfa,
+	0x1d00, 0x1df9,
 	0x1dfb, 0x1f15,
 	0x1f18, 0x1f1d,
 	0x1f20, 0x1f45,
@@ -2325,19 +2391,14 @@ static const OnigCodePoint CR_Print[] = {
 	0x2066, 0x2071,
 	0x2074, 0x208e,
 	0x2090, 0x209c,
-	0x20a0, 0x20be,
+	0x20a0, 0x20bf,
 	0x20d0, 0x20f0,
 	0x2100, 0x218b,
-	0x2190, 0x23fe,
-	0x2400, 0x2426,
+	0x2190, 0x2426,
 	0x2440, 0x244a,
 	0x2460, 0x2b73,
 	0x2b76, 0x2b95,
-	0x2b98, 0x2bb9,
-	0x2bbd, 0x2bc8,
-	0x2bca, 0x2bd1,
-	0x2bec, 0x2bef,
-	0x2c00, 0x2c2e,
+	0x2b98, 0x2c2e,
 	0x2c30, 0x2c5e,
 	0x2c60, 0x2cf3,
 	0x2cf9, 0x2d25,
@@ -2354,7 +2415,7 @@ static const OnigCodePoint CR_Print[] = {
 	0x2dc8, 0x2dce,
 	0x2dd0, 0x2dd6,
 	0x2dd8, 0x2dde,
-	0x2de0, 0x2e44,
+	0x2de0, 0x2e4f,
 	0x2e80, 0x2e99,
 	0x2e9b, 0x2ef3,
 	0x2f00, 0x2fd5,
@@ -2362,27 +2423,25 @@ static const OnigCodePoint CR_Print[] = {
 	0x3000, 0x303f,
 	0x3041, 0x3096,
 	0x3099, 0x30ff,
-	0x3105, 0x312d,
+	0x3105, 0x312f,
 	0x3131, 0x318e,
 	0x3190, 0x31ba,
 	0x31c0, 0x31e3,
 	0x31f0, 0x321e,
-	0x3220, 0x32fe,
-	0x3300, 0x4db5,
-	0x4dc0, 0x9fd5,
+	0x3220, 0x4db5,
+	0x4dc0, 0x9fef,
 	0xa000, 0xa48c,
 	0xa490, 0xa4c6,
 	0xa4d0, 0xa62b,
 	0xa640, 0xa6f7,
-	0xa700, 0xa7ae,
-	0xa7b0, 0xa7b7,
+	0xa700, 0xa7bf,
+	0xa7c2, 0xa7c6,
 	0xa7f7, 0xa82b,
 	0xa830, 0xa839,
 	0xa840, 0xa877,
 	0xa880, 0xa8c5,
 	0xa8ce, 0xa8d9,
-	0xa8e0, 0xa8fd,
-	0xa900, 0xa953,
+	0xa8e0, 0xa953,
 	0xa95f, 0xa97c,
 	0xa980, 0xa9cd,
 	0xa9cf, 0xa9d9,
@@ -2397,7 +2456,7 @@ static const OnigCodePoint CR_Print[] = {
 	0xab11, 0xab16,
 	0xab20, 0xab26,
 	0xab28, 0xab2e,
-	0xab30, 0xab65,
+	0xab30, 0xab67,
 	0xab70, 0xabed,
 	0xabf0, 0xabf9,
 	0xac00, 0xd7a3,
@@ -2449,7 +2508,7 @@ static const OnigCodePoint CR_Print[] = {
 	0x102a0, 0x102d0,
 	0x102e0, 0x102fb,
 	0x10300, 0x10323,
-	0x10330, 0x1034a,
+	0x1032d, 0x1034a,
 	0x10350, 0x1037a,
 	0x10380, 0x1039d,
 	0x1039f, 0x103c3,
@@ -2483,9 +2542,9 @@ static const OnigCodePoint CR_Print[] = {
 	0x10a05, 0x10a06,
 	0x10a0c, 0x10a13,
 	0x10a15, 0x10a17,
-	0x10a19, 0x10a33,
+	0x10a19, 0x10a35,
 	0x10a38, 0x10a3a,
-	0x10a3f, 0x10a47,
+	0x10a3f, 0x10a48,
 	0x10a50, 0x10a58,
 	0x10a60, 0x10a9f,
 	0x10ac0, 0x10ae6,
@@ -2499,15 +2558,20 @@ static const OnigCodePoint CR_Print[] = {
 	0x10c00, 0x10c48,
 	0x10c80, 0x10cb2,
 	0x10cc0, 0x10cf2,
-	0x10cfa, 0x10cff,
+	0x10cfa, 0x10d27,
+	0x10d30, 0x10d39,
 	0x10e60, 0x10e7e,
+	0x10f00, 0x10f27,
+	0x10f30, 0x10f59,
+	0x10fe0, 0x10ff6,
 	0x11000, 0x1104d,
 	0x11052, 0x1106f,
 	0x1107f, 0x110c1,
+	0x110cd, 0x110cd,
 	0x110d0, 0x110e8,
 	0x110f0, 0x110f9,
 	0x11100, 0x11134,
-	0x11136, 0x11143,
+	0x11136, 0x11146,
 	0x11150, 0x11176,
 	0x11180, 0x111cd,
 	0x111d0, 0x111df,
@@ -2528,7 +2592,7 @@ static const OnigCodePoint CR_Print[] = {
 	0x1132a, 0x11330,
 	0x11332, 0x11333,
 	0x11335, 0x11339,
-	0x1133c, 0x11344,
+	0x1133b, 0x11344,
 	0x11347, 0x11348,
 	0x1134b, 0x1134d,
 	0x11350, 0x11350,
@@ -2538,7 +2602,7 @@ static const OnigCodePoint CR_Print[] = {
 	0x11370, 0x11374,
 	0x11400, 0x11459,
 	0x1145b, 0x1145b,
-	0x1145d, 0x1145d,
+	0x1145d, 0x1145f,
 	0x11480, 0x114c7,
 	0x114d0, 0x114d9,
 	0x11580, 0x115b5,
@@ -2546,13 +2610,19 @@ static const OnigCodePoint CR_Print[] = {
 	0x11600, 0x11644,
 	0x11650, 0x11659,
 	0x11660, 0x1166c,
-	0x11680, 0x116b7,
+	0x11680, 0x116b8,
 	0x116c0, 0x116c9,
-	0x11700, 0x11719,
+	0x11700, 0x1171a,
 	0x1171d, 0x1172b,
 	0x11730, 0x1173f,
+	0x11800, 0x1183b,
 	0x118a0, 0x118f2,
 	0x118ff, 0x118ff,
+	0x119a0, 0x119a7,
+	0x119aa, 0x119d7,
+	0x119da, 0x119e4,
+	0x11a00, 0x11a47,
+	0x11a50, 0x11aa2,
 	0x11ac0, 0x11af8,
 	0x11c00, 0x11c08,
 	0x11c0a, 0x11c36,
@@ -2561,11 +2631,27 @@ static const OnigCodePoint CR_Print[] = {
 	0x11c70, 0x11c8f,
 	0x11c92, 0x11ca7,
 	0x11ca9, 0x11cb6,
-	0x12000, 0x12399,
+	0x11d00, 0x11d06,
+	0x11d08, 0x11d09,
+	0x11d0b, 0x11d36,
+	0x11d3a, 0x11d3a,
+	0x11d3c, 0x11d3d,
+	0x11d3f, 0x11d47,
+	0x11d50, 0x11d59,
+	0x11d60, 0x11d65,
+	0x11d67, 0x11d68,
+	0x11d6a, 0x11d8e,
+	0x11d90, 0x11d91,
+	0x11d93, 0x11d98,
+	0x11da0, 0x11da9,
+	0x11ee0, 0x11ef8,
+	0x11fc0, 0x11ff1,
+	0x11fff, 0x12399,
 	0x12400, 0x1246e,
 	0x12470, 0x12474,
 	0x12480, 0x12543,
 	0x13000, 0x1342e,
+	0x13430, 0x13438,
 	0x14400, 0x14646,
 	0x16800, 0x16a38,
 	0x16a40, 0x16a5e,
@@ -2578,13 +2664,17 @@ static const OnigCodePoint CR_Print[] = {
 	0x16b5b, 0x16b61,
 	0x16b63, 0x16b77,
 	0x16b7d, 0x16b8f,
-	0x16f00, 0x16f44,
-	0x16f50, 0x16f7e,
+	0x16e40, 0x16e9a,
+	0x16f00, 0x16f4a,
+	0x16f4f, 0x16f87,
 	0x16f8f, 0x16f9f,
-	0x16fe0, 0x16fe0,
-	0x17000, 0x187ec,
+	0x16fe0, 0x16fe3,
+	0x17000, 0x187f7,
 	0x18800, 0x18af2,
-	0x1b000, 0x1b001,
+	0x1b000, 0x1b11e,
+	0x1b150, 0x1b152,
+	0x1b164, 0x1b167,
+	0x1b170, 0x1b2fb,
 	0x1bc00, 0x1bc6a,
 	0x1bc70, 0x1bc7c,
 	0x1bc80, 0x1bc88,
@@ -2594,8 +2684,9 @@ static const OnigCodePoint CR_Print[] = {
 	0x1d100, 0x1d126,
 	0x1d129, 0x1d1e8,
 	0x1d200, 0x1d245,
+	0x1d2e0, 0x1d2f3,
 	0x1d300, 0x1d356,
-	0x1d360, 0x1d371,
+	0x1d360, 0x1d378,
 	0x1d400, 0x1d454,
 	0x1d456, 0x1d49c,
 	0x1d49e, 0x1d49f,
@@ -2624,11 +2715,19 @@ static const OnigCodePoint CR_Print[] = {
 	0x1e01b, 0x1e021,
 	0x1e023, 0x1e024,
 	0x1e026, 0x1e02a,
+	0x1e100, 0x1e12c,
+	0x1e130, 0x1e13d,
+	0x1e140, 0x1e149,
+	0x1e14e, 0x1e14f,
+	0x1e2c0, 0x1e2f9,
+	0x1e2ff, 0x1e2ff,
 	0x1e800, 0x1e8c4,
 	0x1e8c7, 0x1e8d6,
-	0x1e900, 0x1e94a,
+	0x1e900, 0x1e94b,
 	0x1e950, 0x1e959,
 	0x1e95e, 0x1e95f,
+	0x1ec71, 0x1ecb4,
+	0x1ed01, 0x1ed3d,
 	0x1ee00, 0x1ee03,
 	0x1ee05, 0x1ee1f,
 	0x1ee21, 0x1ee22,
@@ -2670,35 +2769,41 @@ static const OnigCodePoint CR_Print[] = {
 	0x1f0c1, 0x1f0cf,
 	0x1f0d1, 0x1f0f5,
 	0x1f100, 0x1f10c,
-	0x1f110, 0x1f12e,
-	0x1f130, 0x1f16b,
+	0x1f110, 0x1f16c,
 	0x1f170, 0x1f1ac,
 	0x1f1e6, 0x1f202,
 	0x1f210, 0x1f23b,
 	0x1f240, 0x1f248,
 	0x1f250, 0x1f251,
-	0x1f300, 0x1f6d2,
+	0x1f260, 0x1f265,
+	0x1f300, 0x1f6d5,
 	0x1f6e0, 0x1f6ec,
-	0x1f6f0, 0x1f6f6,
+	0x1f6f0, 0x1f6fa,
 	0x1f700, 0x1f773,
-	0x1f780, 0x1f7d4,
+	0x1f780, 0x1f7d8,
+	0x1f7e0, 0x1f7eb,
 	0x1f800, 0x1f80b,
 	0x1f810, 0x1f847,
 	0x1f850, 0x1f859,
 	0x1f860, 0x1f887,
 	0x1f890, 0x1f8ad,
-	0x1f910, 0x1f91e,
-	0x1f920, 0x1f927,
-	0x1f930, 0x1f930,
-	0x1f933, 0x1f93e,
-	0x1f940, 0x1f94b,
-	0x1f950, 0x1f95e,
-	0x1f980, 0x1f991,
-	0x1f9c0, 0x1f9c0,
+	0x1f900, 0x1f90b,
+	0x1f90d, 0x1f971,
+	0x1f973, 0x1f976,
+	0x1f97a, 0x1f9a2,
+	0x1f9a5, 0x1f9aa,
+	0x1f9ae, 0x1f9ca,
+	0x1f9cd, 0x1fa53,
+	0x1fa60, 0x1fa6d,
+	0x1fa70, 0x1fa73,
+	0x1fa78, 0x1fa7a,
+	0x1fa80, 0x1fa82,
+	0x1fa90, 0x1fa95,
 	0x20000, 0x2a6d6,
 	0x2a700, 0x2b734,
 	0x2b740, 0x2b81d,
 	0x2b820, 0x2cea1,
+	0x2ceb0, 0x2ebe0,
 	0x2f800, 0x2fa1d,
 	0xe0001, 0xe0001,
 	0xe0020, 0xe007f,
@@ -2709,7 +2814,7 @@ static const OnigCodePoint CR_Print[] = {
 
 /* 'XPosixPunct': [[:Punct:]] */
 static const OnigCodePoint CR_XPosixPunct[] = {
-	163,
+	177,
 	0x0021, 0x002f,
 	0x003a, 0x0040,
 	0x005b, 0x0060,
@@ -2741,7 +2846,11 @@ static const OnigCodePoint CR_XPosixPunct[] = {
 	0x085e, 0x085e,
 	0x0964, 0x0965,
 	0x0970, 0x0970,
+	0x09fd, 0x09fd,
+	0x0a76, 0x0a76,
 	0x0af0, 0x0af0,
+	0x0c77, 0x0c77,
+	0x0c84, 0x0c84,
 	0x0df4, 0x0df4,
 	0x0e4f, 0x0e4f,
 	0x0e5a, 0x0e5b,
@@ -2755,7 +2864,7 @@ static const OnigCodePoint CR_XPosixPunct[] = {
 	0x10fb, 0x10fb,
 	0x1360, 0x1368,
 	0x1400, 0x1400,
-	0x166d, 0x166e,
+	0x166e, 0x166e,
 	0x169b, 0x169c,
 	0x16eb, 0x16ed,
 	0x1735, 0x1736,
@@ -2790,7 +2899,7 @@ static const OnigCodePoint CR_XPosixPunct[] = {
 	0x2cfe, 0x2cff,
 	0x2d70, 0x2d70,
 	0x2e00, 0x2e2e,
-	0x2e30, 0x2e44,
+	0x2e30, 0x2e4f,
 	0x3001, 0x3003,
 	0x3008, 0x3011,
 	0x3014, 0x301f,
@@ -2844,12 +2953,13 @@ static const OnigCodePoint CR_XPosixPunct[] = {
 	0x10af0, 0x10af6,
 	0x10b39, 0x10b3f,
 	0x10b99, 0x10b9c,
+	0x10f55, 0x10f59,
 	0x11047, 0x1104d,
 	0x110bb, 0x110bc,
 	0x110be, 0x110c1,
 	0x11140, 0x11143,
 	0x11174, 0x11175,
-	0x111c5, 0x111c9,
+	0x111c5, 0x111c8,
 	0x111cd, 0x111cd,
 	0x111db, 0x111db,
 	0x111dd, 0x111df,
@@ -2863,13 +2973,22 @@ static const OnigCodePoint CR_XPosixPunct[] = {
 	0x11641, 0x11643,
 	0x11660, 0x1166c,
 	0x1173c, 0x1173e,
+	0x1183b, 0x1183b,
+	0x119e2, 0x119e2,
+	0x11a3f, 0x11a46,
+	0x11a9a, 0x11a9c,
+	0x11a9e, 0x11aa2,
 	0x11c41, 0x11c45,
 	0x11c70, 0x11c71,
+	0x11ef7, 0x11ef8,
+	0x11fff, 0x11fff,
 	0x12470, 0x12474,
 	0x16a6e, 0x16a6f,
 	0x16af5, 0x16af5,
 	0x16b37, 0x16b3b,
 	0x16b44, 0x16b44,
+	0x16e97, 0x16e9a,
+	0x16fe2, 0x16fe2,
 	0x1bc9f, 0x1bc9f,
 	0x1da87, 0x1da8b,
 	0x1e95e, 0x1e95f,
@@ -2892,7 +3011,7 @@ static const OnigCodePoint CR_Space[] = {
 
 /* 'Upper': [[:Upper:]] */
 static const OnigCodePoint CR_Upper[] = {
-	632,
+	641,
 	0x0041, 0x005a,
 	0x00c0, 0x00d6,
 	0x00d8, 0x00de,
@@ -3169,6 +3288,8 @@ static const OnigCodePoint CR_Upper[] = {
 	0x10c7, 0x10c7,
 	0x10cd, 0x10cd,
 	0x13a0, 0x13f5,
+	0x1c90, 0x1cba,
+	0x1cbd, 0x1cbf,
 	0x1e00, 0x1e00,
 	0x1e02, 0x1e02,
 	0x1e04, 0x1e04,
@@ -3485,11 +3606,18 @@ static const OnigCodePoint CR_Upper[] = {
 	0xa7aa, 0xa7ae,
 	0xa7b0, 0xa7b4,
 	0xa7b6, 0xa7b6,
+	0xa7b8, 0xa7b8,
+	0xa7ba, 0xa7ba,
+	0xa7bc, 0xa7bc,
+	0xa7be, 0xa7be,
+	0xa7c2, 0xa7c2,
+	0xa7c4, 0xa7c6,
 	0xff21, 0xff3a,
 	0x10400, 0x10427,
 	0x104b0, 0x104d3,
 	0x10c80, 0x10cb2,
 	0x118a0, 0x118bf,
+	0x16e40, 0x16e5f,
 	0x1d400, 0x1d419,
 	0x1d434, 0x1d44d,
 	0x1d468, 0x1d481,
@@ -3537,7 +3665,7 @@ static const OnigCodePoint CR_XDigit[] = {
 
 /* 'Word': [[:Word:]] */
 static const OnigCodePoint CR_Word[] = {
-	679,
+	716,
 	0x0030, 0x0039,
 	0x0041, 0x005a,
 	0x005f, 0x005f,
@@ -3565,14 +3693,14 @@ static const OnigCodePoint CR_Word[] = {
 	0x0483, 0x052f,
 	0x0531, 0x0556,
 	0x0559, 0x0559,
-	0x0561, 0x0587,
+	0x0560, 0x0588,
 	0x0591, 0x05bd,
 	0x05bf, 0x05bf,
 	0x05c1, 0x05c2,
 	0x05c4, 0x05c5,
 	0x05c7, 0x05c7,
 	0x05d0, 0x05ea,
-	0x05f0, 0x05f2,
+	0x05ef, 0x05f2,
 	0x0610, 0x061a,
 	0x0620, 0x0669,
 	0x066e, 0x06d3,
@@ -3584,11 +3712,13 @@ static const OnigCodePoint CR_Word[] = {
 	0x074d, 0x07b1,
 	0x07c0, 0x07f5,
 	0x07fa, 0x07fa,
+	0x07fd, 0x07fd,
 	0x0800, 0x082d,
 	0x0840, 0x085b,
+	0x0860, 0x086a,
 	0x08a0, 0x08b4,
 	0x08b6, 0x08bd,
-	0x08d4, 0x08e1,
+	0x08d3, 0x08e1,
 	0x08e3, 0x0963,
 	0x0966, 0x096f,
 	0x0971, 0x0983,
@@ -3605,6 +3735,8 @@ static const OnigCodePoint CR_Word[] = {
 	0x09dc, 0x09dd,
 	0x09df, 0x09e3,
 	0x09e6, 0x09f1,
+	0x09fc, 0x09fc,
+	0x09fe, 0x09fe,
 	0x0a01, 0x0a03,
 	0x0a05, 0x0a0a,
 	0x0a0f, 0x0a10,
@@ -3634,7 +3766,7 @@ static const OnigCodePoint CR_Word[] = {
 	0x0ad0, 0x0ad0,
 	0x0ae0, 0x0ae3,
 	0x0ae6, 0x0aef,
-	0x0af9, 0x0af9,
+	0x0af9, 0x0aff,
 	0x0b01, 0x0b03,
 	0x0b05, 0x0b0c,
 	0x0b0f, 0x0b10,
@@ -3666,8 +3798,7 @@ static const OnigCodePoint CR_Word[] = {
 	0x0bd0, 0x0bd0,
 	0x0bd7, 0x0bd7,
 	0x0be6, 0x0bef,
-	0x0c00, 0x0c03,
-	0x0c05, 0x0c0c,
+	0x0c00, 0x0c0c,
 	0x0c0e, 0x0c10,
 	0x0c12, 0x0c28,
 	0x0c2a, 0x0c39,
@@ -3692,11 +3823,10 @@ static const OnigCodePoint CR_Word[] = {
 	0x0ce0, 0x0ce3,
 	0x0ce6, 0x0cef,
 	0x0cf1, 0x0cf2,
-	0x0d01, 0x0d03,
+	0x0d00, 0x0d03,
 	0x0d05, 0x0d0c,
 	0x0d0e, 0x0d10,
-	0x0d12, 0x0d3a,
-	0x0d3d, 0x0d44,
+	0x0d12, 0x0d44,
 	0x0d46, 0x0d48,
 	0x0d4a, 0x0d4e,
 	0x0d54, 0x0d57,
@@ -3720,17 +3850,10 @@ static const OnigCodePoint CR_Word[] = {
 	0x0e50, 0x0e59,
 	0x0e81, 0x0e82,
 	0x0e84, 0x0e84,
-	0x0e87, 0x0e88,
-	0x0e8a, 0x0e8a,
-	0x0e8d, 0x0e8d,
-	0x0e94, 0x0e97,
-	0x0e99, 0x0e9f,
-	0x0ea1, 0x0ea3,
+	0x0e86, 0x0e8a,
+	0x0e8c, 0x0ea3,
 	0x0ea5, 0x0ea5,
-	0x0ea7, 0x0ea7,
-	0x0eaa, 0x0eab,
-	0x0ead, 0x0eb9,
-	0x0ebb, 0x0ebd,
+	0x0ea7, 0x0ebd,
 	0x0ec0, 0x0ec4,
 	0x0ec6, 0x0ec6,
 	0x0ec8, 0x0ecd,
@@ -3792,7 +3915,7 @@ static const OnigCodePoint CR_Word[] = {
 	0x17e0, 0x17e9,
 	0x180b, 0x180d,
 	0x1810, 0x1819,
-	0x1820, 0x1877,
+	0x1820, 0x1878,
 	0x1880, 0x18aa,
 	0x18b0, 0x18f5,
 	0x1900, 0x191e,
@@ -3818,10 +3941,11 @@ static const OnigCodePoint CR_Word[] = {
 	0x1c40, 0x1c49,
 	0x1c4d, 0x1c7d,
 	0x1c80, 0x1c88,
+	0x1c90, 0x1cba,
+	0x1cbd, 0x1cbf,
 	0x1cd0, 0x1cd2,
-	0x1cd4, 0x1cf6,
-	0x1cf8, 0x1cf9,
-	0x1d00, 0x1df5,
+	0x1cd4, 0x1cfa,
+	0x1d00, 0x1df9,
 	0x1dfb, 0x1f15,
 	0x1f18, 0x1f1d,
 	0x1f20, 0x1f45,
@@ -3891,12 +4015,12 @@ static const OnigCodePoint CR_Word[] = {
 	0x309d, 0x309f,
 	0x30a1, 0x30fa,
 	0x30fc, 0x30ff,
-	0x3105, 0x312d,
+	0x3105, 0x312f,
 	0x3131, 0x318e,
 	0x31a0, 0x31ba,
 	0x31f0, 0x31ff,
 	0x3400, 0x4db5,
-	0x4e00, 0x9fd5,
+	0x4e00, 0x9fef,
 	0xa000, 0xa48c,
 	0xa4d0, 0xa4fd,
 	0xa500, 0xa60c,
@@ -3906,16 +4030,15 @@ static const OnigCodePoint CR_Word[] = {
 	0xa67f, 0xa6f1,
 	0xa717, 0xa71f,
 	0xa722, 0xa788,
-	0xa78b, 0xa7ae,
-	0xa7b0, 0xa7b7,
+	0xa78b, 0xa7bf,
+	0xa7c2, 0xa7c6,
 	0xa7f7, 0xa827,
 	0xa840, 0xa873,
 	0xa880, 0xa8c5,
 	0xa8d0, 0xa8d9,
 	0xa8e0, 0xa8f7,
 	0xa8fb, 0xa8fb,
-	0xa8fd, 0xa8fd,
-	0xa900, 0xa92d,
+	0xa8fd, 0xa92d,
 	0xa930, 0xa953,
 	0xa960, 0xa97c,
 	0xa980, 0xa9c0,
@@ -3935,7 +4058,7 @@ static const OnigCodePoint CR_Word[] = {
 	0xab20, 0xab26,
 	0xab28, 0xab2e,
 	0xab30, 0xab5a,
-	0xab5c, 0xab65,
+	0xab5c, 0xab67,
 	0xab70, 0xabea,
 	0xabec, 0xabed,
 	0xabf0, 0xabf9,
@@ -3985,7 +4108,7 @@ static const OnigCodePoint CR_Word[] = {
 	0x102a0, 0x102d0,
 	0x102e0, 0x102e0,
 	0x10300, 0x1031f,
-	0x10330, 0x1034a,
+	0x1032d, 0x1034a,
 	0x10350, 0x1037a,
 	0x10380, 0x1039d,
 	0x103a0, 0x103c3,
@@ -4018,7 +4141,7 @@ static const OnigCodePoint CR_Word[] = {
 	0x10a05, 0x10a06,
 	0x10a0c, 0x10a13,
 	0x10a15, 0x10a17,
-	0x10a19, 0x10a33,
+	0x10a19, 0x10a35,
 	0x10a38, 0x10a3a,
 	0x10a3f, 0x10a3f,
 	0x10a60, 0x10a7c,
@@ -4032,6 +4155,12 @@ static const OnigCodePoint CR_Word[] = {
 	0x10c00, 0x10c48,
 	0x10c80, 0x10cb2,
 	0x10cc0, 0x10cf2,
+	0x10d00, 0x10d27,
+	0x10d30, 0x10d39,
+	0x10f00, 0x10f1c,
+	0x10f27, 0x10f27,
+	0x10f30, 0x10f50,
+	0x10fe0, 0x10ff6,
 	0x11000, 0x11046,
 	0x11066, 0x1106f,
 	0x1107f, 0x110ba,
@@ -4039,10 +4168,11 @@ static const OnigCodePoint CR_Word[] = {
 	0x110f0, 0x110f9,
 	0x11100, 0x11134,
 	0x11136, 0x1113f,
+	0x11144, 0x11146,
 	0x11150, 0x11173,
 	0x11176, 0x11176,
 	0x11180, 0x111c4,
-	0x111ca, 0x111cc,
+	0x111c9, 0x111cc,
 	0x111d0, 0x111da,
 	0x111dc, 0x111dc,
 	0x11200, 0x11211,
@@ -4062,7 +4192,7 @@ static const OnigCodePoint CR_Word[] = {
 	0x1132a, 0x11330,
 	0x11332, 0x11333,
 	0x11335, 0x11339,
-	0x1133c, 0x11344,
+	0x1133b, 0x11344,
 	0x11347, 0x11348,
 	0x1134b, 0x1134d,
 	0x11350, 0x11350,
@@ -4072,6 +4202,7 @@ static const OnigCodePoint CR_Word[] = {
 	0x11370, 0x11374,
 	0x11400, 0x1144a,
 	0x11450, 0x11459,
+	0x1145e, 0x1145f,
 	0x11480, 0x114c5,
 	0x114c7, 0x114c7,
 	0x114d0, 0x114d9,
@@ -4081,13 +4212,22 @@ static const OnigCodePoint CR_Word[] = {
 	0x11600, 0x11640,
 	0x11644, 0x11644,
 	0x11650, 0x11659,
-	0x11680, 0x116b7,
+	0x11680, 0x116b8,
 	0x116c0, 0x116c9,
-	0x11700, 0x11719,
+	0x11700, 0x1171a,
 	0x1171d, 0x1172b,
 	0x11730, 0x11739,
+	0x11800, 0x1183a,
 	0x118a0, 0x118e9,
 	0x118ff, 0x118ff,
+	0x119a0, 0x119a7,
+	0x119aa, 0x119d7,
+	0x119da, 0x119e1,
+	0x119e3, 0x119e4,
+	0x11a00, 0x11a3e,
+	0x11a47, 0x11a47,
+	0x11a50, 0x11a99,
+	0x11a9d, 0x11a9d,
 	0x11ac0, 0x11af8,
 	0x11c00, 0x11c08,
 	0x11c0a, 0x11c36,
@@ -4096,6 +4236,20 @@ static const OnigCodePoint CR_Word[] = {
 	0x11c72, 0x11c8f,
 	0x11c92, 0x11ca7,
 	0x11ca9, 0x11cb6,
+	0x11d00, 0x11d06,
+	0x11d08, 0x11d09,
+	0x11d0b, 0x11d36,
+	0x11d3a, 0x11d3a,
+	0x11d3c, 0x11d3d,
+	0x11d3f, 0x11d47,
+	0x11d50, 0x11d59,
+	0x11d60, 0x11d65,
+	0x11d67, 0x11d68,
+	0x11d6a, 0x11d8e,
+	0x11d90, 0x11d91,
+	0x11d93, 0x11d98,
+	0x11da0, 0x11da9,
+	0x11ee0, 0x11ef6,
 	0x12000, 0x12399,
 	0x12400, 0x1246e,
 	0x12480, 0x12543,
@@ -4111,13 +4265,18 @@ static const OnigCodePoint CR_Word[] = {
 	0x16b50, 0x16b59,
 	0x16b63, 0x16b77,
 	0x16b7d, 0x16b8f,
-	0x16f00, 0x16f44,
-	0x16f50, 0x16f7e,
+	0x16e40, 0x16e7f,
+	0x16f00, 0x16f4a,
+	0x16f4f, 0x16f87,
 	0x16f8f, 0x16f9f,
-	0x16fe0, 0x16fe0,
-	0x17000, 0x187ec,
+	0x16fe0, 0x16fe1,
+	0x16fe3, 0x16fe3,
+	0x17000, 0x187f7,
 	0x18800, 0x18af2,
-	0x1b000, 0x1b001,
+	0x1b000, 0x1b11e,
+	0x1b150, 0x1b152,
+	0x1b164, 0x1b167,
+	0x1b170, 0x1b2fb,
 	0x1bc00, 0x1bc6a,
 	0x1bc70, 0x1bc7c,
 	0x1bc80, 0x1bc88,
@@ -4171,9 +4330,14 @@ static const OnigCodePoint CR_Word[] = {
 	0x1e01b, 0x1e021,
 	0x1e023, 0x1e024,
 	0x1e026, 0x1e02a,
+	0x1e100, 0x1e12c,
+	0x1e130, 0x1e13d,
+	0x1e140, 0x1e149,
+	0x1e14e, 0x1e14e,
+	0x1e2c0, 0x1e2f9,
 	0x1e800, 0x1e8c4,
 	0x1e8d0, 0x1e8d6,
-	0x1e900, 0x1e94a,
+	0x1e900, 0x1e94b,
 	0x1e950, 0x1e959,
 	0x1ee00, 0x1ee03,
 	0x1ee05, 0x1ee1f,
@@ -4215,13 +4379,14 @@ static const OnigCodePoint CR_Word[] = {
 	0x2a700, 0x2b734,
 	0x2b740, 0x2b81d,
 	0x2b820, 0x2cea1,
+	0x2ceb0, 0x2ebe0,
 	0x2f800, 0x2fa1d,
 	0xe0100, 0xe01ef,
 }; /* CR_Word */
 
 /* 'Alnum': [[:Alnum:]] */
 static const OnigCodePoint CR_Alnum[] = {
-	678,
+	715,
 	0x0030, 0x0039,
 	0x0041, 0x005a,
 	0x0061, 0x007a,
@@ -4249,14 +4414,14 @@ static const OnigCodePoint CR_Alnum[] = {
 	0x048a, 0x052f,
 	0x0531, 0x0556,
 	0x0559, 0x0559,
-	0x0561, 0x0587,
+	0x0560, 0x0588,
 	0x05b0, 0x05bd,
 	0x05bf, 0x05bf,
 	0x05c1, 0x05c2,
 	0x05c4, 0x05c5,
 	0x05c7, 0x05c7,
 	0x05d0, 0x05ea,
-	0x05f0, 0x05f2,
+	0x05ef, 0x05f2,
 	0x0610, 0x061a,
 	0x0620, 0x0657,
 	0x0659, 0x0669,
@@ -4273,6 +4438,7 @@ static const OnigCodePoint CR_Alnum[] = {
 	0x0800, 0x0817,
 	0x081a, 0x082c,
 	0x0840, 0x0858,
+	0x0860, 0x086a,
 	0x08a0, 0x08b4,
 	0x08b6, 0x08bd,
 	0x08d4, 0x08df,
@@ -4297,6 +4463,7 @@ static const OnigCodePoint CR_Alnum[] = {
 	0x09dc, 0x09dd,
 	0x09df, 0x09e3,
 	0x09e6, 0x09f1,
+	0x09fc, 0x09fc,
 	0x0a01, 0x0a03,
 	0x0a05, 0x0a0a,
 	0x0a0f, 0x0a10,
@@ -4325,7 +4492,7 @@ static const OnigCodePoint CR_Alnum[] = {
 	0x0ad0, 0x0ad0,
 	0x0ae0, 0x0ae3,
 	0x0ae6, 0x0aef,
-	0x0af9, 0x0af9,
+	0x0af9, 0x0afc,
 	0x0b01, 0x0b03,
 	0x0b05, 0x0b0c,
 	0x0b0f, 0x0b10,
@@ -4383,7 +4550,7 @@ static const OnigCodePoint CR_Alnum[] = {
 	0x0ce0, 0x0ce3,
 	0x0ce6, 0x0cef,
 	0x0cf1, 0x0cf2,
-	0x0d01, 0x0d03,
+	0x0d00, 0x0d03,
 	0x0d05, 0x0d0c,
 	0x0d0e, 0x0d10,
 	0x0d12, 0x0d3a,
@@ -4412,16 +4579,10 @@ static const OnigCodePoint CR_Alnum[] = {
 	0x0e50, 0x0e59,
 	0x0e81, 0x0e82,
 	0x0e84, 0x0e84,
-	0x0e87, 0x0e88,
-	0x0e8a, 0x0e8a,
-	0x0e8d, 0x0e8d,
-	0x0e94, 0x0e97,
-	0x0e99, 0x0e9f,
-	0x0ea1, 0x0ea3,
+	0x0e86, 0x0e8a,
+	0x0e8c, 0x0ea3,
 	0x0ea5, 0x0ea5,
-	0x0ea7, 0x0ea7,
-	0x0eaa, 0x0eab,
-	0x0ead, 0x0eb9,
+	0x0ea7, 0x0eb9,
 	0x0ebb, 0x0ebd,
 	0x0ec0, 0x0ec4,
 	0x0ec6, 0x0ec6,
@@ -4438,12 +4599,7 @@ static const OnigCodePoint CR_Alnum[] = {
 	0x1000, 0x1036,
 	0x1038, 0x1038,
 	0x103b, 0x1049,
-	0x1050, 0x1062,
-	0x1065, 0x1068,
-	0x106e, 0x1086,
-	0x108e, 0x108e,
-	0x1090, 0x1099,
-	0x109c, 0x109d,
+	0x1050, 0x109d,
 	0x10a0, 0x10c5,
 	0x10c7, 0x10c7,
 	0x10cd, 0x10cd,
@@ -4464,7 +4620,6 @@ static const OnigCodePoint CR_Alnum[] = {
 	0x12d8, 0x1310,
 	0x1312, 0x1315,
 	0x1318, 0x135a,
-	0x135f, 0x135f,
 	0x1380, 0x138f,
 	0x13a0, 0x13f5,
 	0x13f8, 0x13fd,
@@ -4486,7 +4641,7 @@ static const OnigCodePoint CR_Alnum[] = {
 	0x17dc, 0x17dc,
 	0x17e0, 0x17e9,
 	0x1810, 0x1819,
-	0x1820, 0x1877,
+	0x1820, 0x1878,
 	0x1880, 0x18aa,
 	0x18b0, 0x18f5,
 	0x1900, 0x191e,
@@ -4510,13 +4665,16 @@ static const OnigCodePoint CR_Alnum[] = {
 	0x1b80, 0x1ba9,
 	0x1bac, 0x1be5,
 	0x1be7, 0x1bf1,
-	0x1c00, 0x1c35,
+	0x1c00, 0x1c36,
 	0x1c40, 0x1c49,
 	0x1c4d, 0x1c7d,
 	0x1c80, 0x1c88,
+	0x1c90, 0x1cba,
+	0x1cbd, 0x1cbf,
 	0x1ce9, 0x1cec,
 	0x1cee, 0x1cf3,
 	0x1cf5, 0x1cf6,
+	0x1cfa, 0x1cfa,
 	0x1d00, 0x1dbf,
 	0x1de7, 0x1df4,
 	0x1e00, 0x1f15,
@@ -4585,12 +4743,12 @@ static const OnigCodePoint CR_Alnum[] = {
 	0x309d, 0x309f,
 	0x30a1, 0x30fa,
 	0x30fc, 0x30ff,
-	0x3105, 0x312d,
+	0x3105, 0x312f,
 	0x3131, 0x318e,
 	0x31a0, 0x31ba,
 	0x31f0, 0x31ff,
 	0x3400, 0x4db5,
-	0x4e00, 0x9fd5,
+	0x4e00, 0x9fef,
 	0xa000, 0xa48c,
 	0xa4d0, 0xa4fd,
 	0xa500, 0xa60c,
@@ -4600,33 +4758,28 @@ static const OnigCodePoint CR_Alnum[] = {
 	0xa67f, 0xa6ef,
 	0xa717, 0xa71f,
 	0xa722, 0xa788,
-	0xa78b, 0xa7ae,
-	0xa7b0, 0xa7b7,
-	0xa7f7, 0xa801,
-	0xa803, 0xa805,
-	0xa807, 0xa80a,
-	0xa80c, 0xa827,
+	0xa78b, 0xa7bf,
+	0xa7c2, 0xa7c6,
+	0xa7f7, 0xa805,
+	0xa807, 0xa827,
 	0xa840, 0xa873,
 	0xa880, 0xa8c3,
 	0xa8c5, 0xa8c5,
 	0xa8d0, 0xa8d9,
 	0xa8f2, 0xa8f7,
 	0xa8fb, 0xa8fb,
-	0xa8fd, 0xa8fd,
-	0xa900, 0xa92a,
+	0xa8fd, 0xa92a,
 	0xa930, 0xa952,
 	0xa960, 0xa97c,
 	0xa980, 0xa9b2,
 	0xa9b4, 0xa9bf,
 	0xa9cf, 0xa9d9,
-	0xa9e0, 0xa9e4,
-	0xa9e6, 0xa9fe,
+	0xa9e0, 0xa9fe,
 	0xaa00, 0xaa36,
 	0xaa40, 0xaa4d,
 	0xaa50, 0xaa59,
 	0xaa60, 0xaa76,
-	0xaa7a, 0xaa7a,
-	0xaa7e, 0xaabe,
+	0xaa7a, 0xaabe,
 	0xaac0, 0xaac0,
 	0xaac2, 0xaac2,
 	0xaadb, 0xaadd,
@@ -4638,7 +4791,7 @@ static const OnigCodePoint CR_Alnum[] = {
 	0xab20, 0xab26,
 	0xab28, 0xab2e,
 	0xab30, 0xab5a,
-	0xab5c, 0xab65,
+	0xab5c, 0xab67,
 	0xab70, 0xabea,
 	0xabf0, 0xabf9,
 	0xac00, 0xd7a3,
@@ -4680,7 +4833,7 @@ static const OnigCodePoint CR_Alnum[] = {
 	0x10280, 0x1029c,
 	0x102a0, 0x102d0,
 	0x10300, 0x1031f,
-	0x10330, 0x1034a,
+	0x1032d, 0x1034a,
 	0x10350, 0x1037a,
 	0x10380, 0x1039d,
 	0x103a0, 0x103c3,
@@ -4713,7 +4866,7 @@ static const OnigCodePoint CR_Alnum[] = {
 	0x10a05, 0x10a06,
 	0x10a0c, 0x10a13,
 	0x10a15, 0x10a17,
-	0x10a19, 0x10a33,
+	0x10a19, 0x10a35,
 	0x10a60, 0x10a7c,
 	0x10a80, 0x10a9c,
 	0x10ac0, 0x10ac7,
@@ -4725,6 +4878,12 @@ static const OnigCodePoint CR_Alnum[] = {
 	0x10c00, 0x10c48,
 	0x10c80, 0x10cb2,
 	0x10cc0, 0x10cf2,
+	0x10d00, 0x10d27,
+	0x10d30, 0x10d39,
+	0x10f00, 0x10f1c,
+	0x10f27, 0x10f27,
+	0x10f30, 0x10f45,
+	0x10fe0, 0x10ff6,
 	0x11000, 0x11045,
 	0x11066, 0x1106f,
 	0x11082, 0x110b8,
@@ -4732,6 +4891,7 @@ static const OnigCodePoint CR_Alnum[] = {
 	0x110f0, 0x110f9,
 	0x11100, 0x11132,
 	0x11136, 0x1113f,
+	0x11144, 0x11146,
 	0x11150, 0x11172,
 	0x11176, 0x11176,
 	0x11180, 0x111bf,
@@ -4766,6 +4926,7 @@ static const OnigCodePoint CR_Alnum[] = {
 	0x11443, 0x11445,
 	0x11447, 0x1144a,
 	0x11450, 0x11459,
+	0x1145f, 0x1145f,
 	0x11480, 0x114c1,
 	0x114c4, 0x114c5,
 	0x114c7, 0x114c7,
@@ -4778,12 +4939,23 @@ static const OnigCodePoint CR_Alnum[] = {
 	0x11644, 0x11644,
 	0x11650, 0x11659,
 	0x11680, 0x116b5,
+	0x116b8, 0x116b8,
 	0x116c0, 0x116c9,
-	0x11700, 0x11719,
+	0x11700, 0x1171a,
 	0x1171d, 0x1172a,
 	0x11730, 0x11739,
+	0x11800, 0x11838,
 	0x118a0, 0x118e9,
 	0x118ff, 0x118ff,
+	0x119a0, 0x119a7,
+	0x119aa, 0x119d7,
+	0x119da, 0x119df,
+	0x119e1, 0x119e1,
+	0x119e3, 0x119e4,
+	0x11a00, 0x11a32,
+	0x11a35, 0x11a3e,
+	0x11a50, 0x11a97,
+	0x11a9d, 0x11a9d,
 	0x11ac0, 0x11af8,
 	0x11c00, 0x11c08,
 	0x11c0a, 0x11c36,
@@ -4793,6 +4965,23 @@ static const OnigCodePoint CR_Alnum[] = {
 	0x11c72, 0x11c8f,
 	0x11c92, 0x11ca7,
 	0x11ca9, 0x11cb6,
+	0x11d00, 0x11d06,
+	0x11d08, 0x11d09,
+	0x11d0b, 0x11d36,
+	0x11d3a, 0x11d3a,
+	0x11d3c, 0x11d3d,
+	0x11d3f, 0x11d41,
+	0x11d43, 0x11d43,
+	0x11d46, 0x11d47,
+	0x11d50, 0x11d59,
+	0x11d60, 0x11d65,
+	0x11d67, 0x11d68,
+	0x11d6a, 0x11d8e,
+	0x11d90, 0x11d91,
+	0x11d93, 0x11d96,
+	0x11d98, 0x11d98,
+	0x11da0, 0x11da9,
+	0x11ee0, 0x11ef6,
 	0x12000, 0x12399,
 	0x12400, 0x1246e,
 	0x12480, 0x12543,
@@ -4802,18 +4991,23 @@ static const OnigCodePoint CR_Alnum[] = {
 	0x16a40, 0x16a5e,
 	0x16a60, 0x16a69,
 	0x16ad0, 0x16aed,
-	0x16b00, 0x16b36,
+	0x16b00, 0x16b2f,
 	0x16b40, 0x16b43,
 	0x16b50, 0x16b59,
 	0x16b63, 0x16b77,
 	0x16b7d, 0x16b8f,
-	0x16f00, 0x16f44,
-	0x16f50, 0x16f7e,
-	0x16f93, 0x16f9f,
-	0x16fe0, 0x16fe0,
-	0x17000, 0x187ec,
+	0x16e40, 0x16e7f,
+	0x16f00, 0x16f4a,
+	0x16f4f, 0x16f87,
+	0x16f8f, 0x16f9f,
+	0x16fe0, 0x16fe1,
+	0x16fe3, 0x16fe3,
+	0x17000, 0x187f7,
 	0x18800, 0x18af2,
-	0x1b000, 0x1b001,
+	0x1b000, 0x1b11e,
+	0x1b150, 0x1b152,
+	0x1b164, 0x1b167,
+	0x1b170, 0x1b2fb,
 	0x1bc00, 0x1bc6a,
 	0x1bc70, 0x1bc7c,
 	0x1bc80, 0x1bc88,
@@ -4855,9 +5049,16 @@ static const OnigCodePoint CR_Alnum[] = {
 	0x1e01b, 0x1e021,
 	0x1e023, 0x1e024,
 	0x1e026, 0x1e02a,
+	0x1e100, 0x1e12c,
+	0x1e137, 0x1e13d,
+	0x1e140, 0x1e149,
+	0x1e14e, 0x1e14e,
+	0x1e2c0, 0x1e2eb,
+	0x1e2f0, 0x1e2f9,
 	0x1e800, 0x1e8c4,
 	0x1e900, 0x1e943,
 	0x1e947, 0x1e947,
+	0x1e94b, 0x1e94b,
 	0x1e950, 0x1e959,
 	0x1ee00, 0x1ee03,
 	0x1ee05, 0x1ee1f,
@@ -4899,6 +5100,7 @@ static const OnigCodePoint CR_Alnum[] = {
 	0x2a700, 0x2b734,
 	0x2b740, 0x2b81d,
 	0x2b820, 0x2cea1,
+	0x2ceb0, 0x2ebe0,
 	0x2f800, 0x2fa1d,
 }; /* CR_Alnum */
 
@@ -4910,7 +5112,7 @@ static const OnigCodePoint CR_ASCII[] = {
 
 /* 'Punct' */
 static const OnigCodePoint CR_Punct[] = {
-	168,
+	182,
 	0x0021, 0x0023,
 	0x0025, 0x002a,
 	0x002c, 0x002f,
@@ -4947,7 +5149,11 @@ static const OnigCodePoint CR_Punct[] = {
 	0x085e, 0x085e,
 	0x0964, 0x0965,
 	0x0970, 0x0970,
+	0x09fd, 0x09fd,
+	0x0a76, 0x0a76,
 	0x0af0, 0x0af0,
+	0x0c77, 0x0c77,
+	0x0c84, 0x0c84,
 	0x0df4, 0x0df4,
 	0x0e4f, 0x0e4f,
 	0x0e5a, 0x0e5b,
@@ -4961,7 +5167,7 @@ static const OnigCodePoint CR_Punct[] = {
 	0x10fb, 0x10fb,
 	0x1360, 0x1368,
 	0x1400, 0x1400,
-	0x166d, 0x166e,
+	0x166e, 0x166e,
 	0x169b, 0x169c,
 	0x16eb, 0x16ed,
 	0x1735, 0x1736,
@@ -4996,7 +5202,7 @@ static const OnigCodePoint CR_Punct[] = {
 	0x2cfe, 0x2cff,
 	0x2d70, 0x2d70,
 	0x2e00, 0x2e2e,
-	0x2e30, 0x2e44,
+	0x2e30, 0x2e4f,
 	0x3001, 0x3003,
 	0x3008, 0x3011,
 	0x3014, 0x301f,
@@ -5050,12 +5256,13 @@ static const OnigCodePoint CR_Punct[] = {
 	0x10af0, 0x10af6,
 	0x10b39, 0x10b3f,
 	0x10b99, 0x10b9c,
+	0x10f55, 0x10f59,
 	0x11047, 0x1104d,
 	0x110bb, 0x110bc,
 	0x110be, 0x110c1,
 	0x11140, 0x11143,
 	0x11174, 0x11175,
-	0x111c5, 0x111c9,
+	0x111c5, 0x111c8,
 	0x111cd, 0x111cd,
 	0x111db, 0x111db,
 	0x111dd, 0x111df,
@@ -5069,13 +5276,22 @@ static const OnigCodePoint CR_Punct[] = {
 	0x11641, 0x11643,
 	0x11660, 0x1166c,
 	0x1173c, 0x1173e,
+	0x1183b, 0x1183b,
+	0x119e2, 0x119e2,
+	0x11a3f, 0x11a46,
+	0x11a9a, 0x11a9c,
+	0x11a9e, 0x11aa2,
 	0x11c41, 0x11c45,
 	0x11c70, 0x11c71,
+	0x11ef7, 0x11ef8,
+	0x11fff, 0x11fff,
 	0x12470, 0x12474,
 	0x16a6e, 0x16a6f,
 	0x16af5, 0x16af5,
 	0x16b37, 0x16b3b,
 	0x16b44, 0x16b44,
+	0x16e97, 0x16e9a,
+	0x16fe2, 0x16fe2,
 	0x1bc9f, 0x1bc9f,
 	0x1da87, 0x1da8b,
 	0x1e95e, 0x1e95f,
@@ -5090,7 +5306,7 @@ static const OnigCodePoint CR_Any[] = {
 
 /* 'Assigned': - */
 static const OnigCodePoint CR_Assigned[] = {
-	638,
+	666,
 	0x0000, 0x0377,
 	0x037a, 0x037f,
 	0x0384, 0x038a,
@@ -5098,25 +5314,24 @@ static const OnigCodePoint CR_Assigned[] = {
 	0x038e, 0x03a1,
 	0x03a3, 0x052f,
 	0x0531, 0x0556,
-	0x0559, 0x055f,
-	0x0561, 0x0587,
-	0x0589, 0x058a,
+	0x0559, 0x058a,
 	0x058d, 0x058f,
 	0x0591, 0x05c7,
 	0x05d0, 0x05ea,
-	0x05f0, 0x05f4,
+	0x05ef, 0x05f4,
 	0x0600, 0x061c,
 	0x061e, 0x070d,
 	0x070f, 0x074a,
 	0x074d, 0x07b1,
 	0x07c0, 0x07fa,
-	0x0800, 0x082d,
+	0x07fd, 0x082d,
 	0x0830, 0x083e,
 	0x0840, 0x085b,
 	0x085e, 0x085e,
+	0x0860, 0x086a,
 	0x08a0, 0x08b4,
 	0x08b6, 0x08bd,
-	0x08d4, 0x0983,
+	0x08d3, 0x0983,
 	0x0985, 0x098c,
 	0x098f, 0x0990,
 	0x0993, 0x09a8,
@@ -5129,7 +5344,7 @@ static const OnigCodePoint CR_Assigned[] = {
 	0x09d7, 0x09d7,
 	0x09dc, 0x09dd,
 	0x09df, 0x09e3,
-	0x09e6, 0x09fb,
+	0x09e6, 0x09fe,
 	0x0a01, 0x0a03,
 	0x0a05, 0x0a0a,
 	0x0a0f, 0x0a10,
@@ -5145,7 +5360,7 @@ static const OnigCodePoint CR_Assigned[] = {
 	0x0a51, 0x0a51,
 	0x0a59, 0x0a5c,
 	0x0a5e, 0x0a5e,
-	0x0a66, 0x0a75,
+	0x0a66, 0x0a76,
 	0x0a81, 0x0a83,
 	0x0a85, 0x0a8d,
 	0x0a8f, 0x0a91,
@@ -5159,7 +5374,7 @@ static const OnigCodePoint CR_Assigned[] = {
 	0x0ad0, 0x0ad0,
 	0x0ae0, 0x0ae3,
 	0x0ae6, 0x0af1,
-	0x0af9, 0x0af9,
+	0x0af9, 0x0aff,
 	0x0b01, 0x0b03,
 	0x0b05, 0x0b0c,
 	0x0b0f, 0x0b10,
@@ -5190,8 +5405,7 @@ static const OnigCodePoint CR_Assigned[] = {
 	0x0bd0, 0x0bd0,
 	0x0bd7, 0x0bd7,
 	0x0be6, 0x0bfa,
-	0x0c00, 0x0c03,
-	0x0c05, 0x0c0c,
+	0x0c00, 0x0c0c,
 	0x0c0e, 0x0c10,
 	0x0c12, 0x0c28,
 	0x0c2a, 0x0c39,
@@ -5202,8 +5416,7 @@ static const OnigCodePoint CR_Assigned[] = {
 	0x0c58, 0x0c5a,
 	0x0c60, 0x0c63,
 	0x0c66, 0x0c6f,
-	0x0c78, 0x0c83,
-	0x0c85, 0x0c8c,
+	0x0c77, 0x0c8c,
 	0x0c8e, 0x0c90,
 	0x0c92, 0x0ca8,
 	0x0caa, 0x0cb3,
@@ -5216,11 +5429,10 @@ static const OnigCodePoint CR_Assigned[] = {
 	0x0ce0, 0x0ce3,
 	0x0ce6, 0x0cef,
 	0x0cf1, 0x0cf2,
-	0x0d01, 0x0d03,
+	0x0d00, 0x0d03,
 	0x0d05, 0x0d0c,
 	0x0d0e, 0x0d10,
-	0x0d12, 0x0d3a,
-	0x0d3d, 0x0d44,
+	0x0d12, 0x0d44,
 	0x0d46, 0x0d48,
 	0x0d4a, 0x0d4f,
 	0x0d54, 0x0d63,
@@ -5241,17 +5453,10 @@ static const OnigCodePoint CR_Assigned[] = {
 	0x0e3f, 0x0e5b,
 	0x0e81, 0x0e82,
 	0x0e84, 0x0e84,
-	0x0e87, 0x0e88,
-	0x0e8a, 0x0e8a,
-	0x0e8d, 0x0e8d,
-	0x0e94, 0x0e97,
-	0x0e99, 0x0e9f,
-	0x0ea1, 0x0ea3,
+	0x0e86, 0x0e8a,
+	0x0e8c, 0x0ea3,
 	0x0ea5, 0x0ea5,
-	0x0ea7, 0x0ea7,
-	0x0eaa, 0x0eab,
-	0x0ead, 0x0eb9,
-	0x0ebb, 0x0ebd,
+	0x0ea7, 0x0ebd,
 	0x0ec0, 0x0ec4,
 	0x0ec6, 0x0ec6,
 	0x0ec8, 0x0ecd,
@@ -5300,7 +5505,7 @@ static const OnigCodePoint CR_Assigned[] = {
 	0x17f0, 0x17f9,
 	0x1800, 0x180e,
 	0x1810, 0x1819,
-	0x1820, 0x1877,
+	0x1820, 0x1878,
 	0x1880, 0x18aa,
 	0x18b0, 0x18f5,
 	0x1900, 0x191e,
@@ -5325,10 +5530,10 @@ static const OnigCodePoint CR_Assigned[] = {
 	0x1bfc, 0x1c37,
 	0x1c3b, 0x1c49,
 	0x1c4d, 0x1c88,
-	0x1cc0, 0x1cc7,
-	0x1cd0, 0x1cf6,
-	0x1cf8, 0x1cf9,
-	0x1d00, 0x1df5,
+	0x1c90, 0x1cba,
+	0x1cbd, 0x1cc7,
+	0x1cd0, 0x1cfa,
+	0x1d00, 0x1df9,
 	0x1dfb, 0x1f15,
 	0x1f18, 0x1f1d,
 	0x1f20, 0x1f45,
@@ -5349,19 +5554,14 @@ static const OnigCodePoint CR_Assigned[] = {
 	0x2066, 0x2071,
 	0x2074, 0x208e,
 	0x2090, 0x209c,
-	0x20a0, 0x20be,
+	0x20a0, 0x20bf,
 	0x20d0, 0x20f0,
 	0x2100, 0x218b,
-	0x2190, 0x23fe,
-	0x2400, 0x2426,
+	0x2190, 0x2426,
 	0x2440, 0x244a,
 	0x2460, 0x2b73,
 	0x2b76, 0x2b95,
-	0x2b98, 0x2bb9,
-	0x2bbd, 0x2bc8,
-	0x2bca, 0x2bd1,
-	0x2bec, 0x2bef,
-	0x2c00, 0x2c2e,
+	0x2b98, 0x2c2e,
 	0x2c30, 0x2c5e,
 	0x2c60, 0x2cf3,
 	0x2cf9, 0x2d25,
@@ -5378,7 +5578,7 @@ static const OnigCodePoint CR_Assigned[] = {
 	0x2dc8, 0x2dce,
 	0x2dd0, 0x2dd6,
 	0x2dd8, 0x2dde,
-	0x2de0, 0x2e44,
+	0x2de0, 0x2e4f,
 	0x2e80, 0x2e99,
 	0x2e9b, 0x2ef3,
 	0x2f00, 0x2fd5,
@@ -5386,27 +5586,25 @@ static const OnigCodePoint CR_Assigned[] = {
 	0x3000, 0x303f,
 	0x3041, 0x3096,
 	0x3099, 0x30ff,
-	0x3105, 0x312d,
+	0x3105, 0x312f,
 	0x3131, 0x318e,
 	0x3190, 0x31ba,
 	0x31c0, 0x31e3,
 	0x31f0, 0x321e,
-	0x3220, 0x32fe,
-	0x3300, 0x4db5,
-	0x4dc0, 0x9fd5,
+	0x3220, 0x4db5,
+	0x4dc0, 0x9fef,
 	0xa000, 0xa48c,
 	0xa490, 0xa4c6,
 	0xa4d0, 0xa62b,
 	0xa640, 0xa6f7,
-	0xa700, 0xa7ae,
-	0xa7b0, 0xa7b7,
+	0xa700, 0xa7bf,
+	0xa7c2, 0xa7c6,
 	0xa7f7, 0xa82b,
 	0xa830, 0xa839,
 	0xa840, 0xa877,
 	0xa880, 0xa8c5,
 	0xa8ce, 0xa8d9,
-	0xa8e0, 0xa8fd,
-	0xa900, 0xa953,
+	0xa8e0, 0xa953,
 	0xa95f, 0xa97c,
 	0xa980, 0xa9cd,
 	0xa9cf, 0xa9d9,
@@ -5421,7 +5619,7 @@ static const OnigCodePoint CR_Assigned[] = {
 	0xab11, 0xab16,
 	0xab20, 0xab26,
 	0xab28, 0xab2e,
-	0xab30, 0xab65,
+	0xab30, 0xab67,
 	0xab70, 0xabed,
 	0xabf0, 0xabf9,
 	0xac00, 0xd7a3,
@@ -5473,7 +5671,7 @@ static const OnigCodePoint CR_Assigned[] = {
 	0x102a0, 0x102d0,
 	0x102e0, 0x102fb,
 	0x10300, 0x10323,
-	0x10330, 0x1034a,
+	0x1032d, 0x1034a,
 	0x10350, 0x1037a,
 	0x10380, 0x1039d,
 	0x1039f, 0x103c3,
@@ -5507,9 +5705,9 @@ static const OnigCodePoint CR_Assigned[] = {
 	0x10a05, 0x10a06,
 	0x10a0c, 0x10a13,
 	0x10a15, 0x10a17,
-	0x10a19, 0x10a33,
+	0x10a19, 0x10a35,
 	0x10a38, 0x10a3a,
-	0x10a3f, 0x10a47,
+	0x10a3f, 0x10a48,
 	0x10a50, 0x10a58,
 	0x10a60, 0x10a9f,
 	0x10ac0, 0x10ae6,
@@ -5523,15 +5721,20 @@ static const OnigCodePoint CR_Assigned[] = {
 	0x10c00, 0x10c48,
 	0x10c80, 0x10cb2,
 	0x10cc0, 0x10cf2,
-	0x10cfa, 0x10cff,
+	0x10cfa, 0x10d27,
+	0x10d30, 0x10d39,
 	0x10e60, 0x10e7e,
+	0x10f00, 0x10f27,
+	0x10f30, 0x10f59,
+	0x10fe0, 0x10ff6,
 	0x11000, 0x1104d,
 	0x11052, 0x1106f,
 	0x1107f, 0x110c1,
+	0x110cd, 0x110cd,
 	0x110d0, 0x110e8,
 	0x110f0, 0x110f9,
 	0x11100, 0x11134,
-	0x11136, 0x11143,
+	0x11136, 0x11146,
 	0x11150, 0x11176,
 	0x11180, 0x111cd,
 	0x111d0, 0x111df,
@@ -5552,7 +5755,7 @@ static const OnigCodePoint CR_Assigned[] = {
 	0x1132a, 0x11330,
 	0x11332, 0x11333,
 	0x11335, 0x11339,
-	0x1133c, 0x11344,
+	0x1133b, 0x11344,
 	0x11347, 0x11348,
 	0x1134b, 0x1134d,
 	0x11350, 0x11350,
@@ -5562,7 +5765,7 @@ static const OnigCodePoint CR_Assigned[] = {
 	0x11370, 0x11374,
 	0x11400, 0x11459,
 	0x1145b, 0x1145b,
-	0x1145d, 0x1145d,
+	0x1145d, 0x1145f,
 	0x11480, 0x114c7,
 	0x114d0, 0x114d9,
 	0x11580, 0x115b5,
@@ -5570,13 +5773,19 @@ static const OnigCodePoint CR_Assigned[] = {
 	0x11600, 0x11644,
 	0x11650, 0x11659,
 	0x11660, 0x1166c,
-	0x11680, 0x116b7,
+	0x11680, 0x116b8,
 	0x116c0, 0x116c9,
-	0x11700, 0x11719,
+	0x11700, 0x1171a,
 	0x1171d, 0x1172b,
 	0x11730, 0x1173f,
+	0x11800, 0x1183b,
 	0x118a0, 0x118f2,
 	0x118ff, 0x118ff,
+	0x119a0, 0x119a7,
+	0x119aa, 0x119d7,
+	0x119da, 0x119e4,
+	0x11a00, 0x11a47,
+	0x11a50, 0x11aa2,
 	0x11ac0, 0x11af8,
 	0x11c00, 0x11c08,
 	0x11c0a, 0x11c36,
@@ -5585,11 +5794,27 @@ static const OnigCodePoint CR_Assigned[] = {
 	0x11c70, 0x11c8f,
 	0x11c92, 0x11ca7,
 	0x11ca9, 0x11cb6,
-	0x12000, 0x12399,
+	0x11d00, 0x11d06,
+	0x11d08, 0x11d09,
+	0x11d0b, 0x11d36,
+	0x11d3a, 0x11d3a,
+	0x11d3c, 0x11d3d,
+	0x11d3f, 0x11d47,
+	0x11d50, 0x11d59,
+	0x11d60, 0x11d65,
+	0x11d67, 0x11d68,
+	0x11d6a, 0x11d8e,
+	0x11d90, 0x11d91,
+	0x11d93, 0x11d98,
+	0x11da0, 0x11da9,
+	0x11ee0, 0x11ef8,
+	0x11fc0, 0x11ff1,
+	0x11fff, 0x12399,
 	0x12400, 0x1246e,
 	0x12470, 0x12474,
 	0x12480, 0x12543,
 	0x13000, 0x1342e,
+	0x13430, 0x13438,
 	0x14400, 0x14646,
 	0x16800, 0x16a38,
 	0x16a40, 0x16a5e,
@@ -5602,13 +5827,17 @@ static const OnigCodePoint CR_Assigned[] = {
 	0x16b5b, 0x16b61,
 	0x16b63, 0x16b77,
 	0x16b7d, 0x16b8f,
-	0x16f00, 0x16f44,
-	0x16f50, 0x16f7e,
+	0x16e40, 0x16e9a,
+	0x16f00, 0x16f4a,
+	0x16f4f, 0x16f87,
 	0x16f8f, 0x16f9f,
-	0x16fe0, 0x16fe0,
-	0x17000, 0x187ec,
+	0x16fe0, 0x16fe3,
+	0x17000, 0x187f7,
 	0x18800, 0x18af2,
-	0x1b000, 0x1b001,
+	0x1b000, 0x1b11e,
+	0x1b150, 0x1b152,
+	0x1b164, 0x1b167,
+	0x1b170, 0x1b2fb,
 	0x1bc00, 0x1bc6a,
 	0x1bc70, 0x1bc7c,
 	0x1bc80, 0x1bc88,
@@ -5618,8 +5847,9 @@ static const OnigCodePoint CR_Assigned[] = {
 	0x1d100, 0x1d126,
 	0x1d129, 0x1d1e8,
 	0x1d200, 0x1d245,
+	0x1d2e0, 0x1d2f3,
 	0x1d300, 0x1d356,
-	0x1d360, 0x1d371,
+	0x1d360, 0x1d378,
 	0x1d400, 0x1d454,
 	0x1d456, 0x1d49c,
 	0x1d49e, 0x1d49f,
@@ -5648,11 +5878,19 @@ static const OnigCodePoint CR_Assigned[] = {
 	0x1e01b, 0x1e021,
 	0x1e023, 0x1e024,
 	0x1e026, 0x1e02a,
+	0x1e100, 0x1e12c,
+	0x1e130, 0x1e13d,
+	0x1e140, 0x1e149,
+	0x1e14e, 0x1e14f,
+	0x1e2c0, 0x1e2f9,
+	0x1e2ff, 0x1e2ff,
 	0x1e800, 0x1e8c4,
 	0x1e8c7, 0x1e8d6,
-	0x1e900, 0x1e94a,
+	0x1e900, 0x1e94b,
 	0x1e950, 0x1e959,
 	0x1e95e, 0x1e95f,
+	0x1ec71, 0x1ecb4,
+	0x1ed01, 0x1ed3d,
 	0x1ee00, 0x1ee03,
 	0x1ee05, 0x1ee1f,
 	0x1ee21, 0x1ee22,
@@ -5694,35 +5932,41 @@ static const OnigCodePoint CR_Assigned[] = {
 	0x1f0c1, 0x1f0cf,
 	0x1f0d1, 0x1f0f5,
 	0x1f100, 0x1f10c,
-	0x1f110, 0x1f12e,
-	0x1f130, 0x1f16b,
+	0x1f110, 0x1f16c,
 	0x1f170, 0x1f1ac,
 	0x1f1e6, 0x1f202,
 	0x1f210, 0x1f23b,
 	0x1f240, 0x1f248,
 	0x1f250, 0x1f251,
-	0x1f300, 0x1f6d2,
+	0x1f260, 0x1f265,
+	0x1f300, 0x1f6d5,
 	0x1f6e0, 0x1f6ec,
-	0x1f6f0, 0x1f6f6,
+	0x1f6f0, 0x1f6fa,
 	0x1f700, 0x1f773,
-	0x1f780, 0x1f7d4,
+	0x1f780, 0x1f7d8,
+	0x1f7e0, 0x1f7eb,
 	0x1f800, 0x1f80b,
 	0x1f810, 0x1f847,
 	0x1f850, 0x1f859,
 	0x1f860, 0x1f887,
 	0x1f890, 0x1f8ad,
-	0x1f910, 0x1f91e,
-	0x1f920, 0x1f927,
-	0x1f930, 0x1f930,
-	0x1f933, 0x1f93e,
-	0x1f940, 0x1f94b,
-	0x1f950, 0x1f95e,
-	0x1f980, 0x1f991,
-	0x1f9c0, 0x1f9c0,
+	0x1f900, 0x1f90b,
+	0x1f90d, 0x1f971,
+	0x1f973, 0x1f976,
+	0x1f97a, 0x1f9a2,
+	0x1f9a5, 0x1f9aa,
+	0x1f9ae, 0x1f9ca,
+	0x1f9cd, 0x1fa53,
+	0x1fa60, 0x1fa6d,
+	0x1fa70, 0x1fa73,
+	0x1fa78, 0x1fa7a,
+	0x1fa80, 0x1fa82,
+	0x1fa90, 0x1fa95,
 	0x20000, 0x2a6d6,
 	0x2a700, 0x2b734,
 	0x2b740, 0x2b81d,
 	0x2b820, 0x2cea1,
+	0x2ceb0, 0x2ebe0,
 	0x2f800, 0x2fa1d,
 	0xe0001, 0xe0001,
 	0xe0020, 0xe007f,
@@ -5733,7 +5977,7 @@ static const OnigCodePoint CR_Assigned[] = {
 
 /* 'C': Major Category */
 static const OnigCodePoint CR_C[] = {
-	642,
+	668,
 	0x0000, 0x001f,
 	0x007f, 0x009f,
 	0x00ad, 0x00ad,
@@ -5744,25 +5988,24 @@ static const OnigCodePoint CR_C[] = {
 	0x03a2, 0x03a2,
 	0x0530, 0x0530,
 	0x0557, 0x0558,
-	0x0560, 0x0560,
-	0x0588, 0x0588,
 	0x058b, 0x058c,
 	0x0590, 0x0590,
 	0x05c8, 0x05cf,
-	0x05eb, 0x05ef,
+	0x05eb, 0x05ee,
 	0x05f5, 0x0605,
 	0x061c, 0x061d,
 	0x06dd, 0x06dd,
 	0x070e, 0x070f,
 	0x074b, 0x074c,
 	0x07b2, 0x07bf,
-	0x07fb, 0x07ff,
+	0x07fb, 0x07fc,
 	0x082e, 0x082f,
 	0x083f, 0x083f,
 	0x085c, 0x085d,
-	0x085f, 0x089f,
+	0x085f, 0x085f,
+	0x086b, 0x089f,
 	0x08b5, 0x08b5,
-	0x08be, 0x08d3,
+	0x08be, 0x08d2,
 	0x08e2, 0x08e2,
 	0x0984, 0x0984,
 	0x098d, 0x098e,
@@ -5777,7 +6020,7 @@ static const OnigCodePoint CR_C[] = {
 	0x09d8, 0x09db,
 	0x09de, 0x09de,
 	0x09e4, 0x09e5,
-	0x09fc, 0x0a00,
+	0x09ff, 0x0a00,
 	0x0a04, 0x0a04,
 	0x0a0b, 0x0a0e,
 	0x0a11, 0x0a12,
@@ -5793,7 +6036,7 @@ static const OnigCodePoint CR_C[] = {
 	0x0a52, 0x0a58,
 	0x0a5d, 0x0a5d,
 	0x0a5f, 0x0a65,
-	0x0a76, 0x0a80,
+	0x0a77, 0x0a80,
 	0x0a84, 0x0a84,
 	0x0a8e, 0x0a8e,
 	0x0a92, 0x0a92,
@@ -5807,7 +6050,7 @@ static const OnigCodePoint CR_C[] = {
 	0x0ad1, 0x0adf,
 	0x0ae4, 0x0ae5,
 	0x0af2, 0x0af8,
-	0x0afa, 0x0b00,
+	0x0b00, 0x0b00,
 	0x0b04, 0x0b04,
 	0x0b0d, 0x0b0e,
 	0x0b11, 0x0b12,
@@ -5838,7 +6081,6 @@ static const OnigCodePoint CR_C[] = {
 	0x0bd1, 0x0bd6,
 	0x0bd8, 0x0be5,
 	0x0bfb, 0x0bff,
-	0x0c04, 0x0c04,
 	0x0c0d, 0x0c0d,
 	0x0c11, 0x0c11,
 	0x0c29, 0x0c29,
@@ -5849,8 +6091,7 @@ static const OnigCodePoint CR_C[] = {
 	0x0c57, 0x0c57,
 	0x0c5b, 0x0c5f,
 	0x0c64, 0x0c65,
-	0x0c70, 0x0c77,
-	0x0c84, 0x0c84,
+	0x0c70, 0x0c76,
 	0x0c8d, 0x0c8d,
 	0x0c91, 0x0c91,
 	0x0ca9, 0x0ca9,
@@ -5863,11 +6104,10 @@ static const OnigCodePoint CR_C[] = {
 	0x0cdf, 0x0cdf,
 	0x0ce4, 0x0ce5,
 	0x0cf0, 0x0cf0,
-	0x0cf3, 0x0d00,
+	0x0cf3, 0x0cff,
 	0x0d04, 0x0d04,
 	0x0d0d, 0x0d0d,
 	0x0d11, 0x0d11,
-	0x0d3b, 0x0d3c,
 	0x0d45, 0x0d45,
 	0x0d49, 0x0d49,
 	0x0d50, 0x0d53,
@@ -5888,17 +6128,10 @@ static const OnigCodePoint CR_C[] = {
 	0x0e3b, 0x0e3e,
 	0x0e5c, 0x0e80,
 	0x0e83, 0x0e83,
-	0x0e85, 0x0e86,
-	0x0e89, 0x0e89,
-	0x0e8b, 0x0e8c,
-	0x0e8e, 0x0e93,
-	0x0e98, 0x0e98,
-	0x0ea0, 0x0ea0,
+	0x0e85, 0x0e85,
+	0x0e8b, 0x0e8b,
 	0x0ea4, 0x0ea4,
 	0x0ea6, 0x0ea6,
-	0x0ea8, 0x0ea9,
-	0x0eac, 0x0eac,
-	0x0eba, 0x0eba,
 	0x0ebe, 0x0ebf,
 	0x0ec5, 0x0ec5,
 	0x0ec7, 0x0ec7,
@@ -5948,7 +6181,7 @@ static const OnigCodePoint CR_C[] = {
 	0x17fa, 0x17ff,
 	0x180e, 0x180f,
 	0x181a, 0x181f,
-	0x1878, 0x187f,
+	0x1879, 0x187f,
 	0x18ab, 0x18af,
 	0x18f6, 0x18ff,
 	0x191f, 0x191f,
@@ -5972,11 +6205,11 @@ static const OnigCodePoint CR_C[] = {
 	0x1bf4, 0x1bfb,
 	0x1c38, 0x1c3a,
 	0x1c4a, 0x1c4c,
-	0x1c89, 0x1cbf,
+	0x1c89, 0x1c8f,
+	0x1cbb, 0x1cbc,
 	0x1cc8, 0x1ccf,
-	0x1cf7, 0x1cf7,
-	0x1cfa, 0x1cff,
-	0x1df6, 0x1dfa,
+	0x1cfb, 0x1cff,
+	0x1dfa, 0x1dfa,
 	0x1f16, 0x1f17,
 	0x1f1e, 0x1f1f,
 	0x1f46, 0x1f47,
@@ -5999,18 +6232,13 @@ static const OnigCodePoint CR_C[] = {
 	0x2072, 0x2073,
 	0x208f, 0x208f,
 	0x209d, 0x209f,
-	0x20bf, 0x20cf,
+	0x20c0, 0x20cf,
 	0x20f1, 0x20ff,
 	0x218c, 0x218f,
-	0x23ff, 0x23ff,
 	0x2427, 0x243f,
 	0x244b, 0x245f,
 	0x2b74, 0x2b75,
 	0x2b96, 0x2b97,
-	0x2bba, 0x2bbc,
-	0x2bc9, 0x2bc9,
-	0x2bd2, 0x2beb,
-	0x2bf0, 0x2bff,
 	0x2c2f, 0x2c2f,
 	0x2c5f, 0x2c5f,
 	0x2cf4, 0x2cf8,
@@ -6028,7 +6256,7 @@ static const OnigCodePoint CR_C[] = {
 	0x2dcf, 0x2dcf,
 	0x2dd7, 0x2dd7,
 	0x2ddf, 0x2ddf,
-	0x2e45, 0x2e7f,
+	0x2e50, 0x2e7f,
 	0x2e9a, 0x2e9a,
 	0x2ef4, 0x2eff,
 	0x2fd6, 0x2fef,
@@ -6036,26 +6264,24 @@ static const OnigCodePoint CR_C[] = {
 	0x3040, 0x3040,
 	0x3097, 0x3098,
 	0x3100, 0x3104,
-	0x312e, 0x3130,
+	0x3130, 0x3130,
 	0x318f, 0x318f,
 	0x31bb, 0x31bf,
 	0x31e4, 0x31ef,
 	0x321f, 0x321f,
-	0x32ff, 0x32ff,
 	0x4db6, 0x4dbf,
-	0x9fd6, 0x9fff,
+	0x9ff0, 0x9fff,
 	0xa48d, 0xa48f,
 	0xa4c7, 0xa4cf,
 	0xa62c, 0xa63f,
 	0xa6f8, 0xa6ff,
-	0xa7af, 0xa7af,
-	0xa7b8, 0xa7f6,
+	0xa7c0, 0xa7c1,
+	0xa7c7, 0xa7f6,
 	0xa82c, 0xa82f,
 	0xa83a, 0xa83f,
 	0xa878, 0xa87f,
 	0xa8c6, 0xa8cd,
 	0xa8da, 0xa8df,
-	0xa8fe, 0xa8ff,
 	0xa954, 0xa95e,
 	0xa97d, 0xa97f,
 	0xa9ce, 0xa9ce,
@@ -6071,7 +6297,7 @@ static const OnigCodePoint CR_C[] = {
 	0xab17, 0xab1f,
 	0xab27, 0xab27,
 	0xab2f, 0xab2f,
-	0xab66, 0xab6f,
+	0xab68, 0xab6f,
 	0xabee, 0xabef,
 	0xabfa, 0xabff,
 	0xd7a4, 0xd7af,
@@ -6121,7 +6347,7 @@ static const OnigCodePoint CR_C[] = {
 	0x1029d, 0x1029f,
 	0x102d1, 0x102df,
 	0x102fc, 0x102ff,
-	0x10324, 0x1032f,
+	0x10324, 0x1032c,
 	0x1034b, 0x1034f,
 	0x1037b, 0x1037f,
 	0x1039e, 0x1039e,
@@ -6156,9 +6382,9 @@ static const OnigCodePoint CR_C[] = {
 	0x10a07, 0x10a0b,
 	0x10a14, 0x10a14,
 	0x10a18, 0x10a18,
-	0x10a34, 0x10a37,
+	0x10a36, 0x10a37,
 	0x10a3b, 0x10a3e,
-	0x10a48, 0x10a4f,
+	0x10a49, 0x10a4f,
 	0x10a59, 0x10a5f,
 	0x10aa0, 0x10abf,
 	0x10ae7, 0x10aea,
@@ -6172,8 +6398,12 @@ static const OnigCodePoint CR_C[] = {
 	0x10c49, 0x10c7f,
 	0x10cb3, 0x10cbf,
 	0x10cf3, 0x10cf9,
-	0x10d00, 0x10e5f,
-	0x10e7f, 0x10fff,
+	0x10d28, 0x10d2f,
+	0x10d3a, 0x10e5f,
+	0x10e7f, 0x10eff,
+	0x10f28, 0x10f2f,
+	0x10f5a, 0x10fdf,
+	0x10ff7, 0x10fff,
 	0x1104e, 0x11051,
 	0x11070, 0x1107e,
 	0x110bd, 0x110bd,
@@ -6181,7 +6411,7 @@ static const OnigCodePoint CR_C[] = {
 	0x110e9, 0x110ef,
 	0x110fa, 0x110ff,
 	0x11135, 0x11135,
-	0x11144, 0x1114f,
+	0x11147, 0x1114f,
 	0x11177, 0x1117f,
 	0x111ce, 0x111cf,
 	0x111e0, 0x111e0,
@@ -6201,7 +6431,7 @@ static const OnigCodePoint CR_C[] = {
 	0x11329, 0x11329,
 	0x11331, 0x11331,
 	0x11334, 0x11334,
-	0x1133a, 0x1133b,
+	0x1133a, 0x1133a,
 	0x11345, 0x11346,
 	0x11349, 0x1134a,
 	0x1134e, 0x1134f,
@@ -6212,7 +6442,7 @@ static const OnigCodePoint CR_C[] = {
 	0x11375, 0x113ff,
 	0x1145a, 0x1145a,
 	0x1145c, 0x1145c,
-	0x1145e, 0x1147f,
+	0x11460, 0x1147f,
 	0x114c8, 0x114cf,
 	0x114da, 0x1157f,
 	0x115b6, 0x115b7,
@@ -6220,13 +6450,19 @@ static const OnigCodePoint CR_C[] = {
 	0x11645, 0x1164f,
 	0x1165a, 0x1165f,
 	0x1166d, 0x1167f,
-	0x116b8, 0x116bf,
+	0x116b9, 0x116bf,
 	0x116ca, 0x116ff,
-	0x1171a, 0x1171c,
+	0x1171b, 0x1171c,
 	0x1172c, 0x1172f,
-	0x11740, 0x1189f,
+	0x11740, 0x117ff,
+	0x1183c, 0x1189f,
 	0x118f3, 0x118fe,
-	0x11900, 0x11abf,
+	0x11900, 0x1199f,
+	0x119a8, 0x119a9,
+	0x119d8, 0x119d9,
+	0x119e5, 0x119ff,
+	0x11a48, 0x11a4f,
+	0x11aa3, 0x11abf,
 	0x11af9, 0x11bff,
 	0x11c09, 0x11c09,
 	0x11c37, 0x11c37,
@@ -6234,7 +6470,22 @@ static const OnigCodePoint CR_C[] = {
 	0x11c6d, 0x11c6f,
 	0x11c90, 0x11c91,
 	0x11ca8, 0x11ca8,
-	0x11cb7, 0x11fff,
+	0x11cb7, 0x11cff,
+	0x11d07, 0x11d07,
+	0x11d0a, 0x11d0a,
+	0x11d37, 0x11d39,
+	0x11d3b, 0x11d3b,
+	0x11d3e, 0x11d3e,
+	0x11d48, 0x11d4f,
+	0x11d5a, 0x11d5f,
+	0x11d66, 0x11d66,
+	0x11d69, 0x11d69,
+	0x11d8f, 0x11d8f,
+	0x11d92, 0x11d92,
+	0x11d99, 0x11d9f,
+	0x11daa, 0x11edf,
+	0x11ef9, 0x11fbf,
+	0x11ff2, 0x11ffe,
 	0x1239a, 0x123ff,
 	0x1246f, 0x1246f,
 	0x12475, 0x1247f,
@@ -6251,14 +6502,18 @@ static const OnigCodePoint CR_C[] = {
 	0x16b5a, 0x16b5a,
 	0x16b62, 0x16b62,
 	0x16b78, 0x16b7c,
-	0x16b90, 0x16eff,
-	0x16f45, 0x16f4f,
-	0x16f7f, 0x16f8e,
+	0x16b90, 0x16e3f,
+	0x16e9b, 0x16eff,
+	0x16f4b, 0x16f4e,
+	0x16f88, 0x16f8e,
 	0x16fa0, 0x16fdf,
-	0x16fe1, 0x16fff,
-	0x187ed, 0x187ff,
+	0x16fe4, 0x16fff,
+	0x187f8, 0x187ff,
 	0x18af3, 0x1afff,
-	0x1b002, 0x1bbff,
+	0x1b11f, 0x1b14f,
+	0x1b153, 0x1b163,
+	0x1b168, 0x1b16f,
+	0x1b2fc, 0x1bbff,
 	0x1bc6b, 0x1bc6f,
 	0x1bc7d, 0x1bc7f,
 	0x1bc89, 0x1bc8f,
@@ -6268,9 +6523,10 @@ static const OnigCodePoint CR_C[] = {
 	0x1d127, 0x1d128,
 	0x1d173, 0x1d17a,
 	0x1d1e9, 0x1d1ff,
-	0x1d246, 0x1d2ff,
+	0x1d246, 0x1d2df,
+	0x1d2f4, 0x1d2ff,
 	0x1d357, 0x1d35f,
-	0x1d372, 0x1d3ff,
+	0x1d379, 0x1d3ff,
 	0x1d455, 0x1d455,
 	0x1d49d, 0x1d49d,
 	0x1d4a0, 0x1d4a1,
@@ -6298,12 +6554,20 @@ static const OnigCodePoint CR_C[] = {
 	0x1e019, 0x1e01a,
 	0x1e022, 0x1e022,
 	0x1e025, 0x1e025,
-	0x1e02b, 0x1e7ff,
+	0x1e02b, 0x1e0ff,
+	0x1e12d, 0x1e12f,
+	0x1e13e, 0x1e13f,
+	0x1e14a, 0x1e14d,
+	0x1e150, 0x1e2bf,
+	0x1e2fa, 0x1e2fe,
+	0x1e300, 0x1e7ff,
 	0x1e8c5, 0x1e8c6,
 	0x1e8d7, 0x1e8ff,
-	0x1e94b, 0x1e94f,
+	0x1e94c, 0x1e94f,
 	0x1e95a, 0x1e95d,
-	0x1e960, 0x1edff,
+	0x1e960, 0x1ec70,
+	0x1ecb5, 0x1ed00,
+	0x1ed3e, 0x1edff,
 	0x1ee04, 0x1ee04,
 	0x1ee20, 0x1ee20,
 	0x1ee23, 0x1ee23,
@@ -6345,35 +6609,41 @@ static const OnigCodePoint CR_C[] = {
 	0x1f0d0, 0x1f0d0,
 	0x1f0f6, 0x1f0ff,
 	0x1f10d, 0x1f10f,
-	0x1f12f, 0x1f12f,
-	0x1f16c, 0x1f16f,
+	0x1f16d, 0x1f16f,
 	0x1f1ad, 0x1f1e5,
 	0x1f203, 0x1f20f,
 	0x1f23c, 0x1f23f,
 	0x1f249, 0x1f24f,
-	0x1f252, 0x1f2ff,
-	0x1f6d3, 0x1f6df,
+	0x1f252, 0x1f25f,
+	0x1f266, 0x1f2ff,
+	0x1f6d6, 0x1f6df,
 	0x1f6ed, 0x1f6ef,
-	0x1f6f7, 0x1f6ff,
+	0x1f6fb, 0x1f6ff,
 	0x1f774, 0x1f77f,
-	0x1f7d5, 0x1f7ff,
+	0x1f7d9, 0x1f7df,
+	0x1f7ec, 0x1f7ff,
 	0x1f80c, 0x1f80f,
 	0x1f848, 0x1f84f,
 	0x1f85a, 0x1f85f,
 	0x1f888, 0x1f88f,
-	0x1f8ae, 0x1f90f,
-	0x1f91f, 0x1f91f,
-	0x1f928, 0x1f92f,
-	0x1f931, 0x1f932,
-	0x1f93f, 0x1f93f,
-	0x1f94c, 0x1f94f,
-	0x1f95f, 0x1f97f,
-	0x1f992, 0x1f9bf,
-	0x1f9c1, 0x1ffff,
+	0x1f8ae, 0x1f8ff,
+	0x1f90c, 0x1f90c,
+	0x1f972, 0x1f972,
+	0x1f977, 0x1f979,
+	0x1f9a3, 0x1f9a4,
+	0x1f9ab, 0x1f9ad,
+	0x1f9cb, 0x1f9cc,
+	0x1fa54, 0x1fa5f,
+	0x1fa6e, 0x1fa6f,
+	0x1fa74, 0x1fa77,
+	0x1fa7b, 0x1fa7f,
+	0x1fa83, 0x1fa8f,
+	0x1fa96, 0x1ffff,
 	0x2a6d7, 0x2a6ff,
 	0x2b735, 0x2b73f,
 	0x2b81e, 0x2b81f,
-	0x2cea2, 0x2f7ff,
+	0x2cea2, 0x2ceaf,
+	0x2ebe1, 0x2f7ff,
 	0x2fa1e, 0xe00ff,
 	0xe01f0, 0x10ffff,
 }; /* CR_C */
@@ -6383,7 +6653,7 @@ static const OnigCodePoint CR_C[] = {
 
 /* 'Cf': General Category */
 static const OnigCodePoint CR_Cf[] = {
-	18,
+	20,
 	0x00ad, 0x00ad,
 	0x0600, 0x0605,
 	0x061c, 0x061c,
@@ -6398,6 +6668,8 @@ static const OnigCodePoint CR_Cf[] = {
 	0xfeff, 0xfeff,
 	0xfff9, 0xfffb,
 	0x110bd, 0x110bd,
+	0x110cd, 0x110cd,
+	0x13430, 0x13438,
 	0x1bca0, 0x1bca3,
 	0x1d173, 0x1d17a,
 	0xe0001, 0xe0001,
@@ -6406,7 +6678,7 @@ static const OnigCodePoint CR_Cf[] = {
 
 /* 'Cn': General Category */
 static const OnigCodePoint CR_Cn[] = {
-	638,
+	666,
 	0x0378, 0x0379,
 	0x0380, 0x0383,
 	0x038b, 0x038b,
@@ -6414,24 +6686,23 @@ static const OnigCodePoint CR_Cn[] = {
 	0x03a2, 0x03a2,
 	0x0530, 0x0530,
 	0x0557, 0x0558,
-	0x0560, 0x0560,
-	0x0588, 0x0588,
 	0x058b, 0x058c,
 	0x0590, 0x0590,
 	0x05c8, 0x05cf,
-	0x05eb, 0x05ef,
+	0x05eb, 0x05ee,
 	0x05f5, 0x05ff,
 	0x061d, 0x061d,
 	0x070e, 0x070e,
 	0x074b, 0x074c,
 	0x07b2, 0x07bf,
-	0x07fb, 0x07ff,
+	0x07fb, 0x07fc,
 	0x082e, 0x082f,
 	0x083f, 0x083f,
 	0x085c, 0x085d,
-	0x085f, 0x089f,
+	0x085f, 0x085f,
+	0x086b, 0x089f,
 	0x08b5, 0x08b5,
-	0x08be, 0x08d3,
+	0x08be, 0x08d2,
 	0x0984, 0x0984,
 	0x098d, 0x098e,
 	0x0991, 0x0992,
@@ -6445,7 +6716,7 @@ static const OnigCodePoint CR_Cn[] = {
 	0x09d8, 0x09db,
 	0x09de, 0x09de,
 	0x09e4, 0x09e5,
-	0x09fc, 0x0a00,
+	0x09ff, 0x0a00,
 	0x0a04, 0x0a04,
 	0x0a0b, 0x0a0e,
 	0x0a11, 0x0a12,
@@ -6461,7 +6732,7 @@ static const OnigCodePoint CR_Cn[] = {
 	0x0a52, 0x0a58,
 	0x0a5d, 0x0a5d,
 	0x0a5f, 0x0a65,
-	0x0a76, 0x0a80,
+	0x0a77, 0x0a80,
 	0x0a84, 0x0a84,
 	0x0a8e, 0x0a8e,
 	0x0a92, 0x0a92,
@@ -6475,7 +6746,7 @@ static const OnigCodePoint CR_Cn[] = {
 	0x0ad1, 0x0adf,
 	0x0ae4, 0x0ae5,
 	0x0af2, 0x0af8,
-	0x0afa, 0x0b00,
+	0x0b00, 0x0b00,
 	0x0b04, 0x0b04,
 	0x0b0d, 0x0b0e,
 	0x0b11, 0x0b12,
@@ -6506,7 +6777,6 @@ static const OnigCodePoint CR_Cn[] = {
 	0x0bd1, 0x0bd6,
 	0x0bd8, 0x0be5,
 	0x0bfb, 0x0bff,
-	0x0c04, 0x0c04,
 	0x0c0d, 0x0c0d,
 	0x0c11, 0x0c11,
 	0x0c29, 0x0c29,
@@ -6517,8 +6787,7 @@ static const OnigCodePoint CR_Cn[] = {
 	0x0c57, 0x0c57,
 	0x0c5b, 0x0c5f,
 	0x0c64, 0x0c65,
-	0x0c70, 0x0c77,
-	0x0c84, 0x0c84,
+	0x0c70, 0x0c76,
 	0x0c8d, 0x0c8d,
 	0x0c91, 0x0c91,
 	0x0ca9, 0x0ca9,
@@ -6531,11 +6800,10 @@ static const OnigCodePoint CR_Cn[] = {
 	0x0cdf, 0x0cdf,
 	0x0ce4, 0x0ce5,
 	0x0cf0, 0x0cf0,
-	0x0cf3, 0x0d00,
+	0x0cf3, 0x0cff,
 	0x0d04, 0x0d04,
 	0x0d0d, 0x0d0d,
 	0x0d11, 0x0d11,
-	0x0d3b, 0x0d3c,
 	0x0d45, 0x0d45,
 	0x0d49, 0x0d49,
 	0x0d50, 0x0d53,
@@ -6556,17 +6824,10 @@ static const OnigCodePoint CR_Cn[] = {
 	0x0e3b, 0x0e3e,
 	0x0e5c, 0x0e80,
 	0x0e83, 0x0e83,
-	0x0e85, 0x0e86,
-	0x0e89, 0x0e89,
-	0x0e8b, 0x0e8c,
-	0x0e8e, 0x0e93,
-	0x0e98, 0x0e98,
-	0x0ea0, 0x0ea0,
+	0x0e85, 0x0e85,
+	0x0e8b, 0x0e8b,
 	0x0ea4, 0x0ea4,
 	0x0ea6, 0x0ea6,
-	0x0ea8, 0x0ea9,
-	0x0eac, 0x0eac,
-	0x0eba, 0x0eba,
 	0x0ebe, 0x0ebf,
 	0x0ec5, 0x0ec5,
 	0x0ec7, 0x0ec7,
@@ -6616,7 +6877,7 @@ static const OnigCodePoint CR_Cn[] = {
 	0x17fa, 0x17ff,
 	0x180f, 0x180f,
 	0x181a, 0x181f,
-	0x1878, 0x187f,
+	0x1879, 0x187f,
 	0x18ab, 0x18af,
 	0x18f6, 0x18ff,
 	0x191f, 0x191f,
@@ -6640,11 +6901,11 @@ static const OnigCodePoint CR_Cn[] = {
 	0x1bf4, 0x1bfb,
 	0x1c38, 0x1c3a,
 	0x1c4a, 0x1c4c,
-	0x1c89, 0x1cbf,
+	0x1c89, 0x1c8f,
+	0x1cbb, 0x1cbc,
 	0x1cc8, 0x1ccf,
-	0x1cf7, 0x1cf7,
-	0x1cfa, 0x1cff,
-	0x1df6, 0x1dfa,
+	0x1cfb, 0x1cff,
+	0x1dfa, 0x1dfa,
 	0x1f16, 0x1f17,
 	0x1f1e, 0x1f1f,
 	0x1f46, 0x1f47,
@@ -6665,18 +6926,13 @@ static const OnigCodePoint CR_Cn[] = {
 	0x2072, 0x2073,
 	0x208f, 0x208f,
 	0x209d, 0x209f,
-	0x20bf, 0x20cf,
+	0x20c0, 0x20cf,
 	0x20f1, 0x20ff,
 	0x218c, 0x218f,
-	0x23ff, 0x23ff,
 	0x2427, 0x243f,
 	0x244b, 0x245f,
 	0x2b74, 0x2b75,
 	0x2b96, 0x2b97,
-	0x2bba, 0x2bbc,
-	0x2bc9, 0x2bc9,
-	0x2bd2, 0x2beb,
-	0x2bf0, 0x2bff,
 	0x2c2f, 0x2c2f,
 	0x2c5f, 0x2c5f,
 	0x2cf4, 0x2cf8,
@@ -6694,7 +6950,7 @@ static const OnigCodePoint CR_Cn[] = {
 	0x2dcf, 0x2dcf,
 	0x2dd7, 0x2dd7,
 	0x2ddf, 0x2ddf,
-	0x2e45, 0x2e7f,
+	0x2e50, 0x2e7f,
 	0x2e9a, 0x2e9a,
 	0x2ef4, 0x2eff,
 	0x2fd6, 0x2fef,
@@ -6702,26 +6958,24 @@ static const OnigCodePoint CR_Cn[] = {
 	0x3040, 0x3040,
 	0x3097, 0x3098,
 	0x3100, 0x3104,
-	0x312e, 0x3130,
+	0x3130, 0x3130,
 	0x318f, 0x318f,
 	0x31bb, 0x31bf,
 	0x31e4, 0x31ef,
 	0x321f, 0x321f,
-	0x32ff, 0x32ff,
 	0x4db6, 0x4dbf,
-	0x9fd6, 0x9fff,
+	0x9ff0, 0x9fff,
 	0xa48d, 0xa48f,
 	0xa4c7, 0xa4cf,
 	0xa62c, 0xa63f,
 	0xa6f8, 0xa6ff,
-	0xa7af, 0xa7af,
-	0xa7b8, 0xa7f6,
+	0xa7c0, 0xa7c1,
+	0xa7c7, 0xa7f6,
 	0xa82c, 0xa82f,
 	0xa83a, 0xa83f,
 	0xa878, 0xa87f,
 	0xa8c6, 0xa8cd,
 	0xa8da, 0xa8df,
-	0xa8fe, 0xa8ff,
 	0xa954, 0xa95e,
 	0xa97d, 0xa97f,
 	0xa9ce, 0xa9ce,
@@ -6737,7 +6991,7 @@ static const OnigCodePoint CR_Cn[] = {
 	0xab17, 0xab1f,
 	0xab27, 0xab27,
 	0xab2f, 0xab2f,
-	0xab66, 0xab6f,
+	0xab68, 0xab6f,
 	0xabee, 0xabef,
 	0xabfa, 0xabff,
 	0xd7a4, 0xd7af,
@@ -6788,7 +7042,7 @@ static const OnigCodePoint CR_Cn[] = {
 	0x1029d, 0x1029f,
 	0x102d1, 0x102df,
 	0x102fc, 0x102ff,
-	0x10324, 0x1032f,
+	0x10324, 0x1032c,
 	0x1034b, 0x1034f,
 	0x1037b, 0x1037f,
 	0x1039e, 0x1039e,
@@ -6823,9 +7077,9 @@ static const OnigCodePoint CR_Cn[] = {
 	0x10a07, 0x10a0b,
 	0x10a14, 0x10a14,
 	0x10a18, 0x10a18,
-	0x10a34, 0x10a37,
+	0x10a36, 0x10a37,
 	0x10a3b, 0x10a3e,
-	0x10a48, 0x10a4f,
+	0x10a49, 0x10a4f,
 	0x10a59, 0x10a5f,
 	0x10aa0, 0x10abf,
 	0x10ae7, 0x10aea,
@@ -6839,15 +7093,20 @@ static const OnigCodePoint CR_Cn[] = {
 	0x10c49, 0x10c7f,
 	0x10cb3, 0x10cbf,
 	0x10cf3, 0x10cf9,
-	0x10d00, 0x10e5f,
-	0x10e7f, 0x10fff,
+	0x10d28, 0x10d2f,
+	0x10d3a, 0x10e5f,
+	0x10e7f, 0x10eff,
+	0x10f28, 0x10f2f,
+	0x10f5a, 0x10fdf,
+	0x10ff7, 0x10fff,
 	0x1104e, 0x11051,
 	0x11070, 0x1107e,
-	0x110c2, 0x110cf,
+	0x110c2, 0x110cc,
+	0x110ce, 0x110cf,
 	0x110e9, 0x110ef,
 	0x110fa, 0x110ff,
 	0x11135, 0x11135,
-	0x11144, 0x1114f,
+	0x11147, 0x1114f,
 	0x11177, 0x1117f,
 	0x111ce, 0x111cf,
 	0x111e0, 0x111e0,
@@ -6867,7 +7126,7 @@ static const OnigCodePoint CR_Cn[] = {
 	0x11329, 0x11329,
 	0x11331, 0x11331,
 	0x11334, 0x11334,
-	0x1133a, 0x1133b,
+	0x1133a, 0x1133a,
 	0x11345, 0x11346,
 	0x11349, 0x1134a,
 	0x1134e, 0x1134f,
@@ -6878,7 +7137,7 @@ static const OnigCodePoint CR_Cn[] = {
 	0x11375, 0x113ff,
 	0x1145a, 0x1145a,
 	0x1145c, 0x1145c,
-	0x1145e, 0x1147f,
+	0x11460, 0x1147f,
 	0x114c8, 0x114cf,
 	0x114da, 0x1157f,
 	0x115b6, 0x115b7,
@@ -6886,13 +7145,19 @@ static const OnigCodePoint CR_Cn[] = {
 	0x11645, 0x1164f,
 	0x1165a, 0x1165f,
 	0x1166d, 0x1167f,
-	0x116b8, 0x116bf,
+	0x116b9, 0x116bf,
 	0x116ca, 0x116ff,
-	0x1171a, 0x1171c,
+	0x1171b, 0x1171c,
 	0x1172c, 0x1172f,
-	0x11740, 0x1189f,
+	0x11740, 0x117ff,
+	0x1183c, 0x1189f,
 	0x118f3, 0x118fe,
-	0x11900, 0x11abf,
+	0x11900, 0x1199f,
+	0x119a8, 0x119a9,
+	0x119d8, 0x119d9,
+	0x119e5, 0x119ff,
+	0x11a48, 0x11a4f,
+	0x11aa3, 0x11abf,
 	0x11af9, 0x11bff,
 	0x11c09, 0x11c09,
 	0x11c37, 0x11c37,
@@ -6900,12 +7165,28 @@ static const OnigCodePoint CR_Cn[] = {
 	0x11c6d, 0x11c6f,
 	0x11c90, 0x11c91,
 	0x11ca8, 0x11ca8,
-	0x11cb7, 0x11fff,
+	0x11cb7, 0x11cff,
+	0x11d07, 0x11d07,
+	0x11d0a, 0x11d0a,
+	0x11d37, 0x11d39,
+	0x11d3b, 0x11d3b,
+	0x11d3e, 0x11d3e,
+	0x11d48, 0x11d4f,
+	0x11d5a, 0x11d5f,
+	0x11d66, 0x11d66,
+	0x11d69, 0x11d69,
+	0x11d8f, 0x11d8f,
+	0x11d92, 0x11d92,
+	0x11d99, 0x11d9f,
+	0x11daa, 0x11edf,
+	0x11ef9, 0x11fbf,
+	0x11ff2, 0x11ffe,
 	0x1239a, 0x123ff,
 	0x1246f, 0x1246f,
 	0x12475, 0x1247f,
 	0x12544, 0x12fff,
-	0x1342f, 0x143ff,
+	0x1342f, 0x1342f,
+	0x13439, 0x143ff,
 	0x14647, 0x167ff,
 	0x16a39, 0x16a3f,
 	0x16a5f, 0x16a5f,
@@ -6917,14 +7198,18 @@ static const OnigCodePoint CR_Cn[] = {
 	0x16b5a, 0x16b5a,
 	0x16b62, 0x16b62,
 	0x16b78, 0x16b7c,
-	0x16b90, 0x16eff,
-	0x16f45, 0x16f4f,
-	0x16f7f, 0x16f8e,
+	0x16b90, 0x16e3f,
+	0x16e9b, 0x16eff,
+	0x16f4b, 0x16f4e,
+	0x16f88, 0x16f8e,
 	0x16fa0, 0x16fdf,
-	0x16fe1, 0x16fff,
-	0x187ed, 0x187ff,
+	0x16fe4, 0x16fff,
+	0x187f8, 0x187ff,
 	0x18af3, 0x1afff,
-	0x1b002, 0x1bbff,
+	0x1b11f, 0x1b14f,
+	0x1b153, 0x1b163,
+	0x1b168, 0x1b16f,
+	0x1b2fc, 0x1bbff,
 	0x1bc6b, 0x1bc6f,
 	0x1bc7d, 0x1bc7f,
 	0x1bc89, 0x1bc8f,
@@ -6933,9 +7218,10 @@ static const OnigCodePoint CR_Cn[] = {
 	0x1d0f6, 0x1d0ff,
 	0x1d127, 0x1d128,
 	0x1d1e9, 0x1d1ff,
-	0x1d246, 0x1d2ff,
+	0x1d246, 0x1d2df,
+	0x1d2f4, 0x1d2ff,
 	0x1d357, 0x1d35f,
-	0x1d372, 0x1d3ff,
+	0x1d379, 0x1d3ff,
 	0x1d455, 0x1d455,
 	0x1d49d, 0x1d49d,
 	0x1d4a0, 0x1d4a1,
@@ -6963,12 +7249,20 @@ static const OnigCodePoint CR_Cn[] = {
 	0x1e019, 0x1e01a,
 	0x1e022, 0x1e022,
 	0x1e025, 0x1e025,
-	0x1e02b, 0x1e7ff,
+	0x1e02b, 0x1e0ff,
+	0x1e12d, 0x1e12f,
+	0x1e13e, 0x1e13f,
+	0x1e14a, 0x1e14d,
+	0x1e150, 0x1e2bf,
+	0x1e2fa, 0x1e2fe,
+	0x1e300, 0x1e7ff,
 	0x1e8c5, 0x1e8c6,
 	0x1e8d7, 0x1e8ff,
-	0x1e94b, 0x1e94f,
+	0x1e94c, 0x1e94f,
 	0x1e95a, 0x1e95d,
-	0x1e960, 0x1edff,
+	0x1e960, 0x1ec70,
+	0x1ecb5, 0x1ed00,
+	0x1ed3e, 0x1edff,
 	0x1ee04, 0x1ee04,
 	0x1ee20, 0x1ee20,
 	0x1ee23, 0x1ee23,
@@ -7010,35 +7304,41 @@ static const OnigCodePoint CR_Cn[] = {
 	0x1f0d0, 0x1f0d0,
 	0x1f0f6, 0x1f0ff,
 	0x1f10d, 0x1f10f,
-	0x1f12f, 0x1f12f,
-	0x1f16c, 0x1f16f,
+	0x1f16d, 0x1f16f,
 	0x1f1ad, 0x1f1e5,
 	0x1f203, 0x1f20f,
 	0x1f23c, 0x1f23f,
 	0x1f249, 0x1f24f,
-	0x1f252, 0x1f2ff,
-	0x1f6d3, 0x1f6df,
+	0x1f252, 0x1f25f,
+	0x1f266, 0x1f2ff,
+	0x1f6d6, 0x1f6df,
 	0x1f6ed, 0x1f6ef,
-	0x1f6f7, 0x1f6ff,
+	0x1f6fb, 0x1f6ff,
 	0x1f774, 0x1f77f,
-	0x1f7d5, 0x1f7ff,
+	0x1f7d9, 0x1f7df,
+	0x1f7ec, 0x1f7ff,
 	0x1f80c, 0x1f80f,
 	0x1f848, 0x1f84f,
 	0x1f85a, 0x1f85f,
 	0x1f888, 0x1f88f,
-	0x1f8ae, 0x1f90f,
-	0x1f91f, 0x1f91f,
-	0x1f928, 0x1f92f,
-	0x1f931, 0x1f932,
-	0x1f93f, 0x1f93f,
-	0x1f94c, 0x1f94f,
-	0x1f95f, 0x1f97f,
-	0x1f992, 0x1f9bf,
-	0x1f9c1, 0x1ffff,
+	0x1f8ae, 0x1f8ff,
+	0x1f90c, 0x1f90c,
+	0x1f972, 0x1f972,
+	0x1f977, 0x1f979,
+	0x1f9a3, 0x1f9a4,
+	0x1f9ab, 0x1f9ad,
+	0x1f9cb, 0x1f9cc,
+	0x1fa54, 0x1fa5f,
+	0x1fa6e, 0x1fa6f,
+	0x1fa74, 0x1fa77,
+	0x1fa7b, 0x1fa7f,
+	0x1fa83, 0x1fa8f,
+	0x1fa96, 0x1ffff,
 	0x2a6d7, 0x2a6ff,
 	0x2b735, 0x2b73f,
 	0x2b81e, 0x2b81f,
-	0x2cea2, 0x2f7ff,
+	0x2cea2, 0x2ceaf,
+	0x2ebe1, 0x2f7ff,
 	0x2fa1e, 0xe0000,
 	0xe0002, 0xe001f,
 	0xe0080, 0xe00ff,
@@ -7063,7 +7363,7 @@ static const OnigCodePoint CR_Cs[] = {
 
 /* 'L': Major Category */
 static const OnigCodePoint CR_L[] = {
-	571,
+	609,
 	0x0041, 0x005a,
 	0x0061, 0x007a,
 	0x00aa, 0x00aa,
@@ -7089,9 +7389,9 @@ static const OnigCodePoint CR_L[] = {
 	0x048a, 0x052f,
 	0x0531, 0x0556,
 	0x0559, 0x0559,
-	0x0561, 0x0587,
+	0x0560, 0x0588,
 	0x05d0, 0x05ea,
-	0x05f0, 0x05f2,
+	0x05ef, 0x05f2,
 	0x0620, 0x064a,
 	0x066e, 0x066f,
 	0x0671, 0x06d3,
@@ -7112,6 +7412,7 @@ static const OnigCodePoint CR_L[] = {
 	0x0824, 0x0824,
 	0x0828, 0x0828,
 	0x0840, 0x0858,
+	0x0860, 0x086a,
 	0x08a0, 0x08b4,
 	0x08b6, 0x08bd,
 	0x0904, 0x0939,
@@ -7130,6 +7431,7 @@ static const OnigCodePoint CR_L[] = {
 	0x09dc, 0x09dd,
 	0x09df, 0x09e1,
 	0x09f0, 0x09f1,
+	0x09fc, 0x09fc,
 	0x0a05, 0x0a0a,
 	0x0a0f, 0x0a10,
 	0x0a13, 0x0a28,
@@ -7206,16 +7508,10 @@ static const OnigCodePoint CR_L[] = {
 	0x0e40, 0x0e46,
 	0x0e81, 0x0e82,
 	0x0e84, 0x0e84,
-	0x0e87, 0x0e88,
-	0x0e8a, 0x0e8a,
-	0x0e8d, 0x0e8d,
-	0x0e94, 0x0e97,
-	0x0e99, 0x0e9f,
-	0x0ea1, 0x0ea3,
+	0x0e86, 0x0e8a,
+	0x0e8c, 0x0ea3,
 	0x0ea5, 0x0ea5,
-	0x0ea7, 0x0ea7,
-	0x0eaa, 0x0eab,
-	0x0ead, 0x0eb0,
+	0x0ea7, 0x0eb0,
 	0x0eb2, 0x0eb3,
 	0x0ebd, 0x0ebd,
 	0x0ec0, 0x0ec4,
@@ -7271,7 +7567,7 @@ static const OnigCodePoint CR_L[] = {
 	0x1780, 0x17b3,
 	0x17d7, 0x17d7,
 	0x17dc, 0x17dc,
-	0x1820, 0x1877,
+	0x1820, 0x1878,
 	0x1880, 0x1884,
 	0x1887, 0x18a8,
 	0x18aa, 0x18aa,
@@ -7293,9 +7589,12 @@ static const OnigCodePoint CR_L[] = {
 	0x1c4d, 0x1c4f,
 	0x1c5a, 0x1c7d,
 	0x1c80, 0x1c88,
+	0x1c90, 0x1cba,
+	0x1cbd, 0x1cbf,
 	0x1ce9, 0x1cec,
-	0x1cee, 0x1cf1,
+	0x1cee, 0x1cf3,
 	0x1cf5, 0x1cf6,
+	0x1cfa, 0x1cfa,
 	0x1d00, 0x1dbf,
 	0x1e00, 0x1f15,
 	0x1f18, 0x1f1d,
@@ -7360,12 +7659,12 @@ static const OnigCodePoint CR_L[] = {
 	0x309d, 0x309f,
 	0x30a1, 0x30fa,
 	0x30fc, 0x30ff,
-	0x3105, 0x312d,
+	0x3105, 0x312f,
 	0x3131, 0x318e,
 	0x31a0, 0x31ba,
 	0x31f0, 0x31ff,
 	0x3400, 0x4db5,
-	0x4e00, 0x9fd5,
+	0x4e00, 0x9fef,
 	0xa000, 0xa48c,
 	0xa4d0, 0xa4fd,
 	0xa500, 0xa60c,
@@ -7376,8 +7675,8 @@ static const OnigCodePoint CR_L[] = {
 	0xa6a0, 0xa6e5,
 	0xa717, 0xa71f,
 	0xa722, 0xa788,
-	0xa78b, 0xa7ae,
-	0xa7b0, 0xa7b7,
+	0xa78b, 0xa7bf,
+	0xa7c2, 0xa7c6,
 	0xa7f7, 0xa801,
 	0xa803, 0xa805,
 	0xa807, 0xa80a,
@@ -7386,7 +7685,7 @@ static const OnigCodePoint CR_L[] = {
 	0xa882, 0xa8b3,
 	0xa8f2, 0xa8f7,
 	0xa8fb, 0xa8fb,
-	0xa8fd, 0xa8fd,
+	0xa8fd, 0xa8fe,
 	0xa90a, 0xa925,
 	0xa930, 0xa946,
 	0xa960, 0xa97c,
@@ -7415,7 +7714,7 @@ static const OnigCodePoint CR_L[] = {
 	0xab20, 0xab26,
 	0xab28, 0xab2e,
 	0xab30, 0xab5a,
-	0xab5c, 0xab65,
+	0xab5c, 0xab67,
 	0xab70, 0xabe2,
 	0xac00, 0xd7a3,
 	0xd7b0, 0xd7c6,
@@ -7455,7 +7754,7 @@ static const OnigCodePoint CR_L[] = {
 	0x10280, 0x1029c,
 	0x102a0, 0x102d0,
 	0x10300, 0x1031f,
-	0x10330, 0x10340,
+	0x1032d, 0x10340,
 	0x10342, 0x10349,
 	0x10350, 0x10375,
 	0x10380, 0x1039d,
@@ -7486,7 +7785,7 @@ static const OnigCodePoint CR_L[] = {
 	0x10a00, 0x10a00,
 	0x10a10, 0x10a13,
 	0x10a15, 0x10a17,
-	0x10a19, 0x10a33,
+	0x10a19, 0x10a35,
 	0x10a60, 0x10a7c,
 	0x10a80, 0x10a9c,
 	0x10ac0, 0x10ac7,
@@ -7498,10 +7797,16 @@ static const OnigCodePoint CR_L[] = {
 	0x10c00, 0x10c48,
 	0x10c80, 0x10cb2,
 	0x10cc0, 0x10cf2,
+	0x10d00, 0x10d23,
+	0x10f00, 0x10f1c,
+	0x10f27, 0x10f27,
+	0x10f30, 0x10f45,
+	0x10fe0, 0x10ff6,
 	0x11003, 0x11037,
 	0x11083, 0x110af,
 	0x110d0, 0x110e8,
 	0x11103, 0x11126,
+	0x11144, 0x11144,
 	0x11150, 0x11172,
 	0x11176, 0x11176,
 	0x11183, 0x111b2,
@@ -7527,6 +7832,7 @@ static const OnigCodePoint CR_L[] = {
 	0x1135d, 0x11361,
 	0x11400, 0x11434,
 	0x11447, 0x1144a,
+	0x1145f, 0x1145f,
 	0x11480, 0x114af,
 	0x114c4, 0x114c5,
 	0x114c7, 0x114c7,
@@ -7535,14 +7841,35 @@ static const OnigCodePoint CR_L[] = {
 	0x11600, 0x1162f,
 	0x11644, 0x11644,
 	0x11680, 0x116aa,
-	0x11700, 0x11719,
+	0x116b8, 0x116b8,
+	0x11700, 0x1171a,
+	0x11800, 0x1182b,
 	0x118a0, 0x118df,
 	0x118ff, 0x118ff,
+	0x119a0, 0x119a7,
+	0x119aa, 0x119d0,
+	0x119e1, 0x119e1,
+	0x119e3, 0x119e3,
+	0x11a00, 0x11a00,
+	0x11a0b, 0x11a32,
+	0x11a3a, 0x11a3a,
+	0x11a50, 0x11a50,
+	0x11a5c, 0x11a89,
+	0x11a9d, 0x11a9d,
 	0x11ac0, 0x11af8,
 	0x11c00, 0x11c08,
 	0x11c0a, 0x11c2e,
 	0x11c40, 0x11c40,
 	0x11c72, 0x11c8f,
+	0x11d00, 0x11d06,
+	0x11d08, 0x11d09,
+	0x11d0b, 0x11d30,
+	0x11d46, 0x11d46,
+	0x11d60, 0x11d65,
+	0x11d67, 0x11d68,
+	0x11d6a, 0x11d89,
+	0x11d98, 0x11d98,
+	0x11ee0, 0x11ef2,
 	0x12000, 0x12399,
 	0x12480, 0x12543,
 	0x13000, 0x1342e,
@@ -7554,13 +7881,18 @@ static const OnigCodePoint CR_L[] = {
 	0x16b40, 0x16b43,
 	0x16b63, 0x16b77,
 	0x16b7d, 0x16b8f,
-	0x16f00, 0x16f44,
+	0x16e40, 0x16e7f,
+	0x16f00, 0x16f4a,
 	0x16f50, 0x16f50,
 	0x16f93, 0x16f9f,
-	0x16fe0, 0x16fe0,
-	0x17000, 0x187ec,
+	0x16fe0, 0x16fe1,
+	0x16fe3, 0x16fe3,
+	0x17000, 0x187f7,
 	0x18800, 0x18af2,
-	0x1b000, 0x1b001,
+	0x1b000, 0x1b11e,
+	0x1b150, 0x1b152,
+	0x1b164, 0x1b167,
+	0x1b170, 0x1b2fb,
 	0x1bc00, 0x1bc6a,
 	0x1bc70, 0x1bc7c,
 	0x1bc80, 0x1bc88,
@@ -7595,8 +7927,13 @@ static const OnigCodePoint CR_L[] = {
 	0x1d78a, 0x1d7a8,
 	0x1d7aa, 0x1d7c2,
 	0x1d7c4, 0x1d7cb,
+	0x1e100, 0x1e12c,
+	0x1e137, 0x1e13d,
+	0x1e14e, 0x1e14e,
+	0x1e2c0, 0x1e2eb,
 	0x1e800, 0x1e8c4,
 	0x1e900, 0x1e943,
+	0x1e94b, 0x1e94b,
 	0x1ee00, 0x1ee03,
 	0x1ee05, 0x1ee1f,
 	0x1ee21, 0x1ee22,
@@ -7634,12 +7971,13 @@ static const OnigCodePoint CR_L[] = {
 	0x2a700, 0x2b734,
 	0x2b740, 0x2b81d,
 	0x2b820, 0x2cea1,
+	0x2ceb0, 0x2ebe0,
 	0x2f800, 0x2fa1d,
 }; /* CR_L */
 
 /* 'LC': General Category */
 static const OnigCodePoint CR_LC[] = {
-	126,
+	131,
 	0x0041, 0x005a,
 	0x0061, 0x007a,
 	0x00b5, 0x00b5,
@@ -7661,13 +7999,17 @@ static const OnigCodePoint CR_LC[] = {
 	0x03f7, 0x0481,
 	0x048a, 0x052f,
 	0x0531, 0x0556,
-	0x0561, 0x0587,
+	0x0560, 0x0588,
 	0x10a0, 0x10c5,
 	0x10c7, 0x10c7,
 	0x10cd, 0x10cd,
+	0x10d0, 0x10fa,
+	0x10fd, 0x10ff,
 	0x13a0, 0x13f5,
 	0x13f8, 0x13fd,
 	0x1c80, 0x1c88,
+	0x1c90, 0x1cba,
+	0x1cbd, 0x1cbf,
 	0x1d00, 0x1d2b,
 	0x1d6b, 0x1d77,
 	0x1d79, 0x1d9a,
@@ -7719,11 +8061,11 @@ static const OnigCodePoint CR_LC[] = {
 	0xa722, 0xa76f,
 	0xa771, 0xa787,
 	0xa78b, 0xa78e,
-	0xa790, 0xa7ae,
-	0xa7b0, 0xa7b7,
+	0xa790, 0xa7bf,
+	0xa7c2, 0xa7c6,
 	0xa7fa, 0xa7fa,
 	0xab30, 0xab5a,
-	0xab60, 0xab65,
+	0xab60, 0xab67,
 	0xab70, 0xabbf,
 	0xfb00, 0xfb06,
 	0xfb13, 0xfb17,
@@ -7735,6 +8077,7 @@ static const OnigCodePoint CR_LC[] = {
 	0x10c80, 0x10cb2,
 	0x10cc0, 0x10cf2,
 	0x118a0, 0x118df,
+	0x16e40, 0x16e7f,
 	0x1d400, 0x1d454,
 	0x1d456, 0x1d49c,
 	0x1d49e, 0x1d49f,
@@ -7770,7 +8113,7 @@ static const OnigCodePoint CR_LC[] = {
 
 /* 'Ll': General Category */
 static const OnigCodePoint CR_Ll[] = {
-	633,
+	642,
 	0x0061, 0x007a,
 	0x00b5, 0x00b5,
 	0x00df, 0x00f6,
@@ -8040,7 +8383,9 @@ static const OnigCodePoint CR_Ll[] = {
 	0x052b, 0x052b,
 	0x052d, 0x052d,
 	0x052f, 0x052f,
-	0x0561, 0x0587,
+	0x0560, 0x0588,
+	0x10d0, 0x10fa,
+	0x10fd, 0x10ff,
 	0x13f8, 0x13fd,
 	0x1c80, 0x1c88,
 	0x1d00, 0x1d2b,
@@ -8362,11 +8707,17 @@ static const OnigCodePoint CR_Ll[] = {
 	0xa7a5, 0xa7a5,
 	0xa7a7, 0xa7a7,
 	0xa7a9, 0xa7a9,
+	0xa7af, 0xa7af,
 	0xa7b5, 0xa7b5,
 	0xa7b7, 0xa7b7,
+	0xa7b9, 0xa7b9,
+	0xa7bb, 0xa7bb,
+	0xa7bd, 0xa7bd,
+	0xa7bf, 0xa7bf,
+	0xa7c3, 0xa7c3,
 	0xa7fa, 0xa7fa,
 	0xab30, 0xab5a,
-	0xab60, 0xab65,
+	0xab60, 0xab67,
 	0xab70, 0xabbf,
 	0xfb00, 0xfb06,
 	0xfb13, 0xfb17,
@@ -8375,6 +8726,7 @@ static const OnigCodePoint CR_Ll[] = {
 	0x104d8, 0x104fb,
 	0x10cc0, 0x10cf2,
 	0x118c0, 0x118df,
+	0x16e60, 0x16e7f,
 	0x1d41a, 0x1d433,
 	0x1d44e, 0x1d454,
 	0x1d456, 0x1d467,
@@ -8408,7 +8760,7 @@ static const OnigCodePoint CR_Ll[] = {
 
 /* 'Lm': General Category */
 static const OnigCodePoint CR_Lm[] = {
-	57,
+	60,
 	0x02b0, 0x02c1,
 	0x02c6, 0x02d1,
 	0x02e0, 0x02e4,
@@ -8465,19 +8817,22 @@ static const OnigCodePoint CR_Lm[] = {
 	0xff9e, 0xff9f,
 	0x16b40, 0x16b43,
 	0x16f93, 0x16f9f,
-	0x16fe0, 0x16fe0,
+	0x16fe0, 0x16fe1,
+	0x16fe3, 0x16fe3,
+	0x1e137, 0x1e13d,
+	0x1e94b, 0x1e94b,
 }; /* CR_Lm */
 
 /* 'Lo': General Category */
 static const OnigCodePoint CR_Lo[] = {
-	445,
+	476,
 	0x00aa, 0x00aa,
 	0x00ba, 0x00ba,
 	0x01bb, 0x01bb,
 	0x01c0, 0x01c3,
 	0x0294, 0x0294,
 	0x05d0, 0x05ea,
-	0x05f0, 0x05f2,
+	0x05ef, 0x05f2,
 	0x0620, 0x063f,
 	0x0641, 0x064a,
 	0x066e, 0x066f,
@@ -8493,6 +8848,7 @@ static const OnigCodePoint CR_Lo[] = {
 	0x07ca, 0x07ea,
 	0x0800, 0x0815,
 	0x0840, 0x0858,
+	0x0860, 0x086a,
 	0x08a0, 0x08b4,
 	0x08b6, 0x08bd,
 	0x0904, 0x0939,
@@ -8511,6 +8867,7 @@ static const OnigCodePoint CR_Lo[] = {
 	0x09dc, 0x09dd,
 	0x09df, 0x09e1,
 	0x09f0, 0x09f1,
+	0x09fc, 0x09fc,
 	0x0a05, 0x0a0a,
 	0x0a0f, 0x0a10,
 	0x0a13, 0x0a28,
@@ -8587,16 +8944,10 @@ static const OnigCodePoint CR_Lo[] = {
 	0x0e40, 0x0e45,
 	0x0e81, 0x0e82,
 	0x0e84, 0x0e84,
-	0x0e87, 0x0e88,
-	0x0e8a, 0x0e8a,
-	0x0e8d, 0x0e8d,
-	0x0e94, 0x0e97,
-	0x0e99, 0x0e9f,
-	0x0ea1, 0x0ea3,
+	0x0e86, 0x0e8a,
+	0x0e8c, 0x0ea3,
 	0x0ea5, 0x0ea5,
-	0x0ea7, 0x0ea7,
-	0x0eaa, 0x0eab,
-	0x0ead, 0x0eb0,
+	0x0ea7, 0x0eb0,
 	0x0eb2, 0x0eb3,
 	0x0ebd, 0x0ebd,
 	0x0ec0, 0x0ec4,
@@ -8614,8 +8965,7 @@ static const OnigCodePoint CR_Lo[] = {
 	0x106e, 0x1070,
 	0x1075, 0x1081,
 	0x108e, 0x108e,
-	0x10d0, 0x10fa,
-	0x10fd, 0x1248,
+	0x1100, 0x1248,
 	0x124a, 0x124d,
 	0x1250, 0x1256,
 	0x1258, 0x1258,
@@ -8646,7 +8996,7 @@ static const OnigCodePoint CR_Lo[] = {
 	0x1780, 0x17b3,
 	0x17dc, 0x17dc,
 	0x1820, 0x1842,
-	0x1844, 0x1877,
+	0x1844, 0x1878,
 	0x1880, 0x1884,
 	0x1887, 0x18a8,
 	0x18aa, 0x18aa,
@@ -8667,8 +9017,9 @@ static const OnigCodePoint CR_Lo[] = {
 	0x1c4d, 0x1c4f,
 	0x1c5a, 0x1c77,
 	0x1ce9, 0x1cec,
-	0x1cee, 0x1cf1,
+	0x1cee, 0x1cf3,
 	0x1cf5, 0x1cf6,
+	0x1cfa, 0x1cfa,
 	0x2135, 0x2138,
 	0x2d30, 0x2d67,
 	0x2d80, 0x2d96,
@@ -8686,12 +9037,12 @@ static const OnigCodePoint CR_Lo[] = {
 	0x309f, 0x309f,
 	0x30a1, 0x30fa,
 	0x30ff, 0x30ff,
-	0x3105, 0x312d,
+	0x3105, 0x312f,
 	0x3131, 0x318e,
 	0x31a0, 0x31ba,
 	0x31f0, 0x31ff,
 	0x3400, 0x4db5,
-	0x4e00, 0x9fd5,
+	0x4e00, 0x9fef,
 	0xa000, 0xa014,
 	0xa016, 0xa48c,
 	0xa4d0, 0xa4f7,
@@ -8710,7 +9061,7 @@ static const OnigCodePoint CR_Lo[] = {
 	0xa882, 0xa8b3,
 	0xa8f2, 0xa8f7,
 	0xa8fb, 0xa8fb,
-	0xa8fd, 0xa8fd,
+	0xa8fd, 0xa8fe,
 	0xa90a, 0xa925,
 	0xa930, 0xa946,
 	0xa960, 0xa97c,
@@ -8775,7 +9126,7 @@ static const OnigCodePoint CR_Lo[] = {
 	0x10280, 0x1029c,
 	0x102a0, 0x102d0,
 	0x10300, 0x1031f,
-	0x10330, 0x10340,
+	0x1032d, 0x10340,
 	0x10342, 0x10349,
 	0x10350, 0x10375,
 	0x10380, 0x1039d,
@@ -8804,7 +9155,7 @@ static const OnigCodePoint CR_Lo[] = {
 	0x10a00, 0x10a00,
 	0x10a10, 0x10a13,
 	0x10a15, 0x10a17,
-	0x10a19, 0x10a33,
+	0x10a19, 0x10a35,
 	0x10a60, 0x10a7c,
 	0x10a80, 0x10a9c,
 	0x10ac0, 0x10ac7,
@@ -8814,10 +9165,16 @@ static const OnigCodePoint CR_Lo[] = {
 	0x10b60, 0x10b72,
 	0x10b80, 0x10b91,
 	0x10c00, 0x10c48,
+	0x10d00, 0x10d23,
+	0x10f00, 0x10f1c,
+	0x10f27, 0x10f27,
+	0x10f30, 0x10f45,
+	0x10fe0, 0x10ff6,
 	0x11003, 0x11037,
 	0x11083, 0x110af,
 	0x110d0, 0x110e8,
 	0x11103, 0x11126,
+	0x11144, 0x11144,
 	0x11150, 0x11172,
 	0x11176, 0x11176,
 	0x11183, 0x111b2,
@@ -8843,6 +9200,7 @@ static const OnigCodePoint CR_Lo[] = {
 	0x1135d, 0x11361,
 	0x11400, 0x11434,
 	0x11447, 0x1144a,
+	0x1145f, 0x1145f,
 	0x11480, 0x114af,
 	0x114c4, 0x114c5,
 	0x114c7, 0x114c7,
@@ -8851,13 +9209,34 @@ static const OnigCodePoint CR_Lo[] = {
 	0x11600, 0x1162f,
 	0x11644, 0x11644,
 	0x11680, 0x116aa,
-	0x11700, 0x11719,
+	0x116b8, 0x116b8,
+	0x11700, 0x1171a,
+	0x11800, 0x1182b,
 	0x118ff, 0x118ff,
+	0x119a0, 0x119a7,
+	0x119aa, 0x119d0,
+	0x119e1, 0x119e1,
+	0x119e3, 0x119e3,
+	0x11a00, 0x11a00,
+	0x11a0b, 0x11a32,
+	0x11a3a, 0x11a3a,
+	0x11a50, 0x11a50,
+	0x11a5c, 0x11a89,
+	0x11a9d, 0x11a9d,
 	0x11ac0, 0x11af8,
 	0x11c00, 0x11c08,
 	0x11c0a, 0x11c2e,
 	0x11c40, 0x11c40,
 	0x11c72, 0x11c8f,
+	0x11d00, 0x11d06,
+	0x11d08, 0x11d09,
+	0x11d0b, 0x11d30,
+	0x11d46, 0x11d46,
+	0x11d60, 0x11d65,
+	0x11d67, 0x11d68,
+	0x11d6a, 0x11d89,
+	0x11d98, 0x11d98,
+	0x11ee0, 0x11ef2,
 	0x12000, 0x12399,
 	0x12480, 0x12543,
 	0x13000, 0x1342e,
@@ -8868,15 +9247,21 @@ static const OnigCodePoint CR_Lo[] = {
 	0x16b00, 0x16b2f,
 	0x16b63, 0x16b77,
 	0x16b7d, 0x16b8f,
-	0x16f00, 0x16f44,
+	0x16f00, 0x16f4a,
 	0x16f50, 0x16f50,
-	0x17000, 0x187ec,
+	0x17000, 0x187f7,
 	0x18800, 0x18af2,
-	0x1b000, 0x1b001,
+	0x1b000, 0x1b11e,
+	0x1b150, 0x1b152,
+	0x1b164, 0x1b167,
+	0x1b170, 0x1b2fb,
 	0x1bc00, 0x1bc6a,
 	0x1bc70, 0x1bc7c,
 	0x1bc80, 0x1bc88,
 	0x1bc90, 0x1bc99,
+	0x1e100, 0x1e12c,
+	0x1e14e, 0x1e14e,
+	0x1e2c0, 0x1e2eb,
 	0x1e800, 0x1e8c4,
 	0x1ee00, 0x1ee03,
 	0x1ee05, 0x1ee1f,
@@ -8915,6 +9300,7 @@ static const OnigCodePoint CR_Lo[] = {
 	0x2a700, 0x2b734,
 	0x2b740, 0x2b81d,
 	0x2b820, 0x2cea1,
+	0x2ceb0, 0x2ebe0,
 	0x2f800, 0x2fa1d,
 }; /* CR_Lo */
 
@@ -8935,7 +9321,7 @@ static const OnigCodePoint CR_Lt[] = {
 
 /* 'Lu': General Category */
 static const OnigCodePoint CR_Lu[] = {
-	627,
+	636,
 	0x0041, 0x005a,
 	0x00c0, 0x00d6,
 	0x00d8, 0x00de,
@@ -9212,6 +9598,8 @@ static const OnigCodePoint CR_Lu[] = {
 	0x10c7, 0x10c7,
 	0x10cd, 0x10cd,
 	0x13a0, 0x13f5,
+	0x1c90, 0x1cba,
+	0x1cbd, 0x1cbf,
 	0x1e00, 0x1e00,
 	0x1e02, 0x1e02,
 	0x1e04, 0x1e04,
@@ -9526,11 +9914,18 @@ static const OnigCodePoint CR_Lu[] = {
 	0xa7aa, 0xa7ae,
 	0xa7b0, 0xa7b4,
 	0xa7b6, 0xa7b6,
+	0xa7b8, 0xa7b8,
+	0xa7ba, 0xa7ba,
+	0xa7bc, 0xa7bc,
+	0xa7be, 0xa7be,
+	0xa7c2, 0xa7c2,
+	0xa7c4, 0xa7c6,
 	0xff21, 0xff3a,
 	0x10400, 0x10427,
 	0x104b0, 0x104d3,
 	0x10c80, 0x10cb2,
 	0x118a0, 0x118bf,
+	0x16e40, 0x16e5f,
 	0x1d400, 0x1d419,
 	0x1d434, 0x1d44d,
 	0x1d468, 0x1d481,
@@ -9567,7 +9962,7 @@ static const OnigCodePoint CR_Lu[] = {
 
 /* 'M': Major Category */
 static const OnigCodePoint CR_M[] = {
-	250,
+	280,
 	0x0300, 0x036f,
 	0x0483, 0x0489,
 	0x0591, 0x05bd,
@@ -9586,12 +9981,13 @@ static const OnigCodePoint CR_M[] = {
 	0x0730, 0x074a,
 	0x07a6, 0x07b0,
 	0x07eb, 0x07f3,
+	0x07fd, 0x07fd,
 	0x0816, 0x0819,
 	0x081b, 0x0823,
 	0x0825, 0x0827,
 	0x0829, 0x082d,
 	0x0859, 0x085b,
-	0x08d4, 0x08e1,
+	0x08d3, 0x08e1,
 	0x08e3, 0x0903,
 	0x093a, 0x093c,
 	0x093e, 0x094f,
@@ -9604,6 +10000,7 @@ static const OnigCodePoint CR_M[] = {
 	0x09cb, 0x09cd,
 	0x09d7, 0x09d7,
 	0x09e2, 0x09e3,
+	0x09fe, 0x09fe,
 	0x0a01, 0x0a03,
 	0x0a3c, 0x0a3c,
 	0x0a3e, 0x0a42,
@@ -9618,6 +10015,7 @@ static const OnigCodePoint CR_M[] = {
 	0x0ac7, 0x0ac9,
 	0x0acb, 0x0acd,
 	0x0ae2, 0x0ae3,
+	0x0afa, 0x0aff,
 	0x0b01, 0x0b03,
 	0x0b3c, 0x0b3c,
 	0x0b3e, 0x0b44,
@@ -9630,7 +10028,7 @@ static const OnigCodePoint CR_M[] = {
 	0x0bc6, 0x0bc8,
 	0x0bca, 0x0bcd,
 	0x0bd7, 0x0bd7,
-	0x0c00, 0x0c03,
+	0x0c00, 0x0c04,
 	0x0c3e, 0x0c44,
 	0x0c46, 0x0c48,
 	0x0c4a, 0x0c4d,
@@ -9643,7 +10041,8 @@ static const OnigCodePoint CR_M[] = {
 	0x0cca, 0x0ccd,
 	0x0cd5, 0x0cd6,
 	0x0ce2, 0x0ce3,
-	0x0d01, 0x0d03,
+	0x0d00, 0x0d03,
+	0x0d3b, 0x0d3c,
 	0x0d3e, 0x0d44,
 	0x0d46, 0x0d48,
 	0x0d4a, 0x0d4d,
@@ -9659,8 +10058,7 @@ static const OnigCodePoint CR_M[] = {
 	0x0e34, 0x0e3a,
 	0x0e47, 0x0e4e,
 	0x0eb1, 0x0eb1,
-	0x0eb4, 0x0eb9,
-	0x0ebb, 0x0ebc,
+	0x0eb4, 0x0ebc,
 	0x0ec8, 0x0ecd,
 	0x0f18, 0x0f19,
 	0x0f35, 0x0f35,
@@ -9708,9 +10106,9 @@ static const OnigCodePoint CR_M[] = {
 	0x1cd0, 0x1cd2,
 	0x1cd4, 0x1ce8,
 	0x1ced, 0x1ced,
-	0x1cf2, 0x1cf4,
-	0x1cf8, 0x1cf9,
-	0x1dc0, 0x1df5,
+	0x1cf4, 0x1cf4,
+	0x1cf7, 0x1cf9,
+	0x1dc0, 0x1df9,
 	0x1dfb, 0x1dff,
 	0x20d0, 0x20f0,
 	0x2cef, 0x2cf1,
@@ -9729,6 +10127,7 @@ static const OnigCodePoint CR_M[] = {
 	0xa880, 0xa881,
 	0xa8b4, 0xa8c5,
 	0xa8e0, 0xa8f1,
+	0xa8ff, 0xa8ff,
 	0xa926, 0xa92d,
 	0xa947, 0xa953,
 	0xa980, 0xa983,
@@ -9759,21 +10158,24 @@ static const OnigCodePoint CR_M[] = {
 	0x10a38, 0x10a3a,
 	0x10a3f, 0x10a3f,
 	0x10ae5, 0x10ae6,
+	0x10d24, 0x10d27,
+	0x10f46, 0x10f50,
 	0x11000, 0x11002,
 	0x11038, 0x11046,
 	0x1107f, 0x11082,
 	0x110b0, 0x110ba,
 	0x11100, 0x11102,
 	0x11127, 0x11134,
+	0x11145, 0x11146,
 	0x11173, 0x11173,
 	0x11180, 0x11182,
 	0x111b3, 0x111c0,
-	0x111ca, 0x111cc,
+	0x111c9, 0x111cc,
 	0x1122c, 0x11237,
 	0x1123e, 0x1123e,
 	0x112df, 0x112ea,
 	0x11300, 0x11303,
-	0x1133c, 0x1133c,
+	0x1133b, 0x1133c,
 	0x1133e, 0x11344,
 	0x11347, 0x11348,
 	0x1134b, 0x1134d,
@@ -9782,6 +10184,7 @@ static const OnigCodePoint CR_M[] = {
 	0x11366, 0x1136c,
 	0x11370, 0x11374,
 	0x11435, 0x11446,
+	0x1145e, 0x1145e,
 	0x114b0, 0x114c3,
 	0x115af, 0x115b5,
 	0x115b8, 0x115c0,
@@ -9789,13 +10192,33 @@ static const OnigCodePoint CR_M[] = {
 	0x11630, 0x11640,
 	0x116ab, 0x116b7,
 	0x1171d, 0x1172b,
+	0x1182c, 0x1183a,
+	0x119d1, 0x119d7,
+	0x119da, 0x119e0,
+	0x119e4, 0x119e4,
+	0x11a01, 0x11a0a,
+	0x11a33, 0x11a39,
+	0x11a3b, 0x11a3e,
+	0x11a47, 0x11a47,
+	0x11a51, 0x11a5b,
+	0x11a8a, 0x11a99,
 	0x11c2f, 0x11c36,
 	0x11c38, 0x11c3f,
 	0x11c92, 0x11ca7,
 	0x11ca9, 0x11cb6,
+	0x11d31, 0x11d36,
+	0x11d3a, 0x11d3a,
+	0x11d3c, 0x11d3d,
+	0x11d3f, 0x11d45,
+	0x11d47, 0x11d47,
+	0x11d8a, 0x11d8e,
+	0x11d90, 0x11d91,
+	0x11d93, 0x11d97,
+	0x11ef3, 0x11ef6,
 	0x16af0, 0x16af4,
 	0x16b30, 0x16b36,
-	0x16f51, 0x16f7e,
+	0x16f4f, 0x16f4f,
+	0x16f51, 0x16f87,
 	0x16f8f, 0x16f92,
 	0x1bc9d, 0x1bc9e,
 	0x1d165, 0x1d169,
@@ -9815,6 +10238,8 @@ static const OnigCodePoint CR_M[] = {
 	0x1e01b, 0x1e021,
 	0x1e023, 0x1e024,
 	0x1e026, 0x1e02a,
+	0x1e130, 0x1e136,
+	0x1e2ec, 0x1e2ef,
 	0x1e8d0, 0x1e8d6,
 	0x1e944, 0x1e94a,
 	0xe0100, 0xe01ef,
@@ -9822,7 +10247,7 @@ static const OnigCodePoint CR_M[] = {
 
 /* 'Mc': General Category */
 static const OnigCodePoint CR_Mc[] = {
-	155,
+	168,
 	0x0903, 0x0903,
 	0x093b, 0x093b,
 	0x093e, 0x0940,
@@ -9909,7 +10334,7 @@ static const OnigCodePoint CR_Mc[] = {
 	0x1c24, 0x1c2b,
 	0x1c34, 0x1c35,
 	0x1ce1, 0x1ce1,
-	0x1cf2, 0x1cf3,
+	0x1cf7, 0x1cf7,
 	0x302e, 0x302f,
 	0xa823, 0xa824,
 	0xa827, 0xa827,
@@ -9919,7 +10344,7 @@ static const OnigCodePoint CR_Mc[] = {
 	0xa983, 0xa983,
 	0xa9b4, 0xa9b5,
 	0xa9ba, 0xa9bb,
-	0xa9bd, 0xa9c0,
+	0xa9be, 0xa9c0,
 	0xaa2f, 0xaa30,
 	0xaa33, 0xaa34,
 	0xaa4d, 0xaa4d,
@@ -9938,6 +10363,7 @@ static const OnigCodePoint CR_Mc[] = {
 	0x110b0, 0x110b2,
 	0x110b7, 0x110b8,
 	0x1112c, 0x1112c,
+	0x11145, 0x11146,
 	0x11182, 0x11182,
 	0x111b3, 0x111b5,
 	0x111bf, 0x111c0,
@@ -9970,12 +10396,24 @@ static const OnigCodePoint CR_Mc[] = {
 	0x116b6, 0x116b6,
 	0x11720, 0x11721,
 	0x11726, 0x11726,
+	0x1182c, 0x1182e,
+	0x11838, 0x11838,
+	0x119d1, 0x119d3,
+	0x119dc, 0x119df,
+	0x119e4, 0x119e4,
+	0x11a39, 0x11a39,
+	0x11a57, 0x11a58,
+	0x11a97, 0x11a97,
 	0x11c2f, 0x11c2f,
 	0x11c3e, 0x11c3e,
 	0x11ca9, 0x11ca9,
 	0x11cb1, 0x11cb1,
 	0x11cb4, 0x11cb4,
-	0x16f51, 0x16f7e,
+	0x11d8a, 0x11d8e,
+	0x11d93, 0x11d94,
+	0x11d96, 0x11d96,
+	0x11ef5, 0x11ef6,
+	0x16f51, 0x16f87,
 	0x1d165, 0x1d166,
 	0x1d16d, 0x1d172,
 }; /* CR_Mc */
@@ -9992,7 +10430,7 @@ static const OnigCodePoint CR_Me[] = {
 
 /* 'Mn': General Category */
 static const OnigCodePoint CR_Mn[] = {
-	285,
+	318,
 	0x0300, 0x036f,
 	0x0483, 0x0487,
 	0x0591, 0x05bd,
@@ -10011,12 +10449,13 @@ static const OnigCodePoint CR_Mn[] = {
 	0x0730, 0x074a,
 	0x07a6, 0x07b0,
 	0x07eb, 0x07f3,
+	0x07fd, 0x07fd,
 	0x0816, 0x0819,
 	0x081b, 0x0823,
 	0x0825, 0x0827,
 	0x0829, 0x082d,
 	0x0859, 0x085b,
-	0x08d4, 0x08e1,
+	0x08d3, 0x08e1,
 	0x08e3, 0x0902,
 	0x093a, 0x093a,
 	0x093c, 0x093c,
@@ -10029,6 +10468,7 @@ static const OnigCodePoint CR_Mn[] = {
 	0x09c1, 0x09c4,
 	0x09cd, 0x09cd,
 	0x09e2, 0x09e3,
+	0x09fe, 0x09fe,
 	0x0a01, 0x0a02,
 	0x0a3c, 0x0a3c,
 	0x0a41, 0x0a42,
@@ -10043,6 +10483,7 @@ static const OnigCodePoint CR_Mn[] = {
 	0x0ac7, 0x0ac8,
 	0x0acd, 0x0acd,
 	0x0ae2, 0x0ae3,
+	0x0afa, 0x0aff,
 	0x0b01, 0x0b01,
 	0x0b3c, 0x0b3c,
 	0x0b3f, 0x0b3f,
@@ -10054,6 +10495,7 @@ static const OnigCodePoint CR_Mn[] = {
 	0x0bc0, 0x0bc0,
 	0x0bcd, 0x0bcd,
 	0x0c00, 0x0c00,
+	0x0c04, 0x0c04,
 	0x0c3e, 0x0c40,
 	0x0c46, 0x0c48,
 	0x0c4a, 0x0c4d,
@@ -10065,7 +10507,8 @@ static const OnigCodePoint CR_Mn[] = {
 	0x0cc6, 0x0cc6,
 	0x0ccc, 0x0ccd,
 	0x0ce2, 0x0ce3,
-	0x0d01, 0x0d01,
+	0x0d00, 0x0d01,
+	0x0d3b, 0x0d3c,
 	0x0d41, 0x0d44,
 	0x0d4d, 0x0d4d,
 	0x0d62, 0x0d63,
@@ -10076,8 +10519,7 @@ static const OnigCodePoint CR_Mn[] = {
 	0x0e34, 0x0e3a,
 	0x0e47, 0x0e4e,
 	0x0eb1, 0x0eb1,
-	0x0eb4, 0x0eb9,
-	0x0ebb, 0x0ebc,
+	0x0eb4, 0x0ebc,
 	0x0ec8, 0x0ecd,
 	0x0f18, 0x0f19,
 	0x0f35, 0x0f35,
@@ -10149,7 +10591,7 @@ static const OnigCodePoint CR_Mn[] = {
 	0x1ced, 0x1ced,
 	0x1cf4, 0x1cf4,
 	0x1cf8, 0x1cf9,
-	0x1dc0, 0x1df5,
+	0x1dc0, 0x1df9,
 	0x1dfb, 0x1dff,
 	0x20d0, 0x20dc,
 	0x20e1, 0x20e1,
@@ -10169,12 +10611,13 @@ static const OnigCodePoint CR_Mn[] = {
 	0xa825, 0xa826,
 	0xa8c4, 0xa8c5,
 	0xa8e0, 0xa8f1,
+	0xa8ff, 0xa8ff,
 	0xa926, 0xa92d,
 	0xa947, 0xa951,
 	0xa980, 0xa982,
 	0xa9b3, 0xa9b3,
 	0xa9b6, 0xa9b9,
-	0xa9bc, 0xa9bc,
+	0xa9bc, 0xa9bd,
 	0xa9e5, 0xa9e5,
 	0xaa29, 0xaa2e,
 	0xaa31, 0xaa32,
@@ -10204,6 +10647,8 @@ static const OnigCodePoint CR_Mn[] = {
 	0x10a38, 0x10a3a,
 	0x10a3f, 0x10a3f,
 	0x10ae5, 0x10ae6,
+	0x10d24, 0x10d27,
+	0x10f46, 0x10f50,
 	0x11001, 0x11001,
 	0x11038, 0x11046,
 	0x1107f, 0x11081,
@@ -10215,7 +10660,7 @@ static const OnigCodePoint CR_Mn[] = {
 	0x11173, 0x11173,
 	0x11180, 0x11181,
 	0x111b6, 0x111be,
-	0x111ca, 0x111cc,
+	0x111c9, 0x111cc,
 	0x1122f, 0x11231,
 	0x11234, 0x11234,
 	0x11236, 0x11237,
@@ -10223,13 +10668,14 @@ static const OnigCodePoint CR_Mn[] = {
 	0x112df, 0x112df,
 	0x112e3, 0x112ea,
 	0x11300, 0x11301,
-	0x1133c, 0x1133c,
+	0x1133b, 0x1133c,
 	0x11340, 0x11340,
 	0x11366, 0x1136c,
 	0x11370, 0x11374,
 	0x11438, 0x1143f,
 	0x11442, 0x11444,
 	0x11446, 0x11446,
+	0x1145e, 0x1145e,
 	0x114b3, 0x114b8,
 	0x114ba, 0x114ba,
 	0x114bf, 0x114c0,
@@ -10248,6 +10694,19 @@ static const OnigCodePoint CR_Mn[] = {
 	0x1171d, 0x1171f,
 	0x11722, 0x11725,
 	0x11727, 0x1172b,
+	0x1182f, 0x11837,
+	0x11839, 0x1183a,
+	0x119d4, 0x119d7,
+	0x119da, 0x119db,
+	0x119e0, 0x119e0,
+	0x11a01, 0x11a0a,
+	0x11a33, 0x11a38,
+	0x11a3b, 0x11a3e,
+	0x11a47, 0x11a47,
+	0x11a51, 0x11a56,
+	0x11a59, 0x11a5b,
+	0x11a8a, 0x11a96,
+	0x11a98, 0x11a99,
 	0x11c30, 0x11c36,
 	0x11c38, 0x11c3d,
 	0x11c3f, 0x11c3f,
@@ -10255,8 +10714,18 @@ static const OnigCodePoint CR_Mn[] = {
 	0x11caa, 0x11cb0,
 	0x11cb2, 0x11cb3,
 	0x11cb5, 0x11cb6,
+	0x11d31, 0x11d36,
+	0x11d3a, 0x11d3a,
+	0x11d3c, 0x11d3d,
+	0x11d3f, 0x11d45,
+	0x11d47, 0x11d47,
+	0x11d90, 0x11d91,
+	0x11d95, 0x11d95,
+	0x11d97, 0x11d97,
+	0x11ef3, 0x11ef4,
 	0x16af0, 0x16af4,
 	0x16b30, 0x16b36,
+	0x16f4f, 0x16f4f,
 	0x16f8f, 0x16f92,
 	0x1bc9d, 0x1bc9e,
 	0x1d167, 0x1d169,
@@ -10275,6 +10744,8 @@ static const OnigCodePoint CR_Mn[] = {
 	0x1e01b, 0x1e021,
 	0x1e023, 0x1e024,
 	0x1e026, 0x1e02a,
+	0x1e130, 0x1e136,
+	0x1e2ec, 0x1e2ef,
 	0x1e8d0, 0x1e8d6,
 	0x1e944, 0x1e94a,
 	0xe0100, 0xe01ef,
@@ -10282,7 +10753,7 @@ static const OnigCodePoint CR_Mn[] = {
 
 /* 'N': Major Category */
 static const OnigCodePoint CR_N[] = {
-	115,
+	130,
 	0x0030, 0x0039,
 	0x00b2, 0x00b3,
 	0x00b9, 0x00b9,
@@ -10367,7 +10838,7 @@ static const OnigCodePoint CR_N[] = {
 	0x109bc, 0x109bd,
 	0x109c0, 0x109cf,
 	0x109d2, 0x109ff,
-	0x10a40, 0x10a47,
+	0x10a40, 0x10a48,
 	0x10a7d, 0x10a7e,
 	0x10a9d, 0x10a9f,
 	0x10aeb, 0x10aef,
@@ -10375,7 +10846,10 @@ static const OnigCodePoint CR_N[] = {
 	0x10b78, 0x10b7f,
 	0x10ba9, 0x10baf,
 	0x10cfa, 0x10cff,
+	0x10d30, 0x10d39,
 	0x10e60, 0x10e7e,
+	0x10f1d, 0x10f26,
+	0x10f51, 0x10f54,
 	0x11052, 0x1106f,
 	0x110f0, 0x110f9,
 	0x11136, 0x1113f,
@@ -10389,14 +10863,26 @@ static const OnigCodePoint CR_N[] = {
 	0x11730, 0x1173b,
 	0x118e0, 0x118f2,
 	0x11c50, 0x11c6c,
+	0x11d50, 0x11d59,
+	0x11da0, 0x11da9,
+	0x11fc0, 0x11fd4,
 	0x12400, 0x1246e,
 	0x16a60, 0x16a69,
 	0x16b50, 0x16b59,
 	0x16b5b, 0x16b61,
-	0x1d360, 0x1d371,
+	0x16e80, 0x16e96,
+	0x1d2e0, 0x1d2f3,
+	0x1d360, 0x1d378,
 	0x1d7ce, 0x1d7ff,
+	0x1e140, 0x1e149,
+	0x1e2f0, 0x1e2f9,
 	0x1e8c7, 0x1e8cf,
 	0x1e950, 0x1e959,
+	0x1ec71, 0x1ecab,
+	0x1ecad, 0x1ecaf,
+	0x1ecb1, 0x1ecb4,
+	0x1ed01, 0x1ed2d,
+	0x1ed2f, 0x1ed3d,
 	0x1f100, 0x1f10c,
 }; /* CR_N */
 
@@ -10422,7 +10908,7 @@ static const OnigCodePoint CR_Nl[] = {
 
 /* 'No': General Category */
 static const OnigCodePoint CR_No[] = {
-	60,
+	70,
 	0x00b2, 0x00b3,
 	0x00b9, 0x00b9,
 	0x00bc, 0x00be,
@@ -10465,7 +10951,7 @@ static const OnigCodePoint CR_No[] = {
 	0x109bc, 0x109bd,
 	0x109c0, 0x109cf,
 	0x109d2, 0x109ff,
-	0x10a40, 0x10a47,
+	0x10a40, 0x10a48,
 	0x10a7d, 0x10a7e,
 	0x10a9d, 0x10a9f,
 	0x10aeb, 0x10aef,
@@ -10474,14 +10960,24 @@ static const OnigCodePoint CR_No[] = {
 	0x10ba9, 0x10baf,
 	0x10cfa, 0x10cff,
 	0x10e60, 0x10e7e,
+	0x10f1d, 0x10f26,
+	0x10f51, 0x10f54,
 	0x11052, 0x11065,
 	0x111e1, 0x111f4,
 	0x1173a, 0x1173b,
 	0x118ea, 0x118f2,
 	0x11c5a, 0x11c6c,
+	0x11fc0, 0x11fd4,
 	0x16b5b, 0x16b61,
-	0x1d360, 0x1d371,
+	0x16e80, 0x16e96,
+	0x1d2e0, 0x1d2f3,
+	0x1d360, 0x1d378,
 	0x1e8c7, 0x1e8cf,
+	0x1ec71, 0x1ecab,
+	0x1ecad, 0x1ecaf,
+	0x1ecb1, 0x1ecb4,
+	0x1ed01, 0x1ed2d,
+	0x1ed2f, 0x1ed3d,
 	0x1f100, 0x1f10c,
 }; /* CR_No */
 
@@ -10631,7 +11127,7 @@ static const OnigCodePoint CR_Pi[] = {
 
 /* 'Po': General Category */
 static const OnigCodePoint CR_Po[] = {
-	165,
+	179,
 	0x0021, 0x0023,
 	0x0025, 0x0027,
 	0x002a, 0x002a,
@@ -10664,7 +11160,11 @@ static const OnigCodePoint CR_Po[] = {
 	0x085e, 0x085e,
 	0x0964, 0x0965,
 	0x0970, 0x0970,
+	0x09fd, 0x09fd,
+	0x0a76, 0x0a76,
 	0x0af0, 0x0af0,
+	0x0c77, 0x0c77,
+	0x0c84, 0x0c84,
 	0x0df4, 0x0df4,
 	0x0e4f, 0x0e4f,
 	0x0e5a, 0x0e5b,
@@ -10676,7 +11176,7 @@ static const OnigCodePoint CR_Po[] = {
 	0x104a, 0x104f,
 	0x10fb, 0x10fb,
 	0x1360, 0x1368,
-	0x166d, 0x166e,
+	0x166e, 0x166e,
 	0x16eb, 0x16ed,
 	0x1735, 0x1736,
 	0x17d4, 0x17d6,
@@ -10715,7 +11215,7 @@ static const OnigCodePoint CR_Po[] = {
 	0x2e30, 0x2e39,
 	0x2e3c, 0x2e3f,
 	0x2e41, 0x2e41,
-	0x2e43, 0x2e44,
+	0x2e43, 0x2e4f,
 	0x3001, 0x3003,
 	0x303d, 0x303d,
 	0x30fb, 0x30fb,
@@ -10768,12 +11268,13 @@ static const OnigCodePoint CR_Po[] = {
 	0x10af0, 0x10af6,
 	0x10b39, 0x10b3f,
 	0x10b99, 0x10b9c,
+	0x10f55, 0x10f59,
 	0x11047, 0x1104d,
 	0x110bb, 0x110bc,
 	0x110be, 0x110c1,
 	0x11140, 0x11143,
 	0x11174, 0x11175,
-	0x111c5, 0x111c9,
+	0x111c5, 0x111c8,
 	0x111cd, 0x111cd,
 	0x111db, 0x111db,
 	0x111dd, 0x111df,
@@ -10787,13 +11288,22 @@ static const OnigCodePoint CR_Po[] = {
 	0x11641, 0x11643,
 	0x11660, 0x1166c,
 	0x1173c, 0x1173e,
+	0x1183b, 0x1183b,
+	0x119e2, 0x119e2,
+	0x11a3f, 0x11a46,
+	0x11a9a, 0x11a9c,
+	0x11a9e, 0x11aa2,
 	0x11c41, 0x11c45,
 	0x11c70, 0x11c71,
+	0x11ef7, 0x11ef8,
+	0x11fff, 0x11fff,
 	0x12470, 0x12474,
 	0x16a6e, 0x16a6f,
 	0x16af5, 0x16af5,
 	0x16b37, 0x16b3b,
 	0x16b44, 0x16b44,
+	0x16e97, 0x16e9a,
+	0x16fe2, 0x16fe2,
 	0x1bc9f, 0x1bc9f,
 	0x1da87, 0x1da8b,
 	0x1e95e, 0x1e95f,
@@ -10881,7 +11391,7 @@ static const OnigCodePoint CR_Ps[] = {
 
 /* 'S': Major Category */
 static const OnigCodePoint CR_S[] = {
-	218,
+	226,
 	0x0024, 0x0024,
 	0x002b, 0x002b,
 	0x003c, 0x003e,
@@ -10914,6 +11424,7 @@ static const OnigCodePoint CR_S[] = {
 	0x06e9, 0x06e9,
 	0x06fd, 0x06fe,
 	0x07f6, 0x07f6,
+	0x07fe, 0x07ff,
 	0x09f2, 0x09f3,
 	0x09fa, 0x09fb,
 	0x0af1, 0x0af1,
@@ -10936,6 +11447,7 @@ static const OnigCodePoint CR_S[] = {
 	0x0fd5, 0x0fd8,
 	0x109e, 0x109f,
 	0x1390, 0x1399,
+	0x166d, 0x166d,
 	0x17db, 0x17db,
 	0x1940, 0x1940,
 	0x19de, 0x19ff,
@@ -10951,7 +11463,7 @@ static const OnigCodePoint CR_S[] = {
 	0x2052, 0x2052,
 	0x207a, 0x207c,
 	0x208a, 0x208c,
-	0x20a0, 0x20be,
+	0x20a0, 0x20bf,
 	0x2100, 0x2101,
 	0x2103, 0x2106,
 	0x2108, 0x2109,
@@ -10969,8 +11481,7 @@ static const OnigCodePoint CR_S[] = {
 	0x218a, 0x218b,
 	0x2190, 0x2307,
 	0x230c, 0x2328,
-	0x232b, 0x23fe,
-	0x2400, 0x2426,
+	0x232b, 0x2426,
 	0x2440, 0x244a,
 	0x249c, 0x24e9,
 	0x2500, 0x2767,
@@ -10981,10 +11492,7 @@ static const OnigCodePoint CR_S[] = {
 	0x29dc, 0x29fb,
 	0x29fe, 0x2b73,
 	0x2b76, 0x2b95,
-	0x2b98, 0x2bb9,
-	0x2bbd, 0x2bc8,
-	0x2bca, 0x2bd1,
-	0x2bec, 0x2bef,
+	0x2b98, 0x2bff,
 	0x2ce5, 0x2cea,
 	0x2e80, 0x2e99,
 	0x2e9b, 0x2ef3,
@@ -11004,8 +11512,7 @@ static const OnigCodePoint CR_S[] = {
 	0x3250, 0x3250,
 	0x3260, 0x327f,
 	0x328a, 0x32b0,
-	0x32c0, 0x32fe,
-	0x3300, 0x33ff,
+	0x32c0, 0x33ff,
 	0x4dc0, 0x4dff,
 	0xa490, 0xa4c6,
 	0xa700, 0xa716,
@@ -11040,6 +11547,7 @@ static const OnigCodePoint CR_S[] = {
 	0x10877, 0x10878,
 	0x10ac8, 0x10ac8,
 	0x1173f, 0x1173f,
+	0x11fd5, 0x11ff1,
 	0x16b3c, 0x16b3f,
 	0x16b45, 0x16b45,
 	0x1bc9c, 0x1bc9c,
@@ -11068,6 +11576,11 @@ static const OnigCodePoint CR_S[] = {
 	0x1da6d, 0x1da74,
 	0x1da76, 0x1da83,
 	0x1da85, 0x1da86,
+	0x1e14f, 0x1e14f,
+	0x1e2ff, 0x1e2ff,
+	0x1ecac, 0x1ecac,
+	0x1ecb0, 0x1ecb0,
+	0x1ed2e, 0x1ed2e,
 	0x1eef0, 0x1eef1,
 	0x1f000, 0x1f02b,
 	0x1f030, 0x1f093,
@@ -11075,53 +11588,62 @@ static const OnigCodePoint CR_S[] = {
 	0x1f0b1, 0x1f0bf,
 	0x1f0c1, 0x1f0cf,
 	0x1f0d1, 0x1f0f5,
-	0x1f110, 0x1f12e,
-	0x1f130, 0x1f16b,
+	0x1f110, 0x1f16c,
 	0x1f170, 0x1f1ac,
 	0x1f1e6, 0x1f202,
 	0x1f210, 0x1f23b,
 	0x1f240, 0x1f248,
 	0x1f250, 0x1f251,
-	0x1f300, 0x1f6d2,
+	0x1f260, 0x1f265,
+	0x1f300, 0x1f6d5,
 	0x1f6e0, 0x1f6ec,
-	0x1f6f0, 0x1f6f6,
+	0x1f6f0, 0x1f6fa,
 	0x1f700, 0x1f773,
-	0x1f780, 0x1f7d4,
+	0x1f780, 0x1f7d8,
+	0x1f7e0, 0x1f7eb,
 	0x1f800, 0x1f80b,
 	0x1f810, 0x1f847,
 	0x1f850, 0x1f859,
 	0x1f860, 0x1f887,
 	0x1f890, 0x1f8ad,
-	0x1f910, 0x1f91e,
-	0x1f920, 0x1f927,
-	0x1f930, 0x1f930,
-	0x1f933, 0x1f93e,
-	0x1f940, 0x1f94b,
-	0x1f950, 0x1f95e,
-	0x1f980, 0x1f991,
-	0x1f9c0, 0x1f9c0,
+	0x1f900, 0x1f90b,
+	0x1f90d, 0x1f971,
+	0x1f973, 0x1f976,
+	0x1f97a, 0x1f9a2,
+	0x1f9a5, 0x1f9aa,
+	0x1f9ae, 0x1f9ca,
+	0x1f9cd, 0x1fa53,
+	0x1fa60, 0x1fa6d,
+	0x1fa70, 0x1fa73,
+	0x1fa78, 0x1fa7a,
+	0x1fa80, 0x1fa82,
+	0x1fa90, 0x1fa95,
 }; /* CR_S */
 
 /* 'Sc': General Category */
 static const OnigCodePoint CR_Sc[] = {
-	17,
+	21,
 	0x0024, 0x0024,
 	0x00a2, 0x00a5,
 	0x058f, 0x058f,
 	0x060b, 0x060b,
+	0x07fe, 0x07ff,
 	0x09f2, 0x09f3,
 	0x09fb, 0x09fb,
 	0x0af1, 0x0af1,
 	0x0bf9, 0x0bf9,
 	0x0e3f, 0x0e3f,
 	0x17db, 0x17db,
-	0x20a0, 0x20be,
+	0x20a0, 0x20bf,
 	0xa838, 0xa838,
 	0xfdfc, 0xfdfc,
 	0xfe69, 0xfe69,
 	0xff04, 0xff04,
 	0xffe0, 0xffe1,
 	0xffe5, 0xffe6,
+	0x11fdd, 0x11fe0,
+	0x1e2ff, 0x1e2ff,
+	0x1ecb0, 0x1ecb0,
 }; /* CR_Sc */
 
 /* 'Sk': General Category */
@@ -11229,7 +11751,7 @@ static const OnigCodePoint CR_Sm[] = {
 
 /* 'So': General Category */
 static const OnigCodePoint CR_So[] = {
-	174,
+	180,
 	0x00a6, 0x00a6,
 	0x00a9, 0x00a9,
 	0x00ae, 0x00ae,
@@ -11261,6 +11783,7 @@ static const OnigCodePoint CR_So[] = {
 	0x0fd5, 0x0fd8,
 	0x109e, 0x109f,
 	0x1390, 0x1399,
+	0x166d, 0x166d,
 	0x1940, 0x1940,
 	0x19de, 0x19ff,
 	0x1b61, 0x1b6a,
@@ -11295,8 +11818,7 @@ static const OnigCodePoint CR_So[] = {
 	0x232b, 0x237b,
 	0x237d, 0x239a,
 	0x23b4, 0x23db,
-	0x23e2, 0x23fe,
-	0x2400, 0x2426,
+	0x23e2, 0x2426,
 	0x2440, 0x244a,
 	0x249c, 0x24e9,
 	0x2500, 0x25b6,
@@ -11310,10 +11832,7 @@ static const OnigCodePoint CR_So[] = {
 	0x2b45, 0x2b46,
 	0x2b4d, 0x2b73,
 	0x2b76, 0x2b95,
-	0x2b98, 0x2bb9,
-	0x2bbd, 0x2bc8,
-	0x2bca, 0x2bd1,
-	0x2bec, 0x2bef,
+	0x2b98, 0x2bff,
 	0x2ce5, 0x2cea,
 	0x2e80, 0x2e99,
 	0x2e9b, 0x2ef3,
@@ -11332,8 +11851,7 @@ static const OnigCodePoint CR_So[] = {
 	0x3250, 0x3250,
 	0x3260, 0x327f,
 	0x328a, 0x32b0,
-	0x32c0, 0x32fe,
-	0x3300, 0x33ff,
+	0x32c0, 0x33ff,
 	0x4dc0, 0x4dff,
 	0xa490, 0xa4c6,
 	0xa828, 0xa82b,
@@ -11354,6 +11872,8 @@ static const OnigCodePoint CR_So[] = {
 	0x10877, 0x10878,
 	0x10ac8, 0x10ac8,
 	0x1173f, 0x1173f,
+	0x11fd5, 0x11fdc,
+	0x11fe1, 0x11ff1,
 	0x16b3c, 0x16b3f,
 	0x16b45, 0x16b45,
 	0x1bc9c, 0x1bc9c,
@@ -11372,38 +11892,46 @@ static const OnigCodePoint CR_So[] = {
 	0x1da6d, 0x1da74,
 	0x1da76, 0x1da83,
 	0x1da85, 0x1da86,
+	0x1e14f, 0x1e14f,
+	0x1ecac, 0x1ecac,
+	0x1ed2e, 0x1ed2e,
 	0x1f000, 0x1f02b,
 	0x1f030, 0x1f093,
 	0x1f0a0, 0x1f0ae,
 	0x1f0b1, 0x1f0bf,
 	0x1f0c1, 0x1f0cf,
 	0x1f0d1, 0x1f0f5,
-	0x1f110, 0x1f12e,
-	0x1f130, 0x1f16b,
+	0x1f110, 0x1f16c,
 	0x1f170, 0x1f1ac,
 	0x1f1e6, 0x1f202,
 	0x1f210, 0x1f23b,
 	0x1f240, 0x1f248,
 	0x1f250, 0x1f251,
+	0x1f260, 0x1f265,
 	0x1f300, 0x1f3fa,
-	0x1f400, 0x1f6d2,
+	0x1f400, 0x1f6d5,
 	0x1f6e0, 0x1f6ec,
-	0x1f6f0, 0x1f6f6,
+	0x1f6f0, 0x1f6fa,
 	0x1f700, 0x1f773,
-	0x1f780, 0x1f7d4,
+	0x1f780, 0x1f7d8,
+	0x1f7e0, 0x1f7eb,
 	0x1f800, 0x1f80b,
 	0x1f810, 0x1f847,
 	0x1f850, 0x1f859,
 	0x1f860, 0x1f887,
 	0x1f890, 0x1f8ad,
-	0x1f910, 0x1f91e,
-	0x1f920, 0x1f927,
-	0x1f930, 0x1f930,
-	0x1f933, 0x1f93e,
-	0x1f940, 0x1f94b,
-	0x1f950, 0x1f95e,
-	0x1f980, 0x1f991,
-	0x1f9c0, 0x1f9c0,
+	0x1f900, 0x1f90b,
+	0x1f90d, 0x1f971,
+	0x1f973, 0x1f976,
+	0x1f97a, 0x1f9a2,
+	0x1f9a5, 0x1f9aa,
+	0x1f9ae, 0x1f9ca,
+	0x1f9cd, 0x1fa53,
+	0x1fa60, 0x1fa6d,
+	0x1fa70, 0x1fa73,
+	0x1fa78, 0x1fa7a,
+	0x1fa80, 0x1fa82,
+	0x1fa90, 0x1fa95,
 }; /* CR_So */
 
 /* 'Z': Major Category */
@@ -11597,7 +12125,7 @@ static const OnigCodePoint CR_Math[] = {
 
 /* 'Cased': Derived Property */
 static const OnigCodePoint CR_Cased[] = {
-	135,
+	140,
 	0x0041, 0x005a,
 	0x0061, 0x007a,
 	0x00aa, 0x00aa,
@@ -11624,13 +12152,17 @@ static const OnigCodePoint CR_Cased[] = {
 	0x03f7, 0x0481,
 	0x048a, 0x052f,
 	0x0531, 0x0556,
-	0x0561, 0x0587,
+	0x0560, 0x0588,
 	0x10a0, 0x10c5,
 	0x10c7, 0x10c7,
 	0x10cd, 0x10cd,
+	0x10d0, 0x10fa,
+	0x10fd, 0x10ff,
 	0x13a0, 0x13f5,
 	0x13f8, 0x13fd,
 	0x1c80, 0x1c88,
+	0x1c90, 0x1cba,
+	0x1cbd, 0x1cbf,
 	0x1d00, 0x1dbf,
 	0x1e00, 0x1f15,
 	0x1f18, 0x1f1d,
@@ -11683,11 +12215,11 @@ static const OnigCodePoint CR_Cased[] = {
 	0xa680, 0xa69d,
 	0xa722, 0xa787,
 	0xa78b, 0xa78e,
-	0xa790, 0xa7ae,
-	0xa7b0, 0xa7b7,
+	0xa790, 0xa7bf,
+	0xa7c2, 0xa7c6,
 	0xa7f8, 0xa7fa,
 	0xab30, 0xab5a,
-	0xab5c, 0xab65,
+	0xab5c, 0xab67,
 	0xab70, 0xabbf,
 	0xfb00, 0xfb06,
 	0xfb13, 0xfb17,
@@ -11699,6 +12231,7 @@ static const OnigCodePoint CR_Cased[] = {
 	0x10c80, 0x10cb2,
 	0x10cc0, 0x10cf2,
 	0x118a0, 0x118df,
+	0x16e40, 0x16e7f,
 	0x1d400, 0x1d454,
 	0x1d456, 0x1d49c,
 	0x1d49e, 0x1d49f,
@@ -11737,7 +12270,7 @@ static const OnigCodePoint CR_Cased[] = {
 
 /* 'Case_Ignorable': Derived Property */
 static const OnigCodePoint CR_Case_Ignorable[] = {
-	365,
+	401,
 	0x0027, 0x0027,
 	0x002e, 0x002e,
 	0x003a, 0x003a,
@@ -11776,9 +12309,10 @@ static const OnigCodePoint CR_Case_Ignorable[] = {
 	0x07a6, 0x07b0,
 	0x07eb, 0x07f5,
 	0x07fa, 0x07fa,
+	0x07fd, 0x07fd,
 	0x0816, 0x082d,
 	0x0859, 0x085b,
-	0x08d4, 0x0902,
+	0x08d3, 0x0902,
 	0x093a, 0x093a,
 	0x093c, 0x093c,
 	0x0941, 0x0948,
@@ -11791,6 +12325,7 @@ static const OnigCodePoint CR_Case_Ignorable[] = {
 	0x09c1, 0x09c4,
 	0x09cd, 0x09cd,
 	0x09e2, 0x09e3,
+	0x09fe, 0x09fe,
 	0x0a01, 0x0a02,
 	0x0a3c, 0x0a3c,
 	0x0a41, 0x0a42,
@@ -11805,6 +12340,7 @@ static const OnigCodePoint CR_Case_Ignorable[] = {
 	0x0ac7, 0x0ac8,
 	0x0acd, 0x0acd,
 	0x0ae2, 0x0ae3,
+	0x0afa, 0x0aff,
 	0x0b01, 0x0b01,
 	0x0b3c, 0x0b3c,
 	0x0b3f, 0x0b3f,
@@ -11816,6 +12352,7 @@ static const OnigCodePoint CR_Case_Ignorable[] = {
 	0x0bc0, 0x0bc0,
 	0x0bcd, 0x0bcd,
 	0x0c00, 0x0c00,
+	0x0c04, 0x0c04,
 	0x0c3e, 0x0c40,
 	0x0c46, 0x0c48,
 	0x0c4a, 0x0c4d,
@@ -11827,7 +12364,8 @@ static const OnigCodePoint CR_Case_Ignorable[] = {
 	0x0cc6, 0x0cc6,
 	0x0ccc, 0x0ccd,
 	0x0ce2, 0x0ce3,
-	0x0d01, 0x0d01,
+	0x0d00, 0x0d01,
+	0x0d3b, 0x0d3c,
 	0x0d41, 0x0d44,
 	0x0d4d, 0x0d4d,
 	0x0d62, 0x0d63,
@@ -11838,8 +12376,7 @@ static const OnigCodePoint CR_Case_Ignorable[] = {
 	0x0e34, 0x0e3a,
 	0x0e46, 0x0e4e,
 	0x0eb1, 0x0eb1,
-	0x0eb4, 0x0eb9,
-	0x0ebb, 0x0ebc,
+	0x0eb4, 0x0ebc,
 	0x0ec6, 0x0ec6,
 	0x0ec8, 0x0ecd,
 	0x0f18, 0x0f19,
@@ -11919,7 +12456,7 @@ static const OnigCodePoint CR_Case_Ignorable[] = {
 	0x1cf8, 0x1cf9,
 	0x1d2c, 0x1d6a,
 	0x1d78, 0x1d78,
-	0x1d9b, 0x1df5,
+	0x1d9b, 0x1df9,
 	0x1dfb, 0x1dff,
 	0x1fbd, 0x1fbd,
 	0x1fbf, 0x1fc1,
@@ -11968,12 +12505,13 @@ static const OnigCodePoint CR_Case_Ignorable[] = {
 	0xa825, 0xa826,
 	0xa8c4, 0xa8c5,
 	0xa8e0, 0xa8f1,
+	0xa8ff, 0xa8ff,
 	0xa926, 0xa92d,
 	0xa947, 0xa951,
 	0xa980, 0xa982,
 	0xa9b3, 0xa9b3,
 	0xa9b6, 0xa9b9,
-	0xa9bc, 0xa9bc,
+	0xa9bc, 0xa9bd,
 	0xa9cf, 0xa9cf,
 	0xa9e5, 0xa9e6,
 	0xaa29, 0xaa2e,
@@ -12022,19 +12560,22 @@ static const OnigCodePoint CR_Case_Ignorable[] = {
 	0x10a38, 0x10a3a,
 	0x10a3f, 0x10a3f,
 	0x10ae5, 0x10ae6,
+	0x10d24, 0x10d27,
+	0x10f46, 0x10f50,
 	0x11001, 0x11001,
 	0x11038, 0x11046,
 	0x1107f, 0x11081,
 	0x110b3, 0x110b6,
 	0x110b9, 0x110ba,
 	0x110bd, 0x110bd,
+	0x110cd, 0x110cd,
 	0x11100, 0x11102,
 	0x11127, 0x1112b,
 	0x1112d, 0x11134,
 	0x11173, 0x11173,
 	0x11180, 0x11181,
 	0x111b6, 0x111be,
-	0x111ca, 0x111cc,
+	0x111c9, 0x111cc,
 	0x1122f, 0x11231,
 	0x11234, 0x11234,
 	0x11236, 0x11237,
@@ -12042,13 +12583,14 @@ static const OnigCodePoint CR_Case_Ignorable[] = {
 	0x112df, 0x112df,
 	0x112e3, 0x112ea,
 	0x11300, 0x11301,
-	0x1133c, 0x1133c,
+	0x1133b, 0x1133c,
 	0x11340, 0x11340,
 	0x11366, 0x1136c,
 	0x11370, 0x11374,
 	0x11438, 0x1143f,
 	0x11442, 0x11444,
 	0x11446, 0x11446,
+	0x1145e, 0x1145e,
 	0x114b3, 0x114b8,
 	0x114ba, 0x114ba,
 	0x114bf, 0x114c0,
@@ -12067,6 +12609,19 @@ static const OnigCodePoint CR_Case_Ignorable[] = {
 	0x1171d, 0x1171f,
 	0x11722, 0x11725,
 	0x11727, 0x1172b,
+	0x1182f, 0x11837,
+	0x11839, 0x1183a,
+	0x119d4, 0x119d7,
+	0x119da, 0x119db,
+	0x119e0, 0x119e0,
+	0x11a01, 0x11a0a,
+	0x11a33, 0x11a38,
+	0x11a3b, 0x11a3e,
+	0x11a47, 0x11a47,
+	0x11a51, 0x11a56,
+	0x11a59, 0x11a5b,
+	0x11a8a, 0x11a96,
+	0x11a98, 0x11a99,
 	0x11c30, 0x11c36,
 	0x11c38, 0x11c3d,
 	0x11c3f, 0x11c3f,
@@ -12074,11 +12629,23 @@ static const OnigCodePoint CR_Case_Ignorable[] = {
 	0x11caa, 0x11cb0,
 	0x11cb2, 0x11cb3,
 	0x11cb5, 0x11cb6,
+	0x11d31, 0x11d36,
+	0x11d3a, 0x11d3a,
+	0x11d3c, 0x11d3d,
+	0x11d3f, 0x11d45,
+	0x11d47, 0x11d47,
+	0x11d90, 0x11d91,
+	0x11d95, 0x11d95,
+	0x11d97, 0x11d97,
+	0x11ef3, 0x11ef4,
+	0x13430, 0x13438,
 	0x16af0, 0x16af4,
 	0x16b30, 0x16b36,
 	0x16b40, 0x16b43,
+	0x16f4f, 0x16f4f,
 	0x16f8f, 0x16f9f,
-	0x16fe0, 0x16fe0,
+	0x16fe0, 0x16fe1,
+	0x16fe3, 0x16fe3,
 	0x1bc9d, 0x1bc9e,
 	0x1bca0, 0x1bca3,
 	0x1d167, 0x1d169,
@@ -12097,8 +12664,10 @@ static const OnigCodePoint CR_Case_Ignorable[] = {
 	0x1e01b, 0x1e021,
 	0x1e023, 0x1e024,
 	0x1e026, 0x1e02a,
+	0x1e130, 0x1e13d,
+	0x1e2ec, 0x1e2ef,
 	0x1e8d0, 0x1e8d6,
-	0x1e944, 0x1e94a,
+	0x1e944, 0x1e94b,
 	0x1f3fb, 0x1f3ff,
 	0xe0001, 0xe0001,
 	0xe0020, 0xe007f,
@@ -12107,7 +12676,7 @@ static const OnigCodePoint CR_Case_Ignorable[] = {
 
 /* 'Changes_When_Lowercased': Derived Property */
 static const OnigCodePoint CR_Changes_When_Lowercased[] = {
-	590,
+	599,
 	0x0041, 0x005a,
 	0x00c0, 0x00d6,
 	0x00d8, 0x00de,
@@ -12383,6 +12952,8 @@ static const OnigCodePoint CR_Changes_When_Lowercased[] = {
 	0x10c7, 0x10c7,
 	0x10cd, 0x10cd,
 	0x13a0, 0x13f5,
+	0x1c90, 0x1cba,
+	0x1cbd, 0x1cbf,
 	0x1e00, 0x1e00,
 	0x1e02, 0x1e02,
 	0x1e04, 0x1e04,
@@ -12692,17 +13263,24 @@ static const OnigCodePoint CR_Changes_When_Lowercased[] = {
 	0xa7aa, 0xa7ae,
 	0xa7b0, 0xa7b4,
 	0xa7b6, 0xa7b6,
+	0xa7b8, 0xa7b8,
+	0xa7ba, 0xa7ba,
+	0xa7bc, 0xa7bc,
+	0xa7be, 0xa7be,
+	0xa7c2, 0xa7c2,
+	0xa7c4, 0xa7c6,
 	0xff21, 0xff3a,
 	0x10400, 0x10427,
 	0x104b0, 0x104d3,
 	0x10c80, 0x10cb2,
 	0x118a0, 0x118bf,
+	0x16e40, 0x16e5f,
 	0x1e900, 0x1e921,
 }; /* CR_Changes_When_Lowercased */
 
 /* 'Changes_When_Uppercased': Derived Property */
 static const OnigCodePoint CR_Changes_When_Uppercased[] = {
-	607,
+	616,
 	0x0061, 0x007a,
 	0x00b5, 0x00b5,
 	0x00df, 0x00f6,
@@ -12859,7 +13437,7 @@ static const OnigCodePoint CR_Changes_When_Uppercased[] = {
 	0x0275, 0x0275,
 	0x027d, 0x027d,
 	0x0280, 0x0280,
-	0x0283, 0x0283,
+	0x0282, 0x0283,
 	0x0287, 0x028c,
 	0x0292, 0x0292,
 	0x029d, 0x029e,
@@ -12988,10 +13566,13 @@ static const OnigCodePoint CR_Changes_When_Uppercased[] = {
 	0x052d, 0x052d,
 	0x052f, 0x052f,
 	0x0561, 0x0587,
+	0x10d0, 0x10fa,
+	0x10fd, 0x10ff,
 	0x13f8, 0x13fd,
 	0x1c80, 0x1c88,
 	0x1d79, 0x1d79,
 	0x1d7d, 0x1d7d,
+	0x1d8e, 0x1d8e,
 	0x1e01, 0x1e01,
 	0x1e03, 0x1e03,
 	0x1e05, 0x1e05,
@@ -13287,7 +13868,7 @@ static const OnigCodePoint CR_Changes_When_Uppercased[] = {
 	0xa787, 0xa787,
 	0xa78c, 0xa78c,
 	0xa791, 0xa791,
-	0xa793, 0xa793,
+	0xa793, 0xa794,
 	0xa797, 0xa797,
 	0xa799, 0xa799,
 	0xa79b, 0xa79b,
@@ -13300,6 +13881,11 @@ static const OnigCodePoint CR_Changes_When_Uppercased[] = {
 	0xa7a9, 0xa7a9,
 	0xa7b5, 0xa7b5,
 	0xa7b7, 0xa7b7,
+	0xa7b9, 0xa7b9,
+	0xa7bb, 0xa7bb,
+	0xa7bd, 0xa7bd,
+	0xa7bf, 0xa7bf,
+	0xa7c3, 0xa7c3,
 	0xab53, 0xab53,
 	0xab70, 0xabbf,
 	0xfb00, 0xfb06,
@@ -13309,12 +13895,13 @@ static const OnigCodePoint CR_Changes_When_Uppercased[] = {
 	0x104d8, 0x104fb,
 	0x10cc0, 0x10cf2,
 	0x118c0, 0x118df,
+	0x16e60, 0x16e7f,
 	0x1e922, 0x1e943,
 }; /* CR_Changes_When_Uppercased */
 
 /* 'Changes_When_Titlecased': Derived Property */
 static const OnigCodePoint CR_Changes_When_Titlecased[] = {
-	608,
+	615,
 	0x0061, 0x007a,
 	0x00b5, 0x00b5,
 	0x00df, 0x00f6,
@@ -13472,7 +14059,7 @@ static const OnigCodePoint CR_Changes_When_Titlecased[] = {
 	0x0275, 0x0275,
 	0x027d, 0x027d,
 	0x0280, 0x0280,
-	0x0283, 0x0283,
+	0x0282, 0x0283,
 	0x0287, 0x028c,
 	0x0292, 0x0292,
 	0x029d, 0x029e,
@@ -13605,6 +14192,7 @@ static const OnigCodePoint CR_Changes_When_Titlecased[] = {
 	0x1c80, 0x1c88,
 	0x1d79, 0x1d79,
 	0x1d7d, 0x1d7d,
+	0x1d8e, 0x1d8e,
 	0x1e01, 0x1e01,
 	0x1e03, 0x1e03,
 	0x1e05, 0x1e05,
@@ -13900,7 +14488,7 @@ static const OnigCodePoint CR_Changes_When_Titlecased[] = {
 	0xa787, 0xa787,
 	0xa78c, 0xa78c,
 	0xa791, 0xa791,
-	0xa793, 0xa793,
+	0xa793, 0xa794,
 	0xa797, 0xa797,
 	0xa799, 0xa799,
 	0xa79b, 0xa79b,
@@ -13913,6 +14501,11 @@ static const OnigCodePoint CR_Changes_When_Titlecased[] = {
 	0xa7a9, 0xa7a9,
 	0xa7b5, 0xa7b5,
 	0xa7b7, 0xa7b7,
+	0xa7b9, 0xa7b9,
+	0xa7bb, 0xa7bb,
+	0xa7bd, 0xa7bd,
+	0xa7bf, 0xa7bf,
+	0xa7c3, 0xa7c3,
 	0xab53, 0xab53,
 	0xab70, 0xabbf,
 	0xfb00, 0xfb06,
@@ -13922,12 +14515,13 @@ static const OnigCodePoint CR_Changes_When_Titlecased[] = {
 	0x104d8, 0x104fb,
 	0x10cc0, 0x10cf2,
 	0x118c0, 0x118df,
+	0x16e60, 0x16e7f,
 	0x1e922, 0x1e943,
 }; /* CR_Changes_When_Titlecased */
 
 /* 'Changes_When_Casefolded': Derived Property */
 static const OnigCodePoint CR_Changes_When_Casefolded[] = {
-	603,
+	612,
 	0x0041, 0x005a,
 	0x00b5, 0x00b5,
 	0x00c0, 0x00d6,
@@ -14211,6 +14805,8 @@ static const OnigCodePoint CR_Changes_When_Casefolded[] = {
 	0x10cd, 0x10cd,
 	0x13f8, 0x13fd,
 	0x1c80, 0x1c88,
+	0x1c90, 0x1cba,
+	0x1cbd, 0x1cbf,
 	0x1e00, 0x1e00,
 	0x1e02, 0x1e02,
 	0x1e04, 0x1e04,
@@ -14522,6 +15118,12 @@ static const OnigCodePoint CR_Changes_When_Casefolded[] = {
 	0xa7aa, 0xa7ae,
 	0xa7b0, 0xa7b4,
 	0xa7b6, 0xa7b6,
+	0xa7b8, 0xa7b8,
+	0xa7ba, 0xa7ba,
+	0xa7bc, 0xa7bc,
+	0xa7be, 0xa7be,
+	0xa7c2, 0xa7c2,
+	0xa7c4, 0xa7c6,
 	0xab70, 0xabbf,
 	0xfb00, 0xfb06,
 	0xfb13, 0xfb17,
@@ -14530,12 +15132,13 @@ static const OnigCodePoint CR_Changes_When_Casefolded[] = {
 	0x104b0, 0x104d3,
 	0x10c80, 0x10cb2,
 	0x118a0, 0x118bf,
+	0x16e40, 0x16e5f,
 	0x1e900, 0x1e921,
 }; /* CR_Changes_When_Casefolded */
 
 /* 'Changes_When_Casemapped': Derived Property */
 static const OnigCodePoint CR_Changes_When_Casemapped[] = {
-	116,
+	123,
 	0x0041, 0x005a,
 	0x0061, 0x007a,
 	0x00b5, 0x00b5,
@@ -14563,7 +15166,7 @@ static const OnigCodePoint CR_Changes_When_Casemapped[] = {
 	0x0275, 0x0275,
 	0x027d, 0x027d,
 	0x0280, 0x0280,
-	0x0283, 0x0283,
+	0x0282, 0x0283,
 	0x0287, 0x028c,
 	0x0292, 0x0292,
 	0x029d, 0x029e,
@@ -14586,11 +15189,16 @@ static const OnigCodePoint CR_Changes_When_Casemapped[] = {
 	0x10a0, 0x10c5,
 	0x10c7, 0x10c7,
 	0x10cd, 0x10cd,
+	0x10d0, 0x10fa,
+	0x10fd, 0x10ff,
 	0x13a0, 0x13f5,
 	0x13f8, 0x13fd,
 	0x1c80, 0x1c88,
+	0x1c90, 0x1cba,
+	0x1cbd, 0x1cbf,
 	0x1d79, 0x1d79,
 	0x1d7d, 0x1d7d,
+	0x1d8e, 0x1d8e,
 	0x1e00, 0x1e9b,
 	0x1e9e, 0x1e9e,
 	0x1ea0, 0x1f15,
@@ -14636,9 +15244,10 @@ static const OnigCodePoint CR_Changes_When_Casemapped[] = {
 	0xa732, 0xa76f,
 	0xa779, 0xa787,
 	0xa78b, 0xa78d,
-	0xa790, 0xa793,
+	0xa790, 0xa794,
 	0xa796, 0xa7ae,
-	0xa7b0, 0xa7b7,
+	0xa7b0, 0xa7bf,
+	0xa7c2, 0xa7c6,
 	0xab53, 0xab53,
 	0xab70, 0xabbf,
 	0xfb00, 0xfb06,
@@ -14651,12 +15260,13 @@ static const OnigCodePoint CR_Changes_When_Casemapped[] = {
 	0x10c80, 0x10cb2,
 	0x10cc0, 0x10cf2,
 	0x118a0, 0x118df,
+	0x16e40, 0x16e7f,
 	0x1e900, 0x1e943,
 }; /* CR_Changes_When_Casemapped */
 
 /* 'ID_Start': Derived Property */
 static const OnigCodePoint CR_ID_Start[] = {
-	571,
+	609,
 	0x0041, 0x005a,
 	0x0061, 0x007a,
 	0x00aa, 0x00aa,
@@ -14682,9 +15292,9 @@ static const OnigCodePoint CR_ID_Start[] = {
 	0x048a, 0x052f,
 	0x0531, 0x0556,
 	0x0559, 0x0559,
-	0x0561, 0x0587,
+	0x0560, 0x0588,
 	0x05d0, 0x05ea,
-	0x05f0, 0x05f2,
+	0x05ef, 0x05f2,
 	0x0620, 0x064a,
 	0x066e, 0x066f,
 	0x0671, 0x06d3,
@@ -14705,6 +15315,7 @@ static const OnigCodePoint CR_ID_Start[] = {
 	0x0824, 0x0824,
 	0x0828, 0x0828,
 	0x0840, 0x0858,
+	0x0860, 0x086a,
 	0x08a0, 0x08b4,
 	0x08b6, 0x08bd,
 	0x0904, 0x0939,
@@ -14723,6 +15334,7 @@ static const OnigCodePoint CR_ID_Start[] = {
 	0x09dc, 0x09dd,
 	0x09df, 0x09e1,
 	0x09f0, 0x09f1,
+	0x09fc, 0x09fc,
 	0x0a05, 0x0a0a,
 	0x0a0f, 0x0a10,
 	0x0a13, 0x0a28,
@@ -14799,16 +15411,10 @@ static const OnigCodePoint CR_ID_Start[] = {
 	0x0e40, 0x0e46,
 	0x0e81, 0x0e82,
 	0x0e84, 0x0e84,
-	0x0e87, 0x0e88,
-	0x0e8a, 0x0e8a,
-	0x0e8d, 0x0e8d,
-	0x0e94, 0x0e97,
-	0x0e99, 0x0e9f,
-	0x0ea1, 0x0ea3,
+	0x0e86, 0x0e8a,
+	0x0e8c, 0x0ea3,
 	0x0ea5, 0x0ea5,
-	0x0ea7, 0x0ea7,
-	0x0eaa, 0x0eab,
-	0x0ead, 0x0eb0,
+	0x0ea7, 0x0eb0,
 	0x0eb2, 0x0eb3,
 	0x0ebd, 0x0ebd,
 	0x0ec0, 0x0ec4,
@@ -14864,7 +15470,7 @@ static const OnigCodePoint CR_ID_Start[] = {
 	0x1780, 0x17b3,
 	0x17d7, 0x17d7,
 	0x17dc, 0x17dc,
-	0x1820, 0x1877,
+	0x1820, 0x1878,
 	0x1880, 0x18a8,
 	0x18aa, 0x18aa,
 	0x18b0, 0x18f5,
@@ -14885,9 +15491,12 @@ static const OnigCodePoint CR_ID_Start[] = {
 	0x1c4d, 0x1c4f,
 	0x1c5a, 0x1c7d,
 	0x1c80, 0x1c88,
+	0x1c90, 0x1cba,
+	0x1cbd, 0x1cbf,
 	0x1ce9, 0x1cec,
-	0x1cee, 0x1cf1,
+	0x1cee, 0x1cf3,
 	0x1cf5, 0x1cf6,
+	0x1cfa, 0x1cfa,
 	0x1d00, 0x1dbf,
 	0x1e00, 0x1f15,
 	0x1f18, 0x1f1d,
@@ -14951,12 +15560,12 @@ static const OnigCodePoint CR_ID_Start[] = {
 	0x309b, 0x309f,
 	0x30a1, 0x30fa,
 	0x30fc, 0x30ff,
-	0x3105, 0x312d,
+	0x3105, 0x312f,
 	0x3131, 0x318e,
 	0x31a0, 0x31ba,
 	0x31f0, 0x31ff,
 	0x3400, 0x4db5,
-	0x4e00, 0x9fd5,
+	0x4e00, 0x9fef,
 	0xa000, 0xa48c,
 	0xa4d0, 0xa4fd,
 	0xa500, 0xa60c,
@@ -14967,8 +15576,8 @@ static const OnigCodePoint CR_ID_Start[] = {
 	0xa6a0, 0xa6ef,
 	0xa717, 0xa71f,
 	0xa722, 0xa788,
-	0xa78b, 0xa7ae,
-	0xa7b0, 0xa7b7,
+	0xa78b, 0xa7bf,
+	0xa7c2, 0xa7c6,
 	0xa7f7, 0xa801,
 	0xa803, 0xa805,
 	0xa807, 0xa80a,
@@ -14977,7 +15586,7 @@ static const OnigCodePoint CR_ID_Start[] = {
 	0xa882, 0xa8b3,
 	0xa8f2, 0xa8f7,
 	0xa8fb, 0xa8fb,
-	0xa8fd, 0xa8fd,
+	0xa8fd, 0xa8fe,
 	0xa90a, 0xa925,
 	0xa930, 0xa946,
 	0xa960, 0xa97c,
@@ -15006,7 +15615,7 @@ static const OnigCodePoint CR_ID_Start[] = {
 	0xab20, 0xab26,
 	0xab28, 0xab2e,
 	0xab30, 0xab5a,
-	0xab5c, 0xab65,
+	0xab5c, 0xab67,
 	0xab70, 0xabe2,
 	0xac00, 0xd7a3,
 	0xd7b0, 0xd7c6,
@@ -15047,7 +15656,7 @@ static const OnigCodePoint CR_ID_Start[] = {
 	0x10280, 0x1029c,
 	0x102a0, 0x102d0,
 	0x10300, 0x1031f,
-	0x10330, 0x1034a,
+	0x1032d, 0x1034a,
 	0x10350, 0x10375,
 	0x10380, 0x1039d,
 	0x103a0, 0x103c3,
@@ -15078,7 +15687,7 @@ static const OnigCodePoint CR_ID_Start[] = {
 	0x10a00, 0x10a00,
 	0x10a10, 0x10a13,
 	0x10a15, 0x10a17,
-	0x10a19, 0x10a33,
+	0x10a19, 0x10a35,
 	0x10a60, 0x10a7c,
 	0x10a80, 0x10a9c,
 	0x10ac0, 0x10ac7,
@@ -15090,10 +15699,16 @@ static const OnigCodePoint CR_ID_Start[] = {
 	0x10c00, 0x10c48,
 	0x10c80, 0x10cb2,
 	0x10cc0, 0x10cf2,
+	0x10d00, 0x10d23,
+	0x10f00, 0x10f1c,
+	0x10f27, 0x10f27,
+	0x10f30, 0x10f45,
+	0x10fe0, 0x10ff6,
 	0x11003, 0x11037,
 	0x11083, 0x110af,
 	0x110d0, 0x110e8,
 	0x11103, 0x11126,
+	0x11144, 0x11144,
 	0x11150, 0x11172,
 	0x11176, 0x11176,
 	0x11183, 0x111b2,
@@ -15119,6 +15734,7 @@ static const OnigCodePoint CR_ID_Start[] = {
 	0x1135d, 0x11361,
 	0x11400, 0x11434,
 	0x11447, 0x1144a,
+	0x1145f, 0x1145f,
 	0x11480, 0x114af,
 	0x114c4, 0x114c5,
 	0x114c7, 0x114c7,
@@ -15127,14 +15743,35 @@ static const OnigCodePoint CR_ID_Start[] = {
 	0x11600, 0x1162f,
 	0x11644, 0x11644,
 	0x11680, 0x116aa,
-	0x11700, 0x11719,
+	0x116b8, 0x116b8,
+	0x11700, 0x1171a,
+	0x11800, 0x1182b,
 	0x118a0, 0x118df,
 	0x118ff, 0x118ff,
+	0x119a0, 0x119a7,
+	0x119aa, 0x119d0,
+	0x119e1, 0x119e1,
+	0x119e3, 0x119e3,
+	0x11a00, 0x11a00,
+	0x11a0b, 0x11a32,
+	0x11a3a, 0x11a3a,
+	0x11a50, 0x11a50,
+	0x11a5c, 0x11a89,
+	0x11a9d, 0x11a9d,
 	0x11ac0, 0x11af8,
 	0x11c00, 0x11c08,
 	0x11c0a, 0x11c2e,
 	0x11c40, 0x11c40,
 	0x11c72, 0x11c8f,
+	0x11d00, 0x11d06,
+	0x11d08, 0x11d09,
+	0x11d0b, 0x11d30,
+	0x11d46, 0x11d46,
+	0x11d60, 0x11d65,
+	0x11d67, 0x11d68,
+	0x11d6a, 0x11d89,
+	0x11d98, 0x11d98,
+	0x11ee0, 0x11ef2,
 	0x12000, 0x12399,
 	0x12400, 0x1246e,
 	0x12480, 0x12543,
@@ -15147,13 +15784,18 @@ static const OnigCodePoint CR_ID_Start[] = {
 	0x16b40, 0x16b43,
 	0x16b63, 0x16b77,
 	0x16b7d, 0x16b8f,
-	0x16f00, 0x16f44,
+	0x16e40, 0x16e7f,
+	0x16f00, 0x16f4a,
 	0x16f50, 0x16f50,
 	0x16f93, 0x16f9f,
-	0x16fe0, 0x16fe0,
-	0x17000, 0x187ec,
+	0x16fe0, 0x16fe1,
+	0x16fe3, 0x16fe3,
+	0x17000, 0x187f7,
 	0x18800, 0x18af2,
-	0x1b000, 0x1b001,
+	0x1b000, 0x1b11e,
+	0x1b150, 0x1b152,
+	0x1b164, 0x1b167,
+	0x1b170, 0x1b2fb,
 	0x1bc00, 0x1bc6a,
 	0x1bc70, 0x1bc7c,
 	0x1bc80, 0x1bc88,
@@ -15188,8 +15830,13 @@ static const OnigCodePoint CR_ID_Start[] = {
 	0x1d78a, 0x1d7a8,
 	0x1d7aa, 0x1d7c2,
 	0x1d7c4, 0x1d7cb,
+	0x1e100, 0x1e12c,
+	0x1e137, 0x1e13d,
+	0x1e14e, 0x1e14e,
+	0x1e2c0, 0x1e2eb,
 	0x1e800, 0x1e8c4,
 	0x1e900, 0x1e943,
+	0x1e94b, 0x1e94b,
 	0x1ee00, 0x1ee03,
 	0x1ee05, 0x1ee1f,
 	0x1ee21, 0x1ee22,
@@ -15227,12 +15874,13 @@ static const OnigCodePoint CR_ID_Start[] = {
 	0x2a700, 0x2b734,
 	0x2b740, 0x2b81d,
 	0x2b820, 0x2cea1,
+	0x2ceb0, 0x2ebe0,
 	0x2f800, 0x2fa1d,
 }; /* CR_ID_Start */
 
 /* 'ID_Continue': Derived Property */
 static const OnigCodePoint CR_ID_Continue[] = {
-	676,
+	713,
 	0x0030, 0x0039,
 	0x0041, 0x005a,
 	0x005f, 0x005f,
@@ -15261,14 +15909,14 @@ static const OnigCodePoint CR_ID_Continue[] = {
 	0x048a, 0x052f,
 	0x0531, 0x0556,
 	0x0559, 0x0559,
-	0x0561, 0x0587,
+	0x0560, 0x0588,
 	0x0591, 0x05bd,
 	0x05bf, 0x05bf,
 	0x05c1, 0x05c2,
 	0x05c4, 0x05c5,
 	0x05c7, 0x05c7,
 	0x05d0, 0x05ea,
-	0x05f0, 0x05f2,
+	0x05ef, 0x05f2,
 	0x0610, 0x061a,
 	0x0620, 0x0669,
 	0x066e, 0x06d3,
@@ -15280,11 +15928,13 @@ static const OnigCodePoint CR_ID_Continue[] = {
 	0x074d, 0x07b1,
 	0x07c0, 0x07f5,
 	0x07fa, 0x07fa,
+	0x07fd, 0x07fd,
 	0x0800, 0x082d,
 	0x0840, 0x085b,
+	0x0860, 0x086a,
 	0x08a0, 0x08b4,
 	0x08b6, 0x08bd,
-	0x08d4, 0x08e1,
+	0x08d3, 0x08e1,
 	0x08e3, 0x0963,
 	0x0966, 0x096f,
 	0x0971, 0x0983,
@@ -15301,6 +15951,8 @@ static const OnigCodePoint CR_ID_Continue[] = {
 	0x09dc, 0x09dd,
 	0x09df, 0x09e3,
 	0x09e6, 0x09f1,
+	0x09fc, 0x09fc,
+	0x09fe, 0x09fe,
 	0x0a01, 0x0a03,
 	0x0a05, 0x0a0a,
 	0x0a0f, 0x0a10,
@@ -15330,7 +15982,7 @@ static const OnigCodePoint CR_ID_Continue[] = {
 	0x0ad0, 0x0ad0,
 	0x0ae0, 0x0ae3,
 	0x0ae6, 0x0aef,
-	0x0af9, 0x0af9,
+	0x0af9, 0x0aff,
 	0x0b01, 0x0b03,
 	0x0b05, 0x0b0c,
 	0x0b0f, 0x0b10,
@@ -15362,8 +16014,7 @@ static const OnigCodePoint CR_ID_Continue[] = {
 	0x0bd0, 0x0bd0,
 	0x0bd7, 0x0bd7,
 	0x0be6, 0x0bef,
-	0x0c00, 0x0c03,
-	0x0c05, 0x0c0c,
+	0x0c00, 0x0c0c,
 	0x0c0e, 0x0c10,
 	0x0c12, 0x0c28,
 	0x0c2a, 0x0c39,
@@ -15388,11 +16039,10 @@ static const OnigCodePoint CR_ID_Continue[] = {
 	0x0ce0, 0x0ce3,
 	0x0ce6, 0x0cef,
 	0x0cf1, 0x0cf2,
-	0x0d01, 0x0d03,
+	0x0d00, 0x0d03,
 	0x0d05, 0x0d0c,
 	0x0d0e, 0x0d10,
-	0x0d12, 0x0d3a,
-	0x0d3d, 0x0d44,
+	0x0d12, 0x0d44,
 	0x0d46, 0x0d48,
 	0x0d4a, 0x0d4e,
 	0x0d54, 0x0d57,
@@ -15416,17 +16066,10 @@ static const OnigCodePoint CR_ID_Continue[] = {
 	0x0e50, 0x0e59,
 	0x0e81, 0x0e82,
 	0x0e84, 0x0e84,
-	0x0e87, 0x0e88,
-	0x0e8a, 0x0e8a,
-	0x0e8d, 0x0e8d,
-	0x0e94, 0x0e97,
-	0x0e99, 0x0e9f,
-	0x0ea1, 0x0ea3,
+	0x0e86, 0x0e8a,
+	0x0e8c, 0x0ea3,
 	0x0ea5, 0x0ea5,
-	0x0ea7, 0x0ea7,
-	0x0eaa, 0x0eab,
-	0x0ead, 0x0eb9,
-	0x0ebb, 0x0ebd,
+	0x0ea7, 0x0ebd,
 	0x0ec0, 0x0ec4,
 	0x0ec6, 0x0ec6,
 	0x0ec8, 0x0ecd,
@@ -15489,7 +16132,7 @@ static const OnigCodePoint CR_ID_Continue[] = {
 	0x17e0, 0x17e9,
 	0x180b, 0x180d,
 	0x1810, 0x1819,
-	0x1820, 0x1877,
+	0x1820, 0x1878,
 	0x1880, 0x18aa,
 	0x18b0, 0x18f5,
 	0x1900, 0x191e,
@@ -15515,10 +16158,11 @@ static const OnigCodePoint CR_ID_Continue[] = {
 	0x1c40, 0x1c49,
 	0x1c4d, 0x1c7d,
 	0x1c80, 0x1c88,
+	0x1c90, 0x1cba,
+	0x1cbd, 0x1cbf,
 	0x1cd0, 0x1cd2,
-	0x1cd4, 0x1cf6,
-	0x1cf8, 0x1cf9,
-	0x1d00, 0x1df5,
+	0x1cd4, 0x1cfa,
+	0x1d00, 0x1df9,
 	0x1dfb, 0x1f15,
 	0x1f18, 0x1f1d,
 	0x1f20, 0x1f45,
@@ -15586,12 +16230,12 @@ static const OnigCodePoint CR_ID_Continue[] = {
 	0x3099, 0x309f,
 	0x30a1, 0x30fa,
 	0x30fc, 0x30ff,
-	0x3105, 0x312d,
+	0x3105, 0x312f,
 	0x3131, 0x318e,
 	0x31a0, 0x31ba,
 	0x31f0, 0x31ff,
 	0x3400, 0x4db5,
-	0x4e00, 0x9fd5,
+	0x4e00, 0x9fef,
 	0xa000, 0xa48c,
 	0xa4d0, 0xa4fd,
 	0xa500, 0xa60c,
@@ -15601,16 +16245,15 @@ static const OnigCodePoint CR_ID_Continue[] = {
 	0xa67f, 0xa6f1,
 	0xa717, 0xa71f,
 	0xa722, 0xa788,
-	0xa78b, 0xa7ae,
-	0xa7b0, 0xa7b7,
+	0xa78b, 0xa7bf,
+	0xa7c2, 0xa7c6,
 	0xa7f7, 0xa827,
 	0xa840, 0xa873,
 	0xa880, 0xa8c5,
 	0xa8d0, 0xa8d9,
 	0xa8e0, 0xa8f7,
 	0xa8fb, 0xa8fb,
-	0xa8fd, 0xa8fd,
-	0xa900, 0xa92d,
+	0xa8fd, 0xa92d,
 	0xa930, 0xa953,
 	0xa960, 0xa97c,
 	0xa980, 0xa9c0,
@@ -15630,7 +16273,7 @@ static const OnigCodePoint CR_ID_Continue[] = {
 	0xab20, 0xab26,
 	0xab28, 0xab2e,
 	0xab30, 0xab5a,
-	0xab5c, 0xab65,
+	0xab5c, 0xab67,
 	0xab70, 0xabea,
 	0xabec, 0xabed,
 	0xabf0, 0xabf9,
@@ -15680,7 +16323,7 @@ static const OnigCodePoint CR_ID_Continue[] = {
 	0x102a0, 0x102d0,
 	0x102e0, 0x102e0,
 	0x10300, 0x1031f,
-	0x10330, 0x1034a,
+	0x1032d, 0x1034a,
 	0x10350, 0x1037a,
 	0x10380, 0x1039d,
 	0x103a0, 0x103c3,
@@ -15713,7 +16356,7 @@ static const OnigCodePoint CR_ID_Continue[] = {
 	0x10a05, 0x10a06,
 	0x10a0c, 0x10a13,
 	0x10a15, 0x10a17,
-	0x10a19, 0x10a33,
+	0x10a19, 0x10a35,
 	0x10a38, 0x10a3a,
 	0x10a3f, 0x10a3f,
 	0x10a60, 0x10a7c,
@@ -15727,6 +16370,12 @@ static const OnigCodePoint CR_ID_Continue[] = {
 	0x10c00, 0x10c48,
 	0x10c80, 0x10cb2,
 	0x10cc0, 0x10cf2,
+	0x10d00, 0x10d27,
+	0x10d30, 0x10d39,
+	0x10f00, 0x10f1c,
+	0x10f27, 0x10f27,
+	0x10f30, 0x10f50,
+	0x10fe0, 0x10ff6,
 	0x11000, 0x11046,
 	0x11066, 0x1106f,
 	0x1107f, 0x110ba,
@@ -15734,10 +16383,11 @@ static const OnigCodePoint CR_ID_Continue[] = {
 	0x110f0, 0x110f9,
 	0x11100, 0x11134,
 	0x11136, 0x1113f,
+	0x11144, 0x11146,
 	0x11150, 0x11173,
 	0x11176, 0x11176,
 	0x11180, 0x111c4,
-	0x111ca, 0x111cc,
+	0x111c9, 0x111cc,
 	0x111d0, 0x111da,
 	0x111dc, 0x111dc,
 	0x11200, 0x11211,
@@ -15757,7 +16407,7 @@ static const OnigCodePoint CR_ID_Continue[] = {
 	0x1132a, 0x11330,
 	0x11332, 0x11333,
 	0x11335, 0x11339,
-	0x1133c, 0x11344,
+	0x1133b, 0x11344,
 	0x11347, 0x11348,
 	0x1134b, 0x1134d,
 	0x11350, 0x11350,
@@ -15767,6 +16417,7 @@ static const OnigCodePoint CR_ID_Continue[] = {
 	0x11370, 0x11374,
 	0x11400, 0x1144a,
 	0x11450, 0x11459,
+	0x1145e, 0x1145f,
 	0x11480, 0x114c5,
 	0x114c7, 0x114c7,
 	0x114d0, 0x114d9,
@@ -15776,13 +16427,22 @@ static const OnigCodePoint CR_ID_Continue[] = {
 	0x11600, 0x11640,
 	0x11644, 0x11644,
 	0x11650, 0x11659,
-	0x11680, 0x116b7,
+	0x11680, 0x116b8,
 	0x116c0, 0x116c9,
-	0x11700, 0x11719,
+	0x11700, 0x1171a,
 	0x1171d, 0x1172b,
 	0x11730, 0x11739,
+	0x11800, 0x1183a,
 	0x118a0, 0x118e9,
 	0x118ff, 0x118ff,
+	0x119a0, 0x119a7,
+	0x119aa, 0x119d7,
+	0x119da, 0x119e1,
+	0x119e3, 0x119e4,
+	0x11a00, 0x11a3e,
+	0x11a47, 0x11a47,
+	0x11a50, 0x11a99,
+	0x11a9d, 0x11a9d,
 	0x11ac0, 0x11af8,
 	0x11c00, 0x11c08,
 	0x11c0a, 0x11c36,
@@ -15791,6 +16451,20 @@ static const OnigCodePoint CR_ID_Continue[] = {
 	0x11c72, 0x11c8f,
 	0x11c92, 0x11ca7,
 	0x11ca9, 0x11cb6,
+	0x11d00, 0x11d06,
+	0x11d08, 0x11d09,
+	0x11d0b, 0x11d36,
+	0x11d3a, 0x11d3a,
+	0x11d3c, 0x11d3d,
+	0x11d3f, 0x11d47,
+	0x11d50, 0x11d59,
+	0x11d60, 0x11d65,
+	0x11d67, 0x11d68,
+	0x11d6a, 0x11d8e,
+	0x11d90, 0x11d91,
+	0x11d93, 0x11d98,
+	0x11da0, 0x11da9,
+	0x11ee0, 0x11ef6,
 	0x12000, 0x12399,
 	0x12400, 0x1246e,
 	0x12480, 0x12543,
@@ -15806,13 +16480,18 @@ static const OnigCodePoint CR_ID_Continue[] = {
 	0x16b50, 0x16b59,
 	0x16b63, 0x16b77,
 	0x16b7d, 0x16b8f,
-	0x16f00, 0x16f44,
-	0x16f50, 0x16f7e,
+	0x16e40, 0x16e7f,
+	0x16f00, 0x16f4a,
+	0x16f4f, 0x16f87,
 	0x16f8f, 0x16f9f,
-	0x16fe0, 0x16fe0,
-	0x17000, 0x187ec,
+	0x16fe0, 0x16fe1,
+	0x16fe3, 0x16fe3,
+	0x17000, 0x187f7,
 	0x18800, 0x18af2,
-	0x1b000, 0x1b001,
+	0x1b000, 0x1b11e,
+	0x1b150, 0x1b152,
+	0x1b164, 0x1b167,
+	0x1b170, 0x1b2fb,
 	0x1bc00, 0x1bc6a,
 	0x1bc70, 0x1bc7c,
 	0x1bc80, 0x1bc88,
@@ -15866,9 +16545,14 @@ static const OnigCodePoint CR_ID_Continue[] = {
 	0x1e01b, 0x1e021,
 	0x1e023, 0x1e024,
 	0x1e026, 0x1e02a,
+	0x1e100, 0x1e12c,
+	0x1e130, 0x1e13d,
+	0x1e140, 0x1e149,
+	0x1e14e, 0x1e14e,
+	0x1e2c0, 0x1e2f9,
 	0x1e800, 0x1e8c4,
 	0x1e8d0, 0x1e8d6,
-	0x1e900, 0x1e94a,
+	0x1e900, 0x1e94b,
 	0x1e950, 0x1e959,
 	0x1ee00, 0x1ee03,
 	0x1ee05, 0x1ee1f,
@@ -15907,13 +16591,14 @@ static const OnigCodePoint CR_ID_Continue[] = {
 	0x2a700, 0x2b734,
 	0x2b740, 0x2b81d,
 	0x2b820, 0x2cea1,
+	0x2ceb0, 0x2ebe0,
 	0x2f800, 0x2fa1d,
 	0xe0100, 0xe01ef,
 }; /* CR_ID_Continue */
 
 /* 'XID_Start': Derived Property */
 static const OnigCodePoint CR_XID_Start[] = {
-	578,
+	616,
 	0x0041, 0x005a,
 	0x0061, 0x007a,
 	0x00aa, 0x00aa,
@@ -15939,9 +16624,9 @@ static const OnigCodePoint CR_XID_Start[] = {
 	0x048a, 0x052f,
 	0x0531, 0x0556,
 	0x0559, 0x0559,
-	0x0561, 0x0587,
+	0x0560, 0x0588,
 	0x05d0, 0x05ea,
-	0x05f0, 0x05f2,
+	0x05ef, 0x05f2,
 	0x0620, 0x064a,
 	0x066e, 0x066f,
 	0x0671, 0x06d3,
@@ -15962,6 +16647,7 @@ static const OnigCodePoint CR_XID_Start[] = {
 	0x0824, 0x0824,
 	0x0828, 0x0828,
 	0x0840, 0x0858,
+	0x0860, 0x086a,
 	0x08a0, 0x08b4,
 	0x08b6, 0x08bd,
 	0x0904, 0x0939,
@@ -15980,6 +16666,7 @@ static const OnigCodePoint CR_XID_Start[] = {
 	0x09dc, 0x09dd,
 	0x09df, 0x09e1,
 	0x09f0, 0x09f1,
+	0x09fc, 0x09fc,
 	0x0a05, 0x0a0a,
 	0x0a0f, 0x0a10,
 	0x0a13, 0x0a28,
@@ -16056,16 +16743,10 @@ static const OnigCodePoint CR_XID_Start[] = {
 	0x0e40, 0x0e46,
 	0x0e81, 0x0e82,
 	0x0e84, 0x0e84,
-	0x0e87, 0x0e88,
-	0x0e8a, 0x0e8a,
-	0x0e8d, 0x0e8d,
-	0x0e94, 0x0e97,
-	0x0e99, 0x0e9f,
-	0x0ea1, 0x0ea3,
+	0x0e86, 0x0e8a,
+	0x0e8c, 0x0ea3,
 	0x0ea5, 0x0ea5,
-	0x0ea7, 0x0ea7,
-	0x0eaa, 0x0eab,
-	0x0ead, 0x0eb0,
+	0x0ea7, 0x0eb0,
 	0x0eb2, 0x0eb2,
 	0x0ebd, 0x0ebd,
 	0x0ec0, 0x0ec4,
@@ -16121,7 +16802,7 @@ static const OnigCodePoint CR_XID_Start[] = {
 	0x1780, 0x17b3,
 	0x17d7, 0x17d7,
 	0x17dc, 0x17dc,
-	0x1820, 0x1877,
+	0x1820, 0x1878,
 	0x1880, 0x18a8,
 	0x18aa, 0x18aa,
 	0x18b0, 0x18f5,
@@ -16142,9 +16823,12 @@ static const OnigCodePoint CR_XID_Start[] = {
 	0x1c4d, 0x1c4f,
 	0x1c5a, 0x1c7d,
 	0x1c80, 0x1c88,
+	0x1c90, 0x1cba,
+	0x1cbd, 0x1cbf,
 	0x1ce9, 0x1cec,
-	0x1cee, 0x1cf1,
+	0x1cee, 0x1cf3,
 	0x1cf5, 0x1cf6,
+	0x1cfa, 0x1cfa,
 	0x1d00, 0x1dbf,
 	0x1e00, 0x1f15,
 	0x1f18, 0x1f1d,
@@ -16208,12 +16892,12 @@ static const OnigCodePoint CR_XID_Start[] = {
 	0x309d, 0x309f,
 	0x30a1, 0x30fa,
 	0x30fc, 0x30ff,
-	0x3105, 0x312d,
+	0x3105, 0x312f,
 	0x3131, 0x318e,
 	0x31a0, 0x31ba,
 	0x31f0, 0x31ff,
 	0x3400, 0x4db5,
-	0x4e00, 0x9fd5,
+	0x4e00, 0x9fef,
 	0xa000, 0xa48c,
 	0xa4d0, 0xa4fd,
 	0xa500, 0xa60c,
@@ -16224,8 +16908,8 @@ static const OnigCodePoint CR_XID_Start[] = {
 	0xa6a0, 0xa6ef,
 	0xa717, 0xa71f,
 	0xa722, 0xa788,
-	0xa78b, 0xa7ae,
-	0xa7b0, 0xa7b7,
+	0xa78b, 0xa7bf,
+	0xa7c2, 0xa7c6,
 	0xa7f7, 0xa801,
 	0xa803, 0xa805,
 	0xa807, 0xa80a,
@@ -16234,7 +16918,7 @@ static const OnigCodePoint CR_XID_Start[] = {
 	0xa882, 0xa8b3,
 	0xa8f2, 0xa8f7,
 	0xa8fb, 0xa8fb,
-	0xa8fd, 0xa8fd,
+	0xa8fd, 0xa8fe,
 	0xa90a, 0xa925,
 	0xa930, 0xa946,
 	0xa960, 0xa97c,
@@ -16263,7 +16947,7 @@ static const OnigCodePoint CR_XID_Start[] = {
 	0xab20, 0xab26,
 	0xab28, 0xab2e,
 	0xab30, 0xab5a,
-	0xab5c, 0xab65,
+	0xab5c, 0xab67,
 	0xab70, 0xabe2,
 	0xac00, 0xd7a3,
 	0xd7b0, 0xd7c6,
@@ -16311,7 +16995,7 @@ static const OnigCodePoint CR_XID_Start[] = {
 	0x10280, 0x1029c,
 	0x102a0, 0x102d0,
 	0x10300, 0x1031f,
-	0x10330, 0x1034a,
+	0x1032d, 0x1034a,
 	0x10350, 0x10375,
 	0x10380, 0x1039d,
 	0x103a0, 0x103c3,
@@ -16342,7 +17026,7 @@ static const OnigCodePoint CR_XID_Start[] = {
 	0x10a00, 0x10a00,
 	0x10a10, 0x10a13,
 	0x10a15, 0x10a17,
-	0x10a19, 0x10a33,
+	0x10a19, 0x10a35,
 	0x10a60, 0x10a7c,
 	0x10a80, 0x10a9c,
 	0x10ac0, 0x10ac7,
@@ -16354,10 +17038,16 @@ static const OnigCodePoint CR_XID_Start[] = {
 	0x10c00, 0x10c48,
 	0x10c80, 0x10cb2,
 	0x10cc0, 0x10cf2,
+	0x10d00, 0x10d23,
+	0x10f00, 0x10f1c,
+	0x10f27, 0x10f27,
+	0x10f30, 0x10f45,
+	0x10fe0, 0x10ff6,
 	0x11003, 0x11037,
 	0x11083, 0x110af,
 	0x110d0, 0x110e8,
 	0x11103, 0x11126,
+	0x11144, 0x11144,
 	0x11150, 0x11172,
 	0x11176, 0x11176,
 	0x11183, 0x111b2,
@@ -16383,6 +17073,7 @@ static const OnigCodePoint CR_XID_Start[] = {
 	0x1135d, 0x11361,
 	0x11400, 0x11434,
 	0x11447, 0x1144a,
+	0x1145f, 0x1145f,
 	0x11480, 0x114af,
 	0x114c4, 0x114c5,
 	0x114c7, 0x114c7,
@@ -16391,14 +17082,35 @@ static const OnigCodePoint CR_XID_Start[] = {
 	0x11600, 0x1162f,
 	0x11644, 0x11644,
 	0x11680, 0x116aa,
-	0x11700, 0x11719,
+	0x116b8, 0x116b8,
+	0x11700, 0x1171a,
+	0x11800, 0x1182b,
 	0x118a0, 0x118df,
 	0x118ff, 0x118ff,
+	0x119a0, 0x119a7,
+	0x119aa, 0x119d0,
+	0x119e1, 0x119e1,
+	0x119e3, 0x119e3,
+	0x11a00, 0x11a00,
+	0x11a0b, 0x11a32,
+	0x11a3a, 0x11a3a,
+	0x11a50, 0x11a50,
+	0x11a5c, 0x11a89,
+	0x11a9d, 0x11a9d,
 	0x11ac0, 0x11af8,
 	0x11c00, 0x11c08,
 	0x11c0a, 0x11c2e,
 	0x11c40, 0x11c40,
 	0x11c72, 0x11c8f,
+	0x11d00, 0x11d06,
+	0x11d08, 0x11d09,
+	0x11d0b, 0x11d30,
+	0x11d46, 0x11d46,
+	0x11d60, 0x11d65,
+	0x11d67, 0x11d68,
+	0x11d6a, 0x11d89,
+	0x11d98, 0x11d98,
+	0x11ee0, 0x11ef2,
 	0x12000, 0x12399,
 	0x12400, 0x1246e,
 	0x12480, 0x12543,
@@ -16411,13 +17123,18 @@ static const OnigCodePoint CR_XID_Start[] = {
 	0x16b40, 0x16b43,
 	0x16b63, 0x16b77,
 	0x16b7d, 0x16b8f,
-	0x16f00, 0x16f44,
+	0x16e40, 0x16e7f,
+	0x16f00, 0x16f4a,
 	0x16f50, 0x16f50,
 	0x16f93, 0x16f9f,
-	0x16fe0, 0x16fe0,
-	0x17000, 0x187ec,
+	0x16fe0, 0x16fe1,
+	0x16fe3, 0x16fe3,
+	0x17000, 0x187f7,
 	0x18800, 0x18af2,
-	0x1b000, 0x1b001,
+	0x1b000, 0x1b11e,
+	0x1b150, 0x1b152,
+	0x1b164, 0x1b167,
+	0x1b170, 0x1b2fb,
 	0x1bc00, 0x1bc6a,
 	0x1bc70, 0x1bc7c,
 	0x1bc80, 0x1bc88,
@@ -16452,8 +17169,13 @@ static const OnigCodePoint CR_XID_Start[] = {
 	0x1d78a, 0x1d7a8,
 	0x1d7aa, 0x1d7c2,
 	0x1d7c4, 0x1d7cb,
+	0x1e100, 0x1e12c,
+	0x1e137, 0x1e13d,
+	0x1e14e, 0x1e14e,
+	0x1e2c0, 0x1e2eb,
 	0x1e800, 0x1e8c4,
 	0x1e900, 0x1e943,
+	0x1e94b, 0x1e94b,
 	0x1ee00, 0x1ee03,
 	0x1ee05, 0x1ee1f,
 	0x1ee21, 0x1ee22,
@@ -16491,12 +17213,13 @@ static const OnigCodePoint CR_XID_Start[] = {
 	0x2a700, 0x2b734,
 	0x2b740, 0x2b81d,
 	0x2b820, 0x2cea1,
+	0x2ceb0, 0x2ebe0,
 	0x2f800, 0x2fa1d,
 }; /* CR_XID_Start */
 
 /* 'XID_Continue': Derived Property */
 static const OnigCodePoint CR_XID_Continue[] = {
-	683,
+	720,
 	0x0030, 0x0039,
 	0x0041, 0x005a,
 	0x005f, 0x005f,
@@ -16525,14 +17248,14 @@ static const OnigCodePoint CR_XID_Continue[] = {
 	0x048a, 0x052f,
 	0x0531, 0x0556,
 	0x0559, 0x0559,
-	0x0561, 0x0587,
+	0x0560, 0x0588,
 	0x0591, 0x05bd,
 	0x05bf, 0x05bf,
 	0x05c1, 0x05c2,
 	0x05c4, 0x05c5,
 	0x05c7, 0x05c7,
 	0x05d0, 0x05ea,
-	0x05f0, 0x05f2,
+	0x05ef, 0x05f2,
 	0x0610, 0x061a,
 	0x0620, 0x0669,
 	0x066e, 0x06d3,
@@ -16544,11 +17267,13 @@ static const OnigCodePoint CR_XID_Continue[] = {
 	0x074d, 0x07b1,
 	0x07c0, 0x07f5,
 	0x07fa, 0x07fa,
+	0x07fd, 0x07fd,
 	0x0800, 0x082d,
 	0x0840, 0x085b,
+	0x0860, 0x086a,
 	0x08a0, 0x08b4,
 	0x08b6, 0x08bd,
-	0x08d4, 0x08e1,
+	0x08d3, 0x08e1,
 	0x08e3, 0x0963,
 	0x0966, 0x096f,
 	0x0971, 0x0983,
@@ -16565,6 +17290,8 @@ static const OnigCodePoint CR_XID_Continue[] = {
 	0x09dc, 0x09dd,
 	0x09df, 0x09e3,
 	0x09e6, 0x09f1,
+	0x09fc, 0x09fc,
+	0x09fe, 0x09fe,
 	0x0a01, 0x0a03,
 	0x0a05, 0x0a0a,
 	0x0a0f, 0x0a10,
@@ -16594,7 +17321,7 @@ static const OnigCodePoint CR_XID_Continue[] = {
 	0x0ad0, 0x0ad0,
 	0x0ae0, 0x0ae3,
 	0x0ae6, 0x0aef,
-	0x0af9, 0x0af9,
+	0x0af9, 0x0aff,
 	0x0b01, 0x0b03,
 	0x0b05, 0x0b0c,
 	0x0b0f, 0x0b10,
@@ -16626,8 +17353,7 @@ static const OnigCodePoint CR_XID_Continue[] = {
 	0x0bd0, 0x0bd0,
 	0x0bd7, 0x0bd7,
 	0x0be6, 0x0bef,
-	0x0c00, 0x0c03,
-	0x0c05, 0x0c0c,
+	0x0c00, 0x0c0c,
 	0x0c0e, 0x0c10,
 	0x0c12, 0x0c28,
 	0x0c2a, 0x0c39,
@@ -16652,11 +17378,10 @@ static const OnigCodePoint CR_XID_Continue[] = {
 	0x0ce0, 0x0ce3,
 	0x0ce6, 0x0cef,
 	0x0cf1, 0x0cf2,
-	0x0d01, 0x0d03,
+	0x0d00, 0x0d03,
 	0x0d05, 0x0d0c,
 	0x0d0e, 0x0d10,
-	0x0d12, 0x0d3a,
-	0x0d3d, 0x0d44,
+	0x0d12, 0x0d44,
 	0x0d46, 0x0d48,
 	0x0d4a, 0x0d4e,
 	0x0d54, 0x0d57,
@@ -16680,17 +17405,10 @@ static const OnigCodePoint CR_XID_Continue[] = {
 	0x0e50, 0x0e59,
 	0x0e81, 0x0e82,
 	0x0e84, 0x0e84,
-	0x0e87, 0x0e88,
-	0x0e8a, 0x0e8a,
-	0x0e8d, 0x0e8d,
-	0x0e94, 0x0e97,
-	0x0e99, 0x0e9f,
-	0x0ea1, 0x0ea3,
+	0x0e86, 0x0e8a,
+	0x0e8c, 0x0ea3,
 	0x0ea5, 0x0ea5,
-	0x0ea7, 0x0ea7,
-	0x0eaa, 0x0eab,
-	0x0ead, 0x0eb9,
-	0x0ebb, 0x0ebd,
+	0x0ea7, 0x0ebd,
 	0x0ec0, 0x0ec4,
 	0x0ec6, 0x0ec6,
 	0x0ec8, 0x0ecd,
@@ -16753,7 +17471,7 @@ static const OnigCodePoint CR_XID_Continue[] = {
 	0x17e0, 0x17e9,
 	0x180b, 0x180d,
 	0x1810, 0x1819,
-	0x1820, 0x1877,
+	0x1820, 0x1878,
 	0x1880, 0x18aa,
 	0x18b0, 0x18f5,
 	0x1900, 0x191e,
@@ -16779,10 +17497,11 @@ static const OnigCodePoint CR_XID_Continue[] = {
 	0x1c40, 0x1c49,
 	0x1c4d, 0x1c7d,
 	0x1c80, 0x1c88,
+	0x1c90, 0x1cba,
+	0x1cbd, 0x1cbf,
 	0x1cd0, 0x1cd2,
-	0x1cd4, 0x1cf6,
-	0x1cf8, 0x1cf9,
-	0x1d00, 0x1df5,
+	0x1cd4, 0x1cfa,
+	0x1d00, 0x1df9,
 	0x1dfb, 0x1f15,
 	0x1f18, 0x1f1d,
 	0x1f20, 0x1f45,
@@ -16851,12 +17570,12 @@ static const OnigCodePoint CR_XID_Continue[] = {
 	0x309d, 0x309f,
 	0x30a1, 0x30fa,
 	0x30fc, 0x30ff,
-	0x3105, 0x312d,
+	0x3105, 0x312f,
 	0x3131, 0x318e,
 	0x31a0, 0x31ba,
 	0x31f0, 0x31ff,
 	0x3400, 0x4db5,
-	0x4e00, 0x9fd5,
+	0x4e00, 0x9fef,
 	0xa000, 0xa48c,
 	0xa4d0, 0xa4fd,
 	0xa500, 0xa60c,
@@ -16866,16 +17585,15 @@ static const OnigCodePoint CR_XID_Continue[] = {
 	0xa67f, 0xa6f1,
 	0xa717, 0xa71f,
 	0xa722, 0xa788,
-	0xa78b, 0xa7ae,
-	0xa7b0, 0xa7b7,
+	0xa78b, 0xa7bf,
+	0xa7c2, 0xa7c6,
 	0xa7f7, 0xa827,
 	0xa840, 0xa873,
 	0xa880, 0xa8c5,
 	0xa8d0, 0xa8d9,
 	0xa8e0, 0xa8f7,
 	0xa8fb, 0xa8fb,
-	0xa8fd, 0xa8fd,
-	0xa900, 0xa92d,
+	0xa8fd, 0xa92d,
 	0xa930, 0xa953,
 	0xa960, 0xa97c,
 	0xa980, 0xa9c0,
@@ -16895,7 +17613,7 @@ static const OnigCodePoint CR_XID_Continue[] = {
 	0xab20, 0xab26,
 	0xab28, 0xab2e,
 	0xab30, 0xab5a,
-	0xab5c, 0xab65,
+	0xab5c, 0xab67,
 	0xab70, 0xabea,
 	0xabec, 0xabed,
 	0xabf0, 0xabf9,
@@ -16951,7 +17669,7 @@ static const OnigCodePoint CR_XID_Continue[] = {
 	0x102a0, 0x102d0,
 	0x102e0, 0x102e0,
 	0x10300, 0x1031f,
-	0x10330, 0x1034a,
+	0x1032d, 0x1034a,
 	0x10350, 0x1037a,
 	0x10380, 0x1039d,
 	0x103a0, 0x103c3,
@@ -16984,7 +17702,7 @@ static const OnigCodePoint CR_XID_Continue[] = {
 	0x10a05, 0x10a06,
 	0x10a0c, 0x10a13,
 	0x10a15, 0x10a17,
-	0x10a19, 0x10a33,
+	0x10a19, 0x10a35,
 	0x10a38, 0x10a3a,
 	0x10a3f, 0x10a3f,
 	0x10a60, 0x10a7c,
@@ -16998,6 +17716,12 @@ static const OnigCodePoint CR_XID_Continue[] = {
 	0x10c00, 0x10c48,
 	0x10c80, 0x10cb2,
 	0x10cc0, 0x10cf2,
+	0x10d00, 0x10d27,
+	0x10d30, 0x10d39,
+	0x10f00, 0x10f1c,
+	0x10f27, 0x10f27,
+	0x10f30, 0x10f50,
+	0x10fe0, 0x10ff6,
 	0x11000, 0x11046,
 	0x11066, 0x1106f,
 	0x1107f, 0x110ba,
@@ -17005,10 +17729,11 @@ static const OnigCodePoint CR_XID_Continue[] = {
 	0x110f0, 0x110f9,
 	0x11100, 0x11134,
 	0x11136, 0x1113f,
+	0x11144, 0x11146,
 	0x11150, 0x11173,
 	0x11176, 0x11176,
 	0x11180, 0x111c4,
-	0x111ca, 0x111cc,
+	0x111c9, 0x111cc,
 	0x111d0, 0x111da,
 	0x111dc, 0x111dc,
 	0x11200, 0x11211,
@@ -17028,7 +17753,7 @@ static const OnigCodePoint CR_XID_Continue[] = {
 	0x1132a, 0x11330,
 	0x11332, 0x11333,
 	0x11335, 0x11339,
-	0x1133c, 0x11344,
+	0x1133b, 0x11344,
 	0x11347, 0x11348,
 	0x1134b, 0x1134d,
 	0x11350, 0x11350,
@@ -17038,6 +17763,7 @@ static const OnigCodePoint CR_XID_Continue[] = {
 	0x11370, 0x11374,
 	0x11400, 0x1144a,
 	0x11450, 0x11459,
+	0x1145e, 0x1145f,
 	0x11480, 0x114c5,
 	0x114c7, 0x114c7,
 	0x114d0, 0x114d9,
@@ -17047,13 +17773,22 @@ static const OnigCodePoint CR_XID_Continue[] = {
 	0x11600, 0x11640,
 	0x11644, 0x11644,
 	0x11650, 0x11659,
-	0x11680, 0x116b7,
+	0x11680, 0x116b8,
 	0x116c0, 0x116c9,
-	0x11700, 0x11719,
+	0x11700, 0x1171a,
 	0x1171d, 0x1172b,
 	0x11730, 0x11739,
+	0x11800, 0x1183a,
 	0x118a0, 0x118e9,
 	0x118ff, 0x118ff,
+	0x119a0, 0x119a7,
+	0x119aa, 0x119d7,
+	0x119da, 0x119e1,
+	0x119e3, 0x119e4,
+	0x11a00, 0x11a3e,
+	0x11a47, 0x11a47,
+	0x11a50, 0x11a99,
+	0x11a9d, 0x11a9d,
 	0x11ac0, 0x11af8,
 	0x11c00, 0x11c08,
 	0x11c0a, 0x11c36,
@@ -17062,6 +17797,20 @@ static const OnigCodePoint CR_XID_Continue[] = {
 	0x11c72, 0x11c8f,
 	0x11c92, 0x11ca7,
 	0x11ca9, 0x11cb6,
+	0x11d00, 0x11d06,
+	0x11d08, 0x11d09,
+	0x11d0b, 0x11d36,
+	0x11d3a, 0x11d3a,
+	0x11d3c, 0x11d3d,
+	0x11d3f, 0x11d47,
+	0x11d50, 0x11d59,
+	0x11d60, 0x11d65,
+	0x11d67, 0x11d68,
+	0x11d6a, 0x11d8e,
+	0x11d90, 0x11d91,
+	0x11d93, 0x11d98,
+	0x11da0, 0x11da9,
+	0x11ee0, 0x11ef6,
 	0x12000, 0x12399,
 	0x12400, 0x1246e,
 	0x12480, 0x12543,
@@ -17077,13 +17826,18 @@ static const OnigCodePoint CR_XID_Continue[] = {
 	0x16b50, 0x16b59,
 	0x16b63, 0x16b77,
 	0x16b7d, 0x16b8f,
-	0x16f00, 0x16f44,
-	0x16f50, 0x16f7e,
+	0x16e40, 0x16e7f,
+	0x16f00, 0x16f4a,
+	0x16f4f, 0x16f87,
 	0x16f8f, 0x16f9f,
-	0x16fe0, 0x16fe0,
-	0x17000, 0x187ec,
+	0x16fe0, 0x16fe1,
+	0x16fe3, 0x16fe3,
+	0x17000, 0x187f7,
 	0x18800, 0x18af2,
-	0x1b000, 0x1b001,
+	0x1b000, 0x1b11e,
+	0x1b150, 0x1b152,
+	0x1b164, 0x1b167,
+	0x1b170, 0x1b2fb,
 	0x1bc00, 0x1bc6a,
 	0x1bc70, 0x1bc7c,
 	0x1bc80, 0x1bc88,
@@ -17137,9 +17891,14 @@ static const OnigCodePoint CR_XID_Continue[] = {
 	0x1e01b, 0x1e021,
 	0x1e023, 0x1e024,
 	0x1e026, 0x1e02a,
+	0x1e100, 0x1e12c,
+	0x1e130, 0x1e13d,
+	0x1e140, 0x1e149,
+	0x1e14e, 0x1e14e,
+	0x1e2c0, 0x1e2f9,
 	0x1e800, 0x1e8c4,
 	0x1e8d0, 0x1e8d6,
-	0x1e900, 0x1e94a,
+	0x1e900, 0x1e94b,
 	0x1e950, 0x1e959,
 	0x1ee00, 0x1ee03,
 	0x1ee05, 0x1ee1f,
@@ -17178,6 +17937,7 @@ static const OnigCodePoint CR_XID_Continue[] = {
 	0x2a700, 0x2b734,
 	0x2b740, 0x2b81d,
 	0x2b820, 0x2cea1,
+	0x2ceb0, 0x2ebe0,
 	0x2f800, 0x2fa1d,
 	0xe0100, 0xe01ef,
 }; /* CR_XID_Continue */
@@ -17206,7 +17966,7 @@ static const OnigCodePoint CR_Default_Ignorable_Code_Point[] = {
 
 /* 'Grapheme_Extend': Derived Property */
 static const OnigCodePoint CR_Grapheme_Extend[] = {
-	303,
+	335,
 	0x0300, 0x036f,
 	0x0483, 0x0489,
 	0x0591, 0x05bd,
@@ -17225,12 +17985,13 @@ static const OnigCodePoint CR_Grapheme_Extend[] = {
 	0x0730, 0x074a,
 	0x07a6, 0x07b0,
 	0x07eb, 0x07f3,
+	0x07fd, 0x07fd,
 	0x0816, 0x0819,
 	0x081b, 0x0823,
 	0x0825, 0x0827,
 	0x0829, 0x082d,
 	0x0859, 0x085b,
-	0x08d4, 0x08e1,
+	0x08d3, 0x08e1,
 	0x08e3, 0x0902,
 	0x093a, 0x093a,
 	0x093c, 0x093c,
@@ -17245,6 +18006,7 @@ static const OnigCodePoint CR_Grapheme_Extend[] = {
 	0x09cd, 0x09cd,
 	0x09d7, 0x09d7,
 	0x09e2, 0x09e3,
+	0x09fe, 0x09fe,
 	0x0a01, 0x0a02,
 	0x0a3c, 0x0a3c,
 	0x0a41, 0x0a42,
@@ -17259,6 +18021,7 @@ static const OnigCodePoint CR_Grapheme_Extend[] = {
 	0x0ac7, 0x0ac8,
 	0x0acd, 0x0acd,
 	0x0ae2, 0x0ae3,
+	0x0afa, 0x0aff,
 	0x0b01, 0x0b01,
 	0x0b3c, 0x0b3c,
 	0x0b3e, 0x0b3f,
@@ -17272,6 +18035,7 @@ static const OnigCodePoint CR_Grapheme_Extend[] = {
 	0x0bcd, 0x0bcd,
 	0x0bd7, 0x0bd7,
 	0x0c00, 0x0c00,
+	0x0c04, 0x0c04,
 	0x0c3e, 0x0c40,
 	0x0c46, 0x0c48,
 	0x0c4a, 0x0c4d,
@@ -17285,7 +18049,8 @@ static const OnigCodePoint CR_Grapheme_Extend[] = {
 	0x0ccc, 0x0ccd,
 	0x0cd5, 0x0cd6,
 	0x0ce2, 0x0ce3,
-	0x0d01, 0x0d01,
+	0x0d00, 0x0d01,
+	0x0d3b, 0x0d3c,
 	0x0d3e, 0x0d3e,
 	0x0d41, 0x0d44,
 	0x0d4d, 0x0d4d,
@@ -17300,8 +18065,7 @@ static const OnigCodePoint CR_Grapheme_Extend[] = {
 	0x0e34, 0x0e3a,
 	0x0e47, 0x0e4e,
 	0x0eb1, 0x0eb1,
-	0x0eb4, 0x0eb9,
-	0x0ebb, 0x0ebc,
+	0x0eb4, 0x0ebc,
 	0x0ec8, 0x0ecd,
 	0x0f18, 0x0f19,
 	0x0f35, 0x0f35,
@@ -17352,8 +18116,7 @@ static const OnigCodePoint CR_Grapheme_Extend[] = {
 	0x1a7f, 0x1a7f,
 	0x1ab0, 0x1abe,
 	0x1b00, 0x1b03,
-	0x1b34, 0x1b34,
-	0x1b36, 0x1b3a,
+	0x1b34, 0x1b3a,
 	0x1b3c, 0x1b3c,
 	0x1b42, 0x1b42,
 	0x1b6b, 0x1b73,
@@ -17373,7 +18136,7 @@ static const OnigCodePoint CR_Grapheme_Extend[] = {
 	0x1ced, 0x1ced,
 	0x1cf4, 0x1cf4,
 	0x1cf8, 0x1cf9,
-	0x1dc0, 0x1df5,
+	0x1dc0, 0x1df9,
 	0x1dfb, 0x1dff,
 	0x200c, 0x200c,
 	0x20d0, 0x20f0,
@@ -17392,12 +18155,13 @@ static const OnigCodePoint CR_Grapheme_Extend[] = {
 	0xa825, 0xa826,
 	0xa8c4, 0xa8c5,
 	0xa8e0, 0xa8f1,
+	0xa8ff, 0xa8ff,
 	0xa926, 0xa92d,
 	0xa947, 0xa951,
 	0xa980, 0xa982,
 	0xa9b3, 0xa9b3,
 	0xa9b6, 0xa9b9,
-	0xa9bc, 0xa9bc,
+	0xa9bc, 0xa9bd,
 	0xa9e5, 0xa9e5,
 	0xaa29, 0xaa2e,
 	0xaa31, 0xaa32,
@@ -17428,6 +18192,8 @@ static const OnigCodePoint CR_Grapheme_Extend[] = {
 	0x10a38, 0x10a3a,
 	0x10a3f, 0x10a3f,
 	0x10ae5, 0x10ae6,
+	0x10d24, 0x10d27,
+	0x10f46, 0x10f50,
 	0x11001, 0x11001,
 	0x11038, 0x11046,
 	0x1107f, 0x11081,
@@ -17439,7 +18205,7 @@ static const OnigCodePoint CR_Grapheme_Extend[] = {
 	0x11173, 0x11173,
 	0x11180, 0x11181,
 	0x111b6, 0x111be,
-	0x111ca, 0x111cc,
+	0x111c9, 0x111cc,
 	0x1122f, 0x11231,
 	0x11234, 0x11234,
 	0x11236, 0x11237,
@@ -17447,7 +18213,7 @@ static const OnigCodePoint CR_Grapheme_Extend[] = {
 	0x112df, 0x112df,
 	0x112e3, 0x112ea,
 	0x11300, 0x11301,
-	0x1133c, 0x1133c,
+	0x1133b, 0x1133c,
 	0x1133e, 0x1133e,
 	0x11340, 0x11340,
 	0x11357, 0x11357,
@@ -17456,6 +18222,7 @@ static const OnigCodePoint CR_Grapheme_Extend[] = {
 	0x11438, 0x1143f,
 	0x11442, 0x11444,
 	0x11446, 0x11446,
+	0x1145e, 0x1145e,
 	0x114b0, 0x114b0,
 	0x114b3, 0x114b8,
 	0x114ba, 0x114ba,
@@ -17477,6 +18244,19 @@ static const OnigCodePoint CR_Grapheme_Extend[] = {
 	0x1171d, 0x1171f,
 	0x11722, 0x11725,
 	0x11727, 0x1172b,
+	0x1182f, 0x11837,
+	0x11839, 0x1183a,
+	0x119d4, 0x119d7,
+	0x119da, 0x119db,
+	0x119e0, 0x119e0,
+	0x11a01, 0x11a0a,
+	0x11a33, 0x11a38,
+	0x11a3b, 0x11a3e,
+	0x11a47, 0x11a47,
+	0x11a51, 0x11a56,
+	0x11a59, 0x11a5b,
+	0x11a8a, 0x11a96,
+	0x11a98, 0x11a99,
 	0x11c30, 0x11c36,
 	0x11c38, 0x11c3d,
 	0x11c3f, 0x11c3f,
@@ -17484,8 +18264,18 @@ static const OnigCodePoint CR_Grapheme_Extend[] = {
 	0x11caa, 0x11cb0,
 	0x11cb2, 0x11cb3,
 	0x11cb5, 0x11cb6,
+	0x11d31, 0x11d36,
+	0x11d3a, 0x11d3a,
+	0x11d3c, 0x11d3d,
+	0x11d3f, 0x11d45,
+	0x11d47, 0x11d47,
+	0x11d90, 0x11d91,
+	0x11d95, 0x11d95,
+	0x11d97, 0x11d97,
+	0x11ef3, 0x11ef4,
 	0x16af0, 0x16af4,
 	0x16b30, 0x16b36,
+	0x16f4f, 0x16f4f,
 	0x16f8f, 0x16f92,
 	0x1bc9d, 0x1bc9e,
 	0x1d165, 0x1d165,
@@ -17506,6 +18296,8 @@ static const OnigCodePoint CR_Grapheme_Extend[] = {
 	0x1e01b, 0x1e021,
 	0x1e023, 0x1e024,
 	0x1e026, 0x1e02a,
+	0x1e130, 0x1e136,
+	0x1e2ec, 0x1e2ef,
 	0x1e8d0, 0x1e8d6,
 	0x1e944, 0x1e94a,
 	0xe0020, 0xe007f,
@@ -17514,7 +18306,7 @@ static const OnigCodePoint CR_Grapheme_Extend[] = {
 
 /* 'Grapheme_Base': Derived Property */
 static const OnigCodePoint CR_Grapheme_Base[] = {
-	772,
+	819,
 	0x0020, 0x007e,
 	0x00a0, 0x00ac,
 	0x00ae, 0x02ff,
@@ -17526,16 +18318,14 @@ static const OnigCodePoint CR_Grapheme_Base[] = {
 	0x03a3, 0x0482,
 	0x048a, 0x052f,
 	0x0531, 0x0556,
-	0x0559, 0x055f,
-	0x0561, 0x0587,
-	0x0589, 0x058a,
+	0x0559, 0x058a,
 	0x058d, 0x058f,
 	0x05be, 0x05be,
 	0x05c0, 0x05c0,
 	0x05c3, 0x05c3,
 	0x05c6, 0x05c6,
 	0x05d0, 0x05ea,
-	0x05f0, 0x05f4,
+	0x05ef, 0x05f4,
 	0x0606, 0x060f,
 	0x061b, 0x061b,
 	0x061e, 0x064a,
@@ -17551,13 +18341,14 @@ static const OnigCodePoint CR_Grapheme_Base[] = {
 	0x07b1, 0x07b1,
 	0x07c0, 0x07ea,
 	0x07f4, 0x07fa,
-	0x0800, 0x0815,
+	0x07fe, 0x0815,
 	0x081a, 0x081a,
 	0x0824, 0x0824,
 	0x0828, 0x0828,
 	0x0830, 0x083e,
 	0x0840, 0x0858,
 	0x085e, 0x085e,
+	0x0860, 0x086a,
 	0x08a0, 0x08b4,
 	0x08b6, 0x08bd,
 	0x0903, 0x0939,
@@ -17581,7 +18372,7 @@ static const OnigCodePoint CR_Grapheme_Base[] = {
 	0x09ce, 0x09ce,
 	0x09dc, 0x09dd,
 	0x09df, 0x09e1,
-	0x09e6, 0x09fb,
+	0x09e6, 0x09fd,
 	0x0a03, 0x0a03,
 	0x0a05, 0x0a0a,
 	0x0a0f, 0x0a10,
@@ -17595,6 +18386,7 @@ static const OnigCodePoint CR_Grapheme_Base[] = {
 	0x0a5e, 0x0a5e,
 	0x0a66, 0x0a6f,
 	0x0a72, 0x0a74,
+	0x0a76, 0x0a76,
 	0x0a83, 0x0a83,
 	0x0a85, 0x0a8d,
 	0x0a8f, 0x0a91,
@@ -17649,9 +18441,8 @@ static const OnigCodePoint CR_Grapheme_Base[] = {
 	0x0c58, 0x0c5a,
 	0x0c60, 0x0c61,
 	0x0c66, 0x0c6f,
-	0x0c78, 0x0c80,
-	0x0c82, 0x0c83,
-	0x0c85, 0x0c8c,
+	0x0c77, 0x0c80,
+	0x0c82, 0x0c8c,
 	0x0c8e, 0x0c90,
 	0x0c92, 0x0ca8,
 	0x0caa, 0x0cb3,
@@ -17693,16 +18484,10 @@ static const OnigCodePoint CR_Grapheme_Base[] = {
 	0x0e4f, 0x0e5b,
 	0x0e81, 0x0e82,
 	0x0e84, 0x0e84,
-	0x0e87, 0x0e88,
-	0x0e8a, 0x0e8a,
-	0x0e8d, 0x0e8d,
-	0x0e94, 0x0e97,
-	0x0e99, 0x0e9f,
-	0x0ea1, 0x0ea3,
+	0x0e86, 0x0e8a,
+	0x0e8c, 0x0ea3,
 	0x0ea5, 0x0ea5,
-	0x0ea7, 0x0ea7,
-	0x0eaa, 0x0eab,
-	0x0ead, 0x0eb0,
+	0x0ea7, 0x0eb0,
 	0x0eb2, 0x0eb3,
 	0x0ebd, 0x0ebd,
 	0x0ec0, 0x0ec4,
@@ -17773,7 +18558,7 @@ static const OnigCodePoint CR_Grapheme_Base[] = {
 	0x17f0, 0x17f9,
 	0x1800, 0x180a,
 	0x1810, 0x1819,
-	0x1820, 0x1877,
+	0x1820, 0x1878,
 	0x1880, 0x1884,
 	0x1887, 0x18a8,
 	0x18aa, 0x18aa,
@@ -17800,7 +18585,6 @@ static const OnigCodePoint CR_Grapheme_Base[] = {
 	0x1a90, 0x1a99,
 	0x1aa0, 0x1aad,
 	0x1b04, 0x1b33,
-	0x1b35, 0x1b35,
 	0x1b3b, 0x1b3b,
 	0x1b3d, 0x1b41,
 	0x1b43, 0x1b4b,
@@ -17818,12 +18602,14 @@ static const OnigCodePoint CR_Grapheme_Base[] = {
 	0x1c34, 0x1c35,
 	0x1c3b, 0x1c49,
 	0x1c4d, 0x1c88,
-	0x1cc0, 0x1cc7,
+	0x1c90, 0x1cba,
+	0x1cbd, 0x1cc7,
 	0x1cd3, 0x1cd3,
 	0x1ce1, 0x1ce1,
 	0x1ce9, 0x1cec,
 	0x1cee, 0x1cf3,
-	0x1cf5, 0x1cf6,
+	0x1cf5, 0x1cf7,
+	0x1cfa, 0x1cfa,
 	0x1d00, 0x1dbf,
 	0x1e00, 0x1f15,
 	0x1f18, 0x1f1d,
@@ -17847,18 +18633,13 @@ static const OnigCodePoint CR_Grapheme_Base[] = {
 	0x2070, 0x2071,
 	0x2074, 0x208e,
 	0x2090, 0x209c,
-	0x20a0, 0x20be,
+	0x20a0, 0x20bf,
 	0x2100, 0x218b,
-	0x2190, 0x23fe,
-	0x2400, 0x2426,
+	0x2190, 0x2426,
 	0x2440, 0x244a,
 	0x2460, 0x2b73,
 	0x2b76, 0x2b95,
-	0x2b98, 0x2bb9,
-	0x2bbd, 0x2bc8,
-	0x2bca, 0x2bd1,
-	0x2bec, 0x2bef,
-	0x2c00, 0x2c2e,
+	0x2b98, 0x2c2e,
 	0x2c30, 0x2c5e,
 	0x2c60, 0x2cee,
 	0x2cf2, 0x2cf3,
@@ -17876,7 +18657,7 @@ static const OnigCodePoint CR_Grapheme_Base[] = {
 	0x2dc8, 0x2dce,
 	0x2dd0, 0x2dd6,
 	0x2dd8, 0x2dde,
-	0x2e00, 0x2e44,
+	0x2e00, 0x2e4f,
 	0x2e80, 0x2e99,
 	0x2e9b, 0x2ef3,
 	0x2f00, 0x2fd5,
@@ -17885,14 +18666,13 @@ static const OnigCodePoint CR_Grapheme_Base[] = {
 	0x3030, 0x303f,
 	0x3041, 0x3096,
 	0x309b, 0x30ff,
-	0x3105, 0x312d,
+	0x3105, 0x312f,
 	0x3131, 0x318e,
 	0x3190, 0x31ba,
 	0x31c0, 0x31e3,
 	0x31f0, 0x321e,
-	0x3220, 0x32fe,
-	0x3300, 0x4db5,
-	0x4dc0, 0x9fd5,
+	0x3220, 0x4db5,
+	0x4dc0, 0x9fef,
 	0xa000, 0xa48c,
 	0xa490, 0xa4c6,
 	0xa4d0, 0xa62b,
@@ -17901,8 +18681,8 @@ static const OnigCodePoint CR_Grapheme_Base[] = {
 	0xa67e, 0xa69d,
 	0xa6a0, 0xa6ef,
 	0xa6f2, 0xa6f7,
-	0xa700, 0xa7ae,
-	0xa7b0, 0xa7b7,
+	0xa700, 0xa7bf,
+	0xa7c2, 0xa7c6,
 	0xa7f7, 0xa801,
 	0xa803, 0xa805,
 	0xa807, 0xa80a,
@@ -17912,7 +18692,7 @@ static const OnigCodePoint CR_Grapheme_Base[] = {
 	0xa840, 0xa877,
 	0xa880, 0xa8c3,
 	0xa8ce, 0xa8d9,
-	0xa8f2, 0xa8fd,
+	0xa8f2, 0xa8fe,
 	0xa900, 0xa925,
 	0xa92e, 0xa946,
 	0xa952, 0xa953,
@@ -17920,7 +18700,7 @@ static const OnigCodePoint CR_Grapheme_Base[] = {
 	0xa983, 0xa9b2,
 	0xa9b4, 0xa9b5,
 	0xa9ba, 0xa9bb,
-	0xa9bd, 0xa9cd,
+	0xa9be, 0xa9cd,
 	0xa9cf, 0xa9d9,
 	0xa9de, 0xa9e4,
 	0xa9e6, 0xa9fe,
@@ -17945,7 +18725,7 @@ static const OnigCodePoint CR_Grapheme_Base[] = {
 	0xab11, 0xab16,
 	0xab20, 0xab26,
 	0xab28, 0xab2e,
-	0xab30, 0xab65,
+	0xab30, 0xab67,
 	0xab70, 0xabe4,
 	0xabe6, 0xabe7,
 	0xabe9, 0xabec,
@@ -18000,7 +18780,7 @@ static const OnigCodePoint CR_Grapheme_Base[] = {
 	0x102a0, 0x102d0,
 	0x102e1, 0x102fb,
 	0x10300, 0x10323,
-	0x10330, 0x1034a,
+	0x1032d, 0x1034a,
 	0x10350, 0x10375,
 	0x10380, 0x1039d,
 	0x1039f, 0x103c3,
@@ -18033,8 +18813,8 @@ static const OnigCodePoint CR_Grapheme_Base[] = {
 	0x109d2, 0x10a00,
 	0x10a10, 0x10a13,
 	0x10a15, 0x10a17,
-	0x10a19, 0x10a33,
-	0x10a40, 0x10a47,
+	0x10a19, 0x10a35,
+	0x10a40, 0x10a48,
 	0x10a50, 0x10a58,
 	0x10a60, 0x10a9f,
 	0x10ac0, 0x10ae4,
@@ -18048,8 +18828,13 @@ static const OnigCodePoint CR_Grapheme_Base[] = {
 	0x10c00, 0x10c48,
 	0x10c80, 0x10cb2,
 	0x10cc0, 0x10cf2,
-	0x10cfa, 0x10cff,
+	0x10cfa, 0x10d23,
+	0x10d30, 0x10d39,
 	0x10e60, 0x10e7e,
+	0x10f00, 0x10f27,
+	0x10f30, 0x10f45,
+	0x10f51, 0x10f59,
+	0x10fe0, 0x10ff6,
 	0x11000, 0x11000,
 	0x11002, 0x11037,
 	0x11047, 0x1104d,
@@ -18062,11 +18847,11 @@ static const OnigCodePoint CR_Grapheme_Base[] = {
 	0x110f0, 0x110f9,
 	0x11103, 0x11126,
 	0x1112c, 0x1112c,
-	0x11136, 0x11143,
+	0x11136, 0x11146,
 	0x11150, 0x11172,
 	0x11174, 0x11176,
 	0x11182, 0x111b5,
-	0x111bf, 0x111c9,
+	0x111bf, 0x111c8,
 	0x111cd, 0x111cd,
 	0x111d0, 0x111df,
 	0x111e1, 0x111f4,
@@ -18103,6 +18888,7 @@ static const OnigCodePoint CR_Grapheme_Base[] = {
 	0x11447, 0x11459,
 	0x1145b, 0x1145b,
 	0x1145d, 0x1145d,
+	0x1145f, 0x1145f,
 	0x11480, 0x114af,
 	0x114b1, 0x114b2,
 	0x114b9, 0x114b9,
@@ -18126,13 +18912,30 @@ static const OnigCodePoint CR_Grapheme_Base[] = {
 	0x116ac, 0x116ac,
 	0x116ae, 0x116af,
 	0x116b6, 0x116b6,
+	0x116b8, 0x116b8,
 	0x116c0, 0x116c9,
-	0x11700, 0x11719,
+	0x11700, 0x1171a,
 	0x11720, 0x11721,
 	0x11726, 0x11726,
 	0x11730, 0x1173f,
+	0x11800, 0x1182e,
+	0x11838, 0x11838,
+	0x1183b, 0x1183b,
 	0x118a0, 0x118f2,
 	0x118ff, 0x118ff,
+	0x119a0, 0x119a7,
+	0x119aa, 0x119d3,
+	0x119dc, 0x119df,
+	0x119e1, 0x119e4,
+	0x11a00, 0x11a00,
+	0x11a0b, 0x11a32,
+	0x11a39, 0x11a3a,
+	0x11a3f, 0x11a46,
+	0x11a50, 0x11a50,
+	0x11a57, 0x11a58,
+	0x11a5c, 0x11a89,
+	0x11a97, 0x11a97,
+	0x11a9a, 0x11aa2,
 	0x11ac0, 0x11af8,
 	0x11c00, 0x11c08,
 	0x11c0a, 0x11c2f,
@@ -18143,7 +18946,22 @@ static const OnigCodePoint CR_Grapheme_Base[] = {
 	0x11ca9, 0x11ca9,
 	0x11cb1, 0x11cb1,
 	0x11cb4, 0x11cb4,
-	0x12000, 0x12399,
+	0x11d00, 0x11d06,
+	0x11d08, 0x11d09,
+	0x11d0b, 0x11d30,
+	0x11d46, 0x11d46,
+	0x11d50, 0x11d59,
+	0x11d60, 0x11d65,
+	0x11d67, 0x11d68,
+	0x11d6a, 0x11d8e,
+	0x11d93, 0x11d94,
+	0x11d96, 0x11d96,
+	0x11d98, 0x11d98,
+	0x11da0, 0x11da9,
+	0x11ee0, 0x11ef2,
+	0x11ef5, 0x11ef8,
+	0x11fc0, 0x11ff1,
+	0x11fff, 0x12399,
 	0x12400, 0x1246e,
 	0x12470, 0x12474,
 	0x12480, 0x12543,
@@ -18161,13 +18979,17 @@ static const OnigCodePoint CR_Grapheme_Base[] = {
 	0x16b5b, 0x16b61,
 	0x16b63, 0x16b77,
 	0x16b7d, 0x16b8f,
-	0x16f00, 0x16f44,
-	0x16f50, 0x16f7e,
+	0x16e40, 0x16e9a,
+	0x16f00, 0x16f4a,
+	0x16f50, 0x16f87,
 	0x16f93, 0x16f9f,
-	0x16fe0, 0x16fe0,
-	0x17000, 0x187ec,
+	0x16fe0, 0x16fe3,
+	0x17000, 0x187f7,
 	0x18800, 0x18af2,
-	0x1b000, 0x1b001,
+	0x1b000, 0x1b11e,
+	0x1b150, 0x1b152,
+	0x1b164, 0x1b167,
+	0x1b170, 0x1b2fb,
 	0x1bc00, 0x1bc6a,
 	0x1bc70, 0x1bc7c,
 	0x1bc80, 0x1bc88,
@@ -18184,8 +19006,9 @@ static const OnigCodePoint CR_Grapheme_Base[] = {
 	0x1d1ae, 0x1d1e8,
 	0x1d200, 0x1d241,
 	0x1d245, 0x1d245,
+	0x1d2e0, 0x1d2f3,
 	0x1d300, 0x1d356,
-	0x1d360, 0x1d371,
+	0x1d360, 0x1d378,
 	0x1d400, 0x1d454,
 	0x1d456, 0x1d49c,
 	0x1d49e, 0x1d49f,
@@ -18211,11 +19034,21 @@ static const OnigCodePoint CR_Grapheme_Base[] = {
 	0x1da6d, 0x1da74,
 	0x1da76, 0x1da83,
 	0x1da85, 0x1da8b,
+	0x1e100, 0x1e12c,
+	0x1e137, 0x1e13d,
+	0x1e140, 0x1e149,
+	0x1e14e, 0x1e14f,
+	0x1e2c0, 0x1e2eb,
+	0x1e2f0, 0x1e2f9,
+	0x1e2ff, 0x1e2ff,
 	0x1e800, 0x1e8c4,
 	0x1e8c7, 0x1e8cf,
 	0x1e900, 0x1e943,
+	0x1e94b, 0x1e94b,
 	0x1e950, 0x1e959,
 	0x1e95e, 0x1e95f,
+	0x1ec71, 0x1ecb4,
+	0x1ed01, 0x1ed3d,
 	0x1ee00, 0x1ee03,
 	0x1ee05, 0x1ee1f,
 	0x1ee21, 0x1ee22,
@@ -18257,41 +19090,47 @@ static const OnigCodePoint CR_Grapheme_Base[] = {
 	0x1f0c1, 0x1f0cf,
 	0x1f0d1, 0x1f0f5,
 	0x1f100, 0x1f10c,
-	0x1f110, 0x1f12e,
-	0x1f130, 0x1f16b,
+	0x1f110, 0x1f16c,
 	0x1f170, 0x1f1ac,
 	0x1f1e6, 0x1f202,
 	0x1f210, 0x1f23b,
 	0x1f240, 0x1f248,
 	0x1f250, 0x1f251,
-	0x1f300, 0x1f6d2,
+	0x1f260, 0x1f265,
+	0x1f300, 0x1f6d5,
 	0x1f6e0, 0x1f6ec,
-	0x1f6f0, 0x1f6f6,
+	0x1f6f0, 0x1f6fa,
 	0x1f700, 0x1f773,
-	0x1f780, 0x1f7d4,
+	0x1f780, 0x1f7d8,
+	0x1f7e0, 0x1f7eb,
 	0x1f800, 0x1f80b,
 	0x1f810, 0x1f847,
 	0x1f850, 0x1f859,
 	0x1f860, 0x1f887,
 	0x1f890, 0x1f8ad,
-	0x1f910, 0x1f91e,
-	0x1f920, 0x1f927,
-	0x1f930, 0x1f930,
-	0x1f933, 0x1f93e,
-	0x1f940, 0x1f94b,
-	0x1f950, 0x1f95e,
-	0x1f980, 0x1f991,
-	0x1f9c0, 0x1f9c0,
+	0x1f900, 0x1f90b,
+	0x1f90d, 0x1f971,
+	0x1f973, 0x1f976,
+	0x1f97a, 0x1f9a2,
+	0x1f9a5, 0x1f9aa,
+	0x1f9ae, 0x1f9ca,
+	0x1f9cd, 0x1fa53,
+	0x1fa60, 0x1fa6d,
+	0x1fa70, 0x1fa73,
+	0x1fa78, 0x1fa7a,
+	0x1fa80, 0x1fa82,
+	0x1fa90, 0x1fa95,
 	0x20000, 0x2a6d6,
 	0x2a700, 0x2b734,
 	0x2b740, 0x2b81d,
 	0x2b820, 0x2cea1,
+	0x2ceb0, 0x2ebe0,
 	0x2f800, 0x2fa1d,
 }; /* CR_Grapheme_Base */
 
 /* 'Grapheme_Link': Derived Property */
 static const OnigCodePoint CR_Grapheme_Link[] = {
-	43,
+	52,
 	0x094d, 0x094d,
 	0x09cd, 0x09cd,
 	0x0a4d, 0x0a4d,
@@ -18300,9 +19139,11 @@ static const OnigCodePoint CR_Grapheme_Link[] = {
 	0x0bcd, 0x0bcd,
 	0x0c4d, 0x0c4d,
 	0x0ccd, 0x0ccd,
+	0x0d3b, 0x0d3c,
 	0x0d4d, 0x0d4d,
 	0x0dca, 0x0dca,
 	0x0e3a, 0x0e3a,
+	0x0eba, 0x0eba,
 	0x0f84, 0x0f84,
 	0x1039, 0x103a,
 	0x1714, 0x1714,
@@ -18334,12 +19175,19 @@ static const OnigCodePoint CR_Grapheme_Link[] = {
 	0x1163f, 0x1163f,
 	0x116b6, 0x116b6,
 	0x1172b, 0x1172b,
+	0x11839, 0x11839,
+	0x119e0, 0x119e0,
+	0x11a34, 0x11a34,
+	0x11a47, 0x11a47,
+	0x11a99, 0x11a99,
 	0x11c3f, 0x11c3f,
+	0x11d44, 0x11d45,
+	0x11d97, 0x11d97,
 }; /* CR_Grapheme_Link */
 
 /* 'Common': Script */
 static const OnigCodePoint CR_Common[] = {
-	165,
+	172,
 	0x0000, 0x0040,
 	0x005b, 0x0060,
 	0x007b, 0x00a9,
@@ -18357,7 +19205,7 @@ static const OnigCodePoint CR_Common[] = {
 	0x0589, 0x0589,
 	0x0605, 0x0605,
 	0x060c, 0x060c,
-	0x061b, 0x061c,
+	0x061b, 0x061b,
 	0x061f, 0x061f,
 	0x0640, 0x0640,
 	0x06dd, 0x06dd,
@@ -18374,30 +19222,27 @@ static const OnigCodePoint CR_Common[] = {
 	0x1ce1, 0x1ce1,
 	0x1ce9, 0x1cec,
 	0x1cee, 0x1cf3,
-	0x1cf5, 0x1cf6,
+	0x1cf5, 0x1cf7,
+	0x1cfa, 0x1cfa,
 	0x2000, 0x200b,
 	0x200e, 0x2064,
 	0x2066, 0x2070,
 	0x2074, 0x207e,
 	0x2080, 0x208e,
-	0x20a0, 0x20be,
+	0x20a0, 0x20bf,
 	0x2100, 0x2125,
 	0x2127, 0x2129,
 	0x212c, 0x2131,
 	0x2133, 0x214d,
 	0x214f, 0x215f,
 	0x2189, 0x218b,
-	0x2190, 0x23fe,
-	0x2400, 0x2426,
+	0x2190, 0x2426,
 	0x2440, 0x244a,
 	0x2460, 0x27ff,
 	0x2900, 0x2b73,
 	0x2b76, 0x2b95,
-	0x2b98, 0x2bb9,
-	0x2bbd, 0x2bc8,
-	0x2bca, 0x2bd1,
-	0x2bec, 0x2bef,
-	0x2e00, 0x2e44,
+	0x2b98, 0x2bff,
+	0x2e00, 0x2e4f,
 	0x2ff0, 0x2ffb,
 	0x3000, 0x3004,
 	0x3006, 0x3006,
@@ -18411,6 +19256,7 @@ static const OnigCodePoint CR_Common[] = {
 	0x31c0, 0x31e3,
 	0x3220, 0x325f,
 	0x327f, 0x32cf,
+	0x32ff, 0x32ff,
 	0x3358, 0x33ff,
 	0x4dc0, 0x4dff,
 	0xa700, 0xa721,
@@ -18439,6 +19285,7 @@ static const OnigCodePoint CR_Common[] = {
 	0x10190, 0x1019b,
 	0x101d0, 0x101fc,
 	0x102e1, 0x102fb,
+	0x16fe2, 0x16fe3,
 	0x1bca0, 0x1bca3,
 	0x1d000, 0x1d0f5,
 	0x1d100, 0x1d126,
@@ -18447,8 +19294,9 @@ static const OnigCodePoint CR_Common[] = {
 	0x1d183, 0x1d184,
 	0x1d18c, 0x1d1a9,
 	0x1d1ae, 0x1d1e8,
+	0x1d2e0, 0x1d2f3,
 	0x1d300, 0x1d356,
-	0x1d360, 0x1d371,
+	0x1d360, 0x1d378,
 	0x1d400, 0x1d454,
 	0x1d456, 0x1d49c,
 	0x1d49e, 0x1d49f,
@@ -18470,6 +19318,8 @@ static const OnigCodePoint CR_Common[] = {
 	0x1d552, 0x1d6a5,
 	0x1d6a8, 0x1d7cb,
 	0x1d7ce, 0x1d7ff,
+	0x1ec71, 0x1ecb4,
+	0x1ed01, 0x1ed3d,
 	0x1f000, 0x1f02b,
 	0x1f030, 0x1f093,
 	0x1f0a0, 0x1f0ae,
@@ -18477,39 +19327,44 @@ static const OnigCodePoint CR_Common[] = {
 	0x1f0c1, 0x1f0cf,
 	0x1f0d1, 0x1f0f5,
 	0x1f100, 0x1f10c,
-	0x1f110, 0x1f12e,
-	0x1f130, 0x1f16b,
+	0x1f110, 0x1f16c,
 	0x1f170, 0x1f1ac,
 	0x1f1e6, 0x1f1ff,
 	0x1f201, 0x1f202,
 	0x1f210, 0x1f23b,
 	0x1f240, 0x1f248,
 	0x1f250, 0x1f251,
-	0x1f300, 0x1f6d2,
+	0x1f260, 0x1f265,
+	0x1f300, 0x1f6d5,
 	0x1f6e0, 0x1f6ec,
-	0x1f6f0, 0x1f6f6,
+	0x1f6f0, 0x1f6fa,
 	0x1f700, 0x1f773,
-	0x1f780, 0x1f7d4,
+	0x1f780, 0x1f7d8,
+	0x1f7e0, 0x1f7eb,
 	0x1f800, 0x1f80b,
 	0x1f810, 0x1f847,
 	0x1f850, 0x1f859,
 	0x1f860, 0x1f887,
 	0x1f890, 0x1f8ad,
-	0x1f910, 0x1f91e,
-	0x1f920, 0x1f927,
-	0x1f930, 0x1f930,
-	0x1f933, 0x1f93e,
-	0x1f940, 0x1f94b,
-	0x1f950, 0x1f95e,
-	0x1f980, 0x1f991,
-	0x1f9c0, 0x1f9c0,
+	0x1f900, 0x1f90b,
+	0x1f90d, 0x1f971,
+	0x1f973, 0x1f976,
+	0x1f97a, 0x1f9a2,
+	0x1f9a5, 0x1f9aa,
+	0x1f9ae, 0x1f9ca,
+	0x1f9cd, 0x1fa53,
+	0x1fa60, 0x1fa6d,
+	0x1fa70, 0x1fa73,
+	0x1fa78, 0x1fa7a,
+	0x1fa80, 0x1fa82,
+	0x1fa90, 0x1fa95,
 	0xe0001, 0xe0001,
 	0xe0020, 0xe007f,
 }; /* CR_Common */
 
 /* 'Latin': Script */
 static const OnigCodePoint CR_Latin[] = {
-	31,
+	32,
 	0x0041, 0x005a,
 	0x0061, 0x007a,
 	0x00aa, 0x00aa,
@@ -18533,11 +19388,12 @@ static const OnigCodePoint CR_Latin[] = {
 	0x2160, 0x2188,
 	0x2c60, 0x2c7f,
 	0xa722, 0xa787,
-	0xa78b, 0xa7ae,
-	0xa7b0, 0xa7b7,
+	0xa78b, 0xa7bf,
+	0xa7c2, 0xa7c6,
 	0xa7f7, 0xa7ff,
 	0xab30, 0xab5a,
 	0xab5c, 0xab64,
+	0xab66, 0xab67,
 	0xfb00, 0xfb06,
 	0xff21, 0xff3a,
 	0xff41, 0xff5a,
@@ -18599,10 +19455,9 @@ static const OnigCodePoint CR_Cyrillic[] = {
 
 /* 'Armenian': Script */
 static const OnigCodePoint CR_Armenian[] = {
-	6,
+	5,
 	0x0531, 0x0556,
-	0x0559, 0x055f,
-	0x0561, 0x0587,
+	0x0559, 0x0588,
 	0x058a, 0x058a,
 	0x058d, 0x058f,
 	0xfb13, 0xfb17,
@@ -18613,7 +19468,7 @@ static const OnigCodePoint CR_Hebrew[] = {
 	9,
 	0x0591, 0x05c7,
 	0x05d0, 0x05ea,
-	0x05f0, 0x05f4,
+	0x05ef, 0x05f4,
 	0xfb1d, 0xfb36,
 	0xfb38, 0xfb3c,
 	0xfb3e, 0xfb3e,
@@ -18624,10 +19479,11 @@ static const OnigCodePoint CR_Hebrew[] = {
 
 /* 'Arabic': Script */
 static const OnigCodePoint CR_Arabic[] = {
-	56,
+	57,
 	0x0600, 0x0604,
 	0x0606, 0x060b,
 	0x060d, 0x061a,
+	0x061c, 0x061c,
 	0x061e, 0x061e,
 	0x0620, 0x063f,
 	0x0641, 0x064a,
@@ -18637,7 +19493,7 @@ static const OnigCodePoint CR_Arabic[] = {
 	0x0750, 0x077f,
 	0x08a0, 0x08b4,
 	0x08b6, 0x08bd,
-	0x08d4, 0x08e1,
+	0x08d3, 0x08e1,
 	0x08e3, 0x08ff,
 	0xfb50, 0xfbc1,
 	0xfbd3, 0xfd3d,
@@ -18685,10 +19541,11 @@ static const OnigCodePoint CR_Arabic[] = {
 
 /* 'Syriac': Script */
 static const OnigCodePoint CR_Syriac[] = {
-	3,
+	4,
 	0x0700, 0x070d,
 	0x070f, 0x074a,
 	0x074d, 0x074f,
+	0x0860, 0x086a,
 }; /* CR_Syriac */
 
 /* 'Thaana': Script */
@@ -18701,9 +19558,9 @@ static const OnigCodePoint CR_Thaana[] = {
 static const OnigCodePoint CR_Devanagari[] = {
 	4,
 	0x0900, 0x0950,
-	0x0953, 0x0963,
+	0x0955, 0x0963,
 	0x0966, 0x097f,
-	0xa8e0, 0xa8fd,
+	0xa8e0, 0xa8ff,
 }; /* CR_Devanagari */
 
 /* 'Bengali': Script */
@@ -18722,7 +19579,7 @@ static const OnigCodePoint CR_Bengali[] = {
 	0x09d7, 0x09d7,
 	0x09dc, 0x09dd,
 	0x09df, 0x09e3,
-	0x09e6, 0x09fb,
+	0x09e6, 0x09fe,
 }; /* CR_Bengali */
 
 /* 'Gurmukhi': Script */
@@ -18743,7 +19600,7 @@ static const OnigCodePoint CR_Gurmukhi[] = {
 	0x0a51, 0x0a51,
 	0x0a59, 0x0a5c,
 	0x0a5e, 0x0a5e,
-	0x0a66, 0x0a75,
+	0x0a66, 0x0a76,
 }; /* CR_Gurmukhi */
 
 /* 'Gujarati': Script */
@@ -18762,7 +19619,7 @@ static const OnigCodePoint CR_Gujarati[] = {
 	0x0ad0, 0x0ad0,
 	0x0ae0, 0x0ae3,
 	0x0ae6, 0x0af1,
-	0x0af9, 0x0af9,
+	0x0af9, 0x0aff,
 }; /* CR_Gujarati */
 
 /* 'Oriya': Script */
@@ -18786,7 +19643,7 @@ static const OnigCodePoint CR_Oriya[] = {
 
 /* 'Tamil': Script */
 static const OnigCodePoint CR_Tamil[] = {
-	16,
+	18,
 	0x0b82, 0x0b83,
 	0x0b85, 0x0b8a,
 	0x0b8e, 0x0b90,
@@ -18803,13 +19660,14 @@ static const OnigCodePoint CR_Tamil[] = {
 	0x0bd0, 0x0bd0,
 	0x0bd7, 0x0bd7,
 	0x0be6, 0x0bfa,
+	0x11fc0, 0x11ff1,
+	0x11fff, 0x11fff,
 }; /* CR_Tamil */
 
 /* 'Telugu': Script */
 static const OnigCodePoint CR_Telugu[] = {
-	13,
-	0x0c00, 0x0c03,
-	0x0c05, 0x0c0c,
+	12,
+	0x0c00, 0x0c0c,
 	0x0c0e, 0x0c10,
 	0x0c12, 0x0c28,
 	0x0c2a, 0x0c39,
@@ -18820,14 +19678,13 @@ static const OnigCodePoint CR_Telugu[] = {
 	0x0c58, 0x0c5a,
 	0x0c60, 0x0c63,
 	0x0c66, 0x0c6f,
-	0x0c78, 0x0c7f,
+	0x0c77, 0x0c7f,
 }; /* CR_Telugu */
 
 /* 'Kannada': Script */
 static const OnigCodePoint CR_Kannada[] = {
-	14,
-	0x0c80, 0x0c83,
-	0x0c85, 0x0c8c,
+	13,
+	0x0c80, 0x0c8c,
 	0x0c8e, 0x0c90,
 	0x0c92, 0x0ca8,
 	0x0caa, 0x0cb3,
@@ -18844,12 +19701,11 @@ static const OnigCodePoint CR_Kannada[] = {
 
 /* 'Malayalam': Script */
 static const OnigCodePoint CR_Malayalam[] = {
-	9,
-	0x0d01, 0x0d03,
+	8,
+	0x0d00, 0x0d03,
 	0x0d05, 0x0d0c,
 	0x0d0e, 0x0d10,
-	0x0d12, 0x0d3a,
-	0x0d3d, 0x0d44,
+	0x0d12, 0x0d44,
 	0x0d46, 0x0d48,
 	0x0d4a, 0x0d4f,
 	0x0d54, 0x0d63,
@@ -18883,20 +19739,13 @@ static const OnigCodePoint CR_Thai[] = {
 
 /* 'Lao': Script */
 static const OnigCodePoint CR_Lao[] = {
-	18,
+	11,
 	0x0e81, 0x0e82,
 	0x0e84, 0x0e84,
-	0x0e87, 0x0e88,
-	0x0e8a, 0x0e8a,
-	0x0e8d, 0x0e8d,
-	0x0e94, 0x0e97,
-	0x0e99, 0x0e9f,
-	0x0ea1, 0x0ea3,
+	0x0e86, 0x0e8a,
+	0x0e8c, 0x0ea3,
 	0x0ea5, 0x0ea5,
-	0x0ea7, 0x0ea7,
-	0x0eaa, 0x0eab,
-	0x0ead, 0x0eb9,
-	0x0ebb, 0x0ebd,
+	0x0ea7, 0x0ebd,
 	0x0ec0, 0x0ec4,
 	0x0ec6, 0x0ec6,
 	0x0ec8, 0x0ecd,
@@ -18926,12 +19775,14 @@ static const OnigCodePoint CR_Myanmar[] = {
 
 /* 'Georgian': Script */
 static const OnigCodePoint CR_Georgian[] = {
-	8,
+	10,
 	0x10a0, 0x10c5,
 	0x10c7, 0x10c7,
 	0x10cd, 0x10cd,
 	0x10d0, 0x10fa,
 	0x10fc, 0x10ff,
+	0x1c90, 0x1cba,
+	0x1cbd, 0x1cbf,
 	0x2d00, 0x2d25,
 	0x2d27, 0x2d27,
 	0x2d2d, 0x2d2d,
@@ -19037,23 +19888,24 @@ static const OnigCodePoint CR_Mongolian[] = {
 	0x1804, 0x1804,
 	0x1806, 0x180e,
 	0x1810, 0x1819,
-	0x1820, 0x1877,
+	0x1820, 0x1878,
 	0x1880, 0x18aa,
 	0x11660, 0x1166c,
 }; /* CR_Mongolian */
 
 /* 'Hiragana': Script */
 static const OnigCodePoint CR_Hiragana[] = {
-	4,
+	5,
 	0x3041, 0x3096,
 	0x309d, 0x309f,
-	0x1b001, 0x1b001,
+	0x1b001, 0x1b11e,
+	0x1b150, 0x1b152,
 	0x1f200, 0x1f200,
 }; /* CR_Hiragana */
 
 /* 'Katakana': Script */
 static const OnigCodePoint CR_Katakana[] = {
-	8,
+	9,
 	0x30a1, 0x30fa,
 	0x30fd, 0x30ff,
 	0x31f0, 0x31ff,
@@ -19062,19 +19914,20 @@ static const OnigCodePoint CR_Katakana[] = {
 	0xff66, 0xff6f,
 	0xff71, 0xff9d,
 	0x1b000, 0x1b000,
+	0x1b164, 0x1b167,
 }; /* CR_Katakana */
 
 /* 'Bopomofo': Script */
 static const OnigCodePoint CR_Bopomofo[] = {
 	3,
 	0x02ea, 0x02eb,
-	0x3105, 0x312d,
+	0x3105, 0x312f,
 	0x31a0, 0x31ba,
 }; /* CR_Bopomofo */
 
 /* 'Han': Script */
 static const OnigCodePoint CR_Han[] = {
-	16,
+	17,
 	0x2e80, 0x2e99,
 	0x2e9b, 0x2ef3,
 	0x2f00, 0x2fd5,
@@ -19083,13 +19936,14 @@ static const OnigCodePoint CR_Han[] = {
 	0x3021, 0x3029,
 	0x3038, 0x303b,
 	0x3400, 0x4db5,
-	0x4e00, 0x9fd5,
+	0x4e00, 0x9fef,
 	0xf900, 0xfa6d,
 	0xfa70, 0xfad9,
 	0x20000, 0x2a6d6,
 	0x2a700, 0x2b734,
 	0x2b740, 0x2b81d,
 	0x2b820, 0x2cea1,
+	0x2ceb0, 0x2ebe0,
 	0x2f800, 0x2fa1d,
 }; /* CR_Han */
 
@@ -19102,8 +19956,9 @@ static const OnigCodePoint CR_Yi[] = {
 
 /* 'Old_Italic': Script */
 static const OnigCodePoint CR_Old_Italic[] = {
-	1,
+	2,
 	0x10300, 0x10323,
+	0x1032d, 0x1032f,
 }; /* CR_Old_Italic */
 
 /* 'Gothic': Script */
@@ -19120,12 +19975,12 @@ static const OnigCodePoint CR_Deseret[] = {
 
 /* 'Inherited': Script */
 static const OnigCodePoint CR_Inherited[] = {
-	27,
+	28,
 	0x0300, 0x036f,
 	0x0485, 0x0486,
 	0x064b, 0x0655,
 	0x0670, 0x0670,
-	0x0951, 0x0952,
+	0x0951, 0x0954,
 	0x1ab0, 0x1abe,
 	0x1cd0, 0x1cd2,
 	0x1cd4, 0x1ce0,
@@ -19133,7 +19988,7 @@ static const OnigCodePoint CR_Inherited[] = {
 	0x1ced, 0x1ced,
 	0x1cf4, 0x1cf4,
 	0x1cf8, 0x1cf9,
-	0x1dc0, 0x1df5,
+	0x1dc0, 0x1df9,
 	0x1dfb, 0x1dff,
 	0x200c, 0x200d,
 	0x20d0, 0x20f0,
@@ -19143,6 +19998,7 @@ static const OnigCodePoint CR_Inherited[] = {
 	0xfe20, 0xfe2d,
 	0x101fd, 0x101fd,
 	0x102e0, 0x102e0,
+	0x1133b, 0x1133b,
 	0x1d167, 0x1d169,
 	0x1d17b, 0x1d182,
 	0x1d185, 0x1d18b,
@@ -19307,9 +20163,9 @@ static const OnigCodePoint CR_Kharoshthi[] = {
 	0x10a05, 0x10a06,
 	0x10a0c, 0x10a13,
 	0x10a15, 0x10a17,
-	0x10a19, 0x10a33,
+	0x10a19, 0x10a35,
 	0x10a38, 0x10a3a,
-	0x10a3f, 0x10a47,
+	0x10a3f, 0x10a48,
 	0x10a50, 0x10a58,
 }; /* CR_Kharoshthi */
 
@@ -19344,8 +20200,9 @@ static const OnigCodePoint CR_Phags_Pa[] = {
 
 /* 'Nko': Script */
 static const OnigCodePoint CR_Nko[] = {
-	1,
+	2,
 	0x07c0, 0x07fa,
+	0x07fd, 0x07ff,
 }; /* CR_Nko */
 
 /* 'Sundanese': Script */
@@ -19450,8 +20307,9 @@ static const OnigCodePoint CR_Avestan[] = {
 
 /* 'Egyptian_Hieroglyphs': Script */
 static const OnigCodePoint CR_Egyptian_Hieroglyphs[] = {
-	1,
+	2,
 	0x13000, 0x1342e,
+	0x13430, 0x13438,
 }; /* CR_Egyptian_Hieroglyphs */
 
 /* 'Samaritan': Script */
@@ -19525,8 +20383,9 @@ static const OnigCodePoint CR_Old_Turkic[] = {
 
 /* 'Kaithi': Script */
 static const OnigCodePoint CR_Kaithi[] = {
-	1,
+	2,
 	0x11080, 0x110c1,
+	0x110cd, 0x110cd,
 }; /* CR_Kaithi */
 
 /* 'Batak': Script */
@@ -19555,7 +20414,7 @@ static const OnigCodePoint CR_Mandaic[] = {
 static const OnigCodePoint CR_Chakma[] = {
 	2,
 	0x11100, 0x11134,
-	0x11136, 0x11143,
+	0x11136, 0x11146,
 }; /* CR_Chakma */
 
 /* 'Meroitic_Cursive': Script */
@@ -19575,8 +20434,8 @@ static const OnigCodePoint CR_Meroitic_Hieroglyphs[] = {
 /* 'Miao': Script */
 static const OnigCodePoint CR_Miao[] = {
 	3,
-	0x16f00, 0x16f44,
-	0x16f50, 0x16f7e,
+	0x16f00, 0x16f4a,
+	0x16f4f, 0x16f87,
 	0x16f8f, 0x16f9f,
 }; /* CR_Miao */
 
@@ -19597,7 +20456,7 @@ static const OnigCodePoint CR_Sora_Sompeng[] = {
 /* 'Takri': Script */
 static const OnigCodePoint CR_Takri[] = {
 	2,
-	0x11680, 0x116b7,
+	0x11680, 0x116b8,
 	0x116c0, 0x116c9,
 }; /* CR_Takri */
 
@@ -19781,7 +20640,7 @@ static const OnigCodePoint CR_Warang_Citi[] = {
 /* 'Ahom': Script */
 static const OnigCodePoint CR_Ahom[] = {
 	3,
-	0x11700, 0x11719,
+	0x11700, 0x1171a,
 	0x1171d, 0x1172b,
 	0x11730, 0x1173f,
 }; /* CR_Ahom */
@@ -19829,7 +20688,7 @@ static const OnigCodePoint CR_SignWriting[] = {
 /* 'Adlam': Script */
 static const OnigCodePoint CR_Adlam[] = {
 	3,
-	0x1e900, 0x1e94a,
+	0x1e900, 0x1e94b,
 	0x1e950, 0x1e959,
 	0x1e95e, 0x1e95f,
 }; /* CR_Adlam */
@@ -19856,7 +20715,7 @@ static const OnigCodePoint CR_Newa[] = {
 	3,
 	0x11400, 0x11459,
 	0x1145b, 0x1145b,
-	0x1145d, 0x1145d,
+	0x1145d, 0x1145f,
 }; /* CR_Newa */
 
 /* 'Osage': Script */
@@ -19870,10 +20729,119 @@ static const OnigCodePoint CR_Osage[] = {
 static const OnigCodePoint CR_Tangut[] = {
 	3,
 	0x16fe0, 0x16fe0,
-	0x17000, 0x187ec,
+	0x17000, 0x187f7,
 	0x18800, 0x18af2,
 }; /* CR_Tangut */
 
+/* 'Masaram_Gondi': Script */
+static const OnigCodePoint CR_Masaram_Gondi[] = {
+	7,
+	0x11d00, 0x11d06,
+	0x11d08, 0x11d09,
+	0x11d0b, 0x11d36,
+	0x11d3a, 0x11d3a,
+	0x11d3c, 0x11d3d,
+	0x11d3f, 0x11d47,
+	0x11d50, 0x11d59,
+}; /* CR_Masaram_Gondi */
+
+/* 'Nushu': Script */
+static const OnigCodePoint CR_Nushu[] = {
+	2,
+	0x16fe1, 0x16fe1,
+	0x1b170, 0x1b2fb,
+}; /* CR_Nushu */
+
+/* 'Soyombo': Script */
+static const OnigCodePoint CR_Soyombo[] = {
+	1,
+	0x11a50, 0x11aa2,
+}; /* CR_Soyombo */
+
+/* 'Zanabazar_Square': Script */
+static const OnigCodePoint CR_Zanabazar_Square[] = {
+	1,
+	0x11a00, 0x11a47,
+}; /* CR_Zanabazar_Square */
+
+/* 'Dogra': Script */
+static const OnigCodePoint CR_Dogra[] = {
+	1,
+	0x11800, 0x1183b,
+}; /* CR_Dogra */
+
+/* 'Gunjala_Gondi': Script */
+static const OnigCodePoint CR_Gunjala_Gondi[] = {
+	6,
+	0x11d60, 0x11d65,
+	0x11d67, 0x11d68,
+	0x11d6a, 0x11d8e,
+	0x11d90, 0x11d91,
+	0x11d93, 0x11d98,
+	0x11da0, 0x11da9,
+}; /* CR_Gunjala_Gondi */
+
+/* 'Makasar': Script */
+static const OnigCodePoint CR_Makasar[] = {
+	1,
+	0x11ee0, 0x11ef8,
+}; /* CR_Makasar */
+
+/* 'Medefaidrin': Script */
+static const OnigCodePoint CR_Medefaidrin[] = {
+	1,
+	0x16e40, 0x16e9a,
+}; /* CR_Medefaidrin */
+
+/* 'Hanifi_Rohingya': Script */
+static const OnigCodePoint CR_Hanifi_Rohingya[] = {
+	2,
+	0x10d00, 0x10d27,
+	0x10d30, 0x10d39,
+}; /* CR_Hanifi_Rohingya */
+
+/* 'Sogdian': Script */
+static const OnigCodePoint CR_Sogdian[] = {
+	1,
+	0x10f30, 0x10f59,
+}; /* CR_Sogdian */
+
+/* 'Old_Sogdian': Script */
+static const OnigCodePoint CR_Old_Sogdian[] = {
+	1,
+	0x10f00, 0x10f27,
+}; /* CR_Old_Sogdian */
+
+/* 'Elymaic': Script */
+static const OnigCodePoint CR_Elymaic[] = {
+	1,
+	0x10fe0, 0x10ff6,
+}; /* CR_Elymaic */
+
+/* 'Nandinagari': Script */
+static const OnigCodePoint CR_Nandinagari[] = {
+	3,
+	0x119a0, 0x119a7,
+	0x119aa, 0x119d7,
+	0x119da, 0x119e4,
+}; /* CR_Nandinagari */
+
+/* 'Nyiakeng_Puachue_Hmong': Script */
+static const OnigCodePoint CR_Nyiakeng_Puachue_Hmong[] = {
+	4,
+	0x1e100, 0x1e12c,
+	0x1e130, 0x1e13d,
+	0x1e140, 0x1e149,
+	0x1e14e, 0x1e14f,
+}; /* CR_Nyiakeng_Puachue_Hmong */
+
+/* 'Wancho': Script */
+static const OnigCodePoint CR_Wancho[] = {
+	2,
+	0x1e2c0, 0x1e2f9,
+	0x1e2ff, 0x1e2ff,
+}; /* CR_Wancho */
+
 /* 'White_Space': Binary Property */
 #define CR_White_Space CR_Space
 
@@ -19953,7 +20921,7 @@ static const OnigCodePoint CR_Quotation_Mark[] = {
 
 /* 'Terminal_Punctuation': Binary Property */
 static const OnigCodePoint CR_Terminal_Punctuation[] = {
-	94,
+	102,
 	0x0021, 0x0021,
 	0x002c, 0x002c,
 	0x002e, 0x002e,
@@ -19965,7 +20933,7 @@ static const OnigCodePoint CR_Terminal_Punctuation[] = {
 	0x05c3, 0x05c3,
 	0x060c, 0x060c,
 	0x061b, 0x061b,
-	0x061f, 0x061f,
+	0x061e, 0x061f,
 	0x06d4, 0x06d4,
 	0x0700, 0x070a,
 	0x070c, 0x070c,
@@ -19978,7 +20946,7 @@ static const OnigCodePoint CR_Terminal_Punctuation[] = {
 	0x0f0d, 0x0f12,
 	0x104a, 0x104b,
 	0x1361, 0x1368,
-	0x166d, 0x166e,
+	0x166e, 0x166e,
 	0x16eb, 0x16ed,
 	0x1735, 0x1736,
 	0x17d4, 0x17d6,
@@ -19996,6 +20964,8 @@ static const OnigCodePoint CR_Terminal_Punctuation[] = {
 	0x2e2e, 0x2e2e,
 	0x2e3c, 0x2e3c,
 	0x2e41, 0x2e41,
+	0x2e4c, 0x2e4c,
+	0x2e4e, 0x2e4f,
 	0x3001, 0x3002,
 	0xa4fe, 0xa4ff,
 	0xa60d, 0xa60f,
@@ -20025,6 +20995,7 @@ static const OnigCodePoint CR_Terminal_Punctuation[] = {
 	0x10af0, 0x10af5,
 	0x10b3a, 0x10b3f,
 	0x10b99, 0x10b9c,
+	0x10f55, 0x10f59,
 	0x11047, 0x1104d,
 	0x110be, 0x110c1,
 	0x11141, 0x11143,
@@ -20039,13 +21010,18 @@ static const OnigCodePoint CR_Terminal_Punctuation[] = {
 	0x115c9, 0x115d7,
 	0x11641, 0x11642,
 	0x1173c, 0x1173e,
+	0x11a42, 0x11a43,
+	0x11a9b, 0x11a9c,
+	0x11aa1, 0x11aa2,
 	0x11c41, 0x11c43,
 	0x11c71, 0x11c71,
+	0x11ef7, 0x11ef8,
 	0x12470, 0x12474,
 	0x16a6e, 0x16a6f,
 	0x16af5, 0x16af5,
 	0x16b37, 0x16b39,
 	0x16b44, 0x16b44,
+	0x16e97, 0x16e98,
 	0x1bc9f, 0x1bc9f,
 	0x1da87, 0x1da8a,
 }; /* CR_Terminal_Punctuation */
@@ -20205,7 +21181,7 @@ static const OnigCodePoint CR_Hex_Digit[] = {
 
 /* 'Other_Alphabetic': Binary Property */
 static const OnigCodePoint CR_Other_Alphabetic[] = {
-	194,
+	221,
 	0x0345, 0x0345,
 	0x05b0, 0x05bd,
 	0x05bf, 0x05bf,
@@ -20253,6 +21229,7 @@ static const OnigCodePoint CR_Other_Alphabetic[] = {
 	0x0ac7, 0x0ac9,
 	0x0acb, 0x0acc,
 	0x0ae2, 0x0ae3,
+	0x0afa, 0x0afc,
 	0x0b01, 0x0b03,
 	0x0b3e, 0x0b44,
 	0x0b47, 0x0b48,
@@ -20276,7 +21253,7 @@ static const OnigCodePoint CR_Other_Alphabetic[] = {
 	0x0cca, 0x0ccc,
 	0x0cd5, 0x0cd6,
 	0x0ce2, 0x0ce3,
-	0x0d01, 0x0d03,
+	0x0d00, 0x0d03,
 	0x0d3e, 0x0d44,
 	0x0d46, 0x0d48,
 	0x0d4a, 0x0d4c,
@@ -20302,12 +21279,12 @@ static const OnigCodePoint CR_Other_Alphabetic[] = {
 	0x103b, 0x103e,
 	0x1056, 0x1059,
 	0x105e, 0x1060,
-	0x1062, 0x1062,
-	0x1067, 0x1068,
+	0x1062, 0x1064,
+	0x1067, 0x106d,
 	0x1071, 0x1074,
-	0x1082, 0x1086,
-	0x109c, 0x109d,
-	0x135f, 0x135f,
+	0x1082, 0x108d,
+	0x108f, 0x108f,
+	0x109a, 0x109d,
 	0x1712, 0x1713,
 	0x1732, 0x1733,
 	0x1752, 0x1753,
@@ -20326,24 +21303,28 @@ static const OnigCodePoint CR_Other_Alphabetic[] = {
 	0x1ba1, 0x1ba9,
 	0x1bac, 0x1bad,
 	0x1be7, 0x1bf1,
-	0x1c24, 0x1c35,
-	0x1cf2, 0x1cf3,
+	0x1c24, 0x1c36,
 	0x1de7, 0x1df4,
 	0x24b6, 0x24e9,
 	0x2de0, 0x2dff,
 	0xa674, 0xa67b,
 	0xa69e, 0xa69f,
+	0xa802, 0xa802,
+	0xa80b, 0xa80b,
 	0xa823, 0xa827,
 	0xa880, 0xa881,
 	0xa8b4, 0xa8c3,
 	0xa8c5, 0xa8c5,
+	0xa8ff, 0xa8ff,
 	0xa926, 0xa92a,
 	0xa947, 0xa952,
 	0xa980, 0xa983,
 	0xa9b4, 0xa9bf,
+	0xa9e5, 0xa9e5,
 	0xaa29, 0xaa36,
 	0xaa43, 0xaa43,
 	0xaa4c, 0xaa4d,
+	0xaa7b, 0xaa7d,
 	0xaab0, 0xaab0,
 	0xaab2, 0xaab4,
 	0xaab7, 0xaab8,
@@ -20356,12 +21337,14 @@ static const OnigCodePoint CR_Other_Alphabetic[] = {
 	0x10a01, 0x10a03,
 	0x10a05, 0x10a06,
 	0x10a0c, 0x10a0f,
+	0x10d24, 0x10d27,
 	0x11000, 0x11002,
 	0x11038, 0x11045,
 	0x11082, 0x11082,
 	0x110b0, 0x110b8,
 	0x11100, 0x11102,
 	0x11127, 0x11132,
+	0x11145, 0x11146,
 	0x11180, 0x11182,
 	0x111b3, 0x111bf,
 	0x1122c, 0x11234,
@@ -20384,12 +21367,32 @@ static const OnigCodePoint CR_Other_Alphabetic[] = {
 	0x11640, 0x11640,
 	0x116ab, 0x116b5,
 	0x1171d, 0x1172a,
+	0x1182c, 0x11838,
+	0x119d1, 0x119d7,
+	0x119da, 0x119df,
+	0x119e4, 0x119e4,
+	0x11a01, 0x11a0a,
+	0x11a35, 0x11a39,
+	0x11a3b, 0x11a3e,
+	0x11a51, 0x11a5b,
+	0x11a8a, 0x11a97,
 	0x11c2f, 0x11c36,
 	0x11c38, 0x11c3e,
 	0x11c92, 0x11ca7,
 	0x11ca9, 0x11cb6,
-	0x16b30, 0x16b36,
-	0x16f51, 0x16f7e,
+	0x11d31, 0x11d36,
+	0x11d3a, 0x11d3a,
+	0x11d3c, 0x11d3d,
+	0x11d3f, 0x11d41,
+	0x11d43, 0x11d43,
+	0x11d47, 0x11d47,
+	0x11d8a, 0x11d8e,
+	0x11d90, 0x11d91,
+	0x11d93, 0x11d96,
+	0x11ef3, 0x11ef6,
+	0x16f4f, 0x16f4f,
+	0x16f51, 0x16f87,
+	0x16f8f, 0x16f92,
 	0x1bc9e, 0x1bc9e,
 	0x1e000, 0x1e006,
 	0x1e008, 0x1e018,
@@ -20404,26 +21407,28 @@ static const OnigCodePoint CR_Other_Alphabetic[] = {
 
 /* 'Ideographic': Binary Property */
 static const OnigCodePoint CR_Ideographic[] = {
-	14,
+	16,
 	0x3006, 0x3007,
 	0x3021, 0x3029,
 	0x3038, 0x303a,
 	0x3400, 0x4db5,
-	0x4e00, 0x9fd5,
+	0x4e00, 0x9fef,
 	0xf900, 0xfa6d,
 	0xfa70, 0xfad9,
-	0x17000, 0x187ec,
+	0x17000, 0x187f7,
 	0x18800, 0x18af2,
+	0x1b170, 0x1b2fb,
 	0x20000, 0x2a6d6,
 	0x2a700, 0x2b734,
 	0x2b740, 0x2b81d,
 	0x2b820, 0x2cea1,
+	0x2ceb0, 0x2ebe0,
 	0x2f800, 0x2fa1d,
 }; /* CR_Ideographic */
 
 /* 'Diacritic': Binary Property */
 static const OnigCodePoint CR_Diacritic[] = {
-	152,
+	171,
 	0x005e, 0x005e,
 	0x0060, 0x0060,
 	0x00a8, 0x00a8,
@@ -20463,16 +21468,19 @@ static const OnigCodePoint CR_Diacritic[] = {
 	0x0a4d, 0x0a4d,
 	0x0abc, 0x0abc,
 	0x0acd, 0x0acd,
+	0x0afd, 0x0aff,
 	0x0b3c, 0x0b3c,
 	0x0b4d, 0x0b4d,
 	0x0bcd, 0x0bcd,
 	0x0c4d, 0x0c4d,
 	0x0cbc, 0x0cbc,
 	0x0ccd, 0x0ccd,
+	0x0d3b, 0x0d3c,
 	0x0d4d, 0x0d4d,
 	0x0dca, 0x0dca,
 	0x0e47, 0x0e4c,
 	0x0e4e, 0x0e4e,
+	0x0eba, 0x0eba,
 	0x0ec8, 0x0ecc,
 	0x0f18, 0x0f19,
 	0x0f35, 0x0f35,
@@ -20484,9 +21492,12 @@ static const OnigCodePoint CR_Diacritic[] = {
 	0x0fc6, 0x0fc6,
 	0x1037, 0x1037,
 	0x1039, 0x103a,
+	0x1063, 0x1064,
+	0x1069, 0x106d,
 	0x1087, 0x108d,
 	0x108f, 0x108f,
 	0x109a, 0x109b,
+	0x135d, 0x135f,
 	0x17c9, 0x17d3,
 	0x17dd, 0x17dd,
 	0x1939, 0x193b,
@@ -20502,10 +21513,10 @@ static const OnigCodePoint CR_Diacritic[] = {
 	0x1cd0, 0x1ce8,
 	0x1ced, 0x1ced,
 	0x1cf4, 0x1cf4,
-	0x1cf8, 0x1cf9,
+	0x1cf7, 0x1cf9,
 	0x1d2c, 0x1d6a,
 	0x1dc4, 0x1dcf,
-	0x1df5, 0x1df5,
+	0x1df5, 0x1df9,
 	0x1dfd, 0x1dff,
 	0x1fbd, 0x1fbd,
 	0x1fbf, 0x1fc1,
@@ -20523,8 +21534,8 @@ static const OnigCodePoint CR_Diacritic[] = {
 	0xa67f, 0xa67f,
 	0xa69c, 0xa69d,
 	0xa6f0, 0xa6f1,
-	0xa717, 0xa721,
-	0xa788, 0xa788,
+	0xa700, 0xa721,
+	0xa788, 0xa78a,
 	0xa7f8, 0xa7f9,
 	0xa8c4, 0xa8c4,
 	0xa8e0, 0xa8f1,
@@ -20547,6 +21558,8 @@ static const OnigCodePoint CR_Diacritic[] = {
 	0xffe3, 0xffe3,
 	0x102e0, 0x102e0,
 	0x10ae5, 0x10ae6,
+	0x10d22, 0x10d27,
+	0x10f46, 0x10f50,
 	0x110b9, 0x110ba,
 	0x11133, 0x11134,
 	0x11173, 0x11173,
@@ -20565,14 +21578,25 @@ static const OnigCodePoint CR_Diacritic[] = {
 	0x1163f, 0x1163f,
 	0x116b6, 0x116b7,
 	0x1172b, 0x1172b,
+	0x11839, 0x1183a,
+	0x119e0, 0x119e0,
+	0x11a34, 0x11a34,
+	0x11a47, 0x11a47,
+	0x11a99, 0x11a99,
 	0x11c3f, 0x11c3f,
+	0x11d42, 0x11d42,
+	0x11d44, 0x11d45,
+	0x11d97, 0x11d97,
 	0x16af0, 0x16af4,
+	0x16b30, 0x16b36,
 	0x16f8f, 0x16f9f,
 	0x1d167, 0x1d169,
 	0x1d16d, 0x1d172,
 	0x1d17b, 0x1d182,
 	0x1d185, 0x1d18b,
 	0x1d1aa, 0x1d1ad,
+	0x1e130, 0x1e136,
+	0x1e2ec, 0x1e2ef,
 	0x1e8d0, 0x1e8d6,
 	0x1e944, 0x1e946,
 	0x1e948, 0x1e94a,
@@ -20580,7 +21604,7 @@ static const OnigCodePoint CR_Diacritic[] = {
 
 /* 'Extender': Binary Property */
 static const OnigCodePoint CR_Extender[] = {
-	28,
+	31,
 	0x00b7, 0x00b7,
 	0x02d0, 0x02d1,
 	0x0640, 0x0640,
@@ -20606,8 +21630,11 @@ static const OnigCodePoint CR_Extender[] = {
 	0xff70, 0xff70,
 	0x1135d, 0x1135d,
 	0x115c6, 0x115c8,
+	0x11a98, 0x11a98,
 	0x16b42, 0x16b43,
-	0x16fe0, 0x16fe0,
+	0x16fe0, 0x16fe1,
+	0x16fe3, 0x16fe3,
+	0x1e13c, 0x1e13d,
 	0x1e944, 0x1e946,
 }; /* CR_Extender */
 
@@ -20671,7 +21698,7 @@ static const OnigCodePoint CR_Noncharacter_Code_Point[] = {
 
 /* 'Other_Grapheme_Extend': Binary Property */
 static const OnigCodePoint CR_Other_Grapheme_Extend[] = {
-	23,
+	24,
 	0x09be, 0x09be,
 	0x09d7, 0x09d7,
 	0x0b3e, 0x0b3e,
@@ -20684,6 +21711,7 @@ static const OnigCodePoint CR_Other_Grapheme_Extend[] = {
 	0x0d57, 0x0d57,
 	0x0dcf, 0x0dcf,
 	0x0ddf, 0x0ddf,
+	0x1b35, 0x1b35,
 	0x200c, 0x200c,
 	0x302e, 0x302f,
 	0xff9e, 0xff9f,
@@ -20720,9 +21748,9 @@ static const OnigCodePoint CR_Radical[] = {
 
 /* 'Unified_Ideograph': Binary Property */
 static const OnigCodePoint CR_Unified_Ideograph[] = {
-	13,
+	14,
 	0x3400, 0x4db5,
-	0x4e00, 0x9fd5,
+	0x4e00, 0x9fef,
 	0xfa0e, 0xfa0f,
 	0xfa11, 0xfa11,
 	0xfa13, 0xfa14,
@@ -20734,6 +21762,7 @@ static const OnigCodePoint CR_Unified_Ideograph[] = {
 	0x2a700, 0x2b734,
 	0x2b740, 0x2b81d,
 	0x2b820, 0x2cea1,
+	0x2ceb0, 0x2ebe0,
 }; /* CR_Unified_Ideograph */
 
 /* 'Other_Default_Ignorable_Code_Point': Binary Property */
@@ -20833,15 +21862,18 @@ static const OnigCodePoint CR_Other_ID_Continue[] = {
 
 /* 'Sentence_Terminal': Binary Property */
 static const OnigCodePoint CR_Sentence_Terminal[] = {
-	66,
+	74,
 	0x0021, 0x0021,
 	0x002e, 0x002e,
 	0x003f, 0x003f,
 	0x0589, 0x0589,
-	0x061f, 0x061f,
+	0x061e, 0x061f,
 	0x06d4, 0x06d4,
 	0x0700, 0x0702,
 	0x07f9, 0x07f9,
+	0x0837, 0x0837,
+	0x0839, 0x0839,
+	0x083d, 0x083e,
 	0x0964, 0x0965,
 	0x104a, 0x104b,
 	0x1362, 0x1362,
@@ -20879,6 +21911,7 @@ static const OnigCodePoint CR_Sentence_Terminal[] = {
 	0xff1f, 0xff1f,
 	0xff61, 0xff61,
 	0x10a56, 0x10a57,
+	0x10f55, 0x10f59,
 	0x11047, 0x11048,
 	0x110be, 0x110c1,
 	0x11141, 0x11143,
@@ -20893,11 +21926,15 @@ static const OnigCodePoint CR_Sentence_Terminal[] = {
 	0x115c9, 0x115d7,
 	0x11641, 0x11642,
 	0x1173c, 0x1173e,
+	0x11a42, 0x11a43,
+	0x11a9b, 0x11a9c,
 	0x11c41, 0x11c42,
+	0x11ef7, 0x11ef8,
 	0x16a6e, 0x16a6f,
 	0x16af5, 0x16af5,
 	0x16b37, 0x16b38,
 	0x16b44, 0x16b44,
+	0x16e98, 0x16e98,
 	0x1bc9f, 0x1bc9f,
 	0x1da88, 0x1da88,
 }; /* CR_Sentence_Terminal */
@@ -20955,17 +21992,410 @@ static const OnigCodePoint CR_Pattern_Syntax[] = {
 
 /* 'Prepended_Concatenation_Mark': Binary Property */
 static const OnigCodePoint CR_Prepended_Concatenation_Mark[] = {
-	5,
+	6,
 	0x0600, 0x0605,
 	0x06dd, 0x06dd,
 	0x070f, 0x070f,
 	0x08e2, 0x08e2,
 	0x110bd, 0x110bd,
+	0x110cd, 0x110cd,
 }; /* CR_Prepended_Concatenation_Mark */
 
+/* 'Regional_Indicator': Binary Property */
+static const OnigCodePoint CR_Regional_Indicator[] = {
+	1,
+	0x1f1e6, 0x1f1ff,
+}; /* CR_Regional_Indicator */
+
+/* 'Emoji': Emoji */
+static const OnigCodePoint CR_Emoji[] = {
+	151,
+	0x0023, 0x0023,
+	0x002a, 0x002a,
+	0x0030, 0x0039,
+	0x00a9, 0x00a9,
+	0x00ae, 0x00ae,
+	0x203c, 0x203c,
+	0x2049, 0x2049,
+	0x2122, 0x2122,
+	0x2139, 0x2139,
+	0x2194, 0x2199,
+	0x21a9, 0x21aa,
+	0x231a, 0x231b,
+	0x2328, 0x2328,
+	0x23cf, 0x23cf,
+	0x23e9, 0x23f3,
+	0x23f8, 0x23fa,
+	0x24c2, 0x24c2,
+	0x25aa, 0x25ab,
+	0x25b6, 0x25b6,
+	0x25c0, 0x25c0,
+	0x25fb, 0x25fe,
+	0x2600, 0x2604,
+	0x260e, 0x260e,
+	0x2611, 0x2611,
+	0x2614, 0x2615,
+	0x2618, 0x2618,
+	0x261d, 0x261d,
+	0x2620, 0x2620,
+	0x2622, 0x2623,
+	0x2626, 0x2626,
+	0x262a, 0x262a,
+	0x262e, 0x262f,
+	0x2638, 0x263a,
+	0x2640, 0x2640,
+	0x2642, 0x2642,
+	0x2648, 0x2653,
+	0x265f, 0x2660,
+	0x2663, 0x2663,
+	0x2665, 0x2666,
+	0x2668, 0x2668,
+	0x267b, 0x267b,
+	0x267e, 0x267f,
+	0x2692, 0x2697,
+	0x2699, 0x2699,
+	0x269b, 0x269c,
+	0x26a0, 0x26a1,
+	0x26aa, 0x26ab,
+	0x26b0, 0x26b1,
+	0x26bd, 0x26be,
+	0x26c4, 0x26c5,
+	0x26c8, 0x26c8,
+	0x26ce, 0x26cf,
+	0x26d1, 0x26d1,
+	0x26d3, 0x26d4,
+	0x26e9, 0x26ea,
+	0x26f0, 0x26f5,
+	0x26f7, 0x26fa,
+	0x26fd, 0x26fd,
+	0x2702, 0x2702,
+	0x2705, 0x2705,
+	0x2708, 0x270d,
+	0x270f, 0x270f,
+	0x2712, 0x2712,
+	0x2714, 0x2714,
+	0x2716, 0x2716,
+	0x271d, 0x271d,
+	0x2721, 0x2721,
+	0x2728, 0x2728,
+	0x2733, 0x2734,
+	0x2744, 0x2744,
+	0x2747, 0x2747,
+	0x274c, 0x274c,
+	0x274e, 0x274e,
+	0x2753, 0x2755,
+	0x2757, 0x2757,
+	0x2763, 0x2764,
+	0x2795, 0x2797,
+	0x27a1, 0x27a1,
+	0x27b0, 0x27b0,
+	0x27bf, 0x27bf,
+	0x2934, 0x2935,
+	0x2b05, 0x2b07,
+	0x2b1b, 0x2b1c,
+	0x2b50, 0x2b50,
+	0x2b55, 0x2b55,
+	0x3030, 0x3030,
+	0x303d, 0x303d,
+	0x3297, 0x3297,
+	0x3299, 0x3299,
+	0x1f004, 0x1f004,
+	0x1f0cf, 0x1f0cf,
+	0x1f170, 0x1f171,
+	0x1f17e, 0x1f17f,
+	0x1f18e, 0x1f18e,
+	0x1f191, 0x1f19a,
+	0x1f1e6, 0x1f1ff,
+	0x1f201, 0x1f202,
+	0x1f21a, 0x1f21a,
+	0x1f22f, 0x1f22f,
+	0x1f232, 0x1f23a,
+	0x1f250, 0x1f251,
+	0x1f300, 0x1f321,
+	0x1f324, 0x1f393,
+	0x1f396, 0x1f397,
+	0x1f399, 0x1f39b,
+	0x1f39e, 0x1f3f0,
+	0x1f3f3, 0x1f3f5,
+	0x1f3f7, 0x1f4fd,
+	0x1f4ff, 0x1f53d,
+	0x1f549, 0x1f54e,
+	0x1f550, 0x1f567,
+	0x1f56f, 0x1f570,
+	0x1f573, 0x1f57a,
+	0x1f587, 0x1f587,
+	0x1f58a, 0x1f58d,
+	0x1f590, 0x1f590,
+	0x1f595, 0x1f596,
+	0x1f5a4, 0x1f5a5,
+	0x1f5a8, 0x1f5a8,
+	0x1f5b1, 0x1f5b2,
+	0x1f5bc, 0x1f5bc,
+	0x1f5c2, 0x1f5c4,
+	0x1f5d1, 0x1f5d3,
+	0x1f5dc, 0x1f5de,
+	0x1f5e1, 0x1f5e1,
+	0x1f5e3, 0x1f5e3,
+	0x1f5e8, 0x1f5e8,
+	0x1f5ef, 0x1f5ef,
+	0x1f5f3, 0x1f5f3,
+	0x1f5fa, 0x1f64f,
+	0x1f680, 0x1f6c5,
+	0x1f6cb, 0x1f6d2,
+	0x1f6d5, 0x1f6d5,
+	0x1f6e0, 0x1f6e5,
+	0x1f6e9, 0x1f6e9,
+	0x1f6eb, 0x1f6ec,
+	0x1f6f0, 0x1f6f0,
+	0x1f6f3, 0x1f6fa,
+	0x1f7e0, 0x1f7eb,
+	0x1f90d, 0x1f93a,
+	0x1f93c, 0x1f945,
+	0x1f947, 0x1f971,
+	0x1f973, 0x1f976,
+	0x1f97a, 0x1f9a2,
+	0x1f9a5, 0x1f9aa,
+	0x1f9ae, 0x1f9ca,
+	0x1f9cd, 0x1f9ff,
+	0x1fa70, 0x1fa73,
+	0x1fa78, 0x1fa7a,
+	0x1fa80, 0x1fa82,
+	0x1fa90, 0x1fa95,
+}; /* CR_Emoji */
+
+/* 'Emoji_Presentation': Emoji */
+static const OnigCodePoint CR_Emoji_Presentation[] = {
+	81,
+	0x231a, 0x231b,
+	0x23e9, 0x23ec,
+	0x23f0, 0x23f0,
+	0x23f3, 0x23f3,
+	0x25fd, 0x25fe,
+	0x2614, 0x2615,
+	0x2648, 0x2653,
+	0x267f, 0x267f,
+	0x2693, 0x2693,
+	0x26a1, 0x26a1,
+	0x26aa, 0x26ab,
+	0x26bd, 0x26be,
+	0x26c4, 0x26c5,
+	0x26ce, 0x26ce,
+	0x26d4, 0x26d4,
+	0x26ea, 0x26ea,
+	0x26f2, 0x26f3,
+	0x26f5, 0x26f5,
+	0x26fa, 0x26fa,
+	0x26fd, 0x26fd,
+	0x2705, 0x2705,
+	0x270a, 0x270b,
+	0x2728, 0x2728,
+	0x274c, 0x274c,
+	0x274e, 0x274e,
+	0x2753, 0x2755,
+	0x2757, 0x2757,
+	0x2795, 0x2797,
+	0x27b0, 0x27b0,
+	0x27bf, 0x27bf,
+	0x2b1b, 0x2b1c,
+	0x2b50, 0x2b50,
+	0x2b55, 0x2b55,
+	0x1f004, 0x1f004,
+	0x1f0cf, 0x1f0cf,
+	0x1f18e, 0x1f18e,
+	0x1f191, 0x1f19a,
+	0x1f1e6, 0x1f1ff,
+	0x1f201, 0x1f201,
+	0x1f21a, 0x1f21a,
+	0x1f22f, 0x1f22f,
+	0x1f232, 0x1f236,
+	0x1f238, 0x1f23a,
+	0x1f250, 0x1f251,
+	0x1f300, 0x1f320,
+	0x1f32d, 0x1f335,
+	0x1f337, 0x1f37c,
+	0x1f37e, 0x1f393,
+	0x1f3a0, 0x1f3ca,
+	0x1f3cf, 0x1f3d3,
+	0x1f3e0, 0x1f3f0,
+	0x1f3f4, 0x1f3f4,
+	0x1f3f8, 0x1f43e,
+	0x1f440, 0x1f440,
+	0x1f442, 0x1f4fc,
+	0x1f4ff, 0x1f53d,
+	0x1f54b, 0x1f54e,
+	0x1f550, 0x1f567,
+	0x1f57a, 0x1f57a,
+	0x1f595, 0x1f596,
+	0x1f5a4, 0x1f5a4,
+	0x1f5fb, 0x1f64f,
+	0x1f680, 0x1f6c5,
+	0x1f6cc, 0x1f6cc,
+	0x1f6d0, 0x1f6d2,
+	0x1f6d5, 0x1f6d5,
+	0x1f6eb, 0x1f6ec,
+	0x1f6f4, 0x1f6fa,
+	0x1f7e0, 0x1f7eb,
+	0x1f90d, 0x1f93a,
+	0x1f93c, 0x1f945,
+	0x1f947, 0x1f971,
+	0x1f973, 0x1f976,
+	0x1f97a, 0x1f9a2,
+	0x1f9a5, 0x1f9aa,
+	0x1f9ae, 0x1f9ca,
+	0x1f9cd, 0x1f9ff,
+	0x1fa70, 0x1fa73,
+	0x1fa78, 0x1fa7a,
+	0x1fa80, 0x1fa82,
+	0x1fa90, 0x1fa95,
+}; /* CR_Emoji_Presentation */
+
+/* 'Emoji_Modifier': Emoji */
+static const OnigCodePoint CR_Emoji_Modifier[] = {
+	1,
+	0x1f3fb, 0x1f3ff,
+}; /* CR_Emoji_Modifier */
+
+/* 'Emoji_Modifier_Base': Emoji */
+static const OnigCodePoint CR_Emoji_Modifier_Base[] = {
+	36,
+	0x261d, 0x261d,
+	0x26f9, 0x26f9,
+	0x270a, 0x270d,
+	0x1f385, 0x1f385,
+	0x1f3c2, 0x1f3c4,
+	0x1f3c7, 0x1f3c7,
+	0x1f3ca, 0x1f3cc,
+	0x1f442, 0x1f443,
+	0x1f446, 0x1f450,
+	0x1f466, 0x1f478,
+	0x1f47c, 0x1f47c,
+	0x1f481, 0x1f483,
+	0x1f485, 0x1f487,
+	0x1f48f, 0x1f48f,
+	0x1f491, 0x1f491,
+	0x1f4aa, 0x1f4aa,
+	0x1f574, 0x1f575,
+	0x1f57a, 0x1f57a,
+	0x1f590, 0x1f590,
+	0x1f595, 0x1f596,
+	0x1f645, 0x1f647,
+	0x1f64b, 0x1f64f,
+	0x1f6a3, 0x1f6a3,
+	0x1f6b4, 0x1f6b6,
+	0x1f6c0, 0x1f6c0,
+	0x1f6cc, 0x1f6cc,
+	0x1f90f, 0x1f90f,
+	0x1f918, 0x1f91f,
+	0x1f926, 0x1f926,
+	0x1f930, 0x1f939,
+	0x1f93c, 0x1f93e,
+	0x1f9b5, 0x1f9b6,
+	0x1f9b8, 0x1f9b9,
+	0x1f9bb, 0x1f9bb,
+	0x1f9cd, 0x1f9cf,
+	0x1f9d1, 0x1f9dd,
+}; /* CR_Emoji_Modifier_Base */
+
+/* 'Emoji_Component': Emoji */
+static const OnigCodePoint CR_Emoji_Component[] = {
+	10,
+	0x0023, 0x0023,
+	0x002a, 0x002a,
+	0x0030, 0x0039,
+	0x200d, 0x200d,
+	0x20e3, 0x20e3,
+	0xfe0f, 0xfe0f,
+	0x1f1e6, 0x1f1ff,
+	0x1f3fb, 0x1f3ff,
+	0x1f9b0, 0x1f9b3,
+	0xe0020, 0xe007f,
+}; /* CR_Emoji_Component */
+
+/* 'Extended_Pictographic': Emoji */
+static const OnigCodePoint CR_Extended_Pictographic[] = {
+	77,
+	0x00a9, 0x00a9,
+	0x00ae, 0x00ae,
+	0x203c, 0x203c,
+	0x2049, 0x2049,
+	0x2122, 0x2122,
+	0x2139, 0x2139,
+	0x2194, 0x2199,
+	0x21a9, 0x21aa,
+	0x231a, 0x231b,
+	0x2328, 0x2328,
+	0x2388, 0x2388,
+	0x23cf, 0x23cf,
+	0x23e9, 0x23f3,
+	0x23f8, 0x23fa,
+	0x24c2, 0x24c2,
+	0x25aa, 0x25ab,
+	0x25b6, 0x25b6,
+	0x25c0, 0x25c0,
+	0x25fb, 0x25fe,
+	0x2600, 0x2605,
+	0x2607, 0x2612,
+	0x2614, 0x2685,
+	0x2690, 0x2705,
+	0x2708, 0x2712,
+	0x2714, 0x2714,
+	0x2716, 0x2716,
+	0x271d, 0x271d,
+	0x2721, 0x2721,
+	0x2728, 0x2728,
+	0x2733, 0x2734,
+	0x2744, 0x2744,
+	0x2747, 0x2747,
+	0x274c, 0x274c,
+	0x274e, 0x274e,
+	0x2753, 0x2755,
+	0x2757, 0x2757,
+	0x2763, 0x2767,
+	0x2795, 0x2797,
+	0x27a1, 0x27a1,
+	0x27b0, 0x27b0,
+	0x27bf, 0x27bf,
+	0x2934, 0x2935,
+	0x2b05, 0x2b07,
+	0x2b1b, 0x2b1c,
+	0x2b50, 0x2b50,
+	0x2b55, 0x2b55,
+	0x3030, 0x3030,
+	0x303d, 0x303d,
+	0x3297, 0x3297,
+	0x3299, 0x3299,
+	0x1f000, 0x1f0ff,
+	0x1f10d, 0x1f10f,
+	0x1f12f, 0x1f12f,
+	0x1f16c, 0x1f171,
+	0x1f17e, 0x1f17f,
+	0x1f18e, 0x1f18e,
+	0x1f191, 0x1f19a,
+	0x1f1ad, 0x1f1e5,
+	0x1f201, 0x1f20f,
+	0x1f21a, 0x1f21a,
+	0x1f22f, 0x1f22f,
+	0x1f232, 0x1f23a,
+	0x1f23c, 0x1f23f,
+	0x1f249, 0x1f3fa,
+	0x1f400, 0x1f53d,
+	0x1f546, 0x1f64f,
+	0x1f680, 0x1f6ff,
+	0x1f774, 0x1f77f,
+	0x1f7d5, 0x1f7ff,
+	0x1f80c, 0x1f80f,
+	0x1f848, 0x1f84f,
+	0x1f85a, 0x1f85f,
+	0x1f888, 0x1f88f,
+	0x1f8ae, 0x1f8ff,
+	0x1f90c, 0x1f93a,
+	0x1f93c, 0x1f945,
+	0x1f947, 0x1fffd,
+}; /* CR_Extended_Pictographic */
+
 /* 'Unknown': Script */
 static const OnigCodePoint CR_Unknown[] = {
-	636,
+	664,
 	0x0378, 0x0379,
 	0x0380, 0x0383,
 	0x038b, 0x038b,
@@ -20973,24 +22403,23 @@ static const OnigCodePoint CR_Unknown[] = {
 	0x03a2, 0x03a2,
 	0x0530, 0x0530,
 	0x0557, 0x0558,
-	0x0560, 0x0560,
-	0x0588, 0x0588,
 	0x058b, 0x058c,
 	0x0590, 0x0590,
 	0x05c8, 0x05cf,
-	0x05eb, 0x05ef,
+	0x05eb, 0x05ee,
 	0x05f5, 0x05ff,
 	0x061d, 0x061d,
 	0x070e, 0x070e,
 	0x074b, 0x074c,
 	0x07b2, 0x07bf,
-	0x07fb, 0x07ff,
+	0x07fb, 0x07fc,
 	0x082e, 0x082f,
 	0x083f, 0x083f,
 	0x085c, 0x085d,
-	0x085f, 0x089f,
+	0x085f, 0x085f,
+	0x086b, 0x089f,
 	0x08b5, 0x08b5,
-	0x08be, 0x08d3,
+	0x08be, 0x08d2,
 	0x0984, 0x0984,
 	0x098d, 0x098e,
 	0x0991, 0x0992,
@@ -21004,7 +22433,7 @@ static const OnigCodePoint CR_Unknown[] = {
 	0x09d8, 0x09db,
 	0x09de, 0x09de,
 	0x09e4, 0x09e5,
-	0x09fc, 0x0a00,
+	0x09ff, 0x0a00,
 	0x0a04, 0x0a04,
 	0x0a0b, 0x0a0e,
 	0x0a11, 0x0a12,
@@ -21020,7 +22449,7 @@ static const OnigCodePoint CR_Unknown[] = {
 	0x0a52, 0x0a58,
 	0x0a5d, 0x0a5d,
 	0x0a5f, 0x0a65,
-	0x0a76, 0x0a80,
+	0x0a77, 0x0a80,
 	0x0a84, 0x0a84,
 	0x0a8e, 0x0a8e,
 	0x0a92, 0x0a92,
@@ -21034,7 +22463,7 @@ static const OnigCodePoint CR_Unknown[] = {
 	0x0ad1, 0x0adf,
 	0x0ae4, 0x0ae5,
 	0x0af2, 0x0af8,
-	0x0afa, 0x0b00,
+	0x0b00, 0x0b00,
 	0x0b04, 0x0b04,
 	0x0b0d, 0x0b0e,
 	0x0b11, 0x0b12,
@@ -21065,7 +22494,6 @@ static const OnigCodePoint CR_Unknown[] = {
 	0x0bd1, 0x0bd6,
 	0x0bd8, 0x0be5,
 	0x0bfb, 0x0bff,
-	0x0c04, 0x0c04,
 	0x0c0d, 0x0c0d,
 	0x0c11, 0x0c11,
 	0x0c29, 0x0c29,
@@ -21076,8 +22504,7 @@ static const OnigCodePoint CR_Unknown[] = {
 	0x0c57, 0x0c57,
 	0x0c5b, 0x0c5f,
 	0x0c64, 0x0c65,
-	0x0c70, 0x0c77,
-	0x0c84, 0x0c84,
+	0x0c70, 0x0c76,
 	0x0c8d, 0x0c8d,
 	0x0c91, 0x0c91,
 	0x0ca9, 0x0ca9,
@@ -21090,11 +22517,10 @@ static const OnigCodePoint CR_Unknown[] = {
 	0x0cdf, 0x0cdf,
 	0x0ce4, 0x0ce5,
 	0x0cf0, 0x0cf0,
-	0x0cf3, 0x0d00,
+	0x0cf3, 0x0cff,
 	0x0d04, 0x0d04,
 	0x0d0d, 0x0d0d,
 	0x0d11, 0x0d11,
-	0x0d3b, 0x0d3c,
 	0x0d45, 0x0d45,
 	0x0d49, 0x0d49,
 	0x0d50, 0x0d53,
@@ -21115,17 +22541,10 @@ static const OnigCodePoint CR_Unknown[] = {
 	0x0e3b, 0x0e3e,
 	0x0e5c, 0x0e80,
 	0x0e83, 0x0e83,
-	0x0e85, 0x0e86,
-	0x0e89, 0x0e89,
-	0x0e8b, 0x0e8c,
-	0x0e8e, 0x0e93,
-	0x0e98, 0x0e98,
-	0x0ea0, 0x0ea0,
+	0x0e85, 0x0e85,
+	0x0e8b, 0x0e8b,
 	0x0ea4, 0x0ea4,
 	0x0ea6, 0x0ea6,
-	0x0ea8, 0x0ea9,
-	0x0eac, 0x0eac,
-	0x0eba, 0x0eba,
 	0x0ebe, 0x0ebf,
 	0x0ec5, 0x0ec5,
 	0x0ec7, 0x0ec7,
@@ -21175,7 +22594,7 @@ static const OnigCodePoint CR_Unknown[] = {
 	0x17fa, 0x17ff,
 	0x180f, 0x180f,
 	0x181a, 0x181f,
-	0x1878, 0x187f,
+	0x1879, 0x187f,
 	0x18ab, 0x18af,
 	0x18f6, 0x18ff,
 	0x191f, 0x191f,
@@ -21199,11 +22618,11 @@ static const OnigCodePoint CR_Unknown[] = {
 	0x1bf4, 0x1bfb,
 	0x1c38, 0x1c3a,
 	0x1c4a, 0x1c4c,
-	0x1c89, 0x1cbf,
+	0x1c89, 0x1c8f,
+	0x1cbb, 0x1cbc,
 	0x1cc8, 0x1ccf,
-	0x1cf7, 0x1cf7,
-	0x1cfa, 0x1cff,
-	0x1df6, 0x1dfa,
+	0x1cfb, 0x1cff,
+	0x1dfa, 0x1dfa,
 	0x1f16, 0x1f17,
 	0x1f1e, 0x1f1f,
 	0x1f46, 0x1f47,
@@ -21224,18 +22643,13 @@ static const OnigCodePoint CR_Unknown[] = {
 	0x2072, 0x2073,
 	0x208f, 0x208f,
 	0x209d, 0x209f,
-	0x20bf, 0x20cf,
+	0x20c0, 0x20cf,
 	0x20f1, 0x20ff,
 	0x218c, 0x218f,
-	0x23ff, 0x23ff,
 	0x2427, 0x243f,
 	0x244b, 0x245f,
 	0x2b74, 0x2b75,
 	0x2b96, 0x2b97,
-	0x2bba, 0x2bbc,
-	0x2bc9, 0x2bc9,
-	0x2bd2, 0x2beb,
-	0x2bf0, 0x2bff,
 	0x2c2f, 0x2c2f,
 	0x2c5f, 0x2c5f,
 	0x2cf4, 0x2cf8,
@@ -21253,7 +22667,7 @@ static const OnigCodePoint CR_Unknown[] = {
 	0x2dcf, 0x2dcf,
 	0x2dd7, 0x2dd7,
 	0x2ddf, 0x2ddf,
-	0x2e45, 0x2e7f,
+	0x2e50, 0x2e7f,
 	0x2e9a, 0x2e9a,
 	0x2ef4, 0x2eff,
 	0x2fd6, 0x2fef,
@@ -21261,26 +22675,24 @@ static const OnigCodePoint CR_Unknown[] = {
 	0x3040, 0x3040,
 	0x3097, 0x3098,
 	0x3100, 0x3104,
-	0x312e, 0x3130,
+	0x3130, 0x3130,
 	0x318f, 0x318f,
 	0x31bb, 0x31bf,
 	0x31e4, 0x31ef,
 	0x321f, 0x321f,
-	0x32ff, 0x32ff,
 	0x4db6, 0x4dbf,
-	0x9fd6, 0x9fff,
+	0x9ff0, 0x9fff,
 	0xa48d, 0xa48f,
 	0xa4c7, 0xa4cf,
 	0xa62c, 0xa63f,
 	0xa6f8, 0xa6ff,
-	0xa7af, 0xa7af,
-	0xa7b8, 0xa7f6,
+	0xa7c0, 0xa7c1,
+	0xa7c7, 0xa7f6,
 	0xa82c, 0xa82f,
 	0xa83a, 0xa83f,
 	0xa878, 0xa87f,
 	0xa8c6, 0xa8cd,
 	0xa8da, 0xa8df,
-	0xa8fe, 0xa8ff,
 	0xa954, 0xa95e,
 	0xa97d, 0xa97f,
 	0xa9ce, 0xa9ce,
@@ -21296,7 +22708,7 @@ static const OnigCodePoint CR_Unknown[] = {
 	0xab17, 0xab1f,
 	0xab27, 0xab27,
 	0xab2f, 0xab2f,
-	0xab66, 0xab6f,
+	0xab68, 0xab6f,
 	0xabee, 0xabef,
 	0xabfa, 0xabff,
 	0xd7a4, 0xd7af,
@@ -21347,7 +22759,7 @@ static const OnigCodePoint CR_Unknown[] = {
 	0x1029d, 0x1029f,
 	0x102d1, 0x102df,
 	0x102fc, 0x102ff,
-	0x10324, 0x1032f,
+	0x10324, 0x1032c,
 	0x1034b, 0x1034f,
 	0x1037b, 0x1037f,
 	0x1039e, 0x1039e,
@@ -21382,9 +22794,9 @@ static const OnigCodePoint CR_Unknown[] = {
 	0x10a07, 0x10a0b,
 	0x10a14, 0x10a14,
 	0x10a18, 0x10a18,
-	0x10a34, 0x10a37,
+	0x10a36, 0x10a37,
 	0x10a3b, 0x10a3e,
-	0x10a48, 0x10a4f,
+	0x10a49, 0x10a4f,
 	0x10a59, 0x10a5f,
 	0x10aa0, 0x10abf,
 	0x10ae7, 0x10aea,
@@ -21398,15 +22810,20 @@ static const OnigCodePoint CR_Unknown[] = {
 	0x10c49, 0x10c7f,
 	0x10cb3, 0x10cbf,
 	0x10cf3, 0x10cf9,
-	0x10d00, 0x10e5f,
-	0x10e7f, 0x10fff,
+	0x10d28, 0x10d2f,
+	0x10d3a, 0x10e5f,
+	0x10e7f, 0x10eff,
+	0x10f28, 0x10f2f,
+	0x10f5a, 0x10fdf,
+	0x10ff7, 0x10fff,
 	0x1104e, 0x11051,
 	0x11070, 0x1107e,
-	0x110c2, 0x110cf,
+	0x110c2, 0x110cc,
+	0x110ce, 0x110cf,
 	0x110e9, 0x110ef,
 	0x110fa, 0x110ff,
 	0x11135, 0x11135,
-	0x11144, 0x1114f,
+	0x11147, 0x1114f,
 	0x11177, 0x1117f,
 	0x111ce, 0x111cf,
 	0x111e0, 0x111e0,
@@ -21426,7 +22843,7 @@ static const OnigCodePoint CR_Unknown[] = {
 	0x11329, 0x11329,
 	0x11331, 0x11331,
 	0x11334, 0x11334,
-	0x1133a, 0x1133b,
+	0x1133a, 0x1133a,
 	0x11345, 0x11346,
 	0x11349, 0x1134a,
 	0x1134e, 0x1134f,
@@ -21437,7 +22854,7 @@ static const OnigCodePoint CR_Unknown[] = {
 	0x11375, 0x113ff,
 	0x1145a, 0x1145a,
 	0x1145c, 0x1145c,
-	0x1145e, 0x1147f,
+	0x11460, 0x1147f,
 	0x114c8, 0x114cf,
 	0x114da, 0x1157f,
 	0x115b6, 0x115b7,
@@ -21445,13 +22862,19 @@ static const OnigCodePoint CR_Unknown[] = {
 	0x11645, 0x1164f,
 	0x1165a, 0x1165f,
 	0x1166d, 0x1167f,
-	0x116b8, 0x116bf,
+	0x116b9, 0x116bf,
 	0x116ca, 0x116ff,
-	0x1171a, 0x1171c,
+	0x1171b, 0x1171c,
 	0x1172c, 0x1172f,
-	0x11740, 0x1189f,
+	0x11740, 0x117ff,
+	0x1183c, 0x1189f,
 	0x118f3, 0x118fe,
-	0x11900, 0x11abf,
+	0x11900, 0x1199f,
+	0x119a8, 0x119a9,
+	0x119d8, 0x119d9,
+	0x119e5, 0x119ff,
+	0x11a48, 0x11a4f,
+	0x11aa3, 0x11abf,
 	0x11af9, 0x11bff,
 	0x11c09, 0x11c09,
 	0x11c37, 0x11c37,
@@ -21459,12 +22882,28 @@ static const OnigCodePoint CR_Unknown[] = {
 	0x11c6d, 0x11c6f,
 	0x11c90, 0x11c91,
 	0x11ca8, 0x11ca8,
-	0x11cb7, 0x11fff,
+	0x11cb7, 0x11cff,
+	0x11d07, 0x11d07,
+	0x11d0a, 0x11d0a,
+	0x11d37, 0x11d39,
+	0x11d3b, 0x11d3b,
+	0x11d3e, 0x11d3e,
+	0x11d48, 0x11d4f,
+	0x11d5a, 0x11d5f,
+	0x11d66, 0x11d66,
+	0x11d69, 0x11d69,
+	0x11d8f, 0x11d8f,
+	0x11d92, 0x11d92,
+	0x11d99, 0x11d9f,
+	0x11daa, 0x11edf,
+	0x11ef9, 0x11fbf,
+	0x11ff2, 0x11ffe,
 	0x1239a, 0x123ff,
 	0x1246f, 0x1246f,
 	0x12475, 0x1247f,
 	0x12544, 0x12fff,
-	0x1342f, 0x143ff,
+	0x1342f, 0x1342f,
+	0x13439, 0x143ff,
 	0x14647, 0x167ff,
 	0x16a39, 0x16a3f,
 	0x16a5f, 0x16a5f,
@@ -21476,14 +22915,18 @@ static const OnigCodePoint CR_Unknown[] = {
 	0x16b5a, 0x16b5a,
 	0x16b62, 0x16b62,
 	0x16b78, 0x16b7c,
-	0x16b90, 0x16eff,
-	0x16f45, 0x16f4f,
-	0x16f7f, 0x16f8e,
+	0x16b90, 0x16e3f,
+	0x16e9b, 0x16eff,
+	0x16f4b, 0x16f4e,
+	0x16f88, 0x16f8e,
 	0x16fa0, 0x16fdf,
-	0x16fe1, 0x16fff,
-	0x187ed, 0x187ff,
+	0x16fe4, 0x16fff,
+	0x187f8, 0x187ff,
 	0x18af3, 0x1afff,
-	0x1b002, 0x1bbff,
+	0x1b11f, 0x1b14f,
+	0x1b153, 0x1b163,
+	0x1b168, 0x1b16f,
+	0x1b2fc, 0x1bbff,
 	0x1bc6b, 0x1bc6f,
 	0x1bc7d, 0x1bc7f,
 	0x1bc89, 0x1bc8f,
@@ -21492,9 +22935,10 @@ static const OnigCodePoint CR_Unknown[] = {
 	0x1d0f6, 0x1d0ff,
 	0x1d127, 0x1d128,
 	0x1d1e9, 0x1d1ff,
-	0x1d246, 0x1d2ff,
+	0x1d246, 0x1d2df,
+	0x1d2f4, 0x1d2ff,
 	0x1d357, 0x1d35f,
-	0x1d372, 0x1d3ff,
+	0x1d379, 0x1d3ff,
 	0x1d455, 0x1d455,
 	0x1d49d, 0x1d49d,
 	0x1d4a0, 0x1d4a1,
@@ -21522,12 +22966,20 @@ static const OnigCodePoint CR_Unknown[] = {
 	0x1e019, 0x1e01a,
 	0x1e022, 0x1e022,
 	0x1e025, 0x1e025,
-	0x1e02b, 0x1e7ff,
+	0x1e02b, 0x1e0ff,
+	0x1e12d, 0x1e12f,
+	0x1e13e, 0x1e13f,
+	0x1e14a, 0x1e14d,
+	0x1e150, 0x1e2bf,
+	0x1e2fa, 0x1e2fe,
+	0x1e300, 0x1e7ff,
 	0x1e8c5, 0x1e8c6,
 	0x1e8d7, 0x1e8ff,
-	0x1e94b, 0x1e94f,
+	0x1e94c, 0x1e94f,
 	0x1e95a, 0x1e95d,
-	0x1e960, 0x1edff,
+	0x1e960, 0x1ec70,
+	0x1ecb5, 0x1ed00,
+	0x1ed3e, 0x1edff,
 	0x1ee04, 0x1ee04,
 	0x1ee20, 0x1ee20,
 	0x1ee23, 0x1ee23,
@@ -21569,35 +23021,41 @@ static const OnigCodePoint CR_Unknown[] = {
 	0x1f0d0, 0x1f0d0,
 	0x1f0f6, 0x1f0ff,
 	0x1f10d, 0x1f10f,
-	0x1f12f, 0x1f12f,
-	0x1f16c, 0x1f16f,
+	0x1f16d, 0x1f16f,
 	0x1f1ad, 0x1f1e5,
 	0x1f203, 0x1f20f,
 	0x1f23c, 0x1f23f,
 	0x1f249, 0x1f24f,
-	0x1f252, 0x1f2ff,
-	0x1f6d3, 0x1f6df,
+	0x1f252, 0x1f25f,
+	0x1f266, 0x1f2ff,
+	0x1f6d6, 0x1f6df,
 	0x1f6ed, 0x1f6ef,
-	0x1f6f7, 0x1f6ff,
+	0x1f6fb, 0x1f6ff,
 	0x1f774, 0x1f77f,
-	0x1f7d5, 0x1f7ff,
+	0x1f7d9, 0x1f7df,
+	0x1f7ec, 0x1f7ff,
 	0x1f80c, 0x1f80f,
 	0x1f848, 0x1f84f,
 	0x1f85a, 0x1f85f,
 	0x1f888, 0x1f88f,
-	0x1f8ae, 0x1f90f,
-	0x1f91f, 0x1f91f,
-	0x1f928, 0x1f92f,
-	0x1f931, 0x1f932,
-	0x1f93f, 0x1f93f,
-	0x1f94c, 0x1f94f,
-	0x1f95f, 0x1f97f,
-	0x1f992, 0x1f9bf,
-	0x1f9c1, 0x1ffff,
+	0x1f8ae, 0x1f8ff,
+	0x1f90c, 0x1f90c,
+	0x1f972, 0x1f972,
+	0x1f977, 0x1f979,
+	0x1f9a3, 0x1f9a4,
+	0x1f9ab, 0x1f9ad,
+	0x1f9cb, 0x1f9cc,
+	0x1fa54, 0x1fa5f,
+	0x1fa6e, 0x1fa6f,
+	0x1fa74, 0x1fa77,
+	0x1fa7b, 0x1fa7f,
+	0x1fa83, 0x1fa8f,
+	0x1fa96, 0x1ffff,
 	0x2a6d7, 0x2a6ff,
 	0x2b735, 0x2b73f,
 	0x2b81e, 0x2b81f,
-	0x2cea2, 0x2f7ff,
+	0x2cea2, 0x2ceaf,
+	0x2ebe1, 0x2f7ff,
 	0x2fa1e, 0xe0000,
 	0xe0002, 0xe001f,
 	0xe0080, 0xe00ff,
@@ -30046,236 +31504,3287 @@ static const OnigCodePoint CR_Age_9_0[] = {
 	0xefffe, 0x10ffff,
 }; /* CR_Age_9_0 */
 
-#endif /* USE_UNICODE_AGE_PROPERTIES */
-/* 'Grapheme_Cluster_Break_Prepend': Grapheme_Cluster_Break=Prepend */
-static const OnigCodePoint CR_Grapheme_Cluster_Break_Prepend[] = {
-	7,
-	0x0600, 0x0605,
-	0x06dd, 0x06dd,
-	0x070f, 0x070f,
-	0x08e2, 0x08e2,
-	0x0d4e, 0x0d4e,
-	0x110bd, 0x110bd,
-	0x111c2, 0x111c3,
-}; /* CR_Grapheme_Cluster_Break_Prepend */
-
-/* 'Grapheme_Cluster_Break_CR': Grapheme_Cluster_Break=CR */
-static const OnigCodePoint CR_Grapheme_Cluster_Break_CR[] = {
-	1,
-	0x000d, 0x000d,
-}; /* CR_Grapheme_Cluster_Break_CR */
-
-/* 'Grapheme_Cluster_Break_LF': Grapheme_Cluster_Break=LF */
-#define CR_Grapheme_Cluster_Break_LF CR_NEWLINE
-
-/* 'Grapheme_Cluster_Break_Control': Grapheme_Cluster_Break=Control */
-static const OnigCodePoint CR_Grapheme_Cluster_Break_Control[] = {
-	19,
-	0x0000, 0x0009,
-	0x000b, 0x000c,
-	0x000e, 0x001f,
-	0x007f, 0x009f,
-	0x00ad, 0x00ad,
-	0x061c, 0x061c,
-	0x180e, 0x180e,
-	0x200b, 0x200b,
-	0x200e, 0x200f,
-	0x2028, 0x202e,
-	0x2060, 0x206f,
-	0xd800, 0xdfff,
-	0xfeff, 0xfeff,
-	0xfff0, 0xfffb,
-	0x1bca0, 0x1bca3,
-	0x1d173, 0x1d17a,
-	0xe0000, 0xe001f,
-	0xe0080, 0xe00ff,
-	0xe01f0, 0xe0fff,
-}; /* CR_Grapheme_Cluster_Break_Control */
-
-/* 'Grapheme_Cluster_Break_Extend': Grapheme_Cluster_Break=Extend */
-#define CR_Grapheme_Cluster_Break_Extend CR_Grapheme_Extend
-
-/* 'Grapheme_Cluster_Break_Regional_Indicator': Grapheme_Cluster_Break=Regional_Indicator */
-static const OnigCodePoint CR_Grapheme_Cluster_Break_Regional_Indicator[] = {
-	1,
-	0x1f1e6, 0x1f1ff,
-}; /* CR_Grapheme_Cluster_Break_Regional_Indicator */
-
-/* 'Grapheme_Cluster_Break_SpacingMark': Grapheme_Cluster_Break=SpacingMark */
-static const OnigCodePoint CR_Grapheme_Cluster_Break_SpacingMark[] = {
-	140,
-	0x0903, 0x0903,
-	0x093b, 0x093b,
-	0x093e, 0x0940,
-	0x0949, 0x094c,
-	0x094e, 0x094f,
-	0x0982, 0x0983,
-	0x09bf, 0x09c0,
+/* 'Age_10_0': Derived Age 10.0 */
+static const OnigCodePoint CR_Age_10_0[] = {
+	659,
+	0x0000, 0x0377,
+	0x037a, 0x037f,
+	0x0384, 0x038a,
+	0x038c, 0x038c,
+	0x038e, 0x03a1,
+	0x03a3, 0x052f,
+	0x0531, 0x0556,
+	0x0559, 0x055f,
+	0x0561, 0x0587,
+	0x0589, 0x058a,
+	0x058d, 0x058f,
+	0x0591, 0x05c7,
+	0x05d0, 0x05ea,
+	0x05f0, 0x05f4,
+	0x0600, 0x061c,
+	0x061e, 0x070d,
+	0x070f, 0x074a,
+	0x074d, 0x07b1,
+	0x07c0, 0x07fa,
+	0x0800, 0x082d,
+	0x0830, 0x083e,
+	0x0840, 0x085b,
+	0x085e, 0x085e,
+	0x0860, 0x086a,
+	0x08a0, 0x08b4,
+	0x08b6, 0x08bd,
+	0x08d4, 0x0983,
+	0x0985, 0x098c,
+	0x098f, 0x0990,
+	0x0993, 0x09a8,
+	0x09aa, 0x09b0,
+	0x09b2, 0x09b2,
+	0x09b6, 0x09b9,
+	0x09bc, 0x09c4,
 	0x09c7, 0x09c8,
-	0x09cb, 0x09cc,
-	0x0a03, 0x0a03,
-	0x0a3e, 0x0a40,
-	0x0a83, 0x0a83,
-	0x0abe, 0x0ac0,
-	0x0ac9, 0x0ac9,
-	0x0acb, 0x0acc,
-	0x0b02, 0x0b03,
-	0x0b40, 0x0b40,
+	0x09cb, 0x09ce,
+	0x09d7, 0x09d7,
+	0x09dc, 0x09dd,
+	0x09df, 0x09e3,
+	0x09e6, 0x09fd,
+	0x0a01, 0x0a03,
+	0x0a05, 0x0a0a,
+	0x0a0f, 0x0a10,
+	0x0a13, 0x0a28,
+	0x0a2a, 0x0a30,
+	0x0a32, 0x0a33,
+	0x0a35, 0x0a36,
+	0x0a38, 0x0a39,
+	0x0a3c, 0x0a3c,
+	0x0a3e, 0x0a42,
+	0x0a47, 0x0a48,
+	0x0a4b, 0x0a4d,
+	0x0a51, 0x0a51,
+	0x0a59, 0x0a5c,
+	0x0a5e, 0x0a5e,
+	0x0a66, 0x0a75,
+	0x0a81, 0x0a83,
+	0x0a85, 0x0a8d,
+	0x0a8f, 0x0a91,
+	0x0a93, 0x0aa8,
+	0x0aaa, 0x0ab0,
+	0x0ab2, 0x0ab3,
+	0x0ab5, 0x0ab9,
+	0x0abc, 0x0ac5,
+	0x0ac7, 0x0ac9,
+	0x0acb, 0x0acd,
+	0x0ad0, 0x0ad0,
+	0x0ae0, 0x0ae3,
+	0x0ae6, 0x0af1,
+	0x0af9, 0x0aff,
+	0x0b01, 0x0b03,
+	0x0b05, 0x0b0c,
+	0x0b0f, 0x0b10,
+	0x0b13, 0x0b28,
+	0x0b2a, 0x0b30,
+	0x0b32, 0x0b33,
+	0x0b35, 0x0b39,
+	0x0b3c, 0x0b44,
 	0x0b47, 0x0b48,
-	0x0b4b, 0x0b4c,
-	0x0bbf, 0x0bbf,
-	0x0bc1, 0x0bc2,
+	0x0b4b, 0x0b4d,
+	0x0b56, 0x0b57,
+	0x0b5c, 0x0b5d,
+	0x0b5f, 0x0b63,
+	0x0b66, 0x0b77,
+	0x0b82, 0x0b83,
+	0x0b85, 0x0b8a,
+	0x0b8e, 0x0b90,
+	0x0b92, 0x0b95,
+	0x0b99, 0x0b9a,
+	0x0b9c, 0x0b9c,
+	0x0b9e, 0x0b9f,
+	0x0ba3, 0x0ba4,
+	0x0ba8, 0x0baa,
+	0x0bae, 0x0bb9,
+	0x0bbe, 0x0bc2,
 	0x0bc6, 0x0bc8,
-	0x0bca, 0x0bcc,
-	0x0c01, 0x0c03,
-	0x0c41, 0x0c44,
-	0x0c82, 0x0c83,
-	0x0cbe, 0x0cbe,
-	0x0cc0, 0x0cc1,
-	0x0cc3, 0x0cc4,
-	0x0cc7, 0x0cc8,
-	0x0cca, 0x0ccb,
-	0x0d02, 0x0d03,
-	0x0d3f, 0x0d40,
+	0x0bca, 0x0bcd,
+	0x0bd0, 0x0bd0,
+	0x0bd7, 0x0bd7,
+	0x0be6, 0x0bfa,
+	0x0c00, 0x0c03,
+	0x0c05, 0x0c0c,
+	0x0c0e, 0x0c10,
+	0x0c12, 0x0c28,
+	0x0c2a, 0x0c39,
+	0x0c3d, 0x0c44,
+	0x0c46, 0x0c48,
+	0x0c4a, 0x0c4d,
+	0x0c55, 0x0c56,
+	0x0c58, 0x0c5a,
+	0x0c60, 0x0c63,
+	0x0c66, 0x0c6f,
+	0x0c78, 0x0c83,
+	0x0c85, 0x0c8c,
+	0x0c8e, 0x0c90,
+	0x0c92, 0x0ca8,
+	0x0caa, 0x0cb3,
+	0x0cb5, 0x0cb9,
+	0x0cbc, 0x0cc4,
+	0x0cc6, 0x0cc8,
+	0x0cca, 0x0ccd,
+	0x0cd5, 0x0cd6,
+	0x0cde, 0x0cde,
+	0x0ce0, 0x0ce3,
+	0x0ce6, 0x0cef,
+	0x0cf1, 0x0cf2,
+	0x0d00, 0x0d03,
+	0x0d05, 0x0d0c,
+	0x0d0e, 0x0d10,
+	0x0d12, 0x0d44,
 	0x0d46, 0x0d48,
-	0x0d4a, 0x0d4c,
+	0x0d4a, 0x0d4f,
+	0x0d54, 0x0d63,
+	0x0d66, 0x0d7f,
 	0x0d82, 0x0d83,
-	0x0dd0, 0x0dd1,
-	0x0dd8, 0x0dde,
-	0x0df2, 0x0df3,
-	0x0e33, 0x0e33,
-	0x0eb3, 0x0eb3,
-	0x0f3e, 0x0f3f,
-	0x0f7f, 0x0f7f,
-	0x1031, 0x1031,
-	0x103b, 0x103c,
-	0x1056, 0x1057,
-	0x1084, 0x1084,
-	0x17b6, 0x17b6,
-	0x17be, 0x17c5,
-	0x17c7, 0x17c8,
-	0x1923, 0x1926,
-	0x1929, 0x192b,
-	0x1930, 0x1931,
-	0x1933, 0x1938,
-	0x1a19, 0x1a1a,
-	0x1a55, 0x1a55,
-	0x1a57, 0x1a57,
-	0x1a6d, 0x1a72,
-	0x1b04, 0x1b04,
-	0x1b35, 0x1b35,
-	0x1b3b, 0x1b3b,
-	0x1b3d, 0x1b41,
-	0x1b43, 0x1b44,
-	0x1b82, 0x1b82,
-	0x1ba1, 0x1ba1,
-	0x1ba6, 0x1ba7,
-	0x1baa, 0x1baa,
-	0x1be7, 0x1be7,
-	0x1bea, 0x1bec,
-	0x1bee, 0x1bee,
-	0x1bf2, 0x1bf3,
-	0x1c24, 0x1c2b,
-	0x1c34, 0x1c35,
-	0x1ce1, 0x1ce1,
-	0x1cf2, 0x1cf3,
-	0xa823, 0xa824,
-	0xa827, 0xa827,
-	0xa880, 0xa881,
-	0xa8b4, 0xa8c3,
-	0xa952, 0xa953,
-	0xa983, 0xa983,
-	0xa9b4, 0xa9b5,
-	0xa9ba, 0xa9bb,
-	0xa9bd, 0xa9c0,
-	0xaa2f, 0xaa30,
-	0xaa33, 0xaa34,
-	0xaa4d, 0xaa4d,
-	0xaaeb, 0xaaeb,
-	0xaaee, 0xaaef,
-	0xaaf5, 0xaaf5,
-	0xabe3, 0xabe4,
-	0xabe6, 0xabe7,
-	0xabe9, 0xabea,
-	0xabec, 0xabec,
-	0x11000, 0x11000,
-	0x11002, 0x11002,
-	0x11082, 0x11082,
-	0x110b0, 0x110b2,
-	0x110b7, 0x110b8,
-	0x1112c, 0x1112c,
-	0x11182, 0x11182,
-	0x111b3, 0x111b5,
-	0x111bf, 0x111c0,
-	0x1122c, 0x1122e,
-	0x11232, 0x11233,
-	0x11235, 0x11235,
-	0x112e0, 0x112e2,
-	0x11302, 0x11303,
-	0x1133f, 0x1133f,
-	0x11341, 0x11344,
-	0x11347, 0x11348,
-	0x1134b, 0x1134d,
-	0x11362, 0x11363,
-	0x11435, 0x11437,
-	0x11440, 0x11441,
-	0x11445, 0x11445,
-	0x114b1, 0x114b2,
-	0x114b9, 0x114b9,
-	0x114bb, 0x114bc,
-	0x114be, 0x114be,
-	0x114c1, 0x114c1,
-	0x115b0, 0x115b1,
-	0x115b8, 0x115bb,
-	0x115be, 0x115be,
-	0x11630, 0x11632,
-	0x1163b, 0x1163c,
-	0x1163e, 0x1163e,
-	0x116ac, 0x116ac,
-	0x116ae, 0x116af,
-	0x116b6, 0x116b6,
-	0x11720, 0x11721,
-	0x11726, 0x11726,
-	0x11c2f, 0x11c2f,
-	0x11c3e, 0x11c3e,
-	0x11ca9, 0x11ca9,
-	0x11cb1, 0x11cb1,
-	0x11cb4, 0x11cb4,
-	0x16f51, 0x16f7e,
-	0x1d166, 0x1d166,
-	0x1d16d, 0x1d16d,
-}; /* CR_Grapheme_Cluster_Break_SpacingMark */
-
-/* 'Grapheme_Cluster_Break_L': Grapheme_Cluster_Break=L */
-static const OnigCodePoint CR_Grapheme_Cluster_Break_L[] = {
-	2,
-	0x1100, 0x115f,
-	0xa960, 0xa97c,
-}; /* CR_Grapheme_Cluster_Break_L */
-
-/* 'Grapheme_Cluster_Break_V': Grapheme_Cluster_Break=V */
-static const OnigCodePoint CR_Grapheme_Cluster_Break_V[] = {
-	2,
-	0x1160, 0x11a7,
-	0xd7b0, 0xd7c6,
-}; /* CR_Grapheme_Cluster_Break_V */
-
-/* 'Grapheme_Cluster_Break_T': Grapheme_Cluster_Break=T */
-static const OnigCodePoint CR_Grapheme_Cluster_Break_T[] = {
-	2,
-	0x11a8, 0x11ff,
-	0xd7cb, 0xd7fb,
-}; /* CR_Grapheme_Cluster_Break_T */
-
-/* 'Grapheme_Cluster_Break_LV': Grapheme_Cluster_Break=LV */
-static const OnigCodePoint CR_Grapheme_Cluster_Break_LV[] = {
-	399,
-	0xac00, 0xac00,
-	0xac1c, 0xac1c,
-	0xac38, 0xac38,
-	0xac54, 0xac54,
-	0xac70, 0xac70,
-	0xac8c, 0xac8c,
+	0x0d85, 0x0d96,
+	0x0d9a, 0x0db1,
+	0x0db3, 0x0dbb,
+	0x0dbd, 0x0dbd,
+	0x0dc0, 0x0dc6,
+	0x0dca, 0x0dca,
+	0x0dcf, 0x0dd4,
+	0x0dd6, 0x0dd6,
+	0x0dd8, 0x0ddf,
+	0x0de6, 0x0def,
+	0x0df2, 0x0df4,
+	0x0e01, 0x0e3a,
+	0x0e3f, 0x0e5b,
+	0x0e81, 0x0e82,
+	0x0e84, 0x0e84,
+	0x0e87, 0x0e88,
+	0x0e8a, 0x0e8a,
+	0x0e8d, 0x0e8d,
+	0x0e94, 0x0e97,
+	0x0e99, 0x0e9f,
+	0x0ea1, 0x0ea3,
+	0x0ea5, 0x0ea5,
+	0x0ea7, 0x0ea7,
+	0x0eaa, 0x0eab,
+	0x0ead, 0x0eb9,
+	0x0ebb, 0x0ebd,
+	0x0ec0, 0x0ec4,
+	0x0ec6, 0x0ec6,
+	0x0ec8, 0x0ecd,
+	0x0ed0, 0x0ed9,
+	0x0edc, 0x0edf,
+	0x0f00, 0x0f47,
+	0x0f49, 0x0f6c,
+	0x0f71, 0x0f97,
+	0x0f99, 0x0fbc,
+	0x0fbe, 0x0fcc,
+	0x0fce, 0x0fda,
+	0x1000, 0x10c5,
+	0x10c7, 0x10c7,
+	0x10cd, 0x10cd,
+	0x10d0, 0x1248,
+	0x124a, 0x124d,
+	0x1250, 0x1256,
+	0x1258, 0x1258,
+	0x125a, 0x125d,
+	0x1260, 0x1288,
+	0x128a, 0x128d,
+	0x1290, 0x12b0,
+	0x12b2, 0x12b5,
+	0x12b8, 0x12be,
+	0x12c0, 0x12c0,
+	0x12c2, 0x12c5,
+	0x12c8, 0x12d6,
+	0x12d8, 0x1310,
+	0x1312, 0x1315,
+	0x1318, 0x135a,
+	0x135d, 0x137c,
+	0x1380, 0x1399,
+	0x13a0, 0x13f5,
+	0x13f8, 0x13fd,
+	0x1400, 0x169c,
+	0x16a0, 0x16f8,
+	0x1700, 0x170c,
+	0x170e, 0x1714,
+	0x1720, 0x1736,
+	0x1740, 0x1753,
+	0x1760, 0x176c,
+	0x176e, 0x1770,
+	0x1772, 0x1773,
+	0x1780, 0x17dd,
+	0x17e0, 0x17e9,
+	0x17f0, 0x17f9,
+	0x1800, 0x180e,
+	0x1810, 0x1819,
+	0x1820, 0x1877,
+	0x1880, 0x18aa,
+	0x18b0, 0x18f5,
+	0x1900, 0x191e,
+	0x1920, 0x192b,
+	0x1930, 0x193b,
+	0x1940, 0x1940,
+	0x1944, 0x196d,
+	0x1970, 0x1974,
+	0x1980, 0x19ab,
+	0x19b0, 0x19c9,
+	0x19d0, 0x19da,
+	0x19de, 0x1a1b,
+	0x1a1e, 0x1a5e,
+	0x1a60, 0x1a7c,
+	0x1a7f, 0x1a89,
+	0x1a90, 0x1a99,
+	0x1aa0, 0x1aad,
+	0x1ab0, 0x1abe,
+	0x1b00, 0x1b4b,
+	0x1b50, 0x1b7c,
+	0x1b80, 0x1bf3,
+	0x1bfc, 0x1c37,
+	0x1c3b, 0x1c49,
+	0x1c4d, 0x1c88,
+	0x1cc0, 0x1cc7,
+	0x1cd0, 0x1cf9,
+	0x1d00, 0x1df9,
+	0x1dfb, 0x1f15,
+	0x1f18, 0x1f1d,
+	0x1f20, 0x1f45,
+	0x1f48, 0x1f4d,
+	0x1f50, 0x1f57,
+	0x1f59, 0x1f59,
+	0x1f5b, 0x1f5b,
+	0x1f5d, 0x1f5d,
+	0x1f5f, 0x1f7d,
+	0x1f80, 0x1fb4,
+	0x1fb6, 0x1fc4,
+	0x1fc6, 0x1fd3,
+	0x1fd6, 0x1fdb,
+	0x1fdd, 0x1fef,
+	0x1ff2, 0x1ff4,
+	0x1ff6, 0x1ffe,
+	0x2000, 0x2064,
+	0x2066, 0x2071,
+	0x2074, 0x208e,
+	0x2090, 0x209c,
+	0x20a0, 0x20bf,
+	0x20d0, 0x20f0,
+	0x2100, 0x218b,
+	0x2190, 0x2426,
+	0x2440, 0x244a,
+	0x2460, 0x2b73,
+	0x2b76, 0x2b95,
+	0x2b98, 0x2bb9,
+	0x2bbd, 0x2bc8,
+	0x2bca, 0x2bd2,
+	0x2bec, 0x2bef,
+	0x2c00, 0x2c2e,
+	0x2c30, 0x2c5e,
+	0x2c60, 0x2cf3,
+	0x2cf9, 0x2d25,
+	0x2d27, 0x2d27,
+	0x2d2d, 0x2d2d,
+	0x2d30, 0x2d67,
+	0x2d6f, 0x2d70,
+	0x2d7f, 0x2d96,
+	0x2da0, 0x2da6,
+	0x2da8, 0x2dae,
+	0x2db0, 0x2db6,
+	0x2db8, 0x2dbe,
+	0x2dc0, 0x2dc6,
+	0x2dc8, 0x2dce,
+	0x2dd0, 0x2dd6,
+	0x2dd8, 0x2dde,
+	0x2de0, 0x2e49,
+	0x2e80, 0x2e99,
+	0x2e9b, 0x2ef3,
+	0x2f00, 0x2fd5,
+	0x2ff0, 0x2ffb,
+	0x3000, 0x303f,
+	0x3041, 0x3096,
+	0x3099, 0x30ff,
+	0x3105, 0x312e,
+	0x3131, 0x318e,
+	0x3190, 0x31ba,
+	0x31c0, 0x31e3,
+	0x31f0, 0x321e,
+	0x3220, 0x32fe,
+	0x3300, 0x4db5,
+	0x4dc0, 0x9fea,
+	0xa000, 0xa48c,
+	0xa490, 0xa4c6,
+	0xa4d0, 0xa62b,
+	0xa640, 0xa6f7,
+	0xa700, 0xa7ae,
+	0xa7b0, 0xa7b7,
+	0xa7f7, 0xa82b,
+	0xa830, 0xa839,
+	0xa840, 0xa877,
+	0xa880, 0xa8c5,
+	0xa8ce, 0xa8d9,
+	0xa8e0, 0xa8fd,
+	0xa900, 0xa953,
+	0xa95f, 0xa97c,
+	0xa980, 0xa9cd,
+	0xa9cf, 0xa9d9,
+	0xa9de, 0xa9fe,
+	0xaa00, 0xaa36,
+	0xaa40, 0xaa4d,
+	0xaa50, 0xaa59,
+	0xaa5c, 0xaac2,
+	0xaadb, 0xaaf6,
+	0xab01, 0xab06,
+	0xab09, 0xab0e,
+	0xab11, 0xab16,
+	0xab20, 0xab26,
+	0xab28, 0xab2e,
+	0xab30, 0xab65,
+	0xab70, 0xabed,
+	0xabf0, 0xabf9,
+	0xac00, 0xd7a3,
+	0xd7b0, 0xd7c6,
+	0xd7cb, 0xd7fb,
+	0xd800, 0xfa6d,
+	0xfa70, 0xfad9,
+	0xfb00, 0xfb06,
+	0xfb13, 0xfb17,
+	0xfb1d, 0xfb36,
+	0xfb38, 0xfb3c,
+	0xfb3e, 0xfb3e,
+	0xfb40, 0xfb41,
+	0xfb43, 0xfb44,
+	0xfb46, 0xfbc1,
+	0xfbd3, 0xfd3f,
+	0xfd50, 0xfd8f,
+	0xfd92, 0xfdc7,
+	0xfdd0, 0xfdfd,
+	0xfe00, 0xfe19,
+	0xfe20, 0xfe52,
+	0xfe54, 0xfe66,
+	0xfe68, 0xfe6b,
+	0xfe70, 0xfe74,
+	0xfe76, 0xfefc,
+	0xfeff, 0xfeff,
+	0xff01, 0xffbe,
+	0xffc2, 0xffc7,
+	0xffca, 0xffcf,
+	0xffd2, 0xffd7,
+	0xffda, 0xffdc,
+	0xffe0, 0xffe6,
+	0xffe8, 0xffee,
+	0xfff9, 0x1000b,
+	0x1000d, 0x10026,
+	0x10028, 0x1003a,
+	0x1003c, 0x1003d,
+	0x1003f, 0x1004d,
+	0x10050, 0x1005d,
+	0x10080, 0x100fa,
+	0x10100, 0x10102,
+	0x10107, 0x10133,
+	0x10137, 0x1018e,
+	0x10190, 0x1019b,
+	0x101a0, 0x101a0,
+	0x101d0, 0x101fd,
+	0x10280, 0x1029c,
+	0x102a0, 0x102d0,
+	0x102e0, 0x102fb,
+	0x10300, 0x10323,
+	0x1032d, 0x1034a,
+	0x10350, 0x1037a,
+	0x10380, 0x1039d,
+	0x1039f, 0x103c3,
+	0x103c8, 0x103d5,
+	0x10400, 0x1049d,
+	0x104a0, 0x104a9,
+	0x104b0, 0x104d3,
+	0x104d8, 0x104fb,
+	0x10500, 0x10527,
+	0x10530, 0x10563,
+	0x1056f, 0x1056f,
+	0x10600, 0x10736,
+	0x10740, 0x10755,
+	0x10760, 0x10767,
+	0x10800, 0x10805,
+	0x10808, 0x10808,
+	0x1080a, 0x10835,
+	0x10837, 0x10838,
+	0x1083c, 0x1083c,
+	0x1083f, 0x10855,
+	0x10857, 0x1089e,
+	0x108a7, 0x108af,
+	0x108e0, 0x108f2,
+	0x108f4, 0x108f5,
+	0x108fb, 0x1091b,
+	0x1091f, 0x10939,
+	0x1093f, 0x1093f,
+	0x10980, 0x109b7,
+	0x109bc, 0x109cf,
+	0x109d2, 0x10a03,
+	0x10a05, 0x10a06,
+	0x10a0c, 0x10a13,
+	0x10a15, 0x10a17,
+	0x10a19, 0x10a33,
+	0x10a38, 0x10a3a,
+	0x10a3f, 0x10a47,
+	0x10a50, 0x10a58,
+	0x10a60, 0x10a9f,
+	0x10ac0, 0x10ae6,
+	0x10aeb, 0x10af6,
+	0x10b00, 0x10b35,
+	0x10b39, 0x10b55,
+	0x10b58, 0x10b72,
+	0x10b78, 0x10b91,
+	0x10b99, 0x10b9c,
+	0x10ba9, 0x10baf,
+	0x10c00, 0x10c48,
+	0x10c80, 0x10cb2,
+	0x10cc0, 0x10cf2,
+	0x10cfa, 0x10cff,
+	0x10e60, 0x10e7e,
+	0x11000, 0x1104d,
+	0x11052, 0x1106f,
+	0x1107f, 0x110c1,
+	0x110d0, 0x110e8,
+	0x110f0, 0x110f9,
+	0x11100, 0x11134,
+	0x11136, 0x11143,
+	0x11150, 0x11176,
+	0x11180, 0x111cd,
+	0x111d0, 0x111df,
+	0x111e1, 0x111f4,
+	0x11200, 0x11211,
+	0x11213, 0x1123e,
+	0x11280, 0x11286,
+	0x11288, 0x11288,
+	0x1128a, 0x1128d,
+	0x1128f, 0x1129d,
+	0x1129f, 0x112a9,
+	0x112b0, 0x112ea,
+	0x112f0, 0x112f9,
+	0x11300, 0x11303,
+	0x11305, 0x1130c,
+	0x1130f, 0x11310,
+	0x11313, 0x11328,
+	0x1132a, 0x11330,
+	0x11332, 0x11333,
+	0x11335, 0x11339,
+	0x1133c, 0x11344,
+	0x11347, 0x11348,
+	0x1134b, 0x1134d,
+	0x11350, 0x11350,
+	0x11357, 0x11357,
+	0x1135d, 0x11363,
+	0x11366, 0x1136c,
+	0x11370, 0x11374,
+	0x11400, 0x11459,
+	0x1145b, 0x1145b,
+	0x1145d, 0x1145d,
+	0x11480, 0x114c7,
+	0x114d0, 0x114d9,
+	0x11580, 0x115b5,
+	0x115b8, 0x115dd,
+	0x11600, 0x11644,
+	0x11650, 0x11659,
+	0x11660, 0x1166c,
+	0x11680, 0x116b7,
+	0x116c0, 0x116c9,
+	0x11700, 0x11719,
+	0x1171d, 0x1172b,
+	0x11730, 0x1173f,
+	0x118a0, 0x118f2,
+	0x118ff, 0x118ff,
+	0x11a00, 0x11a47,
+	0x11a50, 0x11a83,
+	0x11a86, 0x11a9c,
+	0x11a9e, 0x11aa2,
+	0x11ac0, 0x11af8,
+	0x11c00, 0x11c08,
+	0x11c0a, 0x11c36,
+	0x11c38, 0x11c45,
+	0x11c50, 0x11c6c,
+	0x11c70, 0x11c8f,
+	0x11c92, 0x11ca7,
+	0x11ca9, 0x11cb6,
+	0x11d00, 0x11d06,
+	0x11d08, 0x11d09,
+	0x11d0b, 0x11d36,
+	0x11d3a, 0x11d3a,
+	0x11d3c, 0x11d3d,
+	0x11d3f, 0x11d47,
+	0x11d50, 0x11d59,
+	0x12000, 0x12399,
+	0x12400, 0x1246e,
+	0x12470, 0x12474,
+	0x12480, 0x12543,
+	0x13000, 0x1342e,
+	0x14400, 0x14646,
+	0x16800, 0x16a38,
+	0x16a40, 0x16a5e,
+	0x16a60, 0x16a69,
+	0x16a6e, 0x16a6f,
+	0x16ad0, 0x16aed,
+	0x16af0, 0x16af5,
+	0x16b00, 0x16b45,
+	0x16b50, 0x16b59,
+	0x16b5b, 0x16b61,
+	0x16b63, 0x16b77,
+	0x16b7d, 0x16b8f,
+	0x16f00, 0x16f44,
+	0x16f50, 0x16f7e,
+	0x16f8f, 0x16f9f,
+	0x16fe0, 0x16fe1,
+	0x17000, 0x187ec,
+	0x18800, 0x18af2,
+	0x1b000, 0x1b11e,
+	0x1b170, 0x1b2fb,
+	0x1bc00, 0x1bc6a,
+	0x1bc70, 0x1bc7c,
+	0x1bc80, 0x1bc88,
+	0x1bc90, 0x1bc99,
+	0x1bc9c, 0x1bca3,
+	0x1d000, 0x1d0f5,
+	0x1d100, 0x1d126,
+	0x1d129, 0x1d1e8,
+	0x1d200, 0x1d245,
+	0x1d300, 0x1d356,
+	0x1d360, 0x1d371,
+	0x1d400, 0x1d454,
+	0x1d456, 0x1d49c,
+	0x1d49e, 0x1d49f,
+	0x1d4a2, 0x1d4a2,
+	0x1d4a5, 0x1d4a6,
+	0x1d4a9, 0x1d4ac,
+	0x1d4ae, 0x1d4b9,
+	0x1d4bb, 0x1d4bb,
+	0x1d4bd, 0x1d4c3,
+	0x1d4c5, 0x1d505,
+	0x1d507, 0x1d50a,
+	0x1d50d, 0x1d514,
+	0x1d516, 0x1d51c,
+	0x1d51e, 0x1d539,
+	0x1d53b, 0x1d53e,
+	0x1d540, 0x1d544,
+	0x1d546, 0x1d546,
+	0x1d54a, 0x1d550,
+	0x1d552, 0x1d6a5,
+	0x1d6a8, 0x1d7cb,
+	0x1d7ce, 0x1da8b,
+	0x1da9b, 0x1da9f,
+	0x1daa1, 0x1daaf,
+	0x1e000, 0x1e006,
+	0x1e008, 0x1e018,
+	0x1e01b, 0x1e021,
+	0x1e023, 0x1e024,
+	0x1e026, 0x1e02a,
+	0x1e800, 0x1e8c4,
+	0x1e8c7, 0x1e8d6,
+	0x1e900, 0x1e94a,
+	0x1e950, 0x1e959,
+	0x1e95e, 0x1e95f,
+	0x1ee00, 0x1ee03,
+	0x1ee05, 0x1ee1f,
+	0x1ee21, 0x1ee22,
+	0x1ee24, 0x1ee24,
+	0x1ee27, 0x1ee27,
+	0x1ee29, 0x1ee32,
+	0x1ee34, 0x1ee37,
+	0x1ee39, 0x1ee39,
+	0x1ee3b, 0x1ee3b,
+	0x1ee42, 0x1ee42,
+	0x1ee47, 0x1ee47,
+	0x1ee49, 0x1ee49,
+	0x1ee4b, 0x1ee4b,
+	0x1ee4d, 0x1ee4f,
+	0x1ee51, 0x1ee52,
+	0x1ee54, 0x1ee54,
+	0x1ee57, 0x1ee57,
+	0x1ee59, 0x1ee59,
+	0x1ee5b, 0x1ee5b,
+	0x1ee5d, 0x1ee5d,
+	0x1ee5f, 0x1ee5f,
+	0x1ee61, 0x1ee62,
+	0x1ee64, 0x1ee64,
+	0x1ee67, 0x1ee6a,
+	0x1ee6c, 0x1ee72,
+	0x1ee74, 0x1ee77,
+	0x1ee79, 0x1ee7c,
+	0x1ee7e, 0x1ee7e,
+	0x1ee80, 0x1ee89,
+	0x1ee8b, 0x1ee9b,
+	0x1eea1, 0x1eea3,
+	0x1eea5, 0x1eea9,
+	0x1eeab, 0x1eebb,
+	0x1eef0, 0x1eef1,
+	0x1f000, 0x1f02b,
+	0x1f030, 0x1f093,
+	0x1f0a0, 0x1f0ae,
+	0x1f0b1, 0x1f0bf,
+	0x1f0c1, 0x1f0cf,
+	0x1f0d1, 0x1f0f5,
+	0x1f100, 0x1f10c,
+	0x1f110, 0x1f12e,
+	0x1f130, 0x1f16b,
+	0x1f170, 0x1f1ac,
+	0x1f1e6, 0x1f202,
+	0x1f210, 0x1f23b,
+	0x1f240, 0x1f248,
+	0x1f250, 0x1f251,
+	0x1f260, 0x1f265,
+	0x1f300, 0x1f6d4,
+	0x1f6e0, 0x1f6ec,
+	0x1f6f0, 0x1f6f8,
+	0x1f700, 0x1f773,
+	0x1f780, 0x1f7d4,
+	0x1f800, 0x1f80b,
+	0x1f810, 0x1f847,
+	0x1f850, 0x1f859,
+	0x1f860, 0x1f887,
+	0x1f890, 0x1f8ad,
+	0x1f900, 0x1f90b,
+	0x1f910, 0x1f93e,
+	0x1f940, 0x1f94c,
+	0x1f950, 0x1f96b,
+	0x1f980, 0x1f997,
+	0x1f9c0, 0x1f9c0,
+	0x1f9d0, 0x1f9e6,
+	0x1fffe, 0x2a6d6,
+	0x2a700, 0x2b734,
+	0x2b740, 0x2b81d,
+	0x2b820, 0x2cea1,
+	0x2ceb0, 0x2ebe0,
+	0x2f800, 0x2fa1d,
+	0x2fffe, 0x2ffff,
+	0x3fffe, 0x3ffff,
+	0x4fffe, 0x4ffff,
+	0x5fffe, 0x5ffff,
+	0x6fffe, 0x6ffff,
+	0x7fffe, 0x7ffff,
+	0x8fffe, 0x8ffff,
+	0x9fffe, 0x9ffff,
+	0xafffe, 0xaffff,
+	0xbfffe, 0xbffff,
+	0xcfffe, 0xcffff,
+	0xdfffe, 0xdffff,
+	0xe0001, 0xe0001,
+	0xe0020, 0xe007f,
+	0xe0100, 0xe01ef,
+	0xefffe, 0x10ffff,
+}; /* CR_Age_10_0 */
+
+/* 'Age_11_0': Derived Age 11.0 */
+static const OnigCodePoint CR_Age_11_0[] = {
+	668,
+	0x0000, 0x0377,
+	0x037a, 0x037f,
+	0x0384, 0x038a,
+	0x038c, 0x038c,
+	0x038e, 0x03a1,
+	0x03a3, 0x052f,
+	0x0531, 0x0556,
+	0x0559, 0x058a,
+	0x058d, 0x058f,
+	0x0591, 0x05c7,
+	0x05d0, 0x05ea,
+	0x05ef, 0x05f4,
+	0x0600, 0x061c,
+	0x061e, 0x070d,
+	0x070f, 0x074a,
+	0x074d, 0x07b1,
+	0x07c0, 0x07fa,
+	0x07fd, 0x082d,
+	0x0830, 0x083e,
+	0x0840, 0x085b,
+	0x085e, 0x085e,
+	0x0860, 0x086a,
+	0x08a0, 0x08b4,
+	0x08b6, 0x08bd,
+	0x08d3, 0x0983,
+	0x0985, 0x098c,
+	0x098f, 0x0990,
+	0x0993, 0x09a8,
+	0x09aa, 0x09b0,
+	0x09b2, 0x09b2,
+	0x09b6, 0x09b9,
+	0x09bc, 0x09c4,
+	0x09c7, 0x09c8,
+	0x09cb, 0x09ce,
+	0x09d7, 0x09d7,
+	0x09dc, 0x09dd,
+	0x09df, 0x09e3,
+	0x09e6, 0x09fe,
+	0x0a01, 0x0a03,
+	0x0a05, 0x0a0a,
+	0x0a0f, 0x0a10,
+	0x0a13, 0x0a28,
+	0x0a2a, 0x0a30,
+	0x0a32, 0x0a33,
+	0x0a35, 0x0a36,
+	0x0a38, 0x0a39,
+	0x0a3c, 0x0a3c,
+	0x0a3e, 0x0a42,
+	0x0a47, 0x0a48,
+	0x0a4b, 0x0a4d,
+	0x0a51, 0x0a51,
+	0x0a59, 0x0a5c,
+	0x0a5e, 0x0a5e,
+	0x0a66, 0x0a76,
+	0x0a81, 0x0a83,
+	0x0a85, 0x0a8d,
+	0x0a8f, 0x0a91,
+	0x0a93, 0x0aa8,
+	0x0aaa, 0x0ab0,
+	0x0ab2, 0x0ab3,
+	0x0ab5, 0x0ab9,
+	0x0abc, 0x0ac5,
+	0x0ac7, 0x0ac9,
+	0x0acb, 0x0acd,
+	0x0ad0, 0x0ad0,
+	0x0ae0, 0x0ae3,
+	0x0ae6, 0x0af1,
+	0x0af9, 0x0aff,
+	0x0b01, 0x0b03,
+	0x0b05, 0x0b0c,
+	0x0b0f, 0x0b10,
+	0x0b13, 0x0b28,
+	0x0b2a, 0x0b30,
+	0x0b32, 0x0b33,
+	0x0b35, 0x0b39,
+	0x0b3c, 0x0b44,
+	0x0b47, 0x0b48,
+	0x0b4b, 0x0b4d,
+	0x0b56, 0x0b57,
+	0x0b5c, 0x0b5d,
+	0x0b5f, 0x0b63,
+	0x0b66, 0x0b77,
+	0x0b82, 0x0b83,
+	0x0b85, 0x0b8a,
+	0x0b8e, 0x0b90,
+	0x0b92, 0x0b95,
+	0x0b99, 0x0b9a,
+	0x0b9c, 0x0b9c,
+	0x0b9e, 0x0b9f,
+	0x0ba3, 0x0ba4,
+	0x0ba8, 0x0baa,
+	0x0bae, 0x0bb9,
+	0x0bbe, 0x0bc2,
+	0x0bc6, 0x0bc8,
+	0x0bca, 0x0bcd,
+	0x0bd0, 0x0bd0,
+	0x0bd7, 0x0bd7,
+	0x0be6, 0x0bfa,
+	0x0c00, 0x0c0c,
+	0x0c0e, 0x0c10,
+	0x0c12, 0x0c28,
+	0x0c2a, 0x0c39,
+	0x0c3d, 0x0c44,
+	0x0c46, 0x0c48,
+	0x0c4a, 0x0c4d,
+	0x0c55, 0x0c56,
+	0x0c58, 0x0c5a,
+	0x0c60, 0x0c63,
+	0x0c66, 0x0c6f,
+	0x0c78, 0x0c8c,
+	0x0c8e, 0x0c90,
+	0x0c92, 0x0ca8,
+	0x0caa, 0x0cb3,
+	0x0cb5, 0x0cb9,
+	0x0cbc, 0x0cc4,
+	0x0cc6, 0x0cc8,
+	0x0cca, 0x0ccd,
+	0x0cd5, 0x0cd6,
+	0x0cde, 0x0cde,
+	0x0ce0, 0x0ce3,
+	0x0ce6, 0x0cef,
+	0x0cf1, 0x0cf2,
+	0x0d00, 0x0d03,
+	0x0d05, 0x0d0c,
+	0x0d0e, 0x0d10,
+	0x0d12, 0x0d44,
+	0x0d46, 0x0d48,
+	0x0d4a, 0x0d4f,
+	0x0d54, 0x0d63,
+	0x0d66, 0x0d7f,
+	0x0d82, 0x0d83,
+	0x0d85, 0x0d96,
+	0x0d9a, 0x0db1,
+	0x0db3, 0x0dbb,
+	0x0dbd, 0x0dbd,
+	0x0dc0, 0x0dc6,
+	0x0dca, 0x0dca,
+	0x0dcf, 0x0dd4,
+	0x0dd6, 0x0dd6,
+	0x0dd8, 0x0ddf,
+	0x0de6, 0x0def,
+	0x0df2, 0x0df4,
+	0x0e01, 0x0e3a,
+	0x0e3f, 0x0e5b,
+	0x0e81, 0x0e82,
+	0x0e84, 0x0e84,
+	0x0e87, 0x0e88,
+	0x0e8a, 0x0e8a,
+	0x0e8d, 0x0e8d,
+	0x0e94, 0x0e97,
+	0x0e99, 0x0e9f,
+	0x0ea1, 0x0ea3,
+	0x0ea5, 0x0ea5,
+	0x0ea7, 0x0ea7,
+	0x0eaa, 0x0eab,
+	0x0ead, 0x0eb9,
+	0x0ebb, 0x0ebd,
+	0x0ec0, 0x0ec4,
+	0x0ec6, 0x0ec6,
+	0x0ec8, 0x0ecd,
+	0x0ed0, 0x0ed9,
+	0x0edc, 0x0edf,
+	0x0f00, 0x0f47,
+	0x0f49, 0x0f6c,
+	0x0f71, 0x0f97,
+	0x0f99, 0x0fbc,
+	0x0fbe, 0x0fcc,
+	0x0fce, 0x0fda,
+	0x1000, 0x10c5,
+	0x10c7, 0x10c7,
+	0x10cd, 0x10cd,
+	0x10d0, 0x1248,
+	0x124a, 0x124d,
+	0x1250, 0x1256,
+	0x1258, 0x1258,
+	0x125a, 0x125d,
+	0x1260, 0x1288,
+	0x128a, 0x128d,
+	0x1290, 0x12b0,
+	0x12b2, 0x12b5,
+	0x12b8, 0x12be,
+	0x12c0, 0x12c0,
+	0x12c2, 0x12c5,
+	0x12c8, 0x12d6,
+	0x12d8, 0x1310,
+	0x1312, 0x1315,
+	0x1318, 0x135a,
+	0x135d, 0x137c,
+	0x1380, 0x1399,
+	0x13a0, 0x13f5,
+	0x13f8, 0x13fd,
+	0x1400, 0x169c,
+	0x16a0, 0x16f8,
+	0x1700, 0x170c,
+	0x170e, 0x1714,
+	0x1720, 0x1736,
+	0x1740, 0x1753,
+	0x1760, 0x176c,
+	0x176e, 0x1770,
+	0x1772, 0x1773,
+	0x1780, 0x17dd,
+	0x17e0, 0x17e9,
+	0x17f0, 0x17f9,
+	0x1800, 0x180e,
+	0x1810, 0x1819,
+	0x1820, 0x1878,
+	0x1880, 0x18aa,
+	0x18b0, 0x18f5,
+	0x1900, 0x191e,
+	0x1920, 0x192b,
+	0x1930, 0x193b,
+	0x1940, 0x1940,
+	0x1944, 0x196d,
+	0x1970, 0x1974,
+	0x1980, 0x19ab,
+	0x19b0, 0x19c9,
+	0x19d0, 0x19da,
+	0x19de, 0x1a1b,
+	0x1a1e, 0x1a5e,
+	0x1a60, 0x1a7c,
+	0x1a7f, 0x1a89,
+	0x1a90, 0x1a99,
+	0x1aa0, 0x1aad,
+	0x1ab0, 0x1abe,
+	0x1b00, 0x1b4b,
+	0x1b50, 0x1b7c,
+	0x1b80, 0x1bf3,
+	0x1bfc, 0x1c37,
+	0x1c3b, 0x1c49,
+	0x1c4d, 0x1c88,
+	0x1c90, 0x1cba,
+	0x1cbd, 0x1cc7,
+	0x1cd0, 0x1cf9,
+	0x1d00, 0x1df9,
+	0x1dfb, 0x1f15,
+	0x1f18, 0x1f1d,
+	0x1f20, 0x1f45,
+	0x1f48, 0x1f4d,
+	0x1f50, 0x1f57,
+	0x1f59, 0x1f59,
+	0x1f5b, 0x1f5b,
+	0x1f5d, 0x1f5d,
+	0x1f5f, 0x1f7d,
+	0x1f80, 0x1fb4,
+	0x1fb6, 0x1fc4,
+	0x1fc6, 0x1fd3,
+	0x1fd6, 0x1fdb,
+	0x1fdd, 0x1fef,
+	0x1ff2, 0x1ff4,
+	0x1ff6, 0x1ffe,
+	0x2000, 0x2064,
+	0x2066, 0x2071,
+	0x2074, 0x208e,
+	0x2090, 0x209c,
+	0x20a0, 0x20bf,
+	0x20d0, 0x20f0,
+	0x2100, 0x218b,
+	0x2190, 0x2426,
+	0x2440, 0x244a,
+	0x2460, 0x2b73,
+	0x2b76, 0x2b95,
+	0x2b98, 0x2bc8,
+	0x2bca, 0x2bfe,
+	0x2c00, 0x2c2e,
+	0x2c30, 0x2c5e,
+	0x2c60, 0x2cf3,
+	0x2cf9, 0x2d25,
+	0x2d27, 0x2d27,
+	0x2d2d, 0x2d2d,
+	0x2d30, 0x2d67,
+	0x2d6f, 0x2d70,
+	0x2d7f, 0x2d96,
+	0x2da0, 0x2da6,
+	0x2da8, 0x2dae,
+	0x2db0, 0x2db6,
+	0x2db8, 0x2dbe,
+	0x2dc0, 0x2dc6,
+	0x2dc8, 0x2dce,
+	0x2dd0, 0x2dd6,
+	0x2dd8, 0x2dde,
+	0x2de0, 0x2e4e,
+	0x2e80, 0x2e99,
+	0x2e9b, 0x2ef3,
+	0x2f00, 0x2fd5,
+	0x2ff0, 0x2ffb,
+	0x3000, 0x303f,
+	0x3041, 0x3096,
+	0x3099, 0x30ff,
+	0x3105, 0x312f,
+	0x3131, 0x318e,
+	0x3190, 0x31ba,
+	0x31c0, 0x31e3,
+	0x31f0, 0x321e,
+	0x3220, 0x32fe,
+	0x3300, 0x4db5,
+	0x4dc0, 0x9fef,
+	0xa000, 0xa48c,
+	0xa490, 0xa4c6,
+	0xa4d0, 0xa62b,
+	0xa640, 0xa6f7,
+	0xa700, 0xa7b9,
+	0xa7f7, 0xa82b,
+	0xa830, 0xa839,
+	0xa840, 0xa877,
+	0xa880, 0xa8c5,
+	0xa8ce, 0xa8d9,
+	0xa8e0, 0xa953,
+	0xa95f, 0xa97c,
+	0xa980, 0xa9cd,
+	0xa9cf, 0xa9d9,
+	0xa9de, 0xa9fe,
+	0xaa00, 0xaa36,
+	0xaa40, 0xaa4d,
+	0xaa50, 0xaa59,
+	0xaa5c, 0xaac2,
+	0xaadb, 0xaaf6,
+	0xab01, 0xab06,
+	0xab09, 0xab0e,
+	0xab11, 0xab16,
+	0xab20, 0xab26,
+	0xab28, 0xab2e,
+	0xab30, 0xab65,
+	0xab70, 0xabed,
+	0xabf0, 0xabf9,
+	0xac00, 0xd7a3,
+	0xd7b0, 0xd7c6,
+	0xd7cb, 0xd7fb,
+	0xd800, 0xfa6d,
+	0xfa70, 0xfad9,
+	0xfb00, 0xfb06,
+	0xfb13, 0xfb17,
+	0xfb1d, 0xfb36,
+	0xfb38, 0xfb3c,
+	0xfb3e, 0xfb3e,
+	0xfb40, 0xfb41,
+	0xfb43, 0xfb44,
+	0xfb46, 0xfbc1,
+	0xfbd3, 0xfd3f,
+	0xfd50, 0xfd8f,
+	0xfd92, 0xfdc7,
+	0xfdd0, 0xfdfd,
+	0xfe00, 0xfe19,
+	0xfe20, 0xfe52,
+	0xfe54, 0xfe66,
+	0xfe68, 0xfe6b,
+	0xfe70, 0xfe74,
+	0xfe76, 0xfefc,
+	0xfeff, 0xfeff,
+	0xff01, 0xffbe,
+	0xffc2, 0xffc7,
+	0xffca, 0xffcf,
+	0xffd2, 0xffd7,
+	0xffda, 0xffdc,
+	0xffe0, 0xffe6,
+	0xffe8, 0xffee,
+	0xfff9, 0x1000b,
+	0x1000d, 0x10026,
+	0x10028, 0x1003a,
+	0x1003c, 0x1003d,
+	0x1003f, 0x1004d,
+	0x10050, 0x1005d,
+	0x10080, 0x100fa,
+	0x10100, 0x10102,
+	0x10107, 0x10133,
+	0x10137, 0x1018e,
+	0x10190, 0x1019b,
+	0x101a0, 0x101a0,
+	0x101d0, 0x101fd,
+	0x10280, 0x1029c,
+	0x102a0, 0x102d0,
+	0x102e0, 0x102fb,
+	0x10300, 0x10323,
+	0x1032d, 0x1034a,
+	0x10350, 0x1037a,
+	0x10380, 0x1039d,
+	0x1039f, 0x103c3,
+	0x103c8, 0x103d5,
+	0x10400, 0x1049d,
+	0x104a0, 0x104a9,
+	0x104b0, 0x104d3,
+	0x104d8, 0x104fb,
+	0x10500, 0x10527,
+	0x10530, 0x10563,
+	0x1056f, 0x1056f,
+	0x10600, 0x10736,
+	0x10740, 0x10755,
+	0x10760, 0x10767,
+	0x10800, 0x10805,
+	0x10808, 0x10808,
+	0x1080a, 0x10835,
+	0x10837, 0x10838,
+	0x1083c, 0x1083c,
+	0x1083f, 0x10855,
+	0x10857, 0x1089e,
+	0x108a7, 0x108af,
+	0x108e0, 0x108f2,
+	0x108f4, 0x108f5,
+	0x108fb, 0x1091b,
+	0x1091f, 0x10939,
+	0x1093f, 0x1093f,
+	0x10980, 0x109b7,
+	0x109bc, 0x109cf,
+	0x109d2, 0x10a03,
+	0x10a05, 0x10a06,
+	0x10a0c, 0x10a13,
+	0x10a15, 0x10a17,
+	0x10a19, 0x10a35,
+	0x10a38, 0x10a3a,
+	0x10a3f, 0x10a48,
+	0x10a50, 0x10a58,
+	0x10a60, 0x10a9f,
+	0x10ac0, 0x10ae6,
+	0x10aeb, 0x10af6,
+	0x10b00, 0x10b35,
+	0x10b39, 0x10b55,
+	0x10b58, 0x10b72,
+	0x10b78, 0x10b91,
+	0x10b99, 0x10b9c,
+	0x10ba9, 0x10baf,
+	0x10c00, 0x10c48,
+	0x10c80, 0x10cb2,
+	0x10cc0, 0x10cf2,
+	0x10cfa, 0x10d27,
+	0x10d30, 0x10d39,
+	0x10e60, 0x10e7e,
+	0x10f00, 0x10f27,
+	0x10f30, 0x10f59,
+	0x11000, 0x1104d,
+	0x11052, 0x1106f,
+	0x1107f, 0x110c1,
+	0x110cd, 0x110cd,
+	0x110d0, 0x110e8,
+	0x110f0, 0x110f9,
+	0x11100, 0x11134,
+	0x11136, 0x11146,
+	0x11150, 0x11176,
+	0x11180, 0x111cd,
+	0x111d0, 0x111df,
+	0x111e1, 0x111f4,
+	0x11200, 0x11211,
+	0x11213, 0x1123e,
+	0x11280, 0x11286,
+	0x11288, 0x11288,
+	0x1128a, 0x1128d,
+	0x1128f, 0x1129d,
+	0x1129f, 0x112a9,
+	0x112b0, 0x112ea,
+	0x112f0, 0x112f9,
+	0x11300, 0x11303,
+	0x11305, 0x1130c,
+	0x1130f, 0x11310,
+	0x11313, 0x11328,
+	0x1132a, 0x11330,
+	0x11332, 0x11333,
+	0x11335, 0x11339,
+	0x1133b, 0x11344,
+	0x11347, 0x11348,
+	0x1134b, 0x1134d,
+	0x11350, 0x11350,
+	0x11357, 0x11357,
+	0x1135d, 0x11363,
+	0x11366, 0x1136c,
+	0x11370, 0x11374,
+	0x11400, 0x11459,
+	0x1145b, 0x1145b,
+	0x1145d, 0x1145e,
+	0x11480, 0x114c7,
+	0x114d0, 0x114d9,
+	0x11580, 0x115b5,
+	0x115b8, 0x115dd,
+	0x11600, 0x11644,
+	0x11650, 0x11659,
+	0x11660, 0x1166c,
+	0x11680, 0x116b7,
+	0x116c0, 0x116c9,
+	0x11700, 0x1171a,
+	0x1171d, 0x1172b,
+	0x11730, 0x1173f,
+	0x11800, 0x1183b,
+	0x118a0, 0x118f2,
+	0x118ff, 0x118ff,
+	0x11a00, 0x11a47,
+	0x11a50, 0x11a83,
+	0x11a86, 0x11aa2,
+	0x11ac0, 0x11af8,
+	0x11c00, 0x11c08,
+	0x11c0a, 0x11c36,
+	0x11c38, 0x11c45,
+	0x11c50, 0x11c6c,
+	0x11c70, 0x11c8f,
+	0x11c92, 0x11ca7,
+	0x11ca9, 0x11cb6,
+	0x11d00, 0x11d06,
+	0x11d08, 0x11d09,
+	0x11d0b, 0x11d36,
+	0x11d3a, 0x11d3a,
+	0x11d3c, 0x11d3d,
+	0x11d3f, 0x11d47,
+	0x11d50, 0x11d59,
+	0x11d60, 0x11d65,
+	0x11d67, 0x11d68,
+	0x11d6a, 0x11d8e,
+	0x11d90, 0x11d91,
+	0x11d93, 0x11d98,
+	0x11da0, 0x11da9,
+	0x11ee0, 0x11ef8,
+	0x12000, 0x12399,
+	0x12400, 0x1246e,
+	0x12470, 0x12474,
+	0x12480, 0x12543,
+	0x13000, 0x1342e,
+	0x14400, 0x14646,
+	0x16800, 0x16a38,
+	0x16a40, 0x16a5e,
+	0x16a60, 0x16a69,
+	0x16a6e, 0x16a6f,
+	0x16ad0, 0x16aed,
+	0x16af0, 0x16af5,
+	0x16b00, 0x16b45,
+	0x16b50, 0x16b59,
+	0x16b5b, 0x16b61,
+	0x16b63, 0x16b77,
+	0x16b7d, 0x16b8f,
+	0x16e40, 0x16e9a,
+	0x16f00, 0x16f44,
+	0x16f50, 0x16f7e,
+	0x16f8f, 0x16f9f,
+	0x16fe0, 0x16fe1,
+	0x17000, 0x187f1,
+	0x18800, 0x18af2,
+	0x1b000, 0x1b11e,
+	0x1b170, 0x1b2fb,
+	0x1bc00, 0x1bc6a,
+	0x1bc70, 0x1bc7c,
+	0x1bc80, 0x1bc88,
+	0x1bc90, 0x1bc99,
+	0x1bc9c, 0x1bca3,
+	0x1d000, 0x1d0f5,
+	0x1d100, 0x1d126,
+	0x1d129, 0x1d1e8,
+	0x1d200, 0x1d245,
+	0x1d2e0, 0x1d2f3,
+	0x1d300, 0x1d356,
+	0x1d360, 0x1d378,
+	0x1d400, 0x1d454,
+	0x1d456, 0x1d49c,
+	0x1d49e, 0x1d49f,
+	0x1d4a2, 0x1d4a2,
+	0x1d4a5, 0x1d4a6,
+	0x1d4a9, 0x1d4ac,
+	0x1d4ae, 0x1d4b9,
+	0x1d4bb, 0x1d4bb,
+	0x1d4bd, 0x1d4c3,
+	0x1d4c5, 0x1d505,
+	0x1d507, 0x1d50a,
+	0x1d50d, 0x1d514,
+	0x1d516, 0x1d51c,
+	0x1d51e, 0x1d539,
+	0x1d53b, 0x1d53e,
+	0x1d540, 0x1d544,
+	0x1d546, 0x1d546,
+	0x1d54a, 0x1d550,
+	0x1d552, 0x1d6a5,
+	0x1d6a8, 0x1d7cb,
+	0x1d7ce, 0x1da8b,
+	0x1da9b, 0x1da9f,
+	0x1daa1, 0x1daaf,
+	0x1e000, 0x1e006,
+	0x1e008, 0x1e018,
+	0x1e01b, 0x1e021,
+	0x1e023, 0x1e024,
+	0x1e026, 0x1e02a,
+	0x1e800, 0x1e8c4,
+	0x1e8c7, 0x1e8d6,
+	0x1e900, 0x1e94a,
+	0x1e950, 0x1e959,
+	0x1e95e, 0x1e95f,
+	0x1ec71, 0x1ecb4,
+	0x1ee00, 0x1ee03,
+	0x1ee05, 0x1ee1f,
+	0x1ee21, 0x1ee22,
+	0x1ee24, 0x1ee24,
+	0x1ee27, 0x1ee27,
+	0x1ee29, 0x1ee32,
+	0x1ee34, 0x1ee37,
+	0x1ee39, 0x1ee39,
+	0x1ee3b, 0x1ee3b,
+	0x1ee42, 0x1ee42,
+	0x1ee47, 0x1ee47,
+	0x1ee49, 0x1ee49,
+	0x1ee4b, 0x1ee4b,
+	0x1ee4d, 0x1ee4f,
+	0x1ee51, 0x1ee52,
+	0x1ee54, 0x1ee54,
+	0x1ee57, 0x1ee57,
+	0x1ee59, 0x1ee59,
+	0x1ee5b, 0x1ee5b,
+	0x1ee5d, 0x1ee5d,
+	0x1ee5f, 0x1ee5f,
+	0x1ee61, 0x1ee62,
+	0x1ee64, 0x1ee64,
+	0x1ee67, 0x1ee6a,
+	0x1ee6c, 0x1ee72,
+	0x1ee74, 0x1ee77,
+	0x1ee79, 0x1ee7c,
+	0x1ee7e, 0x1ee7e,
+	0x1ee80, 0x1ee89,
+	0x1ee8b, 0x1ee9b,
+	0x1eea1, 0x1eea3,
+	0x1eea5, 0x1eea9,
+	0x1eeab, 0x1eebb,
+	0x1eef0, 0x1eef1,
+	0x1f000, 0x1f02b,
+	0x1f030, 0x1f093,
+	0x1f0a0, 0x1f0ae,
+	0x1f0b1, 0x1f0bf,
+	0x1f0c1, 0x1f0cf,
+	0x1f0d1, 0x1f0f5,
+	0x1f100, 0x1f10c,
+	0x1f110, 0x1f16b,
+	0x1f170, 0x1f1ac,
+	0x1f1e6, 0x1f202,
+	0x1f210, 0x1f23b,
+	0x1f240, 0x1f248,
+	0x1f250, 0x1f251,
+	0x1f260, 0x1f265,
+	0x1f300, 0x1f6d4,
+	0x1f6e0, 0x1f6ec,
+	0x1f6f0, 0x1f6f9,
+	0x1f700, 0x1f773,
+	0x1f780, 0x1f7d8,
+	0x1f800, 0x1f80b,
+	0x1f810, 0x1f847,
+	0x1f850, 0x1f859,
+	0x1f860, 0x1f887,
+	0x1f890, 0x1f8ad,
+	0x1f900, 0x1f90b,
+	0x1f910, 0x1f93e,
+	0x1f940, 0x1f970,
+	0x1f973, 0x1f976,
+	0x1f97a, 0x1f97a,
+	0x1f97c, 0x1f9a2,
+	0x1f9b0, 0x1f9b9,
+	0x1f9c0, 0x1f9c2,
+	0x1f9d0, 0x1f9ff,
+	0x1fa60, 0x1fa6d,
+	0x1fffe, 0x2a6d6,
+	0x2a700, 0x2b734,
+	0x2b740, 0x2b81d,
+	0x2b820, 0x2cea1,
+	0x2ceb0, 0x2ebe0,
+	0x2f800, 0x2fa1d,
+	0x2fffe, 0x2ffff,
+	0x3fffe, 0x3ffff,
+	0x4fffe, 0x4ffff,
+	0x5fffe, 0x5ffff,
+	0x6fffe, 0x6ffff,
+	0x7fffe, 0x7ffff,
+	0x8fffe, 0x8ffff,
+	0x9fffe, 0x9ffff,
+	0xafffe, 0xaffff,
+	0xbfffe, 0xbffff,
+	0xcfffe, 0xcffff,
+	0xdfffe, 0xdffff,
+	0xe0001, 0xe0001,
+	0xe0020, 0xe007f,
+	0xe0100, 0xe01ef,
+	0xefffe, 0x10ffff,
+}; /* CR_Age_11_0 */
+
+/* 'Age_12_0': Derived Age 12.0 */
+static const OnigCodePoint CR_Age_12_0[] = {
+	677,
+	0x0000, 0x0377,
+	0x037a, 0x037f,
+	0x0384, 0x038a,
+	0x038c, 0x038c,
+	0x038e, 0x03a1,
+	0x03a3, 0x052f,
+	0x0531, 0x0556,
+	0x0559, 0x058a,
+	0x058d, 0x058f,
+	0x0591, 0x05c7,
+	0x05d0, 0x05ea,
+	0x05ef, 0x05f4,
+	0x0600, 0x061c,
+	0x061e, 0x070d,
+	0x070f, 0x074a,
+	0x074d, 0x07b1,
+	0x07c0, 0x07fa,
+	0x07fd, 0x082d,
+	0x0830, 0x083e,
+	0x0840, 0x085b,
+	0x085e, 0x085e,
+	0x0860, 0x086a,
+	0x08a0, 0x08b4,
+	0x08b6, 0x08bd,
+	0x08d3, 0x0983,
+	0x0985, 0x098c,
+	0x098f, 0x0990,
+	0x0993, 0x09a8,
+	0x09aa, 0x09b0,
+	0x09b2, 0x09b2,
+	0x09b6, 0x09b9,
+	0x09bc, 0x09c4,
+	0x09c7, 0x09c8,
+	0x09cb, 0x09ce,
+	0x09d7, 0x09d7,
+	0x09dc, 0x09dd,
+	0x09df, 0x09e3,
+	0x09e6, 0x09fe,
+	0x0a01, 0x0a03,
+	0x0a05, 0x0a0a,
+	0x0a0f, 0x0a10,
+	0x0a13, 0x0a28,
+	0x0a2a, 0x0a30,
+	0x0a32, 0x0a33,
+	0x0a35, 0x0a36,
+	0x0a38, 0x0a39,
+	0x0a3c, 0x0a3c,
+	0x0a3e, 0x0a42,
+	0x0a47, 0x0a48,
+	0x0a4b, 0x0a4d,
+	0x0a51, 0x0a51,
+	0x0a59, 0x0a5c,
+	0x0a5e, 0x0a5e,
+	0x0a66, 0x0a76,
+	0x0a81, 0x0a83,
+	0x0a85, 0x0a8d,
+	0x0a8f, 0x0a91,
+	0x0a93, 0x0aa8,
+	0x0aaa, 0x0ab0,
+	0x0ab2, 0x0ab3,
+	0x0ab5, 0x0ab9,
+	0x0abc, 0x0ac5,
+	0x0ac7, 0x0ac9,
+	0x0acb, 0x0acd,
+	0x0ad0, 0x0ad0,
+	0x0ae0, 0x0ae3,
+	0x0ae6, 0x0af1,
+	0x0af9, 0x0aff,
+	0x0b01, 0x0b03,
+	0x0b05, 0x0b0c,
+	0x0b0f, 0x0b10,
+	0x0b13, 0x0b28,
+	0x0b2a, 0x0b30,
+	0x0b32, 0x0b33,
+	0x0b35, 0x0b39,
+	0x0b3c, 0x0b44,
+	0x0b47, 0x0b48,
+	0x0b4b, 0x0b4d,
+	0x0b56, 0x0b57,
+	0x0b5c, 0x0b5d,
+	0x0b5f, 0x0b63,
+	0x0b66, 0x0b77,
+	0x0b82, 0x0b83,
+	0x0b85, 0x0b8a,
+	0x0b8e, 0x0b90,
+	0x0b92, 0x0b95,
+	0x0b99, 0x0b9a,
+	0x0b9c, 0x0b9c,
+	0x0b9e, 0x0b9f,
+	0x0ba3, 0x0ba4,
+	0x0ba8, 0x0baa,
+	0x0bae, 0x0bb9,
+	0x0bbe, 0x0bc2,
+	0x0bc6, 0x0bc8,
+	0x0bca, 0x0bcd,
+	0x0bd0, 0x0bd0,
+	0x0bd7, 0x0bd7,
+	0x0be6, 0x0bfa,
+	0x0c00, 0x0c0c,
+	0x0c0e, 0x0c10,
+	0x0c12, 0x0c28,
+	0x0c2a, 0x0c39,
+	0x0c3d, 0x0c44,
+	0x0c46, 0x0c48,
+	0x0c4a, 0x0c4d,
+	0x0c55, 0x0c56,
+	0x0c58, 0x0c5a,
+	0x0c60, 0x0c63,
+	0x0c66, 0x0c6f,
+	0x0c77, 0x0c8c,
+	0x0c8e, 0x0c90,
+	0x0c92, 0x0ca8,
+	0x0caa, 0x0cb3,
+	0x0cb5, 0x0cb9,
+	0x0cbc, 0x0cc4,
+	0x0cc6, 0x0cc8,
+	0x0cca, 0x0ccd,
+	0x0cd5, 0x0cd6,
+	0x0cde, 0x0cde,
+	0x0ce0, 0x0ce3,
+	0x0ce6, 0x0cef,
+	0x0cf1, 0x0cf2,
+	0x0d00, 0x0d03,
+	0x0d05, 0x0d0c,
+	0x0d0e, 0x0d10,
+	0x0d12, 0x0d44,
+	0x0d46, 0x0d48,
+	0x0d4a, 0x0d4f,
+	0x0d54, 0x0d63,
+	0x0d66, 0x0d7f,
+	0x0d82, 0x0d83,
+	0x0d85, 0x0d96,
+	0x0d9a, 0x0db1,
+	0x0db3, 0x0dbb,
+	0x0dbd, 0x0dbd,
+	0x0dc0, 0x0dc6,
+	0x0dca, 0x0dca,
+	0x0dcf, 0x0dd4,
+	0x0dd6, 0x0dd6,
+	0x0dd8, 0x0ddf,
+	0x0de6, 0x0def,
+	0x0df2, 0x0df4,
+	0x0e01, 0x0e3a,
+	0x0e3f, 0x0e5b,
+	0x0e81, 0x0e82,
+	0x0e84, 0x0e84,
+	0x0e86, 0x0e8a,
+	0x0e8c, 0x0ea3,
+	0x0ea5, 0x0ea5,
+	0x0ea7, 0x0ebd,
+	0x0ec0, 0x0ec4,
+	0x0ec6, 0x0ec6,
+	0x0ec8, 0x0ecd,
+	0x0ed0, 0x0ed9,
+	0x0edc, 0x0edf,
+	0x0f00, 0x0f47,
+	0x0f49, 0x0f6c,
+	0x0f71, 0x0f97,
+	0x0f99, 0x0fbc,
+	0x0fbe, 0x0fcc,
+	0x0fce, 0x0fda,
+	0x1000, 0x10c5,
+	0x10c7, 0x10c7,
+	0x10cd, 0x10cd,
+	0x10d0, 0x1248,
+	0x124a, 0x124d,
+	0x1250, 0x1256,
+	0x1258, 0x1258,
+	0x125a, 0x125d,
+	0x1260, 0x1288,
+	0x128a, 0x128d,
+	0x1290, 0x12b0,
+	0x12b2, 0x12b5,
+	0x12b8, 0x12be,
+	0x12c0, 0x12c0,
+	0x12c2, 0x12c5,
+	0x12c8, 0x12d6,
+	0x12d8, 0x1310,
+	0x1312, 0x1315,
+	0x1318, 0x135a,
+	0x135d, 0x137c,
+	0x1380, 0x1399,
+	0x13a0, 0x13f5,
+	0x13f8, 0x13fd,
+	0x1400, 0x169c,
+	0x16a0, 0x16f8,
+	0x1700, 0x170c,
+	0x170e, 0x1714,
+	0x1720, 0x1736,
+	0x1740, 0x1753,
+	0x1760, 0x176c,
+	0x176e, 0x1770,
+	0x1772, 0x1773,
+	0x1780, 0x17dd,
+	0x17e0, 0x17e9,
+	0x17f0, 0x17f9,
+	0x1800, 0x180e,
+	0x1810, 0x1819,
+	0x1820, 0x1878,
+	0x1880, 0x18aa,
+	0x18b0, 0x18f5,
+	0x1900, 0x191e,
+	0x1920, 0x192b,
+	0x1930, 0x193b,
+	0x1940, 0x1940,
+	0x1944, 0x196d,
+	0x1970, 0x1974,
+	0x1980, 0x19ab,
+	0x19b0, 0x19c9,
+	0x19d0, 0x19da,
+	0x19de, 0x1a1b,
+	0x1a1e, 0x1a5e,
+	0x1a60, 0x1a7c,
+	0x1a7f, 0x1a89,
+	0x1a90, 0x1a99,
+	0x1aa0, 0x1aad,
+	0x1ab0, 0x1abe,
+	0x1b00, 0x1b4b,
+	0x1b50, 0x1b7c,
+	0x1b80, 0x1bf3,
+	0x1bfc, 0x1c37,
+	0x1c3b, 0x1c49,
+	0x1c4d, 0x1c88,
+	0x1c90, 0x1cba,
+	0x1cbd, 0x1cc7,
+	0x1cd0, 0x1cfa,
+	0x1d00, 0x1df9,
+	0x1dfb, 0x1f15,
+	0x1f18, 0x1f1d,
+	0x1f20, 0x1f45,
+	0x1f48, 0x1f4d,
+	0x1f50, 0x1f57,
+	0x1f59, 0x1f59,
+	0x1f5b, 0x1f5b,
+	0x1f5d, 0x1f5d,
+	0x1f5f, 0x1f7d,
+	0x1f80, 0x1fb4,
+	0x1fb6, 0x1fc4,
+	0x1fc6, 0x1fd3,
+	0x1fd6, 0x1fdb,
+	0x1fdd, 0x1fef,
+	0x1ff2, 0x1ff4,
+	0x1ff6, 0x1ffe,
+	0x2000, 0x2064,
+	0x2066, 0x2071,
+	0x2074, 0x208e,
+	0x2090, 0x209c,
+	0x20a0, 0x20bf,
+	0x20d0, 0x20f0,
+	0x2100, 0x218b,
+	0x2190, 0x2426,
+	0x2440, 0x244a,
+	0x2460, 0x2b73,
+	0x2b76, 0x2b95,
+	0x2b98, 0x2c2e,
+	0x2c30, 0x2c5e,
+	0x2c60, 0x2cf3,
+	0x2cf9, 0x2d25,
+	0x2d27, 0x2d27,
+	0x2d2d, 0x2d2d,
+	0x2d30, 0x2d67,
+	0x2d6f, 0x2d70,
+	0x2d7f, 0x2d96,
+	0x2da0, 0x2da6,
+	0x2da8, 0x2dae,
+	0x2db0, 0x2db6,
+	0x2db8, 0x2dbe,
+	0x2dc0, 0x2dc6,
+	0x2dc8, 0x2dce,
+	0x2dd0, 0x2dd6,
+	0x2dd8, 0x2dde,
+	0x2de0, 0x2e4f,
+	0x2e80, 0x2e99,
+	0x2e9b, 0x2ef3,
+	0x2f00, 0x2fd5,
+	0x2ff0, 0x2ffb,
+	0x3000, 0x303f,
+	0x3041, 0x3096,
+	0x3099, 0x30ff,
+	0x3105, 0x312f,
+	0x3131, 0x318e,
+	0x3190, 0x31ba,
+	0x31c0, 0x31e3,
+	0x31f0, 0x321e,
+	0x3220, 0x32fe,
+	0x3300, 0x4db5,
+	0x4dc0, 0x9fef,
+	0xa000, 0xa48c,
+	0xa490, 0xa4c6,
+	0xa4d0, 0xa62b,
+	0xa640, 0xa6f7,
+	0xa700, 0xa7bf,
+	0xa7c2, 0xa7c6,
+	0xa7f7, 0xa82b,
+	0xa830, 0xa839,
+	0xa840, 0xa877,
+	0xa880, 0xa8c5,
+	0xa8ce, 0xa8d9,
+	0xa8e0, 0xa953,
+	0xa95f, 0xa97c,
+	0xa980, 0xa9cd,
+	0xa9cf, 0xa9d9,
+	0xa9de, 0xa9fe,
+	0xaa00, 0xaa36,
+	0xaa40, 0xaa4d,
+	0xaa50, 0xaa59,
+	0xaa5c, 0xaac2,
+	0xaadb, 0xaaf6,
+	0xab01, 0xab06,
+	0xab09, 0xab0e,
+	0xab11, 0xab16,
+	0xab20, 0xab26,
+	0xab28, 0xab2e,
+	0xab30, 0xab67,
+	0xab70, 0xabed,
+	0xabf0, 0xabf9,
+	0xac00, 0xd7a3,
+	0xd7b0, 0xd7c6,
+	0xd7cb, 0xd7fb,
+	0xd800, 0xfa6d,
+	0xfa70, 0xfad9,
+	0xfb00, 0xfb06,
+	0xfb13, 0xfb17,
+	0xfb1d, 0xfb36,
+	0xfb38, 0xfb3c,
+	0xfb3e, 0xfb3e,
+	0xfb40, 0xfb41,
+	0xfb43, 0xfb44,
+	0xfb46, 0xfbc1,
+	0xfbd3, 0xfd3f,
+	0xfd50, 0xfd8f,
+	0xfd92, 0xfdc7,
+	0xfdd0, 0xfdfd,
+	0xfe00, 0xfe19,
+	0xfe20, 0xfe52,
+	0xfe54, 0xfe66,
+	0xfe68, 0xfe6b,
+	0xfe70, 0xfe74,
+	0xfe76, 0xfefc,
+	0xfeff, 0xfeff,
+	0xff01, 0xffbe,
+	0xffc2, 0xffc7,
+	0xffca, 0xffcf,
+	0xffd2, 0xffd7,
+	0xffda, 0xffdc,
+	0xffe0, 0xffe6,
+	0xffe8, 0xffee,
+	0xfff9, 0x1000b,
+	0x1000d, 0x10026,
+	0x10028, 0x1003a,
+	0x1003c, 0x1003d,
+	0x1003f, 0x1004d,
+	0x10050, 0x1005d,
+	0x10080, 0x100fa,
+	0x10100, 0x10102,
+	0x10107, 0x10133,
+	0x10137, 0x1018e,
+	0x10190, 0x1019b,
+	0x101a0, 0x101a0,
+	0x101d0, 0x101fd,
+	0x10280, 0x1029c,
+	0x102a0, 0x102d0,
+	0x102e0, 0x102fb,
+	0x10300, 0x10323,
+	0x1032d, 0x1034a,
+	0x10350, 0x1037a,
+	0x10380, 0x1039d,
+	0x1039f, 0x103c3,
+	0x103c8, 0x103d5,
+	0x10400, 0x1049d,
+	0x104a0, 0x104a9,
+	0x104b0, 0x104d3,
+	0x104d8, 0x104fb,
+	0x10500, 0x10527,
+	0x10530, 0x10563,
+	0x1056f, 0x1056f,
+	0x10600, 0x10736,
+	0x10740, 0x10755,
+	0x10760, 0x10767,
+	0x10800, 0x10805,
+	0x10808, 0x10808,
+	0x1080a, 0x10835,
+	0x10837, 0x10838,
+	0x1083c, 0x1083c,
+	0x1083f, 0x10855,
+	0x10857, 0x1089e,
+	0x108a7, 0x108af,
+	0x108e0, 0x108f2,
+	0x108f4, 0x108f5,
+	0x108fb, 0x1091b,
+	0x1091f, 0x10939,
+	0x1093f, 0x1093f,
+	0x10980, 0x109b7,
+	0x109bc, 0x109cf,
+	0x109d2, 0x10a03,
+	0x10a05, 0x10a06,
+	0x10a0c, 0x10a13,
+	0x10a15, 0x10a17,
+	0x10a19, 0x10a35,
+	0x10a38, 0x10a3a,
+	0x10a3f, 0x10a48,
+	0x10a50, 0x10a58,
+	0x10a60, 0x10a9f,
+	0x10ac0, 0x10ae6,
+	0x10aeb, 0x10af6,
+	0x10b00, 0x10b35,
+	0x10b39, 0x10b55,
+	0x10b58, 0x10b72,
+	0x10b78, 0x10b91,
+	0x10b99, 0x10b9c,
+	0x10ba9, 0x10baf,
+	0x10c00, 0x10c48,
+	0x10c80, 0x10cb2,
+	0x10cc0, 0x10cf2,
+	0x10cfa, 0x10d27,
+	0x10d30, 0x10d39,
+	0x10e60, 0x10e7e,
+	0x10f00, 0x10f27,
+	0x10f30, 0x10f59,
+	0x10fe0, 0x10ff6,
+	0x11000, 0x1104d,
+	0x11052, 0x1106f,
+	0x1107f, 0x110c1,
+	0x110cd, 0x110cd,
+	0x110d0, 0x110e8,
+	0x110f0, 0x110f9,
+	0x11100, 0x11134,
+	0x11136, 0x11146,
+	0x11150, 0x11176,
+	0x11180, 0x111cd,
+	0x111d0, 0x111df,
+	0x111e1, 0x111f4,
+	0x11200, 0x11211,
+	0x11213, 0x1123e,
+	0x11280, 0x11286,
+	0x11288, 0x11288,
+	0x1128a, 0x1128d,
+	0x1128f, 0x1129d,
+	0x1129f, 0x112a9,
+	0x112b0, 0x112ea,
+	0x112f0, 0x112f9,
+	0x11300, 0x11303,
+	0x11305, 0x1130c,
+	0x1130f, 0x11310,
+	0x11313, 0x11328,
+	0x1132a, 0x11330,
+	0x11332, 0x11333,
+	0x11335, 0x11339,
+	0x1133b, 0x11344,
+	0x11347, 0x11348,
+	0x1134b, 0x1134d,
+	0x11350, 0x11350,
+	0x11357, 0x11357,
+	0x1135d, 0x11363,
+	0x11366, 0x1136c,
+	0x11370, 0x11374,
+	0x11400, 0x11459,
+	0x1145b, 0x1145b,
+	0x1145d, 0x1145f,
+	0x11480, 0x114c7,
+	0x114d0, 0x114d9,
+	0x11580, 0x115b5,
+	0x115b8, 0x115dd,
+	0x11600, 0x11644,
+	0x11650, 0x11659,
+	0x11660, 0x1166c,
+	0x11680, 0x116b8,
+	0x116c0, 0x116c9,
+	0x11700, 0x1171a,
+	0x1171d, 0x1172b,
+	0x11730, 0x1173f,
+	0x11800, 0x1183b,
+	0x118a0, 0x118f2,
+	0x118ff, 0x118ff,
+	0x119a0, 0x119a7,
+	0x119aa, 0x119d7,
+	0x119da, 0x119e4,
+	0x11a00, 0x11a47,
+	0x11a50, 0x11aa2,
+	0x11ac0, 0x11af8,
+	0x11c00, 0x11c08,
+	0x11c0a, 0x11c36,
+	0x11c38, 0x11c45,
+	0x11c50, 0x11c6c,
+	0x11c70, 0x11c8f,
+	0x11c92, 0x11ca7,
+	0x11ca9, 0x11cb6,
+	0x11d00, 0x11d06,
+	0x11d08, 0x11d09,
+	0x11d0b, 0x11d36,
+	0x11d3a, 0x11d3a,
+	0x11d3c, 0x11d3d,
+	0x11d3f, 0x11d47,
+	0x11d50, 0x11d59,
+	0x11d60, 0x11d65,
+	0x11d67, 0x11d68,
+	0x11d6a, 0x11d8e,
+	0x11d90, 0x11d91,
+	0x11d93, 0x11d98,
+	0x11da0, 0x11da9,
+	0x11ee0, 0x11ef8,
+	0x11fc0, 0x11ff1,
+	0x11fff, 0x12399,
+	0x12400, 0x1246e,
+	0x12470, 0x12474,
+	0x12480, 0x12543,
+	0x13000, 0x1342e,
+	0x13430, 0x13438,
+	0x14400, 0x14646,
+	0x16800, 0x16a38,
+	0x16a40, 0x16a5e,
+	0x16a60, 0x16a69,
+	0x16a6e, 0x16a6f,
+	0x16ad0, 0x16aed,
+	0x16af0, 0x16af5,
+	0x16b00, 0x16b45,
+	0x16b50, 0x16b59,
+	0x16b5b, 0x16b61,
+	0x16b63, 0x16b77,
+	0x16b7d, 0x16b8f,
+	0x16e40, 0x16e9a,
+	0x16f00, 0x16f4a,
+	0x16f4f, 0x16f87,
+	0x16f8f, 0x16f9f,
+	0x16fe0, 0x16fe3,
+	0x17000, 0x187f7,
+	0x18800, 0x18af2,
+	0x1b000, 0x1b11e,
+	0x1b150, 0x1b152,
+	0x1b164, 0x1b167,
+	0x1b170, 0x1b2fb,
+	0x1bc00, 0x1bc6a,
+	0x1bc70, 0x1bc7c,
+	0x1bc80, 0x1bc88,
+	0x1bc90, 0x1bc99,
+	0x1bc9c, 0x1bca3,
+	0x1d000, 0x1d0f5,
+	0x1d100, 0x1d126,
+	0x1d129, 0x1d1e8,
+	0x1d200, 0x1d245,
+	0x1d2e0, 0x1d2f3,
+	0x1d300, 0x1d356,
+	0x1d360, 0x1d378,
+	0x1d400, 0x1d454,
+	0x1d456, 0x1d49c,
+	0x1d49e, 0x1d49f,
+	0x1d4a2, 0x1d4a2,
+	0x1d4a5, 0x1d4a6,
+	0x1d4a9, 0x1d4ac,
+	0x1d4ae, 0x1d4b9,
+	0x1d4bb, 0x1d4bb,
+	0x1d4bd, 0x1d4c3,
+	0x1d4c5, 0x1d505,
+	0x1d507, 0x1d50a,
+	0x1d50d, 0x1d514,
+	0x1d516, 0x1d51c,
+	0x1d51e, 0x1d539,
+	0x1d53b, 0x1d53e,
+	0x1d540, 0x1d544,
+	0x1d546, 0x1d546,
+	0x1d54a, 0x1d550,
+	0x1d552, 0x1d6a5,
+	0x1d6a8, 0x1d7cb,
+	0x1d7ce, 0x1da8b,
+	0x1da9b, 0x1da9f,
+	0x1daa1, 0x1daaf,
+	0x1e000, 0x1e006,
+	0x1e008, 0x1e018,
+	0x1e01b, 0x1e021,
+	0x1e023, 0x1e024,
+	0x1e026, 0x1e02a,
+	0x1e100, 0x1e12c,
+	0x1e130, 0x1e13d,
+	0x1e140, 0x1e149,
+	0x1e14e, 0x1e14f,
+	0x1e2c0, 0x1e2f9,
+	0x1e2ff, 0x1e2ff,
+	0x1e800, 0x1e8c4,
+	0x1e8c7, 0x1e8d6,
+	0x1e900, 0x1e94b,
+	0x1e950, 0x1e959,
+	0x1e95e, 0x1e95f,
+	0x1ec71, 0x1ecb4,
+	0x1ed01, 0x1ed3d,
+	0x1ee00, 0x1ee03,
+	0x1ee05, 0x1ee1f,
+	0x1ee21, 0x1ee22,
+	0x1ee24, 0x1ee24,
+	0x1ee27, 0x1ee27,
+	0x1ee29, 0x1ee32,
+	0x1ee34, 0x1ee37,
+	0x1ee39, 0x1ee39,
+	0x1ee3b, 0x1ee3b,
+	0x1ee42, 0x1ee42,
+	0x1ee47, 0x1ee47,
+	0x1ee49, 0x1ee49,
+	0x1ee4b, 0x1ee4b,
+	0x1ee4d, 0x1ee4f,
+	0x1ee51, 0x1ee52,
+	0x1ee54, 0x1ee54,
+	0x1ee57, 0x1ee57,
+	0x1ee59, 0x1ee59,
+	0x1ee5b, 0x1ee5b,
+	0x1ee5d, 0x1ee5d,
+	0x1ee5f, 0x1ee5f,
+	0x1ee61, 0x1ee62,
+	0x1ee64, 0x1ee64,
+	0x1ee67, 0x1ee6a,
+	0x1ee6c, 0x1ee72,
+	0x1ee74, 0x1ee77,
+	0x1ee79, 0x1ee7c,
+	0x1ee7e, 0x1ee7e,
+	0x1ee80, 0x1ee89,
+	0x1ee8b, 0x1ee9b,
+	0x1eea1, 0x1eea3,
+	0x1eea5, 0x1eea9,
+	0x1eeab, 0x1eebb,
+	0x1eef0, 0x1eef1,
+	0x1f000, 0x1f02b,
+	0x1f030, 0x1f093,
+	0x1f0a0, 0x1f0ae,
+	0x1f0b1, 0x1f0bf,
+	0x1f0c1, 0x1f0cf,
+	0x1f0d1, 0x1f0f5,
+	0x1f100, 0x1f10c,
+	0x1f110, 0x1f16c,
+	0x1f170, 0x1f1ac,
+	0x1f1e6, 0x1f202,
+	0x1f210, 0x1f23b,
+	0x1f240, 0x1f248,
+	0x1f250, 0x1f251,
+	0x1f260, 0x1f265,
+	0x1f300, 0x1f6d5,
+	0x1f6e0, 0x1f6ec,
+	0x1f6f0, 0x1f6fa,
+	0x1f700, 0x1f773,
+	0x1f780, 0x1f7d8,
+	0x1f7e0, 0x1f7eb,
+	0x1f800, 0x1f80b,
+	0x1f810, 0x1f847,
+	0x1f850, 0x1f859,
+	0x1f860, 0x1f887,
+	0x1f890, 0x1f8ad,
+	0x1f900, 0x1f90b,
+	0x1f90d, 0x1f971,
+	0x1f973, 0x1f976,
+	0x1f97a, 0x1f9a2,
+	0x1f9a5, 0x1f9aa,
+	0x1f9ae, 0x1f9ca,
+	0x1f9cd, 0x1fa53,
+	0x1fa60, 0x1fa6d,
+	0x1fa70, 0x1fa73,
+	0x1fa78, 0x1fa7a,
+	0x1fa80, 0x1fa82,
+	0x1fa90, 0x1fa95,
+	0x1fffe, 0x2a6d6,
+	0x2a700, 0x2b734,
+	0x2b740, 0x2b81d,
+	0x2b820, 0x2cea1,
+	0x2ceb0, 0x2ebe0,
+	0x2f800, 0x2fa1d,
+	0x2fffe, 0x2ffff,
+	0x3fffe, 0x3ffff,
+	0x4fffe, 0x4ffff,
+	0x5fffe, 0x5ffff,
+	0x6fffe, 0x6ffff,
+	0x7fffe, 0x7ffff,
+	0x8fffe, 0x8ffff,
+	0x9fffe, 0x9ffff,
+	0xafffe, 0xaffff,
+	0xbfffe, 0xbffff,
+	0xcfffe, 0xcffff,
+	0xdfffe, 0xdffff,
+	0xe0001, 0xe0001,
+	0xe0020, 0xe007f,
+	0xe0100, 0xe01ef,
+	0xefffe, 0x10ffff,
+}; /* CR_Age_12_0 */
+
+/* 'Age_12_1': Derived Age 12.1 */
+static const OnigCodePoint CR_Age_12_1[] = {
+	676,
+	0x0000, 0x0377,
+	0x037a, 0x037f,
+	0x0384, 0x038a,
+	0x038c, 0x038c,
+	0x038e, 0x03a1,
+	0x03a3, 0x052f,
+	0x0531, 0x0556,
+	0x0559, 0x058a,
+	0x058d, 0x058f,
+	0x0591, 0x05c7,
+	0x05d0, 0x05ea,
+	0x05ef, 0x05f4,
+	0x0600, 0x061c,
+	0x061e, 0x070d,
+	0x070f, 0x074a,
+	0x074d, 0x07b1,
+	0x07c0, 0x07fa,
+	0x07fd, 0x082d,
+	0x0830, 0x083e,
+	0x0840, 0x085b,
+	0x085e, 0x085e,
+	0x0860, 0x086a,
+	0x08a0, 0x08b4,
+	0x08b6, 0x08bd,
+	0x08d3, 0x0983,
+	0x0985, 0x098c,
+	0x098f, 0x0990,
+	0x0993, 0x09a8,
+	0x09aa, 0x09b0,
+	0x09b2, 0x09b2,
+	0x09b6, 0x09b9,
+	0x09bc, 0x09c4,
+	0x09c7, 0x09c8,
+	0x09cb, 0x09ce,
+	0x09d7, 0x09d7,
+	0x09dc, 0x09dd,
+	0x09df, 0x09e3,
+	0x09e6, 0x09fe,
+	0x0a01, 0x0a03,
+	0x0a05, 0x0a0a,
+	0x0a0f, 0x0a10,
+	0x0a13, 0x0a28,
+	0x0a2a, 0x0a30,
+	0x0a32, 0x0a33,
+	0x0a35, 0x0a36,
+	0x0a38, 0x0a39,
+	0x0a3c, 0x0a3c,
+	0x0a3e, 0x0a42,
+	0x0a47, 0x0a48,
+	0x0a4b, 0x0a4d,
+	0x0a51, 0x0a51,
+	0x0a59, 0x0a5c,
+	0x0a5e, 0x0a5e,
+	0x0a66, 0x0a76,
+	0x0a81, 0x0a83,
+	0x0a85, 0x0a8d,
+	0x0a8f, 0x0a91,
+	0x0a93, 0x0aa8,
+	0x0aaa, 0x0ab0,
+	0x0ab2, 0x0ab3,
+	0x0ab5, 0x0ab9,
+	0x0abc, 0x0ac5,
+	0x0ac7, 0x0ac9,
+	0x0acb, 0x0acd,
+	0x0ad0, 0x0ad0,
+	0x0ae0, 0x0ae3,
+	0x0ae6, 0x0af1,
+	0x0af9, 0x0aff,
+	0x0b01, 0x0b03,
+	0x0b05, 0x0b0c,
+	0x0b0f, 0x0b10,
+	0x0b13, 0x0b28,
+	0x0b2a, 0x0b30,
+	0x0b32, 0x0b33,
+	0x0b35, 0x0b39,
+	0x0b3c, 0x0b44,
+	0x0b47, 0x0b48,
+	0x0b4b, 0x0b4d,
+	0x0b56, 0x0b57,
+	0x0b5c, 0x0b5d,
+	0x0b5f, 0x0b63,
+	0x0b66, 0x0b77,
+	0x0b82, 0x0b83,
+	0x0b85, 0x0b8a,
+	0x0b8e, 0x0b90,
+	0x0b92, 0x0b95,
+	0x0b99, 0x0b9a,
+	0x0b9c, 0x0b9c,
+	0x0b9e, 0x0b9f,
+	0x0ba3, 0x0ba4,
+	0x0ba8, 0x0baa,
+	0x0bae, 0x0bb9,
+	0x0bbe, 0x0bc2,
+	0x0bc6, 0x0bc8,
+	0x0bca, 0x0bcd,
+	0x0bd0, 0x0bd0,
+	0x0bd7, 0x0bd7,
+	0x0be6, 0x0bfa,
+	0x0c00, 0x0c0c,
+	0x0c0e, 0x0c10,
+	0x0c12, 0x0c28,
+	0x0c2a, 0x0c39,
+	0x0c3d, 0x0c44,
+	0x0c46, 0x0c48,
+	0x0c4a, 0x0c4d,
+	0x0c55, 0x0c56,
+	0x0c58, 0x0c5a,
+	0x0c60, 0x0c63,
+	0x0c66, 0x0c6f,
+	0x0c77, 0x0c8c,
+	0x0c8e, 0x0c90,
+	0x0c92, 0x0ca8,
+	0x0caa, 0x0cb3,
+	0x0cb5, 0x0cb9,
+	0x0cbc, 0x0cc4,
+	0x0cc6, 0x0cc8,
+	0x0cca, 0x0ccd,
+	0x0cd5, 0x0cd6,
+	0x0cde, 0x0cde,
+	0x0ce0, 0x0ce3,
+	0x0ce6, 0x0cef,
+	0x0cf1, 0x0cf2,
+	0x0d00, 0x0d03,
+	0x0d05, 0x0d0c,
+	0x0d0e, 0x0d10,
+	0x0d12, 0x0d44,
+	0x0d46, 0x0d48,
+	0x0d4a, 0x0d4f,
+	0x0d54, 0x0d63,
+	0x0d66, 0x0d7f,
+	0x0d82, 0x0d83,
+	0x0d85, 0x0d96,
+	0x0d9a, 0x0db1,
+	0x0db3, 0x0dbb,
+	0x0dbd, 0x0dbd,
+	0x0dc0, 0x0dc6,
+	0x0dca, 0x0dca,
+	0x0dcf, 0x0dd4,
+	0x0dd6, 0x0dd6,
+	0x0dd8, 0x0ddf,
+	0x0de6, 0x0def,
+	0x0df2, 0x0df4,
+	0x0e01, 0x0e3a,
+	0x0e3f, 0x0e5b,
+	0x0e81, 0x0e82,
+	0x0e84, 0x0e84,
+	0x0e86, 0x0e8a,
+	0x0e8c, 0x0ea3,
+	0x0ea5, 0x0ea5,
+	0x0ea7, 0x0ebd,
+	0x0ec0, 0x0ec4,
+	0x0ec6, 0x0ec6,
+	0x0ec8, 0x0ecd,
+	0x0ed0, 0x0ed9,
+	0x0edc, 0x0edf,
+	0x0f00, 0x0f47,
+	0x0f49, 0x0f6c,
+	0x0f71, 0x0f97,
+	0x0f99, 0x0fbc,
+	0x0fbe, 0x0fcc,
+	0x0fce, 0x0fda,
+	0x1000, 0x10c5,
+	0x10c7, 0x10c7,
+	0x10cd, 0x10cd,
+	0x10d0, 0x1248,
+	0x124a, 0x124d,
+	0x1250, 0x1256,
+	0x1258, 0x1258,
+	0x125a, 0x125d,
+	0x1260, 0x1288,
+	0x128a, 0x128d,
+	0x1290, 0x12b0,
+	0x12b2, 0x12b5,
+	0x12b8, 0x12be,
+	0x12c0, 0x12c0,
+	0x12c2, 0x12c5,
+	0x12c8, 0x12d6,
+	0x12d8, 0x1310,
+	0x1312, 0x1315,
+	0x1318, 0x135a,
+	0x135d, 0x137c,
+	0x1380, 0x1399,
+	0x13a0, 0x13f5,
+	0x13f8, 0x13fd,
+	0x1400, 0x169c,
+	0x16a0, 0x16f8,
+	0x1700, 0x170c,
+	0x170e, 0x1714,
+	0x1720, 0x1736,
+	0x1740, 0x1753,
+	0x1760, 0x176c,
+	0x176e, 0x1770,
+	0x1772, 0x1773,
+	0x1780, 0x17dd,
+	0x17e0, 0x17e9,
+	0x17f0, 0x17f9,
+	0x1800, 0x180e,
+	0x1810, 0x1819,
+	0x1820, 0x1878,
+	0x1880, 0x18aa,
+	0x18b0, 0x18f5,
+	0x1900, 0x191e,
+	0x1920, 0x192b,
+	0x1930, 0x193b,
+	0x1940, 0x1940,
+	0x1944, 0x196d,
+	0x1970, 0x1974,
+	0x1980, 0x19ab,
+	0x19b0, 0x19c9,
+	0x19d0, 0x19da,
+	0x19de, 0x1a1b,
+	0x1a1e, 0x1a5e,
+	0x1a60, 0x1a7c,
+	0x1a7f, 0x1a89,
+	0x1a90, 0x1a99,
+	0x1aa0, 0x1aad,
+	0x1ab0, 0x1abe,
+	0x1b00, 0x1b4b,
+	0x1b50, 0x1b7c,
+	0x1b80, 0x1bf3,
+	0x1bfc, 0x1c37,
+	0x1c3b, 0x1c49,
+	0x1c4d, 0x1c88,
+	0x1c90, 0x1cba,
+	0x1cbd, 0x1cc7,
+	0x1cd0, 0x1cfa,
+	0x1d00, 0x1df9,
+	0x1dfb, 0x1f15,
+	0x1f18, 0x1f1d,
+	0x1f20, 0x1f45,
+	0x1f48, 0x1f4d,
+	0x1f50, 0x1f57,
+	0x1f59, 0x1f59,
+	0x1f5b, 0x1f5b,
+	0x1f5d, 0x1f5d,
+	0x1f5f, 0x1f7d,
+	0x1f80, 0x1fb4,
+	0x1fb6, 0x1fc4,
+	0x1fc6, 0x1fd3,
+	0x1fd6, 0x1fdb,
+	0x1fdd, 0x1fef,
+	0x1ff2, 0x1ff4,
+	0x1ff6, 0x1ffe,
+	0x2000, 0x2064,
+	0x2066, 0x2071,
+	0x2074, 0x208e,
+	0x2090, 0x209c,
+	0x20a0, 0x20bf,
+	0x20d0, 0x20f0,
+	0x2100, 0x218b,
+	0x2190, 0x2426,
+	0x2440, 0x244a,
+	0x2460, 0x2b73,
+	0x2b76, 0x2b95,
+	0x2b98, 0x2c2e,
+	0x2c30, 0x2c5e,
+	0x2c60, 0x2cf3,
+	0x2cf9, 0x2d25,
+	0x2d27, 0x2d27,
+	0x2d2d, 0x2d2d,
+	0x2d30, 0x2d67,
+	0x2d6f, 0x2d70,
+	0x2d7f, 0x2d96,
+	0x2da0, 0x2da6,
+	0x2da8, 0x2dae,
+	0x2db0, 0x2db6,
+	0x2db8, 0x2dbe,
+	0x2dc0, 0x2dc6,
+	0x2dc8, 0x2dce,
+	0x2dd0, 0x2dd6,
+	0x2dd8, 0x2dde,
+	0x2de0, 0x2e4f,
+	0x2e80, 0x2e99,
+	0x2e9b, 0x2ef3,
+	0x2f00, 0x2fd5,
+	0x2ff0, 0x2ffb,
+	0x3000, 0x303f,
+	0x3041, 0x3096,
+	0x3099, 0x30ff,
+	0x3105, 0x312f,
+	0x3131, 0x318e,
+	0x3190, 0x31ba,
+	0x31c0, 0x31e3,
+	0x31f0, 0x321e,
+	0x3220, 0x4db5,
+	0x4dc0, 0x9fef,
+	0xa000, 0xa48c,
+	0xa490, 0xa4c6,
+	0xa4d0, 0xa62b,
+	0xa640, 0xa6f7,
+	0xa700, 0xa7bf,
+	0xa7c2, 0xa7c6,
+	0xa7f7, 0xa82b,
+	0xa830, 0xa839,
+	0xa840, 0xa877,
+	0xa880, 0xa8c5,
+	0xa8ce, 0xa8d9,
+	0xa8e0, 0xa953,
+	0xa95f, 0xa97c,
+	0xa980, 0xa9cd,
+	0xa9cf, 0xa9d9,
+	0xa9de, 0xa9fe,
+	0xaa00, 0xaa36,
+	0xaa40, 0xaa4d,
+	0xaa50, 0xaa59,
+	0xaa5c, 0xaac2,
+	0xaadb, 0xaaf6,
+	0xab01, 0xab06,
+	0xab09, 0xab0e,
+	0xab11, 0xab16,
+	0xab20, 0xab26,
+	0xab28, 0xab2e,
+	0xab30, 0xab67,
+	0xab70, 0xabed,
+	0xabf0, 0xabf9,
+	0xac00, 0xd7a3,
+	0xd7b0, 0xd7c6,
+	0xd7cb, 0xd7fb,
+	0xd800, 0xfa6d,
+	0xfa70, 0xfad9,
+	0xfb00, 0xfb06,
+	0xfb13, 0xfb17,
+	0xfb1d, 0xfb36,
+	0xfb38, 0xfb3c,
+	0xfb3e, 0xfb3e,
+	0xfb40, 0xfb41,
+	0xfb43, 0xfb44,
+	0xfb46, 0xfbc1,
+	0xfbd3, 0xfd3f,
+	0xfd50, 0xfd8f,
+	0xfd92, 0xfdc7,
+	0xfdd0, 0xfdfd,
+	0xfe00, 0xfe19,
+	0xfe20, 0xfe52,
+	0xfe54, 0xfe66,
+	0xfe68, 0xfe6b,
+	0xfe70, 0xfe74,
+	0xfe76, 0xfefc,
+	0xfeff, 0xfeff,
+	0xff01, 0xffbe,
+	0xffc2, 0xffc7,
+	0xffca, 0xffcf,
+	0xffd2, 0xffd7,
+	0xffda, 0xffdc,
+	0xffe0, 0xffe6,
+	0xffe8, 0xffee,
+	0xfff9, 0x1000b,
+	0x1000d, 0x10026,
+	0x10028, 0x1003a,
+	0x1003c, 0x1003d,
+	0x1003f, 0x1004d,
+	0x10050, 0x1005d,
+	0x10080, 0x100fa,
+	0x10100, 0x10102,
+	0x10107, 0x10133,
+	0x10137, 0x1018e,
+	0x10190, 0x1019b,
+	0x101a0, 0x101a0,
+	0x101d0, 0x101fd,
+	0x10280, 0x1029c,
+	0x102a0, 0x102d0,
+	0x102e0, 0x102fb,
+	0x10300, 0x10323,
+	0x1032d, 0x1034a,
+	0x10350, 0x1037a,
+	0x10380, 0x1039d,
+	0x1039f, 0x103c3,
+	0x103c8, 0x103d5,
+	0x10400, 0x1049d,
+	0x104a0, 0x104a9,
+	0x104b0, 0x104d3,
+	0x104d8, 0x104fb,
+	0x10500, 0x10527,
+	0x10530, 0x10563,
+	0x1056f, 0x1056f,
+	0x10600, 0x10736,
+	0x10740, 0x10755,
+	0x10760, 0x10767,
+	0x10800, 0x10805,
+	0x10808, 0x10808,
+	0x1080a, 0x10835,
+	0x10837, 0x10838,
+	0x1083c, 0x1083c,
+	0x1083f, 0x10855,
+	0x10857, 0x1089e,
+	0x108a7, 0x108af,
+	0x108e0, 0x108f2,
+	0x108f4, 0x108f5,
+	0x108fb, 0x1091b,
+	0x1091f, 0x10939,
+	0x1093f, 0x1093f,
+	0x10980, 0x109b7,
+	0x109bc, 0x109cf,
+	0x109d2, 0x10a03,
+	0x10a05, 0x10a06,
+	0x10a0c, 0x10a13,
+	0x10a15, 0x10a17,
+	0x10a19, 0x10a35,
+	0x10a38, 0x10a3a,
+	0x10a3f, 0x10a48,
+	0x10a50, 0x10a58,
+	0x10a60, 0x10a9f,
+	0x10ac0, 0x10ae6,
+	0x10aeb, 0x10af6,
+	0x10b00, 0x10b35,
+	0x10b39, 0x10b55,
+	0x10b58, 0x10b72,
+	0x10b78, 0x10b91,
+	0x10b99, 0x10b9c,
+	0x10ba9, 0x10baf,
+	0x10c00, 0x10c48,
+	0x10c80, 0x10cb2,
+	0x10cc0, 0x10cf2,
+	0x10cfa, 0x10d27,
+	0x10d30, 0x10d39,
+	0x10e60, 0x10e7e,
+	0x10f00, 0x10f27,
+	0x10f30, 0x10f59,
+	0x10fe0, 0x10ff6,
+	0x11000, 0x1104d,
+	0x11052, 0x1106f,
+	0x1107f, 0x110c1,
+	0x110cd, 0x110cd,
+	0x110d0, 0x110e8,
+	0x110f0, 0x110f9,
+	0x11100, 0x11134,
+	0x11136, 0x11146,
+	0x11150, 0x11176,
+	0x11180, 0x111cd,
+	0x111d0, 0x111df,
+	0x111e1, 0x111f4,
+	0x11200, 0x11211,
+	0x11213, 0x1123e,
+	0x11280, 0x11286,
+	0x11288, 0x11288,
+	0x1128a, 0x1128d,
+	0x1128f, 0x1129d,
+	0x1129f, 0x112a9,
+	0x112b0, 0x112ea,
+	0x112f0, 0x112f9,
+	0x11300, 0x11303,
+	0x11305, 0x1130c,
+	0x1130f, 0x11310,
+	0x11313, 0x11328,
+	0x1132a, 0x11330,
+	0x11332, 0x11333,
+	0x11335, 0x11339,
+	0x1133b, 0x11344,
+	0x11347, 0x11348,
+	0x1134b, 0x1134d,
+	0x11350, 0x11350,
+	0x11357, 0x11357,
+	0x1135d, 0x11363,
+	0x11366, 0x1136c,
+	0x11370, 0x11374,
+	0x11400, 0x11459,
+	0x1145b, 0x1145b,
+	0x1145d, 0x1145f,
+	0x11480, 0x114c7,
+	0x114d0, 0x114d9,
+	0x11580, 0x115b5,
+	0x115b8, 0x115dd,
+	0x11600, 0x11644,
+	0x11650, 0x11659,
+	0x11660, 0x1166c,
+	0x11680, 0x116b8,
+	0x116c0, 0x116c9,
+	0x11700, 0x1171a,
+	0x1171d, 0x1172b,
+	0x11730, 0x1173f,
+	0x11800, 0x1183b,
+	0x118a0, 0x118f2,
+	0x118ff, 0x118ff,
+	0x119a0, 0x119a7,
+	0x119aa, 0x119d7,
+	0x119da, 0x119e4,
+	0x11a00, 0x11a47,
+	0x11a50, 0x11aa2,
+	0x11ac0, 0x11af8,
+	0x11c00, 0x11c08,
+	0x11c0a, 0x11c36,
+	0x11c38, 0x11c45,
+	0x11c50, 0x11c6c,
+	0x11c70, 0x11c8f,
+	0x11c92, 0x11ca7,
+	0x11ca9, 0x11cb6,
+	0x11d00, 0x11d06,
+	0x11d08, 0x11d09,
+	0x11d0b, 0x11d36,
+	0x11d3a, 0x11d3a,
+	0x11d3c, 0x11d3d,
+	0x11d3f, 0x11d47,
+	0x11d50, 0x11d59,
+	0x11d60, 0x11d65,
+	0x11d67, 0x11d68,
+	0x11d6a, 0x11d8e,
+	0x11d90, 0x11d91,
+	0x11d93, 0x11d98,
+	0x11da0, 0x11da9,
+	0x11ee0, 0x11ef8,
+	0x11fc0, 0x11ff1,
+	0x11fff, 0x12399,
+	0x12400, 0x1246e,
+	0x12470, 0x12474,
+	0x12480, 0x12543,
+	0x13000, 0x1342e,
+	0x13430, 0x13438,
+	0x14400, 0x14646,
+	0x16800, 0x16a38,
+	0x16a40, 0x16a5e,
+	0x16a60, 0x16a69,
+	0x16a6e, 0x16a6f,
+	0x16ad0, 0x16aed,
+	0x16af0, 0x16af5,
+	0x16b00, 0x16b45,
+	0x16b50, 0x16b59,
+	0x16b5b, 0x16b61,
+	0x16b63, 0x16b77,
+	0x16b7d, 0x16b8f,
+	0x16e40, 0x16e9a,
+	0x16f00, 0x16f4a,
+	0x16f4f, 0x16f87,
+	0x16f8f, 0x16f9f,
+	0x16fe0, 0x16fe3,
+	0x17000, 0x187f7,
+	0x18800, 0x18af2,
+	0x1b000, 0x1b11e,
+	0x1b150, 0x1b152,
+	0x1b164, 0x1b167,
+	0x1b170, 0x1b2fb,
+	0x1bc00, 0x1bc6a,
+	0x1bc70, 0x1bc7c,
+	0x1bc80, 0x1bc88,
+	0x1bc90, 0x1bc99,
+	0x1bc9c, 0x1bca3,
+	0x1d000, 0x1d0f5,
+	0x1d100, 0x1d126,
+	0x1d129, 0x1d1e8,
+	0x1d200, 0x1d245,
+	0x1d2e0, 0x1d2f3,
+	0x1d300, 0x1d356,
+	0x1d360, 0x1d378,
+	0x1d400, 0x1d454,
+	0x1d456, 0x1d49c,
+	0x1d49e, 0x1d49f,
+	0x1d4a2, 0x1d4a2,
+	0x1d4a5, 0x1d4a6,
+	0x1d4a9, 0x1d4ac,
+	0x1d4ae, 0x1d4b9,
+	0x1d4bb, 0x1d4bb,
+	0x1d4bd, 0x1d4c3,
+	0x1d4c5, 0x1d505,
+	0x1d507, 0x1d50a,
+	0x1d50d, 0x1d514,
+	0x1d516, 0x1d51c,
+	0x1d51e, 0x1d539,
+	0x1d53b, 0x1d53e,
+	0x1d540, 0x1d544,
+	0x1d546, 0x1d546,
+	0x1d54a, 0x1d550,
+	0x1d552, 0x1d6a5,
+	0x1d6a8, 0x1d7cb,
+	0x1d7ce, 0x1da8b,
+	0x1da9b, 0x1da9f,
+	0x1daa1, 0x1daaf,
+	0x1e000, 0x1e006,
+	0x1e008, 0x1e018,
+	0x1e01b, 0x1e021,
+	0x1e023, 0x1e024,
+	0x1e026, 0x1e02a,
+	0x1e100, 0x1e12c,
+	0x1e130, 0x1e13d,
+	0x1e140, 0x1e149,
+	0x1e14e, 0x1e14f,
+	0x1e2c0, 0x1e2f9,
+	0x1e2ff, 0x1e2ff,
+	0x1e800, 0x1e8c4,
+	0x1e8c7, 0x1e8d6,
+	0x1e900, 0x1e94b,
+	0x1e950, 0x1e959,
+	0x1e95e, 0x1e95f,
+	0x1ec71, 0x1ecb4,
+	0x1ed01, 0x1ed3d,
+	0x1ee00, 0x1ee03,
+	0x1ee05, 0x1ee1f,
+	0x1ee21, 0x1ee22,
+	0x1ee24, 0x1ee24,
+	0x1ee27, 0x1ee27,
+	0x1ee29, 0x1ee32,
+	0x1ee34, 0x1ee37,
+	0x1ee39, 0x1ee39,
+	0x1ee3b, 0x1ee3b,
+	0x1ee42, 0x1ee42,
+	0x1ee47, 0x1ee47,
+	0x1ee49, 0x1ee49,
+	0x1ee4b, 0x1ee4b,
+	0x1ee4d, 0x1ee4f,
+	0x1ee51, 0x1ee52,
+	0x1ee54, 0x1ee54,
+	0x1ee57, 0x1ee57,
+	0x1ee59, 0x1ee59,
+	0x1ee5b, 0x1ee5b,
+	0x1ee5d, 0x1ee5d,
+	0x1ee5f, 0x1ee5f,
+	0x1ee61, 0x1ee62,
+	0x1ee64, 0x1ee64,
+	0x1ee67, 0x1ee6a,
+	0x1ee6c, 0x1ee72,
+	0x1ee74, 0x1ee77,
+	0x1ee79, 0x1ee7c,
+	0x1ee7e, 0x1ee7e,
+	0x1ee80, 0x1ee89,
+	0x1ee8b, 0x1ee9b,
+	0x1eea1, 0x1eea3,
+	0x1eea5, 0x1eea9,
+	0x1eeab, 0x1eebb,
+	0x1eef0, 0x1eef1,
+	0x1f000, 0x1f02b,
+	0x1f030, 0x1f093,
+	0x1f0a0, 0x1f0ae,
+	0x1f0b1, 0x1f0bf,
+	0x1f0c1, 0x1f0cf,
+	0x1f0d1, 0x1f0f5,
+	0x1f100, 0x1f10c,
+	0x1f110, 0x1f16c,
+	0x1f170, 0x1f1ac,
+	0x1f1e6, 0x1f202,
+	0x1f210, 0x1f23b,
+	0x1f240, 0x1f248,
+	0x1f250, 0x1f251,
+	0x1f260, 0x1f265,
+	0x1f300, 0x1f6d5,
+	0x1f6e0, 0x1f6ec,
+	0x1f6f0, 0x1f6fa,
+	0x1f700, 0x1f773,
+	0x1f780, 0x1f7d8,
+	0x1f7e0, 0x1f7eb,
+	0x1f800, 0x1f80b,
+	0x1f810, 0x1f847,
+	0x1f850, 0x1f859,
+	0x1f860, 0x1f887,
+	0x1f890, 0x1f8ad,
+	0x1f900, 0x1f90b,
+	0x1f90d, 0x1f971,
+	0x1f973, 0x1f976,
+	0x1f97a, 0x1f9a2,
+	0x1f9a5, 0x1f9aa,
+	0x1f9ae, 0x1f9ca,
+	0x1f9cd, 0x1fa53,
+	0x1fa60, 0x1fa6d,
+	0x1fa70, 0x1fa73,
+	0x1fa78, 0x1fa7a,
+	0x1fa80, 0x1fa82,
+	0x1fa90, 0x1fa95,
+	0x1fffe, 0x2a6d6,
+	0x2a700, 0x2b734,
+	0x2b740, 0x2b81d,
+	0x2b820, 0x2cea1,
+	0x2ceb0, 0x2ebe0,
+	0x2f800, 0x2fa1d,
+	0x2fffe, 0x2ffff,
+	0x3fffe, 0x3ffff,
+	0x4fffe, 0x4ffff,
+	0x5fffe, 0x5ffff,
+	0x6fffe, 0x6ffff,
+	0x7fffe, 0x7ffff,
+	0x8fffe, 0x8ffff,
+	0x9fffe, 0x9ffff,
+	0xafffe, 0xaffff,
+	0xbfffe, 0xbffff,
+	0xcfffe, 0xcffff,
+	0xdfffe, 0xdffff,
+	0xe0001, 0xe0001,
+	0xe0020, 0xe007f,
+	0xe0100, 0xe01ef,
+	0xefffe, 0x10ffff,
+}; /* CR_Age_12_1 */
+
+#endif /* USE_UNICODE_AGE_PROPERTIES */
+/* 'Grapheme_Cluster_Break_Prepend': Grapheme_Cluster_Break=Prepend */
+static const OnigCodePoint CR_Grapheme_Cluster_Break_Prepend[] = {
+	11,
+	0x0600, 0x0605,
+	0x06dd, 0x06dd,
+	0x070f, 0x070f,
+	0x08e2, 0x08e2,
+	0x0d4e, 0x0d4e,
+	0x110bd, 0x110bd,
+	0x110cd, 0x110cd,
+	0x111c2, 0x111c3,
+	0x11a3a, 0x11a3a,
+	0x11a84, 0x11a89,
+	0x11d46, 0x11d46,
+}; /* CR_Grapheme_Cluster_Break_Prepend */
+
+/* 'Grapheme_Cluster_Break_CR': Grapheme_Cluster_Break=CR */
+static const OnigCodePoint CR_Grapheme_Cluster_Break_CR[] = {
+	1,
+	0x000d, 0x000d,
+}; /* CR_Grapheme_Cluster_Break_CR */
+
+/* 'Grapheme_Cluster_Break_LF': Grapheme_Cluster_Break=LF */
+#define CR_Grapheme_Cluster_Break_LF CR_NEWLINE
+
+/* 'Grapheme_Cluster_Break_Control': Grapheme_Cluster_Break=Control */
+static const OnigCodePoint CR_Grapheme_Cluster_Break_Control[] = {
+	19,
+	0x0000, 0x0009,
+	0x000b, 0x000c,
+	0x000e, 0x001f,
+	0x007f, 0x009f,
+	0x00ad, 0x00ad,
+	0x061c, 0x061c,
+	0x180e, 0x180e,
+	0x200b, 0x200b,
+	0x200e, 0x200f,
+	0x2028, 0x202e,
+	0x2060, 0x206f,
+	0xfeff, 0xfeff,
+	0xfff0, 0xfffb,
+	0x13430, 0x13438,
+	0x1bca0, 0x1bca3,
+	0x1d173, 0x1d17a,
+	0xe0000, 0xe001f,
+	0xe0080, 0xe00ff,
+	0xe01f0, 0xe0fff,
+}; /* CR_Grapheme_Cluster_Break_Control */
+
+/* 'Grapheme_Cluster_Break_Extend': Grapheme_Cluster_Break=Extend */
+static const OnigCodePoint CR_Grapheme_Cluster_Break_Extend[] = {
+	336,
+	0x0300, 0x036f,
+	0x0483, 0x0489,
+	0x0591, 0x05bd,
+	0x05bf, 0x05bf,
+	0x05c1, 0x05c2,
+	0x05c4, 0x05c5,
+	0x05c7, 0x05c7,
+	0x0610, 0x061a,
+	0x064b, 0x065f,
+	0x0670, 0x0670,
+	0x06d6, 0x06dc,
+	0x06df, 0x06e4,
+	0x06e7, 0x06e8,
+	0x06ea, 0x06ed,
+	0x0711, 0x0711,
+	0x0730, 0x074a,
+	0x07a6, 0x07b0,
+	0x07eb, 0x07f3,
+	0x07fd, 0x07fd,
+	0x0816, 0x0819,
+	0x081b, 0x0823,
+	0x0825, 0x0827,
+	0x0829, 0x082d,
+	0x0859, 0x085b,
+	0x08d3, 0x08e1,
+	0x08e3, 0x0902,
+	0x093a, 0x093a,
+	0x093c, 0x093c,
+	0x0941, 0x0948,
+	0x094d, 0x094d,
+	0x0951, 0x0957,
+	0x0962, 0x0963,
+	0x0981, 0x0981,
+	0x09bc, 0x09bc,
+	0x09be, 0x09be,
+	0x09c1, 0x09c4,
+	0x09cd, 0x09cd,
+	0x09d7, 0x09d7,
+	0x09e2, 0x09e3,
+	0x09fe, 0x09fe,
+	0x0a01, 0x0a02,
+	0x0a3c, 0x0a3c,
+	0x0a41, 0x0a42,
+	0x0a47, 0x0a48,
+	0x0a4b, 0x0a4d,
+	0x0a51, 0x0a51,
+	0x0a70, 0x0a71,
+	0x0a75, 0x0a75,
+	0x0a81, 0x0a82,
+	0x0abc, 0x0abc,
+	0x0ac1, 0x0ac5,
+	0x0ac7, 0x0ac8,
+	0x0acd, 0x0acd,
+	0x0ae2, 0x0ae3,
+	0x0afa, 0x0aff,
+	0x0b01, 0x0b01,
+	0x0b3c, 0x0b3c,
+	0x0b3e, 0x0b3f,
+	0x0b41, 0x0b44,
+	0x0b4d, 0x0b4d,
+	0x0b56, 0x0b57,
+	0x0b62, 0x0b63,
+	0x0b82, 0x0b82,
+	0x0bbe, 0x0bbe,
+	0x0bc0, 0x0bc0,
+	0x0bcd, 0x0bcd,
+	0x0bd7, 0x0bd7,
+	0x0c00, 0x0c00,
+	0x0c04, 0x0c04,
+	0x0c3e, 0x0c40,
+	0x0c46, 0x0c48,
+	0x0c4a, 0x0c4d,
+	0x0c55, 0x0c56,
+	0x0c62, 0x0c63,
+	0x0c81, 0x0c81,
+	0x0cbc, 0x0cbc,
+	0x0cbf, 0x0cbf,
+	0x0cc2, 0x0cc2,
+	0x0cc6, 0x0cc6,
+	0x0ccc, 0x0ccd,
+	0x0cd5, 0x0cd6,
+	0x0ce2, 0x0ce3,
+	0x0d00, 0x0d01,
+	0x0d3b, 0x0d3c,
+	0x0d3e, 0x0d3e,
+	0x0d41, 0x0d44,
+	0x0d4d, 0x0d4d,
+	0x0d57, 0x0d57,
+	0x0d62, 0x0d63,
+	0x0dca, 0x0dca,
+	0x0dcf, 0x0dcf,
+	0x0dd2, 0x0dd4,
+	0x0dd6, 0x0dd6,
+	0x0ddf, 0x0ddf,
+	0x0e31, 0x0e31,
+	0x0e34, 0x0e3a,
+	0x0e47, 0x0e4e,
+	0x0eb1, 0x0eb1,
+	0x0eb4, 0x0ebc,
+	0x0ec8, 0x0ecd,
+	0x0f18, 0x0f19,
+	0x0f35, 0x0f35,
+	0x0f37, 0x0f37,
+	0x0f39, 0x0f39,
+	0x0f71, 0x0f7e,
+	0x0f80, 0x0f84,
+	0x0f86, 0x0f87,
+	0x0f8d, 0x0f97,
+	0x0f99, 0x0fbc,
+	0x0fc6, 0x0fc6,
+	0x102d, 0x1030,
+	0x1032, 0x1037,
+	0x1039, 0x103a,
+	0x103d, 0x103e,
+	0x1058, 0x1059,
+	0x105e, 0x1060,
+	0x1071, 0x1074,
+	0x1082, 0x1082,
+	0x1085, 0x1086,
+	0x108d, 0x108d,
+	0x109d, 0x109d,
+	0x135d, 0x135f,
+	0x1712, 0x1714,
+	0x1732, 0x1734,
+	0x1752, 0x1753,
+	0x1772, 0x1773,
+	0x17b4, 0x17b5,
+	0x17b7, 0x17bd,
+	0x17c6, 0x17c6,
+	0x17c9, 0x17d3,
+	0x17dd, 0x17dd,
+	0x180b, 0x180d,
+	0x1885, 0x1886,
+	0x18a9, 0x18a9,
+	0x1920, 0x1922,
+	0x1927, 0x1928,
+	0x1932, 0x1932,
+	0x1939, 0x193b,
+	0x1a17, 0x1a18,
+	0x1a1b, 0x1a1b,
+	0x1a56, 0x1a56,
+	0x1a58, 0x1a5e,
+	0x1a60, 0x1a60,
+	0x1a62, 0x1a62,
+	0x1a65, 0x1a6c,
+	0x1a73, 0x1a7c,
+	0x1a7f, 0x1a7f,
+	0x1ab0, 0x1abe,
+	0x1b00, 0x1b03,
+	0x1b34, 0x1b3a,
+	0x1b3c, 0x1b3c,
+	0x1b42, 0x1b42,
+	0x1b6b, 0x1b73,
+	0x1b80, 0x1b81,
+	0x1ba2, 0x1ba5,
+	0x1ba8, 0x1ba9,
+	0x1bab, 0x1bad,
+	0x1be6, 0x1be6,
+	0x1be8, 0x1be9,
+	0x1bed, 0x1bed,
+	0x1bef, 0x1bf1,
+	0x1c2c, 0x1c33,
+	0x1c36, 0x1c37,
+	0x1cd0, 0x1cd2,
+	0x1cd4, 0x1ce0,
+	0x1ce2, 0x1ce8,
+	0x1ced, 0x1ced,
+	0x1cf4, 0x1cf4,
+	0x1cf8, 0x1cf9,
+	0x1dc0, 0x1df9,
+	0x1dfb, 0x1dff,
+	0x200c, 0x200c,
+	0x20d0, 0x20f0,
+	0x2cef, 0x2cf1,
+	0x2d7f, 0x2d7f,
+	0x2de0, 0x2dff,
+	0x302a, 0x302f,
+	0x3099, 0x309a,
+	0xa66f, 0xa672,
+	0xa674, 0xa67d,
+	0xa69e, 0xa69f,
+	0xa6f0, 0xa6f1,
+	0xa802, 0xa802,
+	0xa806, 0xa806,
+	0xa80b, 0xa80b,
+	0xa825, 0xa826,
+	0xa8c4, 0xa8c5,
+	0xa8e0, 0xa8f1,
+	0xa8ff, 0xa8ff,
+	0xa926, 0xa92d,
+	0xa947, 0xa951,
+	0xa980, 0xa982,
+	0xa9b3, 0xa9b3,
+	0xa9b6, 0xa9b9,
+	0xa9bc, 0xa9bd,
+	0xa9e5, 0xa9e5,
+	0xaa29, 0xaa2e,
+	0xaa31, 0xaa32,
+	0xaa35, 0xaa36,
+	0xaa43, 0xaa43,
+	0xaa4c, 0xaa4c,
+	0xaa7c, 0xaa7c,
+	0xaab0, 0xaab0,
+	0xaab2, 0xaab4,
+	0xaab7, 0xaab8,
+	0xaabe, 0xaabf,
+	0xaac1, 0xaac1,
+	0xaaec, 0xaaed,
+	0xaaf6, 0xaaf6,
+	0xabe5, 0xabe5,
+	0xabe8, 0xabe8,
+	0xabed, 0xabed,
+	0xfb1e, 0xfb1e,
+	0xfe00, 0xfe0f,
+	0xfe20, 0xfe2f,
+	0xff9e, 0xff9f,
+	0x101fd, 0x101fd,
+	0x102e0, 0x102e0,
+	0x10376, 0x1037a,
+	0x10a01, 0x10a03,
+	0x10a05, 0x10a06,
+	0x10a0c, 0x10a0f,
+	0x10a38, 0x10a3a,
+	0x10a3f, 0x10a3f,
+	0x10ae5, 0x10ae6,
+	0x10d24, 0x10d27,
+	0x10f46, 0x10f50,
+	0x11001, 0x11001,
+	0x11038, 0x11046,
+	0x1107f, 0x11081,
+	0x110b3, 0x110b6,
+	0x110b9, 0x110ba,
+	0x11100, 0x11102,
+	0x11127, 0x1112b,
+	0x1112d, 0x11134,
+	0x11173, 0x11173,
+	0x11180, 0x11181,
+	0x111b6, 0x111be,
+	0x111c9, 0x111cc,
+	0x1122f, 0x11231,
+	0x11234, 0x11234,
+	0x11236, 0x11237,
+	0x1123e, 0x1123e,
+	0x112df, 0x112df,
+	0x112e3, 0x112ea,
+	0x11300, 0x11301,
+	0x1133b, 0x1133c,
+	0x1133e, 0x1133e,
+	0x11340, 0x11340,
+	0x11357, 0x11357,
+	0x11366, 0x1136c,
+	0x11370, 0x11374,
+	0x11438, 0x1143f,
+	0x11442, 0x11444,
+	0x11446, 0x11446,
+	0x1145e, 0x1145e,
+	0x114b0, 0x114b0,
+	0x114b3, 0x114b8,
+	0x114ba, 0x114ba,
+	0x114bd, 0x114bd,
+	0x114bf, 0x114c0,
+	0x114c2, 0x114c3,
+	0x115af, 0x115af,
+	0x115b2, 0x115b5,
+	0x115bc, 0x115bd,
+	0x115bf, 0x115c0,
+	0x115dc, 0x115dd,
+	0x11633, 0x1163a,
+	0x1163d, 0x1163d,
+	0x1163f, 0x11640,
+	0x116ab, 0x116ab,
+	0x116ad, 0x116ad,
+	0x116b0, 0x116b5,
+	0x116b7, 0x116b7,
+	0x1171d, 0x1171f,
+	0x11722, 0x11725,
+	0x11727, 0x1172b,
+	0x1182f, 0x11837,
+	0x11839, 0x1183a,
+	0x119d4, 0x119d7,
+	0x119da, 0x119db,
+	0x119e0, 0x119e0,
+	0x11a01, 0x11a0a,
+	0x11a33, 0x11a38,
+	0x11a3b, 0x11a3e,
+	0x11a47, 0x11a47,
+	0x11a51, 0x11a56,
+	0x11a59, 0x11a5b,
+	0x11a8a, 0x11a96,
+	0x11a98, 0x11a99,
+	0x11c30, 0x11c36,
+	0x11c38, 0x11c3d,
+	0x11c3f, 0x11c3f,
+	0x11c92, 0x11ca7,
+	0x11caa, 0x11cb0,
+	0x11cb2, 0x11cb3,
+	0x11cb5, 0x11cb6,
+	0x11d31, 0x11d36,
+	0x11d3a, 0x11d3a,
+	0x11d3c, 0x11d3d,
+	0x11d3f, 0x11d45,
+	0x11d47, 0x11d47,
+	0x11d90, 0x11d91,
+	0x11d95, 0x11d95,
+	0x11d97, 0x11d97,
+	0x11ef3, 0x11ef4,
+	0x16af0, 0x16af4,
+	0x16b30, 0x16b36,
+	0x16f4f, 0x16f4f,
+	0x16f8f, 0x16f92,
+	0x1bc9d, 0x1bc9e,
+	0x1d165, 0x1d165,
+	0x1d167, 0x1d169,
+	0x1d16e, 0x1d172,
+	0x1d17b, 0x1d182,
+	0x1d185, 0x1d18b,
+	0x1d1aa, 0x1d1ad,
+	0x1d242, 0x1d244,
+	0x1da00, 0x1da36,
+	0x1da3b, 0x1da6c,
+	0x1da75, 0x1da75,
+	0x1da84, 0x1da84,
+	0x1da9b, 0x1da9f,
+	0x1daa1, 0x1daaf,
+	0x1e000, 0x1e006,
+	0x1e008, 0x1e018,
+	0x1e01b, 0x1e021,
+	0x1e023, 0x1e024,
+	0x1e026, 0x1e02a,
+	0x1e130, 0x1e136,
+	0x1e2ec, 0x1e2ef,
+	0x1e8d0, 0x1e8d6,
+	0x1e944, 0x1e94a,
+	0x1f3fb, 0x1f3ff,
+	0xe0020, 0xe007f,
+	0xe0100, 0xe01ef,
+}; /* CR_Grapheme_Cluster_Break_Extend */
+
+/* 'Grapheme_Cluster_Break_Regional_Indicator': Grapheme_Cluster_Break=Regional_Indicator */
+#define CR_Grapheme_Cluster_Break_Regional_Indicator CR_Regional_Indicator
+
+/* 'Grapheme_Cluster_Break_SpacingMark': Grapheme_Cluster_Break=SpacingMark */
+static const OnigCodePoint CR_Grapheme_Cluster_Break_SpacingMark[] = {
+	152,
+	0x0903, 0x0903,
+	0x093b, 0x093b,
+	0x093e, 0x0940,
+	0x0949, 0x094c,
+	0x094e, 0x094f,
+	0x0982, 0x0983,
+	0x09bf, 0x09c0,
+	0x09c7, 0x09c8,
+	0x09cb, 0x09cc,
+	0x0a03, 0x0a03,
+	0x0a3e, 0x0a40,
+	0x0a83, 0x0a83,
+	0x0abe, 0x0ac0,
+	0x0ac9, 0x0ac9,
+	0x0acb, 0x0acc,
+	0x0b02, 0x0b03,
+	0x0b40, 0x0b40,
+	0x0b47, 0x0b48,
+	0x0b4b, 0x0b4c,
+	0x0bbf, 0x0bbf,
+	0x0bc1, 0x0bc2,
+	0x0bc6, 0x0bc8,
+	0x0bca, 0x0bcc,
+	0x0c01, 0x0c03,
+	0x0c41, 0x0c44,
+	0x0c82, 0x0c83,
+	0x0cbe, 0x0cbe,
+	0x0cc0, 0x0cc1,
+	0x0cc3, 0x0cc4,
+	0x0cc7, 0x0cc8,
+	0x0cca, 0x0ccb,
+	0x0d02, 0x0d03,
+	0x0d3f, 0x0d40,
+	0x0d46, 0x0d48,
+	0x0d4a, 0x0d4c,
+	0x0d82, 0x0d83,
+	0x0dd0, 0x0dd1,
+	0x0dd8, 0x0dde,
+	0x0df2, 0x0df3,
+	0x0e33, 0x0e33,
+	0x0eb3, 0x0eb3,
+	0x0f3e, 0x0f3f,
+	0x0f7f, 0x0f7f,
+	0x1031, 0x1031,
+	0x103b, 0x103c,
+	0x1056, 0x1057,
+	0x1084, 0x1084,
+	0x17b6, 0x17b6,
+	0x17be, 0x17c5,
+	0x17c7, 0x17c8,
+	0x1923, 0x1926,
+	0x1929, 0x192b,
+	0x1930, 0x1931,
+	0x1933, 0x1938,
+	0x1a19, 0x1a1a,
+	0x1a55, 0x1a55,
+	0x1a57, 0x1a57,
+	0x1a6d, 0x1a72,
+	0x1b04, 0x1b04,
+	0x1b3b, 0x1b3b,
+	0x1b3d, 0x1b41,
+	0x1b43, 0x1b44,
+	0x1b82, 0x1b82,
+	0x1ba1, 0x1ba1,
+	0x1ba6, 0x1ba7,
+	0x1baa, 0x1baa,
+	0x1be7, 0x1be7,
+	0x1bea, 0x1bec,
+	0x1bee, 0x1bee,
+	0x1bf2, 0x1bf3,
+	0x1c24, 0x1c2b,
+	0x1c34, 0x1c35,
+	0x1ce1, 0x1ce1,
+	0x1cf7, 0x1cf7,
+	0xa823, 0xa824,
+	0xa827, 0xa827,
+	0xa880, 0xa881,
+	0xa8b4, 0xa8c3,
+	0xa952, 0xa953,
+	0xa983, 0xa983,
+	0xa9b4, 0xa9b5,
+	0xa9ba, 0xa9bb,
+	0xa9be, 0xa9c0,
+	0xaa2f, 0xaa30,
+	0xaa33, 0xaa34,
+	0xaa4d, 0xaa4d,
+	0xaaeb, 0xaaeb,
+	0xaaee, 0xaaef,
+	0xaaf5, 0xaaf5,
+	0xabe3, 0xabe4,
+	0xabe6, 0xabe7,
+	0xabe9, 0xabea,
+	0xabec, 0xabec,
+	0x11000, 0x11000,
+	0x11002, 0x11002,
+	0x11082, 0x11082,
+	0x110b0, 0x110b2,
+	0x110b7, 0x110b8,
+	0x1112c, 0x1112c,
+	0x11145, 0x11146,
+	0x11182, 0x11182,
+	0x111b3, 0x111b5,
+	0x111bf, 0x111c0,
+	0x1122c, 0x1122e,
+	0x11232, 0x11233,
+	0x11235, 0x11235,
+	0x112e0, 0x112e2,
+	0x11302, 0x11303,
+	0x1133f, 0x1133f,
+	0x11341, 0x11344,
+	0x11347, 0x11348,
+	0x1134b, 0x1134d,
+	0x11362, 0x11363,
+	0x11435, 0x11437,
+	0x11440, 0x11441,
+	0x11445, 0x11445,
+	0x114b1, 0x114b2,
+	0x114b9, 0x114b9,
+	0x114bb, 0x114bc,
+	0x114be, 0x114be,
+	0x114c1, 0x114c1,
+	0x115b0, 0x115b1,
+	0x115b8, 0x115bb,
+	0x115be, 0x115be,
+	0x11630, 0x11632,
+	0x1163b, 0x1163c,
+	0x1163e, 0x1163e,
+	0x116ac, 0x116ac,
+	0x116ae, 0x116af,
+	0x116b6, 0x116b6,
+	0x11720, 0x11721,
+	0x11726, 0x11726,
+	0x1182c, 0x1182e,
+	0x11838, 0x11838,
+	0x119d1, 0x119d3,
+	0x119dc, 0x119df,
+	0x119e4, 0x119e4,
+	0x11a39, 0x11a39,
+	0x11a57, 0x11a58,
+	0x11a97, 0x11a97,
+	0x11c2f, 0x11c2f,
+	0x11c3e, 0x11c3e,
+	0x11ca9, 0x11ca9,
+	0x11cb1, 0x11cb1,
+	0x11cb4, 0x11cb4,
+	0x11d8a, 0x11d8e,
+	0x11d93, 0x11d94,
+	0x11d96, 0x11d96,
+	0x11ef5, 0x11ef6,
+	0x16f51, 0x16f87,
+	0x1d166, 0x1d166,
+	0x1d16d, 0x1d16d,
+}; /* CR_Grapheme_Cluster_Break_SpacingMark */
+
+/* 'Grapheme_Cluster_Break_L': Grapheme_Cluster_Break=L */
+static const OnigCodePoint CR_Grapheme_Cluster_Break_L[] = {
+	2,
+	0x1100, 0x115f,
+	0xa960, 0xa97c,
+}; /* CR_Grapheme_Cluster_Break_L */
+
+/* 'Grapheme_Cluster_Break_V': Grapheme_Cluster_Break=V */
+static const OnigCodePoint CR_Grapheme_Cluster_Break_V[] = {
+	2,
+	0x1160, 0x11a7,
+	0xd7b0, 0xd7c6,
+}; /* CR_Grapheme_Cluster_Break_V */
+
+/* 'Grapheme_Cluster_Break_T': Grapheme_Cluster_Break=T */
+static const OnigCodePoint CR_Grapheme_Cluster_Break_T[] = {
+	2,
+	0x11a8, 0x11ff,
+	0xd7cb, 0xd7fb,
+}; /* CR_Grapheme_Cluster_Break_T */
+
+/* 'Grapheme_Cluster_Break_LV': Grapheme_Cluster_Break=LV */
+static const OnigCodePoint CR_Grapheme_Cluster_Break_LV[] = {
+	399,
+	0xac00, 0xac00,
+	0xac1c, 0xac1c,
+	0xac38, 0xac38,
+	0xac54, 0xac54,
+	0xac70, 0xac70,
+	0xac8c, 0xac8c,
 	0xaca8, 0xaca8,
 	0xacc4, 0xacc4,
 	0xace0, 0xace0,
@@ -31075,65 +35584,12 @@ static const OnigCodePoint CR_Grapheme_Cluster_Break_LVT[] = {
 	0xd789, 0xd7a3,
 }; /* CR_Grapheme_Cluster_Break_LVT */
 
-/* 'Grapheme_Cluster_Break_E_Base': Grapheme_Cluster_Break=E_Base */
-static const OnigCodePoint CR_Grapheme_Cluster_Break_E_Base[] = {
-	28,
-	0x261d, 0x261d,
-	0x26f9, 0x26f9,
-	0x270a, 0x270d,
-	0x1f385, 0x1f385,
-	0x1f3c3, 0x1f3c4,
-	0x1f3ca, 0x1f3cb,
-	0x1f442, 0x1f443,
-	0x1f446, 0x1f450,
-	0x1f46e, 0x1f46e,
-	0x1f470, 0x1f478,
-	0x1f47c, 0x1f47c,
-	0x1f481, 0x1f483,
-	0x1f485, 0x1f487,
-	0x1f4aa, 0x1f4aa,
-	0x1f575, 0x1f575,
-	0x1f57a, 0x1f57a,
-	0x1f590, 0x1f590,
-	0x1f595, 0x1f596,
-	0x1f645, 0x1f647,
-	0x1f64b, 0x1f64f,
-	0x1f6a3, 0x1f6a3,
-	0x1f6b4, 0x1f6b6,
-	0x1f6c0, 0x1f6c0,
-	0x1f918, 0x1f91e,
-	0x1f926, 0x1f926,
-	0x1f930, 0x1f930,
-	0x1f933, 0x1f939,
-	0x1f93c, 0x1f93e,
-}; /* CR_Grapheme_Cluster_Break_E_Base */
-
-/* 'Grapheme_Cluster_Break_E_Modifier': Grapheme_Cluster_Break=E_Modifier */
-static const OnigCodePoint CR_Grapheme_Cluster_Break_E_Modifier[] = {
-	1,
-	0x1f3fb, 0x1f3ff,
-}; /* CR_Grapheme_Cluster_Break_E_Modifier */
-
 /* 'Grapheme_Cluster_Break_ZWJ': Grapheme_Cluster_Break=ZWJ */
 static const OnigCodePoint CR_Grapheme_Cluster_Break_ZWJ[] = {
 	1,
 	0x200d, 0x200d,
 }; /* CR_Grapheme_Cluster_Break_ZWJ */
 
-/* 'Grapheme_Cluster_Break_Glue_After_Zwj': Grapheme_Cluster_Break=Glue_After_Zwj */
-static const OnigCodePoint CR_Grapheme_Cluster_Break_Glue_After_Zwj[] = {
-	3,
-	0x2764, 0x2764,
-	0x1f48b, 0x1f48b,
-	0x1f5e8, 0x1f5e8,
-}; /* CR_Grapheme_Cluster_Break_Glue_After_Zwj */
-
-/* 'Grapheme_Cluster_Break_E_Base_GAZ': Grapheme_Cluster_Break=E_Base_GAZ */
-static const OnigCodePoint CR_Grapheme_Cluster_Break_E_Base_GAZ[] = {
-	1,
-	0x1f466, 0x1f469,
-}; /* CR_Grapheme_Cluster_Break_E_Base_GAZ */
-
 /* 'In_Basic_Latin': Block */
 #define CR_In_Basic_Latin CR_ASCII
 
@@ -31245,6 +35701,12 @@ static const OnigCodePoint CR_In_Mandaic[] = {
 	0x0840, 0x085f,
 }; /* CR_In_Mandaic */
 
+/* 'In_Syriac_Supplement': Block */
+static const OnigCodePoint CR_In_Syriac_Supplement[] = {
+	1,
+	0x0860, 0x086f,
+}; /* CR_In_Syriac_Supplement */
+
 /* 'In_Arabic_Extended_A': Block */
 static const OnigCodePoint CR_In_Arabic_Extended_A[] = {
 	1,
@@ -31500,6 +35962,12 @@ static const OnigCodePoint CR_In_Cyrillic_Extended_C[] = {
 	0x1c80, 0x1c8f,
 }; /* CR_In_Cyrillic_Extended_C */
 
+/* 'In_Georgian_Extended': Block */
+static const OnigCodePoint CR_In_Georgian_Extended[] = {
+	1,
+	0x1c90, 0x1cbf,
+}; /* CR_In_Georgian_Extended */
+
 /* 'In_Sundanese_Supplement': Block */
 static const OnigCodePoint CR_In_Sundanese_Supplement[] = {
 	1,
@@ -32310,12 +36778,36 @@ static const OnigCodePoint CR_In_Old_Hungarian[] = {
 	0x10c80, 0x10cff,
 }; /* CR_In_Old_Hungarian */
 
+/* 'In_Hanifi_Rohingya': Block */
+static const OnigCodePoint CR_In_Hanifi_Rohingya[] = {
+	1,
+	0x10d00, 0x10d3f,
+}; /* CR_In_Hanifi_Rohingya */
+
 /* 'In_Rumi_Numeral_Symbols': Block */
 static const OnigCodePoint CR_In_Rumi_Numeral_Symbols[] = {
 	1,
 	0x10e60, 0x10e7f,
 }; /* CR_In_Rumi_Numeral_Symbols */
 
+/* 'In_Old_Sogdian': Block */
+static const OnigCodePoint CR_In_Old_Sogdian[] = {
+	1,
+	0x10f00, 0x10f2f,
+}; /* CR_In_Old_Sogdian */
+
+/* 'In_Sogdian': Block */
+static const OnigCodePoint CR_In_Sogdian[] = {
+	1,
+	0x10f30, 0x10f6f,
+}; /* CR_In_Sogdian */
+
+/* 'In_Elymaic': Block */
+static const OnigCodePoint CR_In_Elymaic[] = {
+	1,
+	0x10fe0, 0x10fff,
+}; /* CR_In_Elymaic */
+
 /* 'In_Brahmi': Block */
 static const OnigCodePoint CR_In_Brahmi[] = {
 	1,
@@ -32424,12 +36916,36 @@ static const OnigCodePoint CR_In_Ahom[] = {
 	0x11700, 0x1173f,
 }; /* CR_In_Ahom */
 
+/* 'In_Dogra': Block */
+static const OnigCodePoint CR_In_Dogra[] = {
+	1,
+	0x11800, 0x1184f,
+}; /* CR_In_Dogra */
+
 /* 'In_Warang_Citi': Block */
 static const OnigCodePoint CR_In_Warang_Citi[] = {
 	1,
 	0x118a0, 0x118ff,
 }; /* CR_In_Warang_Citi */
 
+/* 'In_Nandinagari': Block */
+static const OnigCodePoint CR_In_Nandinagari[] = {
+	1,
+	0x119a0, 0x119ff,
+}; /* CR_In_Nandinagari */
+
+/* 'In_Zanabazar_Square': Block */
+static const OnigCodePoint CR_In_Zanabazar_Square[] = {
+	1,
+	0x11a00, 0x11a4f,
+}; /* CR_In_Zanabazar_Square */
+
+/* 'In_Soyombo': Block */
+static const OnigCodePoint CR_In_Soyombo[] = {
+	1,
+	0x11a50, 0x11aaf,
+}; /* CR_In_Soyombo */
+
 /* 'In_Pau_Cin_Hau': Block */
 static const OnigCodePoint CR_In_Pau_Cin_Hau[] = {
 	1,
@@ -32448,6 +36964,30 @@ static const OnigCodePoint CR_In_Marchen[] = {
 	0x11c70, 0x11cbf,
 }; /* CR_In_Marchen */
 
+/* 'In_Masaram_Gondi': Block */
+static const OnigCodePoint CR_In_Masaram_Gondi[] = {
+	1,
+	0x11d00, 0x11d5f,
+}; /* CR_In_Masaram_Gondi */
+
+/* 'In_Gunjala_Gondi': Block */
+static const OnigCodePoint CR_In_Gunjala_Gondi[] = {
+	1,
+	0x11d60, 0x11daf,
+}; /* CR_In_Gunjala_Gondi */
+
+/* 'In_Makasar': Block */
+static const OnigCodePoint CR_In_Makasar[] = {
+	1,
+	0x11ee0, 0x11eff,
+}; /* CR_In_Makasar */
+
+/* 'In_Tamil_Supplement': Block */
+static const OnigCodePoint CR_In_Tamil_Supplement[] = {
+	1,
+	0x11fc0, 0x11fff,
+}; /* CR_In_Tamil_Supplement */
+
 /* 'In_Cuneiform': Block */
 static const OnigCodePoint CR_In_Cuneiform[] = {
 	1,
@@ -32472,6 +37012,12 @@ static const OnigCodePoint CR_In_Egyptian_Hieroglyphs[] = {
 	0x13000, 0x1342f,
 }; /* CR_In_Egyptian_Hieroglyphs */
 
+/* 'In_Egyptian_Hieroglyph_Format_Controls': Block */
+static const OnigCodePoint CR_In_Egyptian_Hieroglyph_Format_Controls[] = {
+	1,
+	0x13430, 0x1343f,
+}; /* CR_In_Egyptian_Hieroglyph_Format_Controls */
+
 /* 'In_Anatolian_Hieroglyphs': Block */
 static const OnigCodePoint CR_In_Anatolian_Hieroglyphs[] = {
 	1,
@@ -32502,6 +37048,12 @@ static const OnigCodePoint CR_In_Pahawh_Hmong[] = {
 	0x16b00, 0x16b8f,
 }; /* CR_In_Pahawh_Hmong */
 
+/* 'In_Medefaidrin': Block */
+static const OnigCodePoint CR_In_Medefaidrin[] = {
+	1,
+	0x16e40, 0x16e9f,
+}; /* CR_In_Medefaidrin */
+
 /* 'In_Miao': Block */
 static const OnigCodePoint CR_In_Miao[] = {
 	1,
@@ -32532,6 +37084,24 @@ static const OnigCodePoint CR_In_Kana_Supplement[] = {
 	0x1b000, 0x1b0ff,
 }; /* CR_In_Kana_Supplement */
 
+/* 'In_Kana_Extended_A': Block */
+static const OnigCodePoint CR_In_Kana_Extended_A[] = {
+	1,
+	0x1b100, 0x1b12f,
+}; /* CR_In_Kana_Extended_A */
+
+/* 'In_Small_Kana_Extension': Block */
+static const OnigCodePoint CR_In_Small_Kana_Extension[] = {
+	1,
+	0x1b130, 0x1b16f,
+}; /* CR_In_Small_Kana_Extension */
+
+/* 'In_Nushu': Block */
+static const OnigCodePoint CR_In_Nushu[] = {
+	1,
+	0x1b170, 0x1b2ff,
+}; /* CR_In_Nushu */
+
 /* 'In_Duployan': Block */
 static const OnigCodePoint CR_In_Duployan[] = {
 	1,
@@ -32562,6 +37132,12 @@ static const OnigCodePoint CR_In_Ancient_Greek_Musical_Notation[] = {
 	0x1d200, 0x1d24f,
 }; /* CR_In_Ancient_Greek_Musical_Notation */
 
+/* 'In_Mayan_Numerals': Block */
+static const OnigCodePoint CR_In_Mayan_Numerals[] = {
+	1,
+	0x1d2e0, 0x1d2ff,
+}; /* CR_In_Mayan_Numerals */
+
 /* 'In_Tai_Xuan_Jing_Symbols': Block */
 static const OnigCodePoint CR_In_Tai_Xuan_Jing_Symbols[] = {
 	1,
@@ -32592,6 +37168,18 @@ static const OnigCodePoint CR_In_Glagolitic_Supplement[] = {
 	0x1e000, 0x1e02f,
 }; /* CR_In_Glagolitic_Supplement */
 
+/* 'In_Nyiakeng_Puachue_Hmong': Block */
+static const OnigCodePoint CR_In_Nyiakeng_Puachue_Hmong[] = {
+	1,
+	0x1e100, 0x1e14f,
+}; /* CR_In_Nyiakeng_Puachue_Hmong */
+
+/* 'In_Wancho': Block */
+static const OnigCodePoint CR_In_Wancho[] = {
+	1,
+	0x1e2c0, 0x1e2ff,
+}; /* CR_In_Wancho */
+
 /* 'In_Mende_Kikakui': Block */
 static const OnigCodePoint CR_In_Mende_Kikakui[] = {
 	1,
@@ -32604,6 +37192,18 @@ static const OnigCodePoint CR_In_Adlam[] = {
 	0x1e900, 0x1e95f,
 }; /* CR_In_Adlam */
 
+/* 'In_Indic_Siyaq_Numbers': Block */
+static const OnigCodePoint CR_In_Indic_Siyaq_Numbers[] = {
+	1,
+	0x1ec70, 0x1ecbf,
+}; /* CR_In_Indic_Siyaq_Numbers */
+
+/* 'In_Ottoman_Siyaq_Numbers': Block */
+static const OnigCodePoint CR_In_Ottoman_Siyaq_Numbers[] = {
+	1,
+	0x1ed00, 0x1ed4f,
+}; /* CR_In_Ottoman_Siyaq_Numbers */
+
 /* 'In_Arabic_Mathematical_Alphabetic_Symbols': Block */
 static const OnigCodePoint CR_In_Arabic_Mathematical_Alphabetic_Symbols[] = {
 	1,
@@ -32688,6 +37288,18 @@ static const OnigCodePoint CR_In_Supplemental_Symbols_and_Pictographs[] = {
 	0x1f900, 0x1f9ff,
 }; /* CR_In_Supplemental_Symbols_and_Pictographs */
 
+/* 'In_Chess_Symbols': Block */
+static const OnigCodePoint CR_In_Chess_Symbols[] = {
+	1,
+	0x1fa00, 0x1fa6f,
+}; /* CR_In_Chess_Symbols */
+
+/* 'In_Symbols_and_Pictographs_Extended_A': Block */
+static const OnigCodePoint CR_In_Symbols_and_Pictographs_Extended_A[] = {
+	1,
+	0x1fa70, 0x1faff,
+}; /* CR_In_Symbols_and_Pictographs_Extended_A */
+
 /* 'In_CJK_Unified_Ideographs_Extension_B': Block */
 static const OnigCodePoint CR_In_CJK_Unified_Ideographs_Extension_B[] = {
 	1,
@@ -32712,6 +37324,12 @@ static const OnigCodePoint CR_In_CJK_Unified_Ideographs_Extension_E[] = {
 	0x2b820, 0x2ceaf,
 }; /* CR_In_CJK_Unified_Ideographs_Extension_E */
 
+/* 'In_CJK_Unified_Ideographs_Extension_F': Block */
+static const OnigCodePoint CR_In_CJK_Unified_Ideographs_Extension_F[] = {
+	1,
+	0x2ceb0, 0x2ebef,
+}; /* CR_In_CJK_Unified_Ideographs_Extension_F */
+
 /* 'In_CJK_Compatibility_Ideographs_Supplement': Block */
 static const OnigCodePoint CR_In_CJK_Compatibility_Ideographs_Supplement[] = {
 	1,
@@ -32744,9 +37362,8 @@ static const OnigCodePoint CR_In_Supplementary_Private_Use_Area_B[] = {
 
 /* 'In_No_Block': Block */
 static const OnigCodePoint CR_In_No_Block[] = {
-	44,
-	0x0860, 0x089f,
-	0x1c90, 0x1cbf,
+	53,
+	0x0870, 0x089f,
 	0x2fe0, 0x2fef,
 	0x10200, 0x1027f,
 	0x103e0, 0x103ff,
@@ -32757,35 +37374,45 @@ static const OnigCodePoint CR_In_No_Block[] = {
 	0x10aa0, 0x10abf,
 	0x10bb0, 0x10bff,
 	0x10c50, 0x10c7f,
-	0x10d00, 0x10e5f,
-	0x10e80, 0x10fff,
+	0x10d40, 0x10e5f,
+	0x10e80, 0x10eff,
+	0x10f70, 0x10fdf,
 	0x11250, 0x1127f,
 	0x11380, 0x113ff,
 	0x114e0, 0x1157f,
 	0x116d0, 0x116ff,
-	0x11740, 0x1189f,
-	0x11900, 0x11abf,
+	0x11740, 0x117ff,
+	0x11850, 0x1189f,
+	0x11900, 0x1199f,
+	0x11ab0, 0x11abf,
 	0x11b00, 0x11bff,
-	0x11cc0, 0x11fff,
+	0x11cc0, 0x11cff,
+	0x11db0, 0x11edf,
+	0x11f00, 0x11fbf,
 	0x12550, 0x12fff,
-	0x13430, 0x143ff,
+	0x13440, 0x143ff,
 	0x14680, 0x167ff,
 	0x16a70, 0x16acf,
-	0x16b90, 0x16eff,
+	0x16b90, 0x16e3f,
+	0x16ea0, 0x16eff,
 	0x16fa0, 0x16fdf,
 	0x18b00, 0x1afff,
-	0x1b100, 0x1bbff,
+	0x1b300, 0x1bbff,
 	0x1bcb0, 0x1cfff,
-	0x1d250, 0x1d2ff,
+	0x1d250, 0x1d2df,
 	0x1d380, 0x1d3ff,
 	0x1dab0, 0x1dfff,
-	0x1e030, 0x1e7ff,
+	0x1e030, 0x1e0ff,
+	0x1e150, 0x1e2bf,
+	0x1e300, 0x1e7ff,
 	0x1e8e0, 0x1e8ff,
-	0x1e960, 0x1edff,
+	0x1e960, 0x1ec6f,
+	0x1ecc0, 0x1ecff,
+	0x1ed50, 0x1edff,
 	0x1ef00, 0x1efff,
-	0x1fa00, 0x1ffff,
+	0x1fb00, 0x1ffff,
 	0x2a6e0, 0x2a6ff,
-	0x2ceb0, 0x2f7ff,
+	0x2ebf0, 0x2f7ff,
 	0x2fa20, 0xdffff,
 	0xe0080, 0xe00ff,
 	0xe01f0, 0xeffff,
@@ -33006,6 +37633,21 @@ static const OnigCodePoint* const CodeRanges[] = {
   CR_Newa,
   CR_Osage,
   CR_Tangut,
+  CR_Masaram_Gondi,
+  CR_Nushu,
+  CR_Soyombo,
+  CR_Zanabazar_Square,
+  CR_Dogra,
+  CR_Gunjala_Gondi,
+  CR_Makasar,
+  CR_Medefaidrin,
+  CR_Hanifi_Rohingya,
+  CR_Sogdian,
+  CR_Old_Sogdian,
+  CR_Elymaic,
+  CR_Nandinagari,
+  CR_Nyiakeng_Puachue_Hmong,
+  CR_Wancho,
   CR_White_Space,
   CR_Bidi_Control,
   CR_Join_Control,
@@ -33039,6 +37681,13 @@ static const OnigCodePoint* const CodeRanges[] = {
   CR_Pattern_White_Space,
   CR_Pattern_Syntax,
   CR_Prepended_Concatenation_Mark,
+  CR_Regional_Indicator,
+  CR_Emoji,
+  CR_Emoji_Presentation,
+  CR_Emoji_Modifier,
+  CR_Emoji_Modifier_Base,
+  CR_Emoji_Component,
+  CR_Extended_Pictographic,
   CR_Unknown,
 #ifdef USE_UNICODE_AGE_PROPERTIES
   CR_Age_1_1,
@@ -33059,6 +37708,10 @@ static const OnigCodePoint* const CodeRanges[] = {
   CR_Age_7_0,
   CR_Age_8_0,
   CR_Age_9_0,
+  CR_Age_10_0,
+  CR_Age_11_0,
+  CR_Age_12_0,
+  CR_Age_12_1,
 #endif /* USE_UNICODE_AGE_PROPERTIES */
   CR_Grapheme_Cluster_Break_Prepend,
   CR_Grapheme_Cluster_Break_CR,
@@ -33072,11 +37725,7 @@ static const OnigCodePoint* const CodeRanges[] = {
   CR_Grapheme_Cluster_Break_T,
   CR_Grapheme_Cluster_Break_LV,
   CR_Grapheme_Cluster_Break_LVT,
-  CR_Grapheme_Cluster_Break_E_Base,
-  CR_Grapheme_Cluster_Break_E_Modifier,
   CR_Grapheme_Cluster_Break_ZWJ,
-  CR_Grapheme_Cluster_Break_Glue_After_Zwj,
-  CR_Grapheme_Cluster_Break_E_Base_GAZ,
   CR_In_Basic_Latin,
   CR_In_Latin_1_Supplement,
   CR_In_Latin_Extended_A,
@@ -33096,6 +37745,7 @@ static const OnigCodePoint* const CodeRanges[] = {
   CR_In_NKo,
   CR_In_Samaritan,
   CR_In_Mandaic,
+  CR_In_Syriac_Supplement,
   CR_In_Arabic_Extended_A,
   CR_In_Devanagari,
   CR_In_Bengali,
@@ -33139,6 +37789,7 @@ static const OnigCodePoint* const CodeRanges[] = {
   CR_In_Lepcha,
   CR_In_Ol_Chiki,
   CR_In_Cyrillic_Extended_C,
+  CR_In_Georgian_Extended,
   CR_In_Sundanese_Supplement,
   CR_In_Vedic_Extensions,
   CR_In_Phonetic_Extensions,
@@ -33278,7 +37929,11 @@ static const OnigCodePoint* const CodeRanges[] = {
   CR_In_Psalter_Pahlavi,
   CR_In_Old_Turkic,
   CR_In_Old_Hungarian,
+  CR_In_Hanifi_Rohingya,
   CR_In_Rumi_Numeral_Symbols,
+  CR_In_Old_Sogdian,
+  CR_In_Sogdian,
+  CR_In_Elymaic,
   CR_In_Brahmi,
   CR_In_Kaithi,
   CR_In_Sora_Sompeng,
@@ -33297,36 +37952,54 @@ static const OnigCodePoint* const CodeRanges[] = {
   CR_In_Mongolian_Supplement,
   CR_In_Takri,
   CR_In_Ahom,
+  CR_In_Dogra,
   CR_In_Warang_Citi,
+  CR_In_Nandinagari,
+  CR_In_Zanabazar_Square,
+  CR_In_Soyombo,
   CR_In_Pau_Cin_Hau,
   CR_In_Bhaiksuki,
   CR_In_Marchen,
+  CR_In_Masaram_Gondi,
+  CR_In_Gunjala_Gondi,
+  CR_In_Makasar,
+  CR_In_Tamil_Supplement,
   CR_In_Cuneiform,
   CR_In_Cuneiform_Numbers_and_Punctuation,
   CR_In_Early_Dynastic_Cuneiform,
   CR_In_Egyptian_Hieroglyphs,
+  CR_In_Egyptian_Hieroglyph_Format_Controls,
   CR_In_Anatolian_Hieroglyphs,
   CR_In_Bamum_Supplement,
   CR_In_Mro,
   CR_In_Bassa_Vah,
   CR_In_Pahawh_Hmong,
+  CR_In_Medefaidrin,
   CR_In_Miao,
   CR_In_Ideographic_Symbols_and_Punctuation,
   CR_In_Tangut,
   CR_In_Tangut_Components,
   CR_In_Kana_Supplement,
+  CR_In_Kana_Extended_A,
+  CR_In_Small_Kana_Extension,
+  CR_In_Nushu,
   CR_In_Duployan,
   CR_In_Shorthand_Format_Controls,
   CR_In_Byzantine_Musical_Symbols,
   CR_In_Musical_Symbols,
   CR_In_Ancient_Greek_Musical_Notation,
+  CR_In_Mayan_Numerals,
   CR_In_Tai_Xuan_Jing_Symbols,
   CR_In_Counting_Rod_Numerals,
   CR_In_Mathematical_Alphanumeric_Symbols,
   CR_In_Sutton_SignWriting,
   CR_In_Glagolitic_Supplement,
+  CR_In_Nyiakeng_Puachue_Hmong,
+  CR_In_Wancho,
   CR_In_Mende_Kikakui,
   CR_In_Adlam,
+  CR_In_Indic_Siyaq_Numbers,
+  CR_In_Ottoman_Siyaq_Numbers,
   CR_In_Arabic_Mathematical_Alphabetic_Symbols,
   CR_In_Mahjong_Tiles,
   CR_In_Domino_Tiles,
@@ -33341,10 +38014,13 @@ static const OnigCodePoint* const CodeRanges[] = {
   CR_In_Geometric_Shapes_Extended,
   CR_In_Supplemental_Arrows_C,
   CR_In_Supplemental_Symbols_and_Pictographs,
+  CR_In_Chess_Symbols,
+  CR_In_Symbols_and_Pictographs_Extended_A,
   CR_In_CJK_Unified_Ideographs_Extension_B,
   CR_In_CJK_Unified_Ideographs_Extension_C,
   CR_In_CJK_Unified_Ideographs_Extension_D,
   CR_In_CJK_Unified_Ideographs_Extension_E,
+  CR_In_CJK_Unified_Ideographs_Extension_F,
   CR_In_CJK_Compatibility_Ideographs_Supplement,
   CR_In_Tags,
   CR_In_Variation_Selectors_Supplement,
@@ -33359,7 +38035,7 @@ struct uniname2ctype_struct {
 };
 #define uniname2ctype_offset(str) offsetof(struct uniname2ctype_pool_t, uniname2ctype_pool_##str)
 
-static const struct uniname2ctype_struct *uniname2ctype_p(const char *, unsigned int);
+static const struct uniname2ctype_struct *uniname2ctype_p(const char *, size_t);
 
 #ifndef USE_UNICODE_PROPERTIES
 #define TOTAL_KEYWORDS 15
@@ -33370,26 +38046,26 @@ static const struct uniname2ctype_struct *uniname2ctype_p(const char *, unsigned
 /* maximum key range = 15, duplicates = 0 */
 #else /* USE_UNICODE_PROPERTIES */
 #ifndef USE_UNICODE_AGE_PROPERTIES
-#define TOTAL_KEYWORDS 753
+#define TOTAL_KEYWORDS 814
 #else /* USE_UNICODE_AGE_PROPERTIES */
-#define TOTAL_KEYWORDS 771
+#define TOTAL_KEYWORDS 836
 #endif /* USE_UNICODE_AGE_PROPERTIES */
 #define MIN_WORD_LENGTH 1
 #define MAX_WORD_LENGTH 44
-#define MIN_HASH_VALUE 3
-#define MAX_HASH_VALUE 5275
-/* maximum key range = 5273, duplicates = 0 */
+#define MIN_HASH_VALUE 11
+#define MAX_HASH_VALUE 6098
+/* maximum key range = 6088, duplicates = 0 */
 #endif /* USE_UNICODE_PROPERTIES */
 
-#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || defined(__cplusplus) || defined(__GNUC_STDC_INLINE__)
-inline
-#elif defined(__GNUC__)
+#ifdef __GNUC__
 __inline
+#else
+#ifdef __cplusplus
+inline
+#endif
 #endif
 static unsigned int
-uniname2ctype_hash (str, len)
-     register const char *str;
-     register unsigned int len;
+uniname2ctype_hash (register const char *str, register size_t len)
 {
 #ifndef USE_UNICODE_PROPERTIES
   static const unsigned char asso_values[] =
@@ -33412,30 +38088,30 @@ uniname2ctype_hash (str, len)
        2,  1,  1, 21,  1,  7,  4,  6, 21,  1,
        4, 21, 21, 21, 21, 21, 21, 21
 #else /* USE_UNICODE_PROPERTIES */
-      5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276,
-      5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276,
-      5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276,
-      5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276,
+      6099, 6099, 6099, 6099, 6099, 6099, 6099, 6099, 6099, 6099,
+      6099, 6099, 6099, 6099, 6099, 6099, 6099, 6099, 6099, 6099,
+      6099, 6099, 6099, 6099, 6099, 6099, 6099, 6099, 6099, 6099,
+      6099, 6099, 6099, 6099, 6099, 6099, 6099, 6099, 6099, 6099,
 #ifndef USE_UNICODE_AGE_PROPERTIES
-      5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276,
-      5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276,
+      6099, 6099, 6099, 6099, 6099, 6099, 6099, 6099, 6099, 6099,
+      6099, 6099, 6099, 6099, 6099, 6099, 6099, 6099, 6099, 6099,
 #else /* USE_UNICODE_AGE_PROPERTIES */
-      5276, 5276, 5276, 5276, 5276, 5276,    1, 5276,    8,    1,
-         2,   11,   25,   22,    7,   19,   14,   13, 5276, 5276,
+      6099, 6099, 6099, 6099, 6099, 6099,   17, 6099,    3,    1,
+         4,   13,    3,   22,    9,   16,   12,    5, 6099, 6099,
 #endif /* USE_UNICODE_AGE_PROPERTIES */
-      5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276,
-      5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276,
-      5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276,
-      5276, 5276, 5276, 5276, 5276, 5276, 5276,   13, 1100,   20,
-       497,   25,  315,  494,  322,    4,  279, 1693,  169,    7,
-         1,  267, 1336,    2,  214,   40,   92, 1301,  615,  434,
-       494, 1306,   17, 5276, 5276, 5276, 5276, 5276
+      6099, 6099, 6099, 6099, 6099, 6099, 6099, 6099, 6099, 6099,
+      6099, 6099, 6099, 6099, 6099, 6099, 6099, 6099, 6099, 6099,
+      6099, 6099, 6099, 6099, 6099, 6099, 6099, 6099, 6099, 6099,
+      6099, 6099, 6099, 6099, 6099, 6099, 6099,    1, 1425,  113,
+       437,   37, 1023, 1071, 1051,    4, 1492,    9,  500,   88,
+         8,   18, 1371,  797,   54,  203,  310,  619, 1608,  603,
+       364, 1438,   20,    1,    3, 6099, 6099, 6099, 6099, 6099
 #endif /* USE_UNICODE_PROPERTIES */
     };
 #ifndef USE_UNICODE_PROPERTIES
   return len + asso_values[(unsigned char)str[2]] + asso_values[(unsigned char)str[0]];
 #else /* USE_UNICODE_PROPERTIES */
-  register int hval = len;
+  register unsigned int hval = len;
 
   switch (hval)
     {
@@ -33467,7 +38143,7 @@ uniname2ctype_hash (str, len)
         hval += asso_values[(unsigned char)str[1]];
       /*FALLTHROUGH*/
       case 1:
-        hval += asso_values[(unsigned char)str[0]];
+        hval += asso_values[(unsigned char)str[0]+2];
         break;
     }
   return hval + asso_values[(unsigned char)str[len - 1]];
@@ -33493,3040 +38169,3388 @@ struct uniname2ctype_pool_t
     char uniname2ctype_pool_str19[sizeof("digit")];
     char uniname2ctype_pool_str20[sizeof("blank")];
 #else /* USE_UNICODE_PROPERTIES */
-    char uniname2ctype_pool_str3[sizeof("n")];
-    char uniname2ctype_pool_str11[sizeof("mn")];
-    char uniname2ctype_pool_str15[sizeof("m")];
-    char uniname2ctype_pool_str24[sizeof("cn")];
-    char uniname2ctype_pool_str29[sizeof("mani")];
-    char uniname2ctype_pool_str30[sizeof("ci")];
-    char uniname2ctype_pool_str31[sizeof("inmanichaean")];
-    char uniname2ctype_pool_str35[sizeof("z")];
-    char uniname2ctype_pool_str36[sizeof("qaai")];
-    char uniname2ctype_pool_str41[sizeof("c")];
-    char uniname2ctype_pool_str49[sizeof("mc")];
-    char uniname2ctype_pool_str52[sizeof("qaac")];
-    char uniname2ctype_pool_str56[sizeof("sm")];
-    char uniname2ctype_pool_str58[sizeof("incham")];
-    char uniname2ctype_pool_str59[sizeof("me")];
-    char uniname2ctype_pool_str61[sizeof("inarmenian")];
-    char uniname2ctype_pool_str62[sizeof("cc")];
-    char uniname2ctype_pool_str65[sizeof("mandaic")];
-    char uniname2ctype_pool_str69[sizeof("incuneiform")];
-    char uniname2ctype_pool_str72[sizeof("zzzz")];
-    char uniname2ctype_pool_str77[sizeof("insamaritan")];
-    char uniname2ctype_pool_str78[sizeof("cans")];
-    char uniname2ctype_pool_str81[sizeof("s")];
-    char uniname2ctype_pool_str82[sizeof("sc")];
-    char uniname2ctype_pool_str86[sizeof("ascii")];
-    char uniname2ctype_pool_str93[sizeof("inavestan")];
-    char uniname2ctype_pool_str99[sizeof("zs")];
-    char uniname2ctype_pool_str102[sizeof("cs")];
-    char uniname2ctype_pool_str106[sizeof("inipaextensions")];
-    char uniname2ctype_pool_str110[sizeof("incuneiformnumbersandpunctuation")];
-    char uniname2ctype_pool_str114[sizeof("incommonindicnumberforms")];
-    char uniname2ctype_pool_str124[sizeof("inthai")];
-    char uniname2ctype_pool_str132[sizeof("mtei")];
-    char uniname2ctype_pool_str140[sizeof("inspecials")];
-    char uniname2ctype_pool_str141[sizeof("initialpunctuation")];
-    char uniname2ctype_pool_str144[sizeof("inthaana")];
-    char uniname2ctype_pool_str145[sizeof("inancientsymbols")];
-    char uniname2ctype_pool_str152[sizeof("inmiscellaneousmathematicalsymbolsa")];
-    char uniname2ctype_pool_str159[sizeof("inmusicalsymbols")];
-    char uniname2ctype_pool_str164[sizeof("taile")];
-    char uniname2ctype_pool_str174[sizeof("inmyanmarextendeda")];
-    char uniname2ctype_pool_str176[sizeof("sterm")];
-    char uniname2ctype_pool_str185[sizeof("lm")];
-    char uniname2ctype_pool_str191[sizeof("lina")];
-    char uniname2ctype_pool_str199[sizeof("inmiscellaneoussymbols")];
-    char uniname2ctype_pool_str200[sizeof("lana")];
-    char uniname2ctype_pool_str201[sizeof("intransportandmapsymbols")];
-    char uniname2ctype_pool_str202[sizeof("alnum")];
-    char uniname2ctype_pool_str207[sizeof("inlycian")];
-    char uniname2ctype_pool_str208[sizeof("inmiscellaneoussymbolsandarrows")];
-    char uniname2ctype_pool_str209[sizeof("intaitham")];
-    char uniname2ctype_pool_str211[sizeof("lc")];
-    char uniname2ctype_pool_str212[sizeof("inmalayalam")];
-    char uniname2ctype_pool_str213[sizeof("inmiscellaneoussymbolsandpictographs")];
-    char uniname2ctype_pool_str214[sizeof("inadlam")];
-    char uniname2ctype_pool_str220[sizeof("incontrolpictures")];
-    char uniname2ctype_pool_str222[sizeof("inlineara")];
-    char uniname2ctype_pool_str237[sizeof("taiviet")];
-    char uniname2ctype_pool_str239[sizeof("armn")];
-    char uniname2ctype_pool_str242[sizeof("armi")];
-    char uniname2ctype_pool_str247[sizeof("sinhala")];
-    char uniname2ctype_pool_str248[sizeof("armenian")];
-    char uniname2ctype_pool_str249[sizeof("inmyanmar")];
-    char uniname2ctype_pool_str251[sizeof("inrunic")];
-    char uniname2ctype_pool_str252[sizeof("incarian")];
-    char uniname2ctype_pool_str255[sizeof("cari")];
-    char uniname2ctype_pool_str256[sizeof("inmarchen")];
-    char uniname2ctype_pool_str258[sizeof("marc")];
-    char uniname2ctype_pool_str268[sizeof("carian")];
-    char uniname2ctype_pool_str270[sizeof("merc")];
-    char uniname2ctype_pool_str273[sizeof("incyrillic")];
-    char uniname2ctype_pool_str278[sizeof("samr")];
-    char uniname2ctype_pool_str279[sizeof("latn")];
-    char uniname2ctype_pool_str281[sizeof("latin")];
-    char uniname2ctype_pool_str282[sizeof("ital")];
-    char uniname2ctype_pool_str284[sizeof("intamil")];
-    char uniname2ctype_pool_str285[sizeof("taml")];
-    char uniname2ctype_pool_str286[sizeof("inmultani")];
-    char uniname2ctype_pool_str288[sizeof("samaritan")];
-    char uniname2ctype_pool_str290[sizeof("arabic")];
-    char uniname2ctype_pool_str291[sizeof("insyriac")];
-    char uniname2ctype_pool_str294[sizeof("insharada")];
-    char uniname2ctype_pool_str295[sizeof("miao")];
-    char uniname2ctype_pool_str296[sizeof("inlinearbideograms")];
-    char uniname2ctype_pool_str299[sizeof("incherokee")];
-    char uniname2ctype_pool_str302[sizeof("intaile")];
-    char uniname2ctype_pool_str303[sizeof("tale")];
-    char uniname2ctype_pool_str305[sizeof("inahom")];
-    char uniname2ctype_pool_str309[sizeof("inmeeteimayekextensions")];
-    char uniname2ctype_pool_str310[sizeof("inruminumeralsymbols")];
-    char uniname2ctype_pool_str313[sizeof("inlatinextendeda")];
-    char uniname2ctype_pool_str314[sizeof("inosmanya")];
-    char uniname2ctype_pool_str327[sizeof("inlatinextendedc")];
-    char uniname2ctype_pool_str331[sizeof("osma")];
-    char uniname2ctype_pool_str337[sizeof("inlatinextendede")];
-    char uniname2ctype_pool_str339[sizeof("l")];
-    char uniname2ctype_pool_str340[sizeof("han")];
-    char uniname2ctype_pool_str341[sizeof("nl")];
-    char uniname2ctype_pool_str342[sizeof("term")];
-    char uniname2ctype_pool_str344[sizeof("hani")];
-    char uniname2ctype_pool_str347[sizeof("inideographicsymbolsandpunctuation")];
-    char uniname2ctype_pool_str348[sizeof("zinh")];
-    char uniname2ctype_pool_str355[sizeof("lt")];
-    char uniname2ctype_pool_str357[sizeof("zl")];
-    char uniname2ctype_pool_str361[sizeof("inmahajani")];
-    char uniname2ctype_pool_str366[sizeof("cham")];
-    char uniname2ctype_pool_str368[sizeof("connectorpunctuation")];
-    char uniname2ctype_pool_str371[sizeof("sinh")];
-    char uniname2ctype_pool_str374[sizeof("manichaean")];
-    char uniname2ctype_pool_str375[sizeof("osage")];
-    char uniname2ctype_pool_str382[sizeof("inmiscellaneoustechnical")];
-    char uniname2ctype_pool_str386[sizeof("inethiopic")];
-    char uniname2ctype_pool_str390[sizeof("insinhala")];
-    char uniname2ctype_pool_str394[sizeof("chakma")];
-    char uniname2ctype_pool_str400[sizeof("shavian")];
-    char uniname2ctype_pool_str419[sizeof("inideographicdescriptioncharacters")];
-    char uniname2ctype_pool_str421[sizeof("lineara")];
-    char uniname2ctype_pool_str422[sizeof("meroiticcursive")];
-    char uniname2ctype_pool_str435[sizeof("thai")];
-    char uniname2ctype_pool_str438[sizeof("math")];
-    char uniname2ctype_pool_str440[sizeof("inemoticons")];
-    char uniname2ctype_pool_str444[sizeof("thaa")];
-    char uniname2ctype_pool_str447[sizeof("ethi")];
-    char uniname2ctype_pool_str448[sizeof("hatran")];
-    char uniname2ctype_pool_str452[sizeof("inenclosedalphanumerics")];
-    char uniname2ctype_pool_str453[sizeof("sentenceterminal")];
-    char uniname2ctype_pool_str455[sizeof("tamil")];
-    char uniname2ctype_pool_str456[sizeof("cntrl")];
-    char uniname2ctype_pool_str458[sizeof("taitham")];
-    char uniname2ctype_pool_str460[sizeof("thaana")];
-    char uniname2ctype_pool_str468[sizeof("terminalpunctuation")];
-    char uniname2ctype_pool_str471[sizeof("insinhalaarchaicnumbers")];
-    char uniname2ctype_pool_str472[sizeof("innewa")];
-    char uniname2ctype_pool_str477[sizeof("newa")];
-    char uniname2ctype_pool_str478[sizeof("inlatinextendedadditional")];
-    char uniname2ctype_pool_str485[sizeof("cwcm")];
-    char uniname2ctype_pool_str489[sizeof("loe")];
-    char uniname2ctype_pool_str503[sizeof("inopticalcharacterrecognition")];
-    char uniname2ctype_pool_str504[sizeof("inearlydynasticcuneiform")];
-    char uniname2ctype_pool_str507[sizeof("di")];
-    char uniname2ctype_pool_str508[sizeof("asciihexdigit")];
-    char uniname2ctype_pool_str509[sizeof("ll")];
-    char uniname2ctype_pool_str511[sizeof("newtailue")];
-    char uniname2ctype_pool_str512[sizeof("inscriptionalparthian")];
-    char uniname2ctype_pool_str513[sizeof("inenclosedalphanumericsupplement")];
-    char uniname2ctype_pool_str516[sizeof("oriya")];
-    char uniname2ctype_pool_str517[sizeof("mero")];
-    char uniname2ctype_pool_str519[sizeof("inmongolian")];
-    char uniname2ctype_pool_str522[sizeof("mand")];
-    char uniname2ctype_pool_str523[sizeof("inmodi")];
-    char uniname2ctype_pool_str530[sizeof("dia")];
-    char uniname2ctype_pool_str534[sizeof("mend")];
-    char uniname2ctype_pool_str535[sizeof("ingrantha")];
-    char uniname2ctype_pool_str537[sizeof("no")];
-    char uniname2ctype_pool_str538[sizeof("sora")];
-    char uniname2ctype_pool_str539[sizeof("inmandaic")];
-#ifdef USE_UNICODE_AGE_PROPERTIES
-    char uniname2ctype_pool_str542[sizeof("age=1.1")];
-    char uniname2ctype_pool_str543[sizeof("age=2.1")];
-#endif /* USE_UNICODE_AGE_PROPERTIES */
-    char uniname2ctype_pool_str544[sizeof("idc")];
-    char uniname2ctype_pool_str545[sizeof("innko")];
-    char uniname2ctype_pool_str546[sizeof("sind")];
-    char uniname2ctype_pool_str547[sizeof("inarrows")];
+    char uniname2ctype_pool_str11[sizeof("yi")];
+    char uniname2ctype_pool_str17[sizeof("yiii")];
+    char uniname2ctype_pool_str22[sizeof("lana")];
+    char uniname2ctype_pool_str24[sizeof("z")];
+    char uniname2ctype_pool_str25[sizeof("lina")];
+    char uniname2ctype_pool_str33[sizeof("maka")];
+    char uniname2ctype_pool_str35[sizeof("mani")];
+    char uniname2ctype_pool_str36[sizeof("mn")];
+    char uniname2ctype_pool_str45[sizeof("miao")];
+    char uniname2ctype_pool_str46[sizeof("lo")];
+    char uniname2ctype_pool_str47[sizeof("ci")];
+    char uniname2ctype_pool_str48[sizeof("lao")];
+    char uniname2ctype_pool_str49[sizeof("laoo")];
+    char uniname2ctype_pool_str52[sizeof("inkannada")];
+    char uniname2ctype_pool_str55[sizeof("cn")];
+    char uniname2ctype_pool_str64[sizeof("pi")];
+    char uniname2ctype_pool_str66[sizeof("innko")];
+    char uniname2ctype_pool_str67[sizeof("zzzz")];
+    char uniname2ctype_pool_str71[sizeof("gran")];
+    char uniname2ctype_pool_str75[sizeof("co")];
+    char uniname2ctype_pool_str83[sizeof("lineara")];
+    char uniname2ctype_pool_str86[sizeof("mark")];
+    char uniname2ctype_pool_str92[sizeof("po")];
+    char uniname2ctype_pool_str94[sizeof("me")];
+    char uniname2ctype_pool_str100[sizeof("cari")];
+    char uniname2ctype_pool_str101[sizeof("inkharoshthi")];
+    char uniname2ctype_pool_str102[sizeof("kana")];
+    char uniname2ctype_pool_str103[sizeof("loe")];
+    char uniname2ctype_pool_str107[sizeof("m")];
+    char uniname2ctype_pool_str108[sizeof("grek")];
+    char uniname2ctype_pool_str111[sizeof("mro")];
+    char uniname2ctype_pool_str112[sizeof("mroo")];
+    char uniname2ctype_pool_str115[sizeof("carian")];
+    char uniname2ctype_pool_str117[sizeof("geor")];
+    char uniname2ctype_pool_str118[sizeof("greek")];
+    char uniname2ctype_pool_str122[sizeof("gonm")];
+    char uniname2ctype_pool_str129[sizeof("mendekikakui")];
+    char uniname2ctype_pool_str130[sizeof("pe")];
+    char uniname2ctype_pool_str131[sizeof("mero")];
+    char uniname2ctype_pool_str134[sizeof("inosmanya")];
+    char uniname2ctype_pool_str139[sizeof("cakm")];
+    char uniname2ctype_pool_str145[sizeof("inmanichaean")];
+    char uniname2ctype_pool_str146[sizeof("inmro")];
+    char uniname2ctype_pool_str148[sizeof("inmiao")];
+    char uniname2ctype_pool_str149[sizeof("inchakma")];
+    char uniname2ctype_pool_str151[sizeof("c")];
+    char uniname2ctype_pool_str152[sizeof("mandaic")];
+    char uniname2ctype_pool_str153[sizeof("meeteimayek")];
+    char uniname2ctype_pool_str161[sizeof("inarmenian")];
+    char uniname2ctype_pool_str177[sizeof("inmyanmar")];
+    char uniname2ctype_pool_str178[sizeof("inmakasar")];
+    char uniname2ctype_pool_str183[sizeof("common")];
+    char uniname2ctype_pool_str186[sizeof("lm")];
+    char uniname2ctype_pool_str190[sizeof("marc")];
+    char uniname2ctype_pool_str203[sizeof("inrunic")];
+    char uniname2ctype_pool_str204[sizeof("incarian")];
+    char uniname2ctype_pool_str210[sizeof("inideographicsymbolsandpunctuation")];
+    char uniname2ctype_pool_str212[sizeof("inkhmer")];
+    char uniname2ctype_pool_str213[sizeof("qaai")];
+    char uniname2ctype_pool_str218[sizeof("inahom")];
+    char uniname2ctype_pool_str226[sizeof("merc")];
+    char uniname2ctype_pool_str231[sizeof("combiningmark")];
+    char uniname2ctype_pool_str236[sizeof("lc")];
+    char uniname2ctype_pool_str237[sizeof("perm")];
+    char uniname2ctype_pool_str246[sizeof("mc")];
+    char uniname2ctype_pool_str250[sizeof("connectorpunctuation")];
+    char uniname2ctype_pool_str253[sizeof("cans")];
+    char uniname2ctype_pool_str260[sizeof("incuneiformnumbersandpunctuation")];
+    char uniname2ctype_pool_str263[sizeof("armi")];
+    char uniname2ctype_pool_str265[sizeof("cc")];
+    char uniname2ctype_pool_str267[sizeof("armn")];
+    char uniname2ctype_pool_str268[sizeof("incherokee")];
+    char uniname2ctype_pool_str270[sizeof("prependedconcatenationmark")];
+    char uniname2ctype_pool_str274[sizeof("incuneiform")];
+    char uniname2ctype_pool_str275[sizeof("inavestan")];
+    char uniname2ctype_pool_str281[sizeof("inipaextensions")];
+    char uniname2ctype_pool_str282[sizeof("pc")];
+    char uniname2ctype_pool_str283[sizeof("armenian")];
+    char uniname2ctype_pool_str285[sizeof("insharada")];
+    char uniname2ctype_pool_str289[sizeof("inmarchen")];
+    char uniname2ctype_pool_str293[sizeof("makasar")];
+    char uniname2ctype_pool_str297[sizeof("masaramgondi")];
+    char uniname2ctype_pool_str301[sizeof("inarrows")];
+    char uniname2ctype_pool_str311[sizeof("incyrillic")];
+    char uniname2ctype_pool_str313[sizeof("incham")];
+    char uniname2ctype_pool_str315[sizeof("qmark")];
+    char uniname2ctype_pool_str320[sizeof("ri")];
+    char uniname2ctype_pool_str322[sizeof("qaac")];
+    char uniname2ctype_pool_str328[sizeof("insamaritan")];
+    char uniname2ctype_pool_str331[sizeof("latn")];
+    char uniname2ctype_pool_str335[sizeof("inmasaramgondi")];
+    char uniname2ctype_pool_str338[sizeof("inthaana")];
+    char uniname2ctype_pool_str340[sizeof("latin")];
+    char uniname2ctype_pool_str342[sizeof("inthai")];
+    char uniname2ctype_pool_str345[sizeof("lineseparator")];
+    char uniname2ctype_pool_str346[sizeof("pcm")];
+    char uniname2ctype_pool_str348[sizeof("inkatakana")];
+    char uniname2ctype_pool_str352[sizeof("inkaithi")];
+    char uniname2ctype_pool_str357[sizeof("inzanabazarsquare")];
+    char uniname2ctype_pool_str362[sizeof("inscriptionalparthian")];
+    char uniname2ctype_pool_str366[sizeof("initialpunctuation")];
+    char uniname2ctype_pool_str373[sizeof("mtei")];
+    char uniname2ctype_pool_str376[sizeof("vai")];
+    char uniname2ctype_pool_str377[sizeof("vaii")];
+    char uniname2ctype_pool_str386[sizeof("inkhmersymbols")];
+    char uniname2ctype_pool_str399[sizeof("insyriac")];
+    char uniname2ctype_pool_str401[sizeof("intakri")];
+    char uniname2ctype_pool_str404[sizeof("arabic")];
+    char uniname2ctype_pool_str411[sizeof("zs")];
+    char uniname2ctype_pool_str418[sizeof("katakana")];
+    char uniname2ctype_pool_str426[sizeof("prti")];
+    char uniname2ctype_pool_str442[sizeof("ascii")];
+    char uniname2ctype_pool_str445[sizeof("cs")];
+    char uniname2ctype_pool_str462[sizeof("ps")];
+    char uniname2ctype_pool_str468[sizeof("mand")];
+    char uniname2ctype_pool_str470[sizeof("privateuse")];
+    char uniname2ctype_pool_str475[sizeof("inruminumeralsymbols")];
+    char uniname2ctype_pool_str480[sizeof("inmyanmarextendeda")];
+    char uniname2ctype_pool_str481[sizeof("modi")];
+    char uniname2ctype_pool_str486[sizeof("incjkcompatibilityforms")];
+    char uniname2ctype_pool_str488[sizeof("inkanaextendeda")];
+    char uniname2ctype_pool_str491[sizeof("incjkcompatibilityideographs")];
+    char uniname2ctype_pool_str500[sizeof("brai")];
+    char uniname2ctype_pool_str504[sizeof("mend")];
+    char uniname2ctype_pool_str505[sizeof("ideo")];
+    char uniname2ctype_pool_str506[sizeof("letter")];
+    char uniname2ctype_pool_str509[sizeof("l")];
+    char uniname2ctype_pool_str511[sizeof("inmeeteimayek")];
+    char uniname2ctype_pool_str520[sizeof("inideographicdescriptioncharacters")];
+    char uniname2ctype_pool_str535[sizeof("xidcontinue")];
+    char uniname2ctype_pool_str538[sizeof("knda")];
+    char uniname2ctype_pool_str541[sizeof("innandinagari")];
+    char uniname2ctype_pool_str543[sizeof("kannada")];
+    char uniname2ctype_pool_str556[sizeof("inmodi")];
+    char uniname2ctype_pool_str558[sizeof("inlao")];
+    char uniname2ctype_pool_str560[sizeof("inoldnortharabian")];
+    char uniname2ctype_pool_str565[sizeof("intransportandmapsymbols")];
+    char uniname2ctype_pool_str566[sizeof("letternumber")];
+    char uniname2ctype_pool_str568[sizeof("gothic")];
+    char uniname2ctype_pool_str572[sizeof("inlineara")];
+    char uniname2ctype_pool_str577[sizeof("inmendekikakui")];
+    char uniname2ctype_pool_str578[sizeof("xidc")];
+    char uniname2ctype_pool_str579[sizeof("mongolian")];
+    char uniname2ctype_pool_str582[sizeof("inmiscellaneousmathematicalsymbolsa")];
+    char uniname2ctype_pool_str583[sizeof("inspecials")];
+    char uniname2ctype_pool_str590[sizeof("grlink")];
+    char uniname2ctype_pool_str594[sizeof("brahmi")];
+    char uniname2ctype_pool_str596[sizeof("inemoticons")];
+    char uniname2ctype_pool_str597[sizeof("kali")];
+    char uniname2ctype_pool_str600[sizeof("inolditalic")];
+    char uniname2ctype_pool_str604[sizeof("inmedefaidrin")];
+    char uniname2ctype_pool_str605[sizeof("inchesssymbols")];
+    char uniname2ctype_pool_str608[sizeof("incjkcompatibilityideographssupplement")];
+    char uniname2ctype_pool_str614[sizeof("inadlam")];
+    char uniname2ctype_pool_str624[sizeof("psalterpahlavi")];
+    char uniname2ctype_pool_str625[sizeof("incommonindicnumberforms")];
+    char uniname2ctype_pool_str630[sizeof("lt")];
+    char uniname2ctype_pool_str636[sizeof("innewa")];
+    char uniname2ctype_pool_str639[sizeof("sk")];
+    char uniname2ctype_pool_str642[sizeof("control")];
+    char uniname2ctype_pool_str645[sizeof("inancientsymbols")];
+    char uniname2ctype_pool_str647[sizeof("palm")];
+    char uniname2ctype_pool_str650[sizeof("inlycian")];
+    char uniname2ctype_pool_str657[sizeof("so")];
+    char uniname2ctype_pool_str660[sizeof("patternwhitespace")];
+    char uniname2ctype_pool_str668[sizeof("xids")];
+    char uniname2ctype_pool_str672[sizeof("inmandaic")];
+    char uniname2ctype_pool_str675[sizeof("idc")];
+    char uniname2ctype_pool_str678[sizeof("meroiticcursive")];
+    char uniname2ctype_pool_str695[sizeof("inwarangciti")];
+    char uniname2ctype_pool_str696[sizeof("sora")];
+    char uniname2ctype_pool_str697[sizeof("inopticalcharacterrecognition")];
+    char uniname2ctype_pool_str703[sizeof("inoldsogdian")];
+    char uniname2ctype_pool_str705[sizeof("inmalayalam")];
+    char uniname2ctype_pool_str707[sizeof("bamum")];
+    char uniname2ctype_pool_str708[sizeof("inkanasupplement")];
+    char uniname2ctype_pool_str713[sizeof("insundanese")];
+    char uniname2ctype_pool_str720[sizeof("grext")];
+    char uniname2ctype_pool_str737[sizeof("print")];
+    char uniname2ctype_pool_str738[sizeof("intaitham")];
+    char uniname2ctype_pool_str742[sizeof("lower")];
+    char uniname2ctype_pool_str753[sizeof("joinc")];
+    char uniname2ctype_pool_str755[sizeof("inoldsoutharabian")];
+    char uniname2ctype_pool_str760[sizeof("incjkstrokes")];
+    char uniname2ctype_pool_str761[sizeof("batk")];
+    char uniname2ctype_pool_str766[sizeof("samr")];
+    char uniname2ctype_pool_str767[sizeof("inwancho")];
+    char uniname2ctype_pool_str771[sizeof("batak")];
+    char uniname2ctype_pool_str772[sizeof("vs")];
+    char uniname2ctype_pool_str776[sizeof("patws")];
+    char uniname2ctype_pool_str783[sizeof("samaritan")];
+    char uniname2ctype_pool_str787[sizeof("idsbinaryoperator")];
+    char uniname2ctype_pool_str791[sizeof("pauc")];
+    char uniname2ctype_pool_str794[sizeof("insmallkanaextension")];
+    char uniname2ctype_pool_str797[sizeof("sm")];
+    char uniname2ctype_pool_str799[sizeof("indominotiles")];
+    char uniname2ctype_pool_str802[sizeof("alnum")];
+    char uniname2ctype_pool_str809[sizeof("insylotinagri")];
+    char uniname2ctype_pool_str814[sizeof("inugaritic")];
+    char uniname2ctype_pool_str818[sizeof("incontrolpictures")];
+    char uniname2ctype_pool_str821[sizeof("inlinearbideograms")];
+    char uniname2ctype_pool_str822[sizeof("inmusicalsymbols")];
+    char uniname2ctype_pool_str823[sizeof("s")];
+    char uniname2ctype_pool_str824[sizeof("ital")];
+    char uniname2ctype_pool_str825[sizeof("inmodifiertoneletters")];
+    char uniname2ctype_pool_str828[sizeof("inancientgreekmusicalnotation")];
+    char uniname2ctype_pool_str834[sizeof("patternsyntax")];
+    char uniname2ctype_pool_str838[sizeof("lisu")];
+    char uniname2ctype_pool_str842[sizeof("lowercase")];
+    char uniname2ctype_pool_str845[sizeof("cwcm")];
+    char uniname2ctype_pool_str847[sizeof("sc")];
+    char uniname2ctype_pool_str848[sizeof("bass")];
+    char uniname2ctype_pool_str855[sizeof("ids")];
+    char uniname2ctype_pool_str857[sizeof("inlatinextendeda")];
+    char uniname2ctype_pool_str862[sizeof("oriya")];
+    char uniname2ctype_pool_str875[sizeof("intaile")];
+    char uniname2ctype_pool_str886[sizeof("inmiscellaneoussymbols")];
+    char uniname2ctype_pool_str895[sizeof("inmiscellaneoussymbolsandarrows")];
+    char uniname2ctype_pool_str898[sizeof("incaucasianalbanian")];
+    char uniname2ctype_pool_str900[sizeof("inmiscellaneoussymbolsandpictographs")];
+    char uniname2ctype_pool_str906[sizeof("inoldturkic")];
+    char uniname2ctype_pool_str907[sizeof("insaurashtra")];
+    char uniname2ctype_pool_str924[sizeof("idcontinue")];
+    char uniname2ctype_pool_str926[sizeof("intamil")];
+    char uniname2ctype_pool_str928[sizeof("inmultani")];
+    char uniname2ctype_pool_str929[sizeof("inlatinextendede")];
+    char uniname2ctype_pool_str930[sizeof("pd")];
+    char uniname2ctype_pool_str946[sizeof("bali")];
+    char uniname2ctype_pool_str961[sizeof("blank")];
+    char uniname2ctype_pool_str963[sizeof("idst")];
+    char uniname2ctype_pool_str974[sizeof("inlydian")];
+    char uniname2ctype_pool_str986[sizeof("innewtailue")];
+    char uniname2ctype_pool_str994[sizeof("bengali")];
+    char uniname2ctype_pool_str995[sizeof("runr")];
+    char uniname2ctype_pool_str1005[sizeof("zl")];
+    char uniname2ctype_pool_str1009[sizeof("incyrillicextendeda")];
+    char uniname2ctype_pool_str1010[sizeof("ll")];
+    char uniname2ctype_pool_str1013[sizeof("indeseret")];
+    char uniname2ctype_pool_str1014[sizeof("intaixuanjingsymbols")];
+    char uniname2ctype_pool_str1015[sizeof("inancientgreeknumbers")];
+    char uniname2ctype_pool_str1021[sizeof("idstart")];
+    char uniname2ctype_pool_str1025[sizeof("inmeeteimayekextensions")];
+    char uniname2ctype_pool_str1028[sizeof("balinese")];
+    char uniname2ctype_pool_str1032[sizeof("dia")];
+    char uniname2ctype_pool_str1033[sizeof("di")];
+    char uniname2ctype_pool_str1035[sizeof("inspacingmodifierletters")];
+    char uniname2ctype_pool_str1036[sizeof("inearlydynasticcuneiform")];
+    char uniname2ctype_pool_str1049[sizeof("plrd")];
+    char uniname2ctype_pool_str1067[sizeof("canadianaboriginal")];
+    char uniname2ctype_pool_str1070[sizeof("zinh")];
+    char uniname2ctype_pool_str1072[sizeof("sind")];
+    char uniname2ctype_pool_str1080[sizeof("osage")];
+    char uniname2ctype_pool_str1081[sizeof("inlatinextendedc")];
+    char uniname2ctype_pool_str1085[sizeof("uideo")];
+    char uniname2ctype_pool_str1087[sizeof("incountingrodnumerals")];
+    char uniname2ctype_pool_str1090[sizeof("xidstart")];
+    char uniname2ctype_pool_str1091[sizeof("xdigit")];
+    char uniname2ctype_pool_str1093[sizeof("osma")];
+    char uniname2ctype_pool_str1097[sizeof("inkhudawadi")];
+    char uniname2ctype_pool_str1102[sizeof("inhanifirohingya")];
+    char uniname2ctype_pool_str1105[sizeof("gong")];
+    char uniname2ctype_pool_str1107[sizeof("ingrantha")];
+    char uniname2ctype_pool_str1109[sizeof("bidic")];
+    char uniname2ctype_pool_str1119[sizeof("mong")];
+    char uniname2ctype_pool_str1120[sizeof("cased")];
+    char uniname2ctype_pool_str1121[sizeof("incyrillicextendedc")];
+    char uniname2ctype_pool_str1134[sizeof("inhiragana")];
+    char uniname2ctype_pool_str1140[sizeof("sinhala")];
+    char uniname2ctype_pool_str1142[sizeof("adlm")];
+    char uniname2ctype_pool_str1146[sizeof("glagolitic")];
+    char uniname2ctype_pool_str1147[sizeof("sterm")];
+    char uniname2ctype_pool_str1149[sizeof("bamu")];
+    char uniname2ctype_pool_str1150[sizeof("georgian")];
+    char uniname2ctype_pool_str1151[sizeof("inosage")];
+    char uniname2ctype_pool_str1152[sizeof("gunjalagondi")];
+    char uniname2ctype_pool_str1153[sizeof("phoenician")];
+    char uniname2ctype_pool_str1157[sizeof("multani")];
+    char uniname2ctype_pool_str1158[sizeof("kaithi")];
+    char uniname2ctype_pool_str1164[sizeof("joincontrol")];
+    char uniname2ctype_pool_str1168[sizeof("runic")];
+    char uniname2ctype_pool_str1170[sizeof("ingeneralpunctuation")];
+    char uniname2ctype_pool_str1171[sizeof("inmahajani")];
+    char uniname2ctype_pool_str1174[sizeof("incyrillicsupplement")];
+    char uniname2ctype_pool_str1175[sizeof("lowercaseletter")];
+    char uniname2ctype_pool_str1176[sizeof("marchen")];
+    char uniname2ctype_pool_str1177[sizeof("graphemelink")];
+    char uniname2ctype_pool_str1178[sizeof("ingeorgian")];
+    char uniname2ctype_pool_str1180[sizeof("khojki")];
+    char uniname2ctype_pool_str1181[sizeof("cham")];
+    char uniname2ctype_pool_str1182[sizeof("inogham")];
+    char uniname2ctype_pool_str1183[sizeof("cher")];
+    char uniname2ctype_pool_str1185[sizeof("chakma")];
+    char uniname2ctype_pool_str1190[sizeof("emoji")];
+    char uniname2ctype_pool_str1191[sizeof("insiddham")];
+    char uniname2ctype_pool_str1197[sizeof("cherokee")];
+    char uniname2ctype_pool_str1198[sizeof("khar")];
+    char uniname2ctype_pool_str1203[sizeof("inmongolian")];
+    char uniname2ctype_pool_str1207[sizeof("incherokeesupplement")];
+    char uniname2ctype_pool_str1208[sizeof("diacritic")];
+    char uniname2ctype_pool_str1209[sizeof("manichaean")];
+    char uniname2ctype_pool_str1210[sizeof("xsux")];
+    char uniname2ctype_pool_str1212[sizeof("inolchiki")];
+    char uniname2ctype_pool_str1227[sizeof("quotationmark")];
+    char uniname2ctype_pool_str1231[sizeof("adlam")];
+    char uniname2ctype_pool_str1232[sizeof("inethiopic")];
+    char uniname2ctype_pool_str1233[sizeof("graphemebase")];
 #ifdef USE_UNICODE_AGE_PROPERTIES
-    char uniname2ctype_pool_str548[sizeof("age=6.1")];
-    char uniname2ctype_pool_str549[sizeof("age=6.2")];
-    char uniname2ctype_pool_str550[sizeof("age=2.0")];
+    char uniname2ctype_pool_str1234[sizeof("age=11.0")];
+    char uniname2ctype_pool_str1235[sizeof("age=12.1")];
+    char uniname2ctype_pool_str1236[sizeof("age=10.0")];
+    char uniname2ctype_pool_str1237[sizeof("age=12.0")];
 #endif /* USE_UNICODE_AGE_PROPERTIES */
-    char uniname2ctype_pool_str551[sizeof("inmro")];
+    char uniname2ctype_pool_str1243[sizeof("casedletter")];
+    char uniname2ctype_pool_str1244[sizeof("ingurmukhi")];
+    char uniname2ctype_pool_str1245[sizeof("odi")];
+    char uniname2ctype_pool_str1246[sizeof("incjkunifiedideographsextensiona")];
 #ifdef USE_UNICODE_AGE_PROPERTIES
-    char uniname2ctype_pool_str552[sizeof("age=3.1")];
-    char uniname2ctype_pool_str553[sizeof("age=3.2")];
+    char uniname2ctype_pool_str1247[sizeof("age=1.1")];
 #endif /* USE_UNICODE_AGE_PROPERTIES */
-    char uniname2ctype_pool_str554[sizeof("titlecaseletter")];
+    char uniname2ctype_pool_str1248[sizeof("lu")];
 #ifdef USE_UNICODE_AGE_PROPERTIES
-    char uniname2ctype_pool_str555[sizeof("age=6.0")];
+    char uniname2ctype_pool_str1249[sizeof("age=4.1")];
+    char uniname2ctype_pool_str1250[sizeof("age=2.1")];
+    char uniname2ctype_pool_str1251[sizeof("age=4.0")];
+    char uniname2ctype_pool_str1252[sizeof("age=2.0")];
+    char uniname2ctype_pool_str1253[sizeof("age=9.0")];
 #endif /* USE_UNICODE_AGE_PROPERTIES */
-    char uniname2ctype_pool_str556[sizeof("co")];
-    char uniname2ctype_pool_str557[sizeof("hira")];
+    char uniname2ctype_pool_str1254[sizeof("intamilsupplement")];
 #ifdef USE_UNICODE_AGE_PROPERTIES
-    char uniname2ctype_pool_str558[sizeof("age=6.3")];
-    char uniname2ctype_pool_str559[sizeof("age=3.0")];
+    char uniname2ctype_pool_str1255[sizeof("age=6.1")];
 #endif /* USE_UNICODE_AGE_PROPERTIES */
-    char uniname2ctype_pool_str560[sizeof("ingeneralpunctuation")];
+    char uniname2ctype_pool_str1256[sizeof("unknown")];
 #ifdef USE_UNICODE_AGE_PROPERTIES
-    char uniname2ctype_pool_str561[sizeof("age=9.0")];
-    char uniname2ctype_pool_str562[sizeof("age=8.0")];
-    char uniname2ctype_pool_str563[sizeof("age=5.1")];
-    char uniname2ctype_pool_str564[sizeof("age=5.2")];
+    char uniname2ctype_pool_str1257[sizeof("age=6.0")];
+    char uniname2ctype_pool_str1258[sizeof("age=6.2")];
+    char uniname2ctype_pool_str1259[sizeof("age=3.1")];
+    char uniname2ctype_pool_str1260[sizeof("age=8.0")];
+    char uniname2ctype_pool_str1261[sizeof("age=3.0")];
+    char uniname2ctype_pool_str1262[sizeof("age=3.2")];
 #endif /* USE_UNICODE_AGE_PROPERTIES */
-    char uniname2ctype_pool_str565[sizeof("inmiao")];
+    char uniname2ctype_pool_str1263[sizeof("cwt")];
 #ifdef USE_UNICODE_AGE_PROPERTIES
-    char uniname2ctype_pool_str566[sizeof("age=4.1")];
-    char uniname2ctype_pool_str567[sizeof("age=7.0")];
+    char uniname2ctype_pool_str1264[sizeof("age=7.0")];
 #endif /* USE_UNICODE_AGE_PROPERTIES */
-    char uniname2ctype_pool_str568[sizeof("innewtailue")];
-    char uniname2ctype_pool_str569[sizeof("common")];
+    char uniname2ctype_pool_str1266[sizeof("unassigned")];
 #ifdef USE_UNICODE_AGE_PROPERTIES
-    char uniname2ctype_pool_str570[sizeof("age=5.0")];
-    char uniname2ctype_pool_str573[sizeof("age=4.0")];
+    char uniname2ctype_pool_str1267[sizeof("age=6.3")];
+    char uniname2ctype_pool_str1268[sizeof("age=5.1")];
+    char uniname2ctype_pool_str1270[sizeof("age=5.0")];
+    char uniname2ctype_pool_str1271[sizeof("age=5.2")];
 #endif /* USE_UNICODE_AGE_PROPERTIES */
-    char uniname2ctype_pool_str576[sizeof("so")];
-    char uniname2ctype_pool_str577[sizeof("inhiragana")];
-    char uniname2ctype_pool_str579[sizeof("insundanese")];
-    char uniname2ctype_pool_str584[sizeof("ids")];
-    char uniname2ctype_pool_str585[sizeof("cher")];
-    char uniname2ctype_pool_str589[sizeof("marchen")];
-    char uniname2ctype_pool_str591[sizeof("indominotiles")];
-    char uniname2ctype_pool_str595[sizeof("joinc")];
-    char uniname2ctype_pool_str604[sizeof("tang")];
-    char uniname2ctype_pool_str607[sizeof("hano")];
-    char uniname2ctype_pool_str613[sizeof("ahom")];
-    char uniname2ctype_pool_str621[sizeof("inogham")];
-    char uniname2ctype_pool_str622[sizeof("inscriptionalpahlavi")];
-    char uniname2ctype_pool_str625[sizeof("mahj")];
-    char uniname2ctype_pool_str627[sizeof("inolchiki")];
-    char uniname2ctype_pool_str633[sizeof("invai")];
-    char uniname2ctype_pool_str634[sizeof("tagbanwa")];
-    char uniname2ctype_pool_str636[sizeof("tirh")];
-    char uniname2ctype_pool_str637[sizeof("idst")];
-    char uniname2ctype_pool_str639[sizeof("vai")];
-    char uniname2ctype_pool_str640[sizeof("vaii")];
-    char uniname2ctype_pool_str641[sizeof("cwt")];
-    char uniname2ctype_pool_str642[sizeof("inhatran")];
-    char uniname2ctype_pool_str645[sizeof("hatr")];
-    char uniname2ctype_pool_str646[sizeof("mahajani")];
-    char uniname2ctype_pool_str649[sizeof("idcontinue")];
-    char uniname2ctype_pool_str652[sizeof("cf")];
-    char uniname2ctype_pool_str655[sizeof("intirhuta")];
-    char uniname2ctype_pool_str659[sizeof("inenclosedcjklettersandmonths")];
-    char uniname2ctype_pool_str663[sizeof("intaixuanjingsymbols")];
-    char uniname2ctype_pool_str664[sizeof("inspacingmodifierletters")];
-    char uniname2ctype_pool_str668[sizeof("indeseret")];
-    char uniname2ctype_pool_str677[sizeof("intags")];
-    char uniname2ctype_pool_str678[sizeof("wara")];
-    char uniname2ctype_pool_str683[sizeof("inshavian")];
-    char uniname2ctype_pool_str684[sizeof("inlydian")];
-    char uniname2ctype_pool_str686[sizeof("inwarangciti")];
-    char uniname2ctype_pool_str688[sizeof("inmathematicalalphanumericsymbols")];
-    char uniname2ctype_pool_str690[sizeof("adlm")];
-    char uniname2ctype_pool_str692[sizeof("intangut")];
-    char uniname2ctype_pool_str697[sizeof("vs")];
-    char uniname2ctype_pool_str698[sizeof("adlam")];
-    char uniname2ctype_pool_str705[sizeof("lo")];
-    char uniname2ctype_pool_str706[sizeof("ext")];
-    char uniname2ctype_pool_str712[sizeof("insylotinagri")];
-    char uniname2ctype_pool_str713[sizeof("inlao")];
-    char uniname2ctype_pool_str716[sizeof("inlowsurrogates")];
-    char uniname2ctype_pool_str717[sizeof("anatolianhieroglyphs")];
-    char uniname2ctype_pool_str719[sizeof("lao")];
-    char uniname2ctype_pool_str720[sizeof("laoo")];
-    char uniname2ctype_pool_str721[sizeof("mongolian")];
-    char uniname2ctype_pool_str726[sizeof("gran")];
-    char uniname2ctype_pool_str733[sizeof("lineseparator")];
-    char uniname2ctype_pool_str734[sizeof("ingurmukhi")];
-    char uniname2ctype_pool_str745[sizeof("letter")];
-    char uniname2ctype_pool_str748[sizeof("intifinagh")];
-    char uniname2ctype_pool_str755[sizeof("tifinagh")];
-    char uniname2ctype_pool_str758[sizeof("mro")];
-    char uniname2ctype_pool_str759[sizeof("mroo")];
-    char uniname2ctype_pool_str761[sizeof("diacritic")];
-    char uniname2ctype_pool_str764[sizeof("avst")];
-    char uniname2ctype_pool_str766[sizeof("avestan")];
-    char uniname2ctype_pool_str773[sizeof("mong")];
-    char uniname2ctype_pool_str774[sizeof("inanatolianhieroglyphs")];
-    char uniname2ctype_pool_str775[sizeof("odi")];
-    char uniname2ctype_pool_str776[sizeof("nchar")];
-    char uniname2ctype_pool_str778[sizeof("caseignorable")];
-    char uniname2ctype_pool_str779[sizeof("modi")];
-    char uniname2ctype_pool_str780[sizeof("insorasompeng")];
-    char uniname2ctype_pool_str785[sizeof("ogam")];
-    char uniname2ctype_pool_str792[sizeof("oidc")];
-    char uniname2ctype_pool_str793[sizeof("cwcf")];
-    char uniname2ctype_pool_str795[sizeof("cwl")];
-    char uniname2ctype_pool_str797[sizeof("ideo")];
-    char uniname2ctype_pool_str803[sizeof("oalpha")];
-    char uniname2ctype_pool_str804[sizeof("inolditalic")];
-    char uniname2ctype_pool_str805[sizeof("ingujarati")];
-    char uniname2ctype_pool_str811[sizeof("inosage")];
-    char uniname2ctype_pool_str812[sizeof("oids")];
-    char uniname2ctype_pool_str813[sizeof("shaw")];
-    char uniname2ctype_pool_str814[sizeof("decimalnumber")];
-    char uniname2ctype_pool_str816[sizeof("tavt")];
-    char uniname2ctype_pool_str817[sizeof("intaiviet")];
-    char uniname2ctype_pool_str828[sizeof("hmng")];
-    char uniname2ctype_pool_str829[sizeof("inmongoliansupplement")];
-    char uniname2ctype_pool_str830[sizeof("osge")];
-    char uniname2ctype_pool_str834[sizeof("hang")];
-    char uniname2ctype_pool_str835[sizeof("insuttonsignwriting")];
-    char uniname2ctype_pool_str836[sizeof("inmahjongtiles")];
-    char uniname2ctype_pool_str847[sizeof("dsrt")];
-    char uniname2ctype_pool_str858[sizeof("ahex")];
-    char uniname2ctype_pool_str860[sizeof("whitespace")];
-    char uniname2ctype_pool_str865[sizeof("insundanesesupplement")];
-    char uniname2ctype_pool_str866[sizeof("inmodifiertoneletters")];
-    char uniname2ctype_pool_str867[sizeof("idstart")];
-    char uniname2ctype_pool_str872[sizeof("ingreekandcoptic")];
-    char uniname2ctype_pool_str876[sizeof("dash")];
-    char uniname2ctype_pool_str878[sizeof("hanunoo")];
-    char uniname2ctype_pool_str890[sizeof("siddham")];
-    char uniname2ctype_pool_str892[sizeof("inoldturkic")];
-    char uniname2ctype_pool_str895[sizeof("ingeometricshapes")];
-    char uniname2ctype_pool_str900[sizeof("deseret")];
-    char uniname2ctype_pool_str903[sizeof("gothic")];
-    char uniname2ctype_pool_str905[sizeof("sharada")];
-    char uniname2ctype_pool_str906[sizeof("tfng")];
-    char uniname2ctype_pool_str914[sizeof("insmallformvariants")];
-    char uniname2ctype_pool_str919[sizeof("inshorthandformatcontrols")];
-    char uniname2ctype_pool_str922[sizeof("grext")];
-    char uniname2ctype_pool_str924[sizeof("java")];
-    char uniname2ctype_pool_str933[sizeof("radical")];
-    char uniname2ctype_pool_str936[sizeof("omath")];
-    char uniname2ctype_pool_str937[sizeof("canadianaboriginal")];
-    char uniname2ctype_pool_str941[sizeof("ingothic")];
-    char uniname2ctype_pool_str943[sizeof("otheridcontinue")];
-    char uniname2ctype_pool_str945[sizeof("control")];
-    char uniname2ctype_pool_str947[sizeof("injavanese")];
-    char uniname2ctype_pool_str956[sizeof("noncharactercodepoint")];
-    char uniname2ctype_pool_str958[sizeof("invariationselectors")];
-    char uniname2ctype_pool_str964[sizeof("casedletter")];
-    char uniname2ctype_pool_str965[sizeof("letternumber")];
-    char uniname2ctype_pool_str966[sizeof("javanese")];
-    char uniname2ctype_pool_str968[sizeof("otheralphabetic")];
-    char uniname2ctype_pool_str973[sizeof("sgnw")];
-    char uniname2ctype_pool_str991[sizeof("ingeorgian")];
-    char uniname2ctype_pool_str992[sizeof("rjng")];
-    char uniname2ctype_pool_str997[sizeof("nd")];
-    char uniname2ctype_pool_str999[sizeof("format")];
-    char uniname2ctype_pool_str1004[sizeof("geor")];
-    char uniname2ctype_pool_str1009[sizeof("inornamentaldingbats")];
-    char uniname2ctype_pool_str1013[sizeof("inrejang")];
-    char uniname2ctype_pool_str1015[sizeof("inoldnortharabian")];
-    char uniname2ctype_pool_str1017[sizeof("joincontrol")];
-    char uniname2ctype_pool_str1019[sizeof("xidc")];
-    char uniname2ctype_pool_str1020[sizeof("invariationselectorssupplement")];
-    char uniname2ctype_pool_str1036[sizeof("sd")];
-    char uniname2ctype_pool_str1039[sizeof("xids")];
-    char uniname2ctype_pool_str1042[sizeof("sidd")];
-    char uniname2ctype_pool_str1047[sizeof("indingbats")];
-    char uniname2ctype_pool_str1051[sizeof("inherited")];
-    char uniname2ctype_pool_str1052[sizeof("inmeroitichieroglyphs")];
-    char uniname2ctype_pool_str1053[sizeof("inenclosedideographicsupplement")];
-    char uniname2ctype_pool_str1054[sizeof("inoldsoutharabian")];
-    char uniname2ctype_pool_str1055[sizeof("insiddham")];
-    char uniname2ctype_pool_str1058[sizeof("inglagolitic")];
-    char uniname2ctype_pool_str1062[sizeof("ingreekextended")];
-    char uniname2ctype_pool_str1067[sizeof("olditalic")];
-    char uniname2ctype_pool_str1068[sizeof("hiragana")];
-    char uniname2ctype_pool_str1069[sizeof("idsbinaryoperator")];
-    char uniname2ctype_pool_str1072[sizeof("cased")];
-    char uniname2ctype_pool_str1073[sizeof("inhangulsyllables")];
-    char uniname2ctype_pool_str1077[sizeof("shrd")];
-    char uniname2ctype_pool_str1093[sizeof("assigned")];
-    char uniname2ctype_pool_str1095[sizeof("otheridstart")];
-    char uniname2ctype_pool_str1102[sizeof("ogham")];
-    char uniname2ctype_pool_str1107[sizeof("intagalog")];
-    char uniname2ctype_pool_str1110[sizeof("inoldhungarian")];
-    char uniname2ctype_pool_str1114[sizeof("other")];
-    char uniname2ctype_pool_str1115[sizeof("othersymbol")];
-    char uniname2ctype_pool_str1116[sizeof("otherlowercase")];
-    char uniname2ctype_pool_str1121[sizeof("othernumber")];
-    char uniname2ctype_pool_str1130[sizeof("graphemebase")];
-    char uniname2ctype_pool_str1131[sizeof("innabataean")];
-    char uniname2ctype_pool_str1137[sizeof("inbhaiksuki")];
-    char uniname2ctype_pool_str1138[sizeof("lowercase")];
-    char uniname2ctype_pool_str1139[sizeof("bamum")];
-    char uniname2ctype_pool_str1142[sizeof("glagolitic")];
-    char uniname2ctype_pool_str1148[sizeof("inhanguljamoextendeda")];
-    char uniname2ctype_pool_str1150[sizeof("indevanagari")];
-    char uniname2ctype_pool_str1153[sizeof("inelbasan")];
-    char uniname2ctype_pool_str1154[sizeof("deva")];
-    char uniname2ctype_pool_str1155[sizeof("grantha")];
-    char uniname2ctype_pool_str1159[sizeof("inarabic")];
-    char uniname2ctype_pool_str1162[sizeof("olower")];
-    char uniname2ctype_pool_str1163[sizeof("inbasiclatin")];
-    char uniname2ctype_pool_str1165[sizeof("devanagari")];
-    char uniname2ctype_pool_str1170[sizeof("warangciti")];
-    char uniname2ctype_pool_str1173[sizeof("innumberforms")];
-    char uniname2ctype_pool_str1174[sizeof("glag")];
-    char uniname2ctype_pool_str1179[sizeof("goth")];
-    char uniname2ctype_pool_str1180[sizeof("invedicextensions")];
-    char uniname2ctype_pool_str1183[sizeof("oldpersian")];
-    char uniname2ctype_pool_str1184[sizeof("digit")];
-    char uniname2ctype_pool_str1189[sizeof("xdigit")];
-    char uniname2ctype_pool_str1197[sizeof("bass")];
-    char uniname2ctype_pool_str1200[sizeof("xidstart")];
-    char uniname2ctype_pool_str1201[sizeof("oldpermic")];
-    char uniname2ctype_pool_str1210[sizeof("nbat")];
-    char uniname2ctype_pool_str1223[sizeof("inarabicpresentationformsa")];
-    char uniname2ctype_pool_str1224[sizeof("logicalorderexception")];
-    char uniname2ctype_pool_str1227[sizeof("inbyzantinemusicalsymbols")];
-    char uniname2ctype_pool_str1229[sizeof("nabataean")];
-    char uniname2ctype_pool_str1232[sizeof("intibetan")];
-    char uniname2ctype_pool_str1233[sizeof("othermath")];
-    char uniname2ctype_pool_str1239[sizeof("inmiscellaneousmathematicalsymbolsb")];
-    char uniname2ctype_pool_str1248[sizeof("inverticalforms")];
-    char uniname2ctype_pool_str1253[sizeof("tglg")];
-    char uniname2ctype_pool_str1261[sizeof("inmyanmarextendedb")];
-    char uniname2ctype_pool_str1265[sizeof("ideographic")];
-    char uniname2ctype_pool_str1266[sizeof("incyrillicextendeda")];
-    char uniname2ctype_pool_str1272[sizeof("inbraillepatterns")];
-    char uniname2ctype_pool_str1273[sizeof("incyrillicextendedc")];
-    char uniname2ctype_pool_str1278[sizeof("linb")];
-    char uniname2ctype_pool_str1281[sizeof("inlatinextendedd")];
-    char uniname2ctype_pool_str1284[sizeof("limb")];
-    char uniname2ctype_pool_str1289[sizeof("otherletter")];
-    char uniname2ctype_pool_str1290[sizeof("bali")];
-    char uniname2ctype_pool_str1292[sizeof("tibt")];
-    char uniname2ctype_pool_str1293[sizeof("georgian")];
-    char uniname2ctype_pool_str1299[sizeof("xidcontinue")];
-    char uniname2ctype_pool_str1303[sizeof("lower")];
-    char uniname2ctype_pool_str1309[sizeof("tibetan")];
-    char uniname2ctype_pool_str1311[sizeof("elba")];
-    char uniname2ctype_pool_str1313[sizeof("inbalinese")];
-    char uniname2ctype_pool_str1316[sizeof("yi")];
-    char uniname2ctype_pool_str1319[sizeof("bengali")];
-    char uniname2ctype_pool_str1322[sizeof("yiii")];
-    char uniname2ctype_pool_str1326[sizeof("inhighprivateusesurrogates")];
-    char uniname2ctype_pool_str1331[sizeof("extender")];
-    char uniname2ctype_pool_str1332[sizeof("narb")];
-    char uniname2ctype_pool_str1333[sizeof("sorasompeng")];
-    char uniname2ctype_pool_str1335[sizeof("brai")];
-    char uniname2ctype_pool_str1338[sizeof("hex")];
-    char uniname2ctype_pool_str1341[sizeof("balinese")];
-    char uniname2ctype_pool_str1344[sizeof("arab")];
-    char uniname2ctype_pool_str1346[sizeof("pi")];
-    char uniname2ctype_pool_str1348[sizeof("brahmi")];
-    char uniname2ctype_pool_str1355[sizeof("elbasan")];
-    char uniname2ctype_pool_str1360[sizeof("ingeometricshapesextended")];
-    char uniname2ctype_pool_str1368[sizeof("inhanguljamo")];
-    char uniname2ctype_pool_str1370[sizeof("graph")];
-    char uniname2ctype_pool_str1371[sizeof("sarb")];
-    char uniname2ctype_pool_str1373[sizeof("pcm")];
-    char uniname2ctype_pool_str1378[sizeof("pc")];
-    char uniname2ctype_pool_str1379[sizeof("inethiopicextendeda")];
-    char uniname2ctype_pool_str1380[sizeof("incaucasianalbanian")];
-    char uniname2ctype_pool_str1388[sizeof("pe")];
-    char uniname2ctype_pool_str1390[sizeof("sundanese")];
-    char uniname2ctype_pool_str1396[sizeof("inphaistosdisc")];
-    char uniname2ctype_pool_str1398[sizeof("inancientgreekmusicalnotation")];
-    char uniname2ctype_pool_str1410[sizeof("modifierletter")];
-    char uniname2ctype_pool_str1416[sizeof("word")];
-    char uniname2ctype_pool_str1418[sizeof("ps")];
-    char uniname2ctype_pool_str1419[sizeof("changeswhencasemapped")];
-    char uniname2ctype_pool_str1425[sizeof("lowercaseletter")];
-    char uniname2ctype_pool_str1429[sizeof("inancientgreeknumbers")];
-    char uniname2ctype_pool_str1430[sizeof("saurashtra")];
-    char uniname2ctype_pool_str1439[sizeof("hexdigit")];
-    char uniname2ctype_pool_str1444[sizeof("space")];
-    char uniname2ctype_pool_str1452[sizeof("inbrahmi")];
-    char uniname2ctype_pool_str1472[sizeof("inblockelements")];
-    char uniname2ctype_pool_str1481[sizeof("incoptic")];
-    char uniname2ctype_pool_str1493[sizeof("mlym")];
-    char uniname2ctype_pool_str1502[sizeof("multani")];
-    char uniname2ctype_pool_str1503[sizeof("lyci")];
-    char uniname2ctype_pool_str1508[sizeof("linearb")];
-    char uniname2ctype_pool_str1509[sizeof("changeswhentitlecased")];
-    char uniname2ctype_pool_str1513[sizeof("rejang")];
-    char uniname2ctype_pool_str1516[sizeof("lycian")];
-    char uniname2ctype_pool_str1517[sizeof("inbassavah")];
-    char uniname2ctype_pool_str1518[sizeof("lisu")];
-    char uniname2ctype_pool_str1521[sizeof("incombininghalfmarks")];
-    char uniname2ctype_pool_str1524[sizeof("malayalam")];
-    char uniname2ctype_pool_str1526[sizeof("patws")];
-    char uniname2ctype_pool_str1529[sizeof("palm")];
-    char uniname2ctype_pool_str1536[sizeof("tagalog")];
-    char uniname2ctype_pool_str1537[sizeof("psalterpahlavi")];
-    char uniname2ctype_pool_str1538[sizeof("mymr")];
-    char uniname2ctype_pool_str1540[sizeof("incopticepactnumbers")];
-    char uniname2ctype_pool_str1542[sizeof("inletterlikesymbols")];
-    char uniname2ctype_pool_str1549[sizeof("alpha")];
-    char uniname2ctype_pool_str1551[sizeof("inlepcha")];
-    char uniname2ctype_pool_str1553[sizeof("inpalmyrene")];
-    char uniname2ctype_pool_str1554[sizeof("lepc")];
-    char uniname2ctype_pool_str1561[sizeof("runic")];
-    char uniname2ctype_pool_str1563[sizeof("inugaritic")];
-    char uniname2ctype_pool_str1567[sizeof("myanmar")];
-    char uniname2ctype_pool_str1572[sizeof("saur")];
-    char uniname2ctype_pool_str1573[sizeof("mult")];
-    char uniname2ctype_pool_str1579[sizeof("talu")];
-    char uniname2ctype_pool_str1584[sizeof("syrc")];
-    char uniname2ctype_pool_str1586[sizeof("perm")];
-    char uniname2ctype_pool_str1591[sizeof("telu")];
-    char uniname2ctype_pool_str1597[sizeof("tangut")];
-    char uniname2ctype_pool_str1598[sizeof("insaurashtra")];
-    char uniname2ctype_pool_str1602[sizeof("inoriya")];
-    char uniname2ctype_pool_str1604[sizeof("graphemeextend")];
-    char uniname2ctype_pool_str1607[sizeof("imperialaramaic")];
-    char uniname2ctype_pool_str1613[sizeof("inbengali")];
-    char uniname2ctype_pool_str1614[sizeof("variationselector")];
-    char uniname2ctype_pool_str1619[sizeof("syriac")];
-    char uniname2ctype_pool_str1622[sizeof("inarabicmathematicalalphabeticsymbols")];
-    char uniname2ctype_pool_str1624[sizeof("beng")];
-    char uniname2ctype_pool_str1625[sizeof("inimperialaramaic")];
-    char uniname2ctype_pool_str1626[sizeof("sylotinagri")];
-    char uniname2ctype_pool_str1630[sizeof("inyiradicals")];
-    char uniname2ctype_pool_str1637[sizeof("mathsymbol")];
-    char uniname2ctype_pool_str1638[sizeof("inbuginese")];
-    char uniname2ctype_pool_str1641[sizeof("osmanya")];
-    char uniname2ctype_pool_str1645[sizeof("idsb")];
-    char uniname2ctype_pool_str1646[sizeof("bidic")];
-    char uniname2ctype_pool_str1647[sizeof("inphoenician")];
-    char uniname2ctype_pool_str1650[sizeof("prti")];
-    char uniname2ctype_pool_str1653[sizeof("brah")];
-    char uniname2ctype_pool_str1657[sizeof("cuneiform")];
-    char uniname2ctype_pool_str1659[sizeof("ogrext")];
-    char uniname2ctype_pool_str1662[sizeof("incountingrodnumerals")];
-    char uniname2ctype_pool_str1665[sizeof("hebr")];
-    char uniname2ctype_pool_str1666[sizeof("cprt")];
-    char uniname2ctype_pool_str1673[sizeof("coptic")];
-    char uniname2ctype_pool_str1676[sizeof("indevanagariextended")];
-    char uniname2ctype_pool_str1677[sizeof("inyijinghexagramsymbols")];
-    char uniname2ctype_pool_str1681[sizeof("incyrillicsupplement")];
-    char uniname2ctype_pool_str1683[sizeof("inarabicextendeda")];
-    char uniname2ctype_pool_str1688[sizeof("inalchemicalsymbols")];
-    char uniname2ctype_pool_str1691[sizeof("signwriting")];
-    char uniname2ctype_pool_str1692[sizeof("inaegeannumbers")];
-    char uniname2ctype_pool_str1694[sizeof("privateuse")];
-    char uniname2ctype_pool_str1696[sizeof("ininscriptionalparthian")];
-    char uniname2ctype_pool_str1697[sizeof("braille")];
-    char uniname2ctype_pool_str1698[sizeof("ininscriptionalpahlavi")];
-    char uniname2ctype_pool_str1702[sizeof("incherokeesupplement")];
-    char uniname2ctype_pool_str1703[sizeof("tagb")];
-    char uniname2ctype_pool_str1706[sizeof("inlinearbsyllabary")];
-    char uniname2ctype_pool_str1713[sizeof("cyrl")];
-    char uniname2ctype_pool_str1714[sizeof("intagbanwa")];
-    char uniname2ctype_pool_str1715[sizeof("inunifiedcanadianaboriginalsyllabics")];
-    char uniname2ctype_pool_str1719[sizeof("copt")];
-    char uniname2ctype_pool_str1722[sizeof("inkannada")];
-    char uniname2ctype_pool_str1723[sizeof("tirhuta")];
-    char uniname2ctype_pool_str1724[sizeof("kana")];
-    char uniname2ctype_pool_str1727[sizeof("changeswhencasefolded")];
-    char uniname2ctype_pool_str1733[sizeof("inhighsurrogates")];
-    char uniname2ctype_pool_str1734[sizeof("runr")];
-    char uniname2ctype_pool_str1737[sizeof("cakm")];
-    char uniname2ctype_pool_str1741[sizeof("inlatin1supplement")];
-    char uniname2ctype_pool_str1743[sizeof("print")];
-    char uniname2ctype_pool_str1752[sizeof("inchakma")];
-    char uniname2ctype_pool_str1767[sizeof("patternwhitespace")];
-    char uniname2ctype_pool_str1768[sizeof("number")];
-    char uniname2ctype_pool_str1771[sizeof("mendekikakui")];
-    char uniname2ctype_pool_str1774[sizeof("spaceseparator")];
-    char uniname2ctype_pool_str1775[sizeof("changeswhenlowercased")];
-    char uniname2ctype_pool_str1786[sizeof("sylo")];
-    char uniname2ctype_pool_str1790[sizeof("meeteimayek")];
-    char uniname2ctype_pool_str1794[sizeof("inethiopicsupplement")];
-    char uniname2ctype_pool_str1804[sizeof("orya")];
-    char uniname2ctype_pool_str1805[sizeof("inalphabeticpresentationforms")];
-    char uniname2ctype_pool_str1806[sizeof("inkaithi")];
-    char uniname2ctype_pool_str1809[sizeof("incjkcompatibilityforms")];
-    char uniname2ctype_pool_str1811[sizeof("takri")];
-    char uniname2ctype_pool_str1814[sizeof("incjkcompatibilityideographs")];
-    char uniname2ctype_pool_str1826[sizeof("inkatakana")];
-    char uniname2ctype_pool_str1835[sizeof("phli")];
-    char uniname2ctype_pool_str1843[sizeof("sund")];
-    char uniname2ctype_pool_str1845[sizeof("inmathematicaloperators")];
-    char uniname2ctype_pool_str1848[sizeof("closepunctuation")];
-    char uniname2ctype_pool_str1850[sizeof("incjkstrokes")];
-    char uniname2ctype_pool_str1851[sizeof("separator")];
-    char uniname2ctype_pool_str1856[sizeof("finalpunctuation")];
-    char uniname2ctype_pool_str1860[sizeof("inmeeteimayek")];
-    char uniname2ctype_pool_str1862[sizeof("inethiopicextended")];
-    char uniname2ctype_pool_str1866[sizeof("unassigned")];
-    char uniname2ctype_pool_str1869[sizeof("inpsalterpahlavi")];
-    char uniname2ctype_pool_str1870[sizeof("inphagspa")];
-    char uniname2ctype_pool_str1872[sizeof("po")];
-    char uniname2ctype_pool_str1873[sizeof("otherdefaultignorablecodepoint")];
-    char uniname2ctype_pool_str1876[sizeof("incjkcompatibilityideographssupplement")];
-    char uniname2ctype_pool_str1883[sizeof("kali")];
-    char uniname2ctype_pool_str1884[sizeof("lepcha")];
-    char uniname2ctype_pool_str1886[sizeof("wspace")];
-    char uniname2ctype_pool_str1893[sizeof("softdotted")];
-    char uniname2ctype_pool_str1904[sizeof("grbase")];
-    char uniname2ctype_pool_str1905[sizeof("inhanunoo")];
-    char uniname2ctype_pool_str1906[sizeof("cyrillic")];
-    char uniname2ctype_pool_str1910[sizeof("incombiningdiacriticalmarks")];
-    char uniname2ctype_pool_str1920[sizeof("incombiningdiacriticalmarksforsymbols")];
-    char uniname2ctype_pool_str1921[sizeof("meroitichieroglyphs")];
-    char uniname2ctype_pool_str1931[sizeof("mark")];
-    char uniname2ctype_pool_str1932[sizeof("ugaritic")];
-    char uniname2ctype_pool_str1933[sizeof("aghb")];
-    char uniname2ctype_pool_str1935[sizeof("inbuhid")];
-    char uniname2ctype_pool_str1937[sizeof("inkanasupplement")];
-    char uniname2ctype_pool_str1941[sizeof("phoenician")];
-    char uniname2ctype_pool_str1945[sizeof("inkharoshthi")];
-    char uniname2ctype_pool_str1951[sizeof("inkhmer")];
-    char uniname2ctype_pool_str1964[sizeof("symbol")];
-    char uniname2ctype_pool_str1968[sizeof("pf")];
-    char uniname2ctype_pool_str1972[sizeof("incombiningdiacriticalmarkssupplement")];
-    char uniname2ctype_pool_str1980[sizeof("lydi")];
-    char uniname2ctype_pool_str1981[sizeof("hangul")];
-    char uniname2ctype_pool_str1985[sizeof("incurrencysymbols")];
-    char uniname2ctype_pool_str1987[sizeof("intangutcomponents")];
-    char uniname2ctype_pool_str1993[sizeof("lydian")];
-    char uniname2ctype_pool_str2004[sizeof("othergraphemeextend")];
-    char uniname2ctype_pool_str2015[sizeof("intakri")];
-    char uniname2ctype_pool_str2016[sizeof("takr")];
-    char uniname2ctype_pool_str2018[sizeof("induployan")];
-    char uniname2ctype_pool_str2026[sizeof("ugar")];
-    char uniname2ctype_pool_str2027[sizeof("inprivateusearea")];
-    char uniname2ctype_pool_str2046[sizeof("kaithi")];
-    char uniname2ctype_pool_str2051[sizeof("inkhmersymbols")];
-    char uniname2ctype_pool_str2068[sizeof("bidicontrol")];
-    char uniname2ctype_pool_str2070[sizeof("ethiopic")];
-    char uniname2ctype_pool_str2083[sizeof("inhebrew")];
-    char uniname2ctype_pool_str2111[sizeof("bassavah")];
-    char uniname2ctype_pool_str2115[sizeof("kthi")];
-    char uniname2ctype_pool_str2119[sizeof("inoldpersian")];
-    char uniname2ctype_pool_str2122[sizeof("hung")];
-    char uniname2ctype_pool_str2126[sizeof("xpeo")];
-    char uniname2ctype_pool_str2136[sizeof("inoldpermic")];
-    char uniname2ctype_pool_str2153[sizeof("olck")];
-    char uniname2ctype_pool_str2157[sizeof("phnx")];
-    char uniname2ctype_pool_str2164[sizeof("olchiki")];
-    char uniname2ctype_pool_str2169[sizeof("phag")];
-    char uniname2ctype_pool_str2180[sizeof("inunifiedcanadianaboriginalsyllabicsextended")];
-    char uniname2ctype_pool_str2184[sizeof("inpahawhhmong")];
-    char uniname2ctype_pool_str2193[sizeof("inhalfwidthandfullwidthforms")];
-    char uniname2ctype_pool_str2200[sizeof("patternsyntax")];
-    char uniname2ctype_pool_str2203[sizeof("inphoneticextensions")];
-    char uniname2ctype_pool_str2208[sizeof("knda")];
-    char uniname2ctype_pool_str2219[sizeof("combiningmark")];
-    char uniname2ctype_pool_str2220[sizeof("plrd")];
-    char uniname2ctype_pool_str2221[sizeof("inmendekikakui")];
-    char uniname2ctype_pool_str2230[sizeof("hluw")];
-    char uniname2ctype_pool_str2231[sizeof("nko")];
-    char uniname2ctype_pool_str2232[sizeof("nkoo")];
-    char uniname2ctype_pool_str2235[sizeof("inhanguljamoextendedb")];
-    char uniname2ctype_pool_str2237[sizeof("kannada")];
-    char uniname2ctype_pool_str2240[sizeof("khmr")];
-    char uniname2ctype_pool_str2246[sizeof("khar")];
-    char uniname2ctype_pool_str2248[sizeof("otheruppercase")];
-    char uniname2ctype_pool_str2249[sizeof("oldhungarian")];
-    char uniname2ctype_pool_str2254[sizeof("graphemeclusterbreak=ebasegaz")];
-    char uniname2ctype_pool_str2256[sizeof("inkhojki")];
-    char uniname2ctype_pool_str2259[sizeof("graphemeclusterbreak=ebase")];
-    char uniname2ctype_pool_str2262[sizeof("otherpunctuation")];
-    char uniname2ctype_pool_str2265[sizeof("inphoneticextensionssupplement")];
-    char uniname2ctype_pool_str2273[sizeof("enclosingmark")];
-    char uniname2ctype_pool_str2285[sizeof("inkatakanaphoneticextensions")];
-    char uniname2ctype_pool_str2292[sizeof("gujr")];
-    char uniname2ctype_pool_str2293[sizeof("inkangxiradicals")];
-    char uniname2ctype_pool_str2310[sizeof("inarabicpresentationformsb")];
-    char uniname2ctype_pool_str2313[sizeof("gujarati")];
-    char uniname2ctype_pool_str2322[sizeof("graphemeclusterbreak=t")];
-    char uniname2ctype_pool_str2324[sizeof("graphemeclusterbreak=lvt")];
-    char uniname2ctype_pool_str2332[sizeof("pd")];
-    char uniname2ctype_pool_str2333[sizeof("xsux")];
-    char uniname2ctype_pool_str2341[sizeof("uideo")];
-    char uniname2ctype_pool_str2346[sizeof("hebrew")];
-    char uniname2ctype_pool_str2349[sizeof("kharoshthi")];
-    char uniname2ctype_pool_str2350[sizeof("surrogate")];
-    char uniname2ctype_pool_str2353[sizeof("incyrillicextendedb")];
-    char uniname2ctype_pool_str2360[sizeof("cherokee")];
-    char uniname2ctype_pool_str2373[sizeof("modifiersymbol")];
-    char uniname2ctype_pool_str2375[sizeof("incombiningdiacriticalmarksextended")];
-    char uniname2ctype_pool_str2399[sizeof("graphemeclusterbreak=l")];
-    char uniname2ctype_pool_str2405[sizeof("graphemeclusterbreak=control")];
-    char uniname2ctype_pool_str2410[sizeof("deprecated")];
-    char uniname2ctype_pool_str2418[sizeof("ingeorgiansupplement")];
-    char uniname2ctype_pool_str2419[sizeof("idstrinaryoperator")];
-    char uniname2ctype_pool_str2425[sizeof("bamu")];
-    char uniname2ctype_pool_str2427[sizeof("inbamum")];
-    char uniname2ctype_pool_str2430[sizeof("grek")];
-    char uniname2ctype_pool_str2445[sizeof("graphemeclusterbreak=cr")];
-    char uniname2ctype_pool_str2451[sizeof("inmeroiticcursive")];
-    char uniname2ctype_pool_str2452[sizeof("graphemeclusterbreak=emodifier")];
-    char uniname2ctype_pool_str2455[sizeof("khmer")];
-    char uniname2ctype_pool_str2460[sizeof("graphemeclusterbreak=regionalindicator")];
-    char uniname2ctype_pool_str2476[sizeof("inglagoliticsupplement")];
-    char uniname2ctype_pool_str2477[sizeof("oldturkic")];
-    char uniname2ctype_pool_str2487[sizeof("inlatinextendedb")];
-    char uniname2ctype_pool_str2489[sizeof("unifiedideograph")];
-    char uniname2ctype_pool_str2500[sizeof("orkh")];
-    char uniname2ctype_pool_str2511[sizeof("graphemeclusterbreak=zwj")];
-    char uniname2ctype_pool_str2518[sizeof("caucasianalbanian")];
-    char uniname2ctype_pool_str2520[sizeof("graphemeclusterbreak=glueafterzwj")];
-    char uniname2ctype_pool_str2530[sizeof("oldnortharabian")];
-    char uniname2ctype_pool_str2546[sizeof("graphemeclusterbreak=lf")];
-    char uniname2ctype_pool_str2565[sizeof("khoj")];
-    char uniname2ctype_pool_str2589[sizeof("inlimbu")];
-    char uniname2ctype_pool_str2602[sizeof("inarabicsupplement")];
-    char uniname2ctype_pool_str2629[sizeof("any")];
-    char uniname2ctype_pool_str2661[sizeof("alphabetic")];
-    char uniname2ctype_pool_str2663[sizeof("defaultignorablecodepoint")];
-    char uniname2ctype_pool_str2673[sizeof("p")];
-    char uniname2ctype_pool_str2674[sizeof("pauc")];
-    char uniname2ctype_pool_str2691[sizeof("zp")];
-    char uniname2ctype_pool_str2692[sizeof("inbamumsupplement")];
-    char uniname2ctype_pool_str2698[sizeof("xposixpunct")];
-    char uniname2ctype_pool_str2732[sizeof("graphemeclusterbreak=extend")];
-    char uniname2ctype_pool_str2733[sizeof("graphemeclusterbreak=prepend")];
-    char uniname2ctype_pool_str2735[sizeof("inyisyllables")];
-    char uniname2ctype_pool_str2755[sizeof("patsyn")];
-    char uniname2ctype_pool_str2773[sizeof("lu")];
-    char uniname2ctype_pool_str2787[sizeof("limbu")];
-    char uniname2ctype_pool_str2808[sizeof("inkanbun")];
-    char uniname2ctype_pool_str2810[sizeof("insuperscriptsandsubscripts")];
-    char uniname2ctype_pool_str2822[sizeof("inlisu")];
-    char uniname2ctype_pool_str2827[sizeof("punct")];
-    char uniname2ctype_pool_str2844[sizeof("currencysymbol")];
-    char uniname2ctype_pool_str2845[sizeof("graphemeclusterbreak=v")];
-    char uniname2ctype_pool_str2846[sizeof("graphemeclusterbreak=lv")];
-    char uniname2ctype_pool_str2876[sizeof("intelugu")];
-    char uniname2ctype_pool_str2897[sizeof("insupplementalmathematicaloperators")];
-    char uniname2ctype_pool_str2902[sizeof("batk")];
-    char uniname2ctype_pool_str2903[sizeof("bugi")];
-    char uniname2ctype_pool_str2907[sizeof("changeswhenuppercased")];
-    char uniname2ctype_pool_str2910[sizeof("inbatak")];
-    char uniname2ctype_pool_str2928[sizeof("inplayingcards")];
-    char uniname2ctype_pool_str2932[sizeof("pahawhhmong")];
-    char uniname2ctype_pool_str2954[sizeof("buginese")];
-    char uniname2ctype_pool_str2974[sizeof("bopo")];
-    char uniname2ctype_pool_str2977[sizeof("innoblock")];
-    char uniname2ctype_pool_str2985[sizeof("inbopomofo")];
-    char uniname2ctype_pool_str2997[sizeof("hyphen")];
-    char uniname2ctype_pool_str3030[sizeof("inkayahli")];
-    char uniname2ctype_pool_str3032[sizeof("cypriot")];
-    char uniname2ctype_pool_str3057[sizeof("insupplementalarrowsa")];
-    char uniname2ctype_pool_str3059[sizeof("cwu")];
-    char uniname2ctype_pool_str3064[sizeof("insupplementalarrowsc")];
-    char uniname2ctype_pool_str3067[sizeof("phagspa")];
-    char uniname2ctype_pool_str3070[sizeof("incjkcompatibility")];
-    char uniname2ctype_pool_str3072[sizeof("palmyrene")];
-    char uniname2ctype_pool_str3081[sizeof("incypriotsyllabary")];
-    char uniname2ctype_pool_str3096[sizeof("inboxdrawing")];
-    char uniname2ctype_pool_str3098[sizeof("spacingmark")];
-    char uniname2ctype_pool_str3159[sizeof("bhks")];
-    char uniname2ctype_pool_str3161[sizeof("incjksymbolsandpunctuation")];
-    char uniname2ctype_pool_str3165[sizeof("egyp")];
-    char uniname2ctype_pool_str3167[sizeof("phlp")];
-    char uniname2ctype_pool_str3181[sizeof("bhaiksuki")];
-    char uniname2ctype_pool_str3197[sizeof("dep")];
-    char uniname2ctype_pool_str3224[sizeof("buhd")];
-    char uniname2ctype_pool_str3231[sizeof("inegyptianhieroglyphs")];
-    char uniname2ctype_pool_str3252[sizeof("bopomofo")];
-    char uniname2ctype_pool_str3295[sizeof("dashpunctuation")];
-    char uniname2ctype_pool_str3307[sizeof("dupl")];
-    char uniname2ctype_pool_str3314[sizeof("guru")];
-    char uniname2ctype_pool_str3338[sizeof("nonspacingmark")];
-    char uniname2ctype_pool_str3346[sizeof("prependedconcatenationmark")];
-    char uniname2ctype_pool_str3363[sizeof("oupper")];
-    char uniname2ctype_pool_str3388[sizeof("telugu")];
-    char uniname2ctype_pool_str3413[sizeof("qmark")];
-    char uniname2ctype_pool_str3428[sizeof("sk")];
-    char uniname2ctype_pool_str3500[sizeof("egyptianhieroglyphs")];
-    char uniname2ctype_pool_str3511[sizeof("inkhudawadi")];
-    char uniname2ctype_pool_str3514[sizeof("kayahli")];
-    char uniname2ctype_pool_str3525[sizeof("katakana")];
-    char uniname2ctype_pool_str3550[sizeof("inhangulcompatibilityjamo")];
-    char uniname2ctype_pool_str3552[sizeof("incjkradicalssupplement")];
-    char uniname2ctype_pool_str3595[sizeof("quotationmark")];
-    char uniname2ctype_pool_str3617[sizeof("oldsoutharabian")];
-    char uniname2ctype_pool_str3704[sizeof("unknown")];
-    char uniname2ctype_pool_str3722[sizeof("buhid")];
-    char uniname2ctype_pool_str3776[sizeof("khudawadi")];
-    char uniname2ctype_pool_str3828[sizeof("incjkunifiedideographsextensiona")];
-    char uniname2ctype_pool_str3835[sizeof("incjkunifiedideographsextensionc")];
-    char uniname2ctype_pool_str3840[sizeof("incjkunifiedideographsextensione")];
-    char uniname2ctype_pool_str3845[sizeof("incjkunifiedideographs")];
-    char uniname2ctype_pool_str3931[sizeof("paragraphseparator")];
-    char uniname2ctype_pool_str3933[sizeof("graphemeclusterbreak=spacingmark")];
-    char uniname2ctype_pool_str3939[sizeof("zyyy")];
-    char uniname2ctype_pool_str3965[sizeof("paucinhau")];
-    char uniname2ctype_pool_str3974[sizeof("inpaucinhau")];
-    char uniname2ctype_pool_str3989[sizeof("khojki")];
-    char uniname2ctype_pool_str4043[sizeof("punctuation")];
-    char uniname2ctype_pool_str4124[sizeof("greek")];
-    char uniname2ctype_pool_str4136[sizeof("insupplementalpunctuation")];
-    char uniname2ctype_pool_str4144[sizeof("insupplementalarrowsb")];
-    char uniname2ctype_pool_str4188[sizeof("insupplementaryprivateuseareaa")];
-    char uniname2ctype_pool_str4190[sizeof("insupplementalsymbolsandpictographs")];
-    char uniname2ctype_pool_str4214[sizeof("inbopomofoextended")];
-    char uniname2ctype_pool_str4241[sizeof("uppercase")];
-    char uniname2ctype_pool_str4270[sizeof("grlink")];
-    char uniname2ctype_pool_str4312[sizeof("incjkunifiedideographsextensiond")];
-    char uniname2ctype_pool_str4373[sizeof("openpunctuation")];
-    char uniname2ctype_pool_str4406[sizeof("upper")];
-    char uniname2ctype_pool_str4466[sizeof("graphemelink")];
-    char uniname2ctype_pool_str4528[sizeof("uppercaseletter")];
-    char uniname2ctype_pool_str4596[sizeof("batak")];
-    char uniname2ctype_pool_str4673[sizeof("blank")];
-    char uniname2ctype_pool_str4716[sizeof("duployan")];
-    char uniname2ctype_pool_str4915[sizeof("incjkunifiedideographsextensionb")];
-    char uniname2ctype_pool_str5015[sizeof("gurmukhi")];
-    char uniname2ctype_pool_str5275[sizeof("insupplementaryprivateuseareab")];
+    char uniname2ctype_pool_str1274[sizeof("ahom")];
+    char uniname2ctype_pool_str1282[sizeof("incjkunifiedideographsextensione")];
+    char uniname2ctype_pool_str1285[sizeof("khmr")];
+    char uniname2ctype_pool_str1289[sizeof("insinhala")];
+    char uniname2ctype_pool_str1292[sizeof("inmiscellaneoustechnical")];
+    char uniname2ctype_pool_str1297[sizeof("saur")];
+    char uniname2ctype_pool_str1300[sizeof("guru")];
+    char uniname2ctype_pool_str1301[sizeof("sundanese")];
+    char uniname2ctype_pool_str1306[sizeof("punct")];
+    char uniname2ctype_pool_str1314[sizeof("paucinhau")];
+    char uniname2ctype_pool_str1317[sizeof("gurmukhi")];
+    char uniname2ctype_pool_str1319[sizeof("variationselector")];
+    char uniname2ctype_pool_str1331[sizeof("logicalorderexception")];
+    char uniname2ctype_pool_str1340[sizeof("khmer")];
+    char uniname2ctype_pool_str1343[sizeof("limbu")];
+    char uniname2ctype_pool_str1354[sizeof("inscriptionalpahlavi")];
+    char uniname2ctype_pool_str1355[sizeof("oidc")];
+    char uniname2ctype_pool_str1358[sizeof("incjkunifiedideographsextensionc")];
+    char uniname2ctype_pool_str1360[sizeof("cntrl")];
+    char uniname2ctype_pool_str1365[sizeof("inlatinextendedadditional")];
+    char uniname2ctype_pool_str1366[sizeof("decimalnumber")];
+    char uniname2ctype_pool_str1367[sizeof("insorasompeng")];
+    char uniname2ctype_pool_str1369[sizeof("radical")];
+    char uniname2ctype_pool_str1373[sizeof("emojimodifier")];
+    char uniname2ctype_pool_str1375[sizeof("kharoshthi")];
+    char uniname2ctype_pool_str1380[sizeof("n")];
+    char uniname2ctype_pool_str1384[sizeof("math")];
+    char uniname2ctype_pool_str1387[sizeof("goth")];
+    char uniname2ctype_pool_str1400[sizeof("anatolianhieroglyphs")];
+    char uniname2ctype_pool_str1401[sizeof("inenclosedalphanumerics")];
+    char uniname2ctype_pool_str1407[sizeof("nandinagari")];
+    char uniname2ctype_pool_str1409[sizeof("no")];
+    char uniname2ctype_pool_str1419[sizeof("nko")];
+    char uniname2ctype_pool_str1420[sizeof("nkoo")];
+    char uniname2ctype_pool_str1422[sizeof("ingreekandcoptic")];
+    char uniname2ctype_pool_str1423[sizeof("olck")];
+    char uniname2ctype_pool_str1426[sizeof("p")];
+    char uniname2ctype_pool_str1428[sizeof("grantha")];
+    char uniname2ctype_pool_str1434[sizeof("olchiki")];
+    char uniname2ctype_pool_str1438[sizeof("incjkunifiedideographs")];
+    char uniname2ctype_pool_str1441[sizeof("zanb")];
+    char uniname2ctype_pool_str1442[sizeof("intirhuta")];
+    char uniname2ctype_pool_str1445[sizeof("oids")];
+    char uniname2ctype_pool_str1448[sizeof("inhatran")];
+    char uniname2ctype_pool_str1449[sizeof("linb")];
+    char uniname2ctype_pool_str1450[sizeof("xpeo")];
+    char uniname2ctype_pool_str1451[sizeof("mult")];
+    char uniname2ctype_pool_str1454[sizeof("saurashtra")];
+    char uniname2ctype_pool_str1457[sizeof("kthi")];
+    char uniname2ctype_pool_str1462[sizeof("inbhaiksuki")];
+    char uniname2ctype_pool_str1466[sizeof("olower")];
+    char uniname2ctype_pool_str1470[sizeof("innabataean")];
+    char uniname2ctype_pool_str1471[sizeof("inphoenician")];
+    char uniname2ctype_pool_str1475[sizeof("inkanbun")];
+    char uniname2ctype_pool_str1476[sizeof("inmeroitichieroglyphs")];
+    char uniname2ctype_pool_str1478[sizeof("inkayahli")];
+    char uniname2ctype_pool_str1481[sizeof("phnx")];
+    char uniname2ctype_pool_str1485[sizeof("inoriya")];
+    char uniname2ctype_pool_str1489[sizeof("enclosingmark")];
+    char uniname2ctype_pool_str1495[sizeof("sd")];
+    char uniname2ctype_pool_str1497[sizeof("inelbasan")];
+    char uniname2ctype_pool_str1498[sizeof("wara")];
+    char uniname2ctype_pool_str1499[sizeof("inenclosedideographicsupplement")];
+    char uniname2ctype_pool_str1501[sizeof("sidd")];
+    char uniname2ctype_pool_str1507[sizeof("linearb")];
+    char uniname2ctype_pool_str1509[sizeof("hani")];
+    char uniname2ctype_pool_str1512[sizeof("han")];
+    char uniname2ctype_pool_str1517[sizeof("inenclosedalphanumericsupplement")];
+    char uniname2ctype_pool_str1519[sizeof("medf")];
+    char uniname2ctype_pool_str1520[sizeof("bidicontrol")];
+    char uniname2ctype_pool_str1523[sizeof("hano")];
+    char uniname2ctype_pool_str1524[sizeof("inphaistosdisc")];
+    char uniname2ctype_pool_str1529[sizeof("limb")];
+    char uniname2ctype_pool_str1531[sizeof("inkangxiradicals")];
+    char uniname2ctype_pool_str1533[sizeof("lepc")];
+    char uniname2ctype_pool_str1535[sizeof("medefaidrin")];
+    char uniname2ctype_pool_str1536[sizeof("braille")];
+    char uniname2ctype_pool_str1537[sizeof("regionalindicator")];
+    char uniname2ctype_pool_str1542[sizeof("inlowsurrogates")];
+    char uniname2ctype_pool_str1544[sizeof("inshorthandformatcontrols")];
+    char uniname2ctype_pool_str1547[sizeof("brah")];
+    char uniname2ctype_pool_str1548[sizeof("inkhojki")];
+    char uniname2ctype_pool_str1549[sizeof("inoldhungarian")];
+    char uniname2ctype_pool_str1552[sizeof("hanunoo")];
+    char uniname2ctype_pool_str1555[sizeof("hira")];
+    char uniname2ctype_pool_str1557[sizeof("beng")];
+    char uniname2ctype_pool_str1563[sizeof("emojimodifierbase")];
+    char uniname2ctype_pool_str1565[sizeof("inarabic")];
+    char uniname2ctype_pool_str1567[sizeof("lyci")];
+    char uniname2ctype_pool_str1569[sizeof("ahex")];
+    char uniname2ctype_pool_str1572[sizeof("inherited")];
+    char uniname2ctype_pool_str1580[sizeof("glag")];
+    char uniname2ctype_pool_str1582[sizeof("lycian")];
+    char uniname2ctype_pool_str1587[sizeof("indogra")];
+    char uniname2ctype_pool_str1594[sizeof("dsrt")];
+    char uniname2ctype_pool_str1597[sizeof("arab")];
+    char uniname2ctype_pool_str1602[sizeof("mymr")];
+    char uniname2ctype_pool_str1607[sizeof("myanmar")];
+    char uniname2ctype_pool_str1613[sizeof("phli")];
+    char uniname2ctype_pool_str1617[sizeof("inimperialaramaic")];
+    char uniname2ctype_pool_str1622[sizeof("ingreekextended")];
+    char uniname2ctype_pool_str1623[sizeof("inanatolianhieroglyphs")];
+    char uniname2ctype_pool_str1629[sizeof("punctuation")];
+    char uniname2ctype_pool_str1631[sizeof("takri")];
+    char uniname2ctype_pool_str1635[sizeof("graphemeextend")];
+    char uniname2ctype_pool_str1638[sizeof("invai")];
+    char uniname2ctype_pool_str1643[sizeof("cwl")];
+    char uniname2ctype_pool_str1654[sizeof("ingeometricshapes")];
+    char uniname2ctype_pool_str1655[sizeof("emojicomponent")];
+    char uniname2ctype_pool_str1662[sizeof("coptic")];
+    char uniname2ctype_pool_str1671[sizeof("deseret")];
+    char uniname2ctype_pool_str1675[sizeof("inarabicpresentationformsa")];
+    char uniname2ctype_pool_str1676[sizeof("takr")];
+    char uniname2ctype_pool_str1677[sizeof("inbasiclatin")];
+    char uniname2ctype_pool_str1682[sizeof("incjkunifiedideographsextensiond")];
+    char uniname2ctype_pool_str1686[sizeof("sinh")];
+    char uniname2ctype_pool_str1687[sizeof("sund")];
+    char uniname2ctype_pool_str1691[sizeof("shavian")];
+    char uniname2ctype_pool_str1692[sizeof("taile")];
+    char uniname2ctype_pool_str1699[sizeof("insundanesesupplement")];
+    char uniname2ctype_pool_str1702[sizeof("inelymaic")];
+    char uniname2ctype_pool_str1703[sizeof("insoyombo")];
+    char uniname2ctype_pool_str1704[sizeof("bhks")];
+    char uniname2ctype_pool_str1714[sizeof("bhaiksuki")];
+    char uniname2ctype_pool_str1716[sizeof("incjkcompatibility")];
+    char uniname2ctype_pool_str1722[sizeof("inhanunoo")];
+    char uniname2ctype_pool_str1724[sizeof("intangut")];
+    char uniname2ctype_pool_str1728[sizeof("sogdian")];
+    char uniname2ctype_pool_str1729[sizeof("inlatinextendedd")];
+    char uniname2ctype_pool_str1730[sizeof("sogo")];
+    char uniname2ctype_pool_str1731[sizeof("insinhalaarchaicnumbers")];
+    char uniname2ctype_pool_str1732[sizeof("ideographic")];
+    char uniname2ctype_pool_str1733[sizeof("ugar")];
+    char uniname2ctype_pool_str1740[sizeof("copt")];
+    char uniname2ctype_pool_str1742[sizeof("imperialaramaic")];
+    char uniname2ctype_pool_str1745[sizeof("insogdian")];
+    char uniname2ctype_pool_str1746[sizeof("indingbats")];
+    char uniname2ctype_pool_str1750[sizeof("format")];
+    char uniname2ctype_pool_str1752[sizeof("ininscriptionalpahlavi")];
+    char uniname2ctype_pool_str1757[sizeof("ininscriptionalparthian")];
+    char uniname2ctype_pool_str1766[sizeof("grbase")];
+    char uniname2ctype_pool_str1769[sizeof("inbatak")];
+    char uniname2ctype_pool_str1776[sizeof("cprt")];
+    char uniname2ctype_pool_str1780[sizeof("cwcf")];
+    char uniname2ctype_pool_str1788[sizeof("cuneiform")];
+    char uniname2ctype_pool_str1791[sizeof("term")];
+    char uniname2ctype_pool_str1806[sizeof("intibetan")];
+    char uniname2ctype_pool_str1810[sizeof("intags")];
+    char uniname2ctype_pool_str1811[sizeof("asciihexdigit")];
+    char uniname2ctype_pool_str1813[sizeof("sentenceterminal")];
+    char uniname2ctype_pool_str1816[sizeof("inmayannumerals")];
+    char uniname2ctype_pool_str1821[sizeof("nand")];
+    char uniname2ctype_pool_str1825[sizeof("patsyn")];
+    char uniname2ctype_pool_str1826[sizeof("hatran")];
+    char uniname2ctype_pool_str1828[sizeof("inblockelements")];
+    char uniname2ctype_pool_str1838[sizeof("inornamentaldingbats")];
+    char uniname2ctype_pool_str1842[sizeof("innumberforms")];
+    char uniname2ctype_pool_str1843[sizeof("oldpersian")];
+    char uniname2ctype_pool_str1846[sizeof("inshavian")];
+    char uniname2ctype_pool_str1848[sizeof("bopo")];
+    char uniname2ctype_pool_str1861[sizeof("hatr")];
+    char uniname2ctype_pool_str1866[sizeof("caseignorable")];
+    char uniname2ctype_pool_str1871[sizeof("inoldpersian")];
+    char uniname2ctype_pool_str1878[sizeof("modifierletter")];
+    char uniname2ctype_pool_str1881[sizeof("cwu")];
+    char uniname2ctype_pool_str1891[sizeof("lydi")];
+    char uniname2ctype_pool_str1892[sizeof("inbyzantinemusicalsymbols")];
+    char uniname2ctype_pool_str1896[sizeof("ingeometricshapesextended")];
+    char uniname2ctype_pool_str1904[sizeof("inmyanmarextendedb")];
+    char uniname2ctype_pool_str1905[sizeof("innushu")];
+    char uniname2ctype_pool_str1906[sizeof("lydian")];
+    char uniname2ctype_pool_str1911[sizeof("inunifiedcanadianaboriginalsyllabics")];
+    char uniname2ctype_pool_str1915[sizeof("orkh")];
+    char uniname2ctype_pool_str1928[sizeof("inyiradicals")];
+    char uniname2ctype_pool_str1929[sizeof("inkatakanaphoneticextensions")];
+    char uniname2ctype_pool_str1930[sizeof("inethiopicextendeda")];
+    char uniname2ctype_pool_str1932[sizeof("incoptic")];
+    char uniname2ctype_pool_str1936[sizeof("inarabicextendeda")];
+    char uniname2ctype_pool_str1947[sizeof("oldpermic")];
+    char uniname2ctype_pool_str1950[sizeof("incjksymbolsandpunctuation")];
+    char uniname2ctype_pool_str1951[sizeof("word")];
+    char uniname2ctype_pool_str1958[sizeof("bopomofo")];
+    char uniname2ctype_pool_str1961[sizeof("ogam")];
+    char uniname2ctype_pool_str1964[sizeof("inlisu")];
+    char uniname2ctype_pool_str1967[sizeof("inoldpermic")];
+    char uniname2ctype_pool_str1968[sizeof("innoblock")];
+    char uniname2ctype_pool_str1971[sizeof("taiviet")];
+    char uniname2ctype_pool_str1985[sizeof("inbraillepatterns")];
+    char uniname2ctype_pool_str1991[sizeof("alpha")];
+    char uniname2ctype_pool_str1993[sizeof("inbalinese")];
+    char uniname2ctype_pool_str1994[sizeof("sorasompeng")];
+    char uniname2ctype_pool_str1996[sizeof("closepunctuation")];
+    char uniname2ctype_pool_str2006[sizeof("inmiscellaneousmathematicalsymbolsb")];
+    char uniname2ctype_pool_str2010[sizeof("inlepcha")];
+    char uniname2ctype_pool_str2014[sizeof("insyriacsupplement")];
+    char uniname2ctype_pool_str2016[sizeof("newa")];
+    char uniname2ctype_pool_str2023[sizeof("spacingmark")];
+    char uniname2ctype_pool_str2024[sizeof("inpalmyrene")];
+    char uniname2ctype_pool_str2033[sizeof("cyrl")];
+    char uniname2ctype_pool_str2043[sizeof("assigned")];
+    char uniname2ctype_pool_str2048[sizeof("mlym")];
+    char uniname2ctype_pool_str2055[sizeof("malayalam")];
+    char uniname2ctype_pool_str2058[sizeof("ext")];
+    char uniname2ctype_pool_str2062[sizeof("newtailue")];
+    char uniname2ctype_pool_str2070[sizeof("space")];
+    char uniname2ctype_pool_str2073[sizeof("intelugu")];
+    char uniname2ctype_pool_str2078[sizeof("idsb")];
+    char uniname2ctype_pool_str2083[sizeof("indevanagari")];
+    char uniname2ctype_pool_str2084[sizeof("avestan")];
+    char uniname2ctype_pool_str2085[sizeof("cf")];
+    char uniname2ctype_pool_str2093[sizeof("palmyrene")];
+    char uniname2ctype_pool_str2095[sizeof("inethiopicsupplement")];
+    char uniname2ctype_pool_str2097[sizeof("soyo")];
+    char uniname2ctype_pool_str2098[sizeof("xposixpunct")];
+    char uniname2ctype_pool_str2102[sizeof("pf")];
+    char uniname2ctype_pool_str2103[sizeof("sarb")];
+    char uniname2ctype_pool_str2109[sizeof("zanabazarsquare")];
+    char uniname2ctype_pool_str2110[sizeof("ugaritic")];
+    char uniname2ctype_pool_str2112[sizeof("osge")];
+    char uniname2ctype_pool_str2114[sizeof("java")];
+    char uniname2ctype_pool_str2117[sizeof("sharada")];
+    char uniname2ctype_pool_str2119[sizeof("dogra")];
+    char uniname2ctype_pool_str2135[sizeof("bugi")];
+    char uniname2ctype_pool_str2137[sizeof("meroitichieroglyphs")];
+    char uniname2ctype_pool_str2145[sizeof("separator")];
+    char uniname2ctype_pool_str2146[sizeof("ingeorgiansupplement")];
+    char uniname2ctype_pool_str2149[sizeof("sogd")];
+    char uniname2ctype_pool_str2150[sizeof("tale")];
+    char uniname2ctype_pool_str2153[sizeof("inunifiedcanadianaboriginalsyllabicsextended")];
+    char uniname2ctype_pool_str2161[sizeof("terminalpunctuation")];
+    char uniname2ctype_pool_str2165[sizeof("shrd")];
+    char uniname2ctype_pool_str2166[sizeof("graph")];
+    char uniname2ctype_pool_str2167[sizeof("olditalic")];
+    char uniname2ctype_pool_str2170[sizeof("dogr")];
+    char uniname2ctype_pool_str2173[sizeof("gujr")];
+    char uniname2ctype_pool_str2181[sizeof("phag")];
+    char uniname2ctype_pool_str2182[sizeof("gujarati")];
+    char uniname2ctype_pool_str2195[sizeof("inhanguljamo")];
+    char uniname2ctype_pool_str2199[sizeof("javanese")];
+    char uniname2ctype_pool_str2201[sizeof("taml")];
+    char uniname2ctype_pool_str2204[sizeof("inphoneticextensions")];
+    char uniname2ctype_pool_str2207[sizeof("siddham")];
+    char uniname2ctype_pool_str2217[sizeof("buginese")];
+    char uniname2ctype_pool_str2218[sizeof("inmongoliansupplement")];
+    char uniname2ctype_pool_str2222[sizeof("invariationselectors")];
+    char uniname2ctype_pool_str2224[sizeof("inhanguljamoextendeda")];
+    char uniname2ctype_pool_str2225[sizeof("inverticalforms")];
+    char uniname2ctype_pool_str2228[sizeof("syrc")];
+    char uniname2ctype_pool_str2229[sizeof("number")];
+    char uniname2ctype_pool_str2235[sizeof("incopticepactnumbers")];
+    char uniname2ctype_pool_str2238[sizeof("avst")];
+    char uniname2ctype_pool_str2244[sizeof("inbamum")];
+    char uniname2ctype_pool_str2247[sizeof("nd")];
+    char uniname2ctype_pool_str2248[sizeof("insuttonsignwriting")];
+    char uniname2ctype_pool_str2252[sizeof("extender")];
+    char uniname2ctype_pool_str2258[sizeof("intaiviet")];
+    char uniname2ctype_pool_str2260[sizeof("hex")];
+    char uniname2ctype_pool_str2268[sizeof("incjkunifiedideographsextensionf")];
+    char uniname2ctype_pool_str2271[sizeof("other")];
+    char uniname2ctype_pool_str2272[sizeof("otheridcontinue")];
+    char uniname2ctype_pool_str2278[sizeof("shaw")];
+    char uniname2ctype_pool_str2282[sizeof("dash")];
+    char uniname2ctype_pool_str2285[sizeof("othernumber")];
+    char uniname2ctype_pool_str2294[sizeof("orya")];
+    char uniname2ctype_pool_str2302[sizeof("invedicextensions")];
+    char uniname2ctype_pool_str2305[sizeof("sgnw")];
+    char uniname2ctype_pool_str2312[sizeof("caucasianalbanian")];
+    char uniname2ctype_pool_str2315[sizeof("inmathematicalalphanumericsymbols")];
+    char uniname2ctype_pool_str2321[sizeof("inphoneticextensionssupplement")];
+    char uniname2ctype_pool_str2339[sizeof("invariationselectorssupplement")];
+    char uniname2ctype_pool_str2343[sizeof("induployan")];
+    char uniname2ctype_pool_str2344[sizeof("syriac")];
+    char uniname2ctype_pool_str2357[sizeof("oalpha")];
+    char uniname2ctype_pool_str2361[sizeof("innyiakengpuachuehmong")];
+    char uniname2ctype_pool_str2364[sizeof("incombiningdiacriticalmarks")];
+    char uniname2ctype_pool_str2365[sizeof("inethiopicextended")];
+    char uniname2ctype_pool_str2373[sizeof("nl")];
+    char uniname2ctype_pool_str2374[sizeof("incombiningdiacriticalmarksforsymbols")];
+    char uniname2ctype_pool_str2375[sizeof("khudawadi")];
+    char uniname2ctype_pool_str2378[sizeof("otheralphabetic")];
+    char uniname2ctype_pool_str2389[sizeof("oldhungarian")];
+    char uniname2ctype_pool_str2396[sizeof("incurrencysymbols")];
+    char uniname2ctype_pool_str2397[sizeof("incjkradicalssupplement")];
+    char uniname2ctype_pool_str2398[sizeof("inglagolitic")];
+    char uniname2ctype_pool_str2415[sizeof("intifinagh")];
+    char uniname2ctype_pool_str2416[sizeof("ingeorgianextended")];
+    char uniname2ctype_pool_str2427[sizeof("surrogate")];
+    char uniname2ctype_pool_str2433[sizeof("incyrillicextendedb")];
+    char uniname2ctype_pool_str2440[sizeof("ethi")];
+    char uniname2ctype_pool_str2451[sizeof("titlecaseletter")];
+    char uniname2ctype_pool_str2454[sizeof("rohg")];
+    char uniname2ctype_pool_str2458[sizeof("inmeroiticcursive")];
+    char uniname2ctype_pool_str2460[sizeof("idstrinaryoperator")];
+    char uniname2ctype_pool_str2470[sizeof("inphagspa")];
+    char uniname2ctype_pool_str2475[sizeof("lepcha")];
+    char uniname2ctype_pool_str2479[sizeof("intagalog")];
+    char uniname2ctype_pool_str2480[sizeof("mathsymbol")];
+    char uniname2ctype_pool_str2481[sizeof("incombiningdiacriticalmarkssupplement")];
+    char uniname2ctype_pool_str2506[sizeof("inbrahmi")];
+    char uniname2ctype_pool_str2513[sizeof("insymbolsandpictographsextendeda")];
+    char uniname2ctype_pool_str2519[sizeof("inlinearbsyllabary")];
+    char uniname2ctype_pool_str2529[sizeof("oldturkic")];
+    char uniname2ctype_pool_str2534[sizeof("inbengali")];
+    char uniname2ctype_pool_str2540[sizeof("wancho")];
+    char uniname2ctype_pool_str2542[sizeof("osmanya")];
+    char uniname2ctype_pool_str2548[sizeof("buhd")];
+    char uniname2ctype_pool_str2552[sizeof("insmallformvariants")];
+    char uniname2ctype_pool_str2561[sizeof("indevanagariextended")];
+    char uniname2ctype_pool_str2562[sizeof("softdotted")];
+    char uniname2ctype_pool_str2564[sizeof("inbuginese")];
+    char uniname2ctype_pool_str2566[sizeof("mahj")];
+    char uniname2ctype_pool_str2567[sizeof("inlatin1supplement")];
+    char uniname2ctype_pool_str2570[sizeof("ingothic")];
+    char uniname2ctype_pool_str2575[sizeof("mahajani")];
+    char uniname2ctype_pool_str2576[sizeof("hang")];
+    char uniname2ctype_pool_str2579[sizeof("sylo")];
+    char uniname2ctype_pool_str2586[sizeof("warangciti")];
+    char uniname2ctype_pool_str2595[sizeof("ingujarati")];
+    char uniname2ctype_pool_str2603[sizeof("tirhuta")];
+    char uniname2ctype_pool_str2606[sizeof("incombiningdiacriticalmarksextended")];
+    char uniname2ctype_pool_str2609[sizeof("spaceseparator")];
+    char uniname2ctype_pool_str2614[sizeof("ingunjalagondi")];
+    char uniname2ctype_pool_str2624[sizeof("wcho")];
+    char uniname2ctype_pool_str2631[sizeof("hiragana")];
+    char uniname2ctype_pool_str2634[sizeof("extendedpictographic")];
+    char uniname2ctype_pool_str2643[sizeof("inrejang")];
+    char uniname2ctype_pool_str2644[sizeof("inottomansiyaqnumbers")];
+    char uniname2ctype_pool_str2648[sizeof("nchar")];
+    char uniname2ctype_pool_str2650[sizeof("cyrillic")];
+    char uniname2ctype_pool_str2653[sizeof("khoj")];
+    char uniname2ctype_pool_str2656[sizeof("inlimbu")];
+    char uniname2ctype_pool_str2663[sizeof("hmng")];
+    char uniname2ctype_pool_str2665[sizeof("thaa")];
+    char uniname2ctype_pool_str2668[sizeof("thai")];
+    char uniname2ctype_pool_str2670[sizeof("incjkunifiedideographsextensionb")];
+    char uniname2ctype_pool_str2673[sizeof("deva")];
+    char uniname2ctype_pool_str2676[sizeof("thaana")];
+    char uniname2ctype_pool_str2688[sizeof("phagspa")];
+    char uniname2ctype_pool_str2691[sizeof("devanagari")];
+    char uniname2ctype_pool_str2692[sizeof("tang")];
+    char uniname2ctype_pool_str2694[sizeof("currencysymbol")];
+    char uniname2ctype_pool_str2698[sizeof("tagbanwa")];
+    char uniname2ctype_pool_str2701[sizeof("inenclosedcjklettersandmonths")];
+    char uniname2ctype_pool_str2702[sizeof("tamil")];
+    char uniname2ctype_pool_str2721[sizeof("tirh")];
+    char uniname2ctype_pool_str2723[sizeof("digit")];
+    char uniname2ctype_pool_str2732[sizeof("talu")];
+    char uniname2ctype_pool_str2747[sizeof("zp")];
+    char uniname2ctype_pool_str2750[sizeof("inpaucinhau")];
+    char uniname2ctype_pool_str2760[sizeof("taitham")];
+    char uniname2ctype_pool_str2764[sizeof("otherlowercase")];
+    char uniname2ctype_pool_str2768[sizeof("telu")];
+    char uniname2ctype_pool_str2769[sizeof("inaegeannumbers")];
+    char uniname2ctype_pool_str2777[sizeof("otherletter")];
+    char uniname2ctype_pool_str2780[sizeof("whitespace")];
+    char uniname2ctype_pool_str2793[sizeof("nonspacingmark")];
+    char uniname2ctype_pool_str2816[sizeof("graphemeclusterbreak=spacingmark")];
+    char uniname2ctype_pool_str2821[sizeof("inletterlikesymbols")];
+    char uniname2ctype_pool_str2834[sizeof("intagbanwa")];
+    char uniname2ctype_pool_str2841[sizeof("oldsogdian")];
+    char uniname2ctype_pool_str2848[sizeof("otheridstart")];
+    char uniname2ctype_pool_str2852[sizeof("graphemeclusterbreak=cr")];
+    char uniname2ctype_pool_str2855[sizeof("narb")];
+    char uniname2ctype_pool_str2856[sizeof("changeswhencasemapped")];
+    char uniname2ctype_pool_str2859[sizeof("inbopomofo")];
+    char uniname2ctype_pool_str2862[sizeof("tangut")];
+    char uniname2ctype_pool_str2867[sizeof("graphemeclusterbreak=regionalindicator")];
+    char uniname2ctype_pool_str2871[sizeof("noncharactercodepoint")];
+    char uniname2ctype_pool_str2883[sizeof("otheruppercase")];
+    char uniname2ctype_pool_str2885[sizeof("rjng")];
+    char uniname2ctype_pool_str2886[sizeof("sylotinagri")];
+    char uniname2ctype_pool_str2904[sizeof("inhangulsyllables")];
+    char uniname2ctype_pool_str2905[sizeof("emojipresentation")];
+    char uniname2ctype_pool_str2906[sizeof("inindicsiyaqnumbers")];
+    char uniname2ctype_pool_str2909[sizeof("inbassavah")];
+    char uniname2ctype_pool_str2912[sizeof("ogrext")];
+    char uniname2ctype_pool_str2926[sizeof("othersymbol")];
+    char uniname2ctype_pool_str2938[sizeof("oupper")];
+    char uniname2ctype_pool_str2941[sizeof("inbuhid")];
+    char uniname2ctype_pool_str2963[sizeof("hmnp")];
+    char uniname2ctype_pool_str2964[sizeof("inpsalterpahlavi")];
+    char uniname2ctype_pool_str2967[sizeof("finalpunctuation")];
+    char uniname2ctype_pool_str2980[sizeof("phlp")];
+    char uniname2ctype_pool_str2984[sizeof("inbamumsupplement")];
+    char uniname2ctype_pool_str2986[sizeof("buhid")];
+    char uniname2ctype_pool_str2987[sizeof("paragraphseparator")];
+    char uniname2ctype_pool_str2988[sizeof("inalphabeticpresentationforms")];
+    char uniname2ctype_pool_str2993[sizeof("omath")];
+    char uniname2ctype_pool_str3000[sizeof("any")];
+    char uniname2ctype_pool_str3001[sizeof("elba")];
+    char uniname2ctype_pool_str3002[sizeof("changeswhentitlecased")];
+    char uniname2ctype_pool_str3005[sizeof("incombininghalfmarks")];
+    char uniname2ctype_pool_str3006[sizeof("intangutcomponents")];
+    char uniname2ctype_pool_str3012[sizeof("hebr")];
+    char uniname2ctype_pool_str3028[sizeof("deprecated")];
+    char uniname2ctype_pool_str3045[sizeof("inarabicmathematicalalphabeticsymbols")];
+    char uniname2ctype_pool_str3055[sizeof("inprivateusearea")];
+    char uniname2ctype_pool_str3089[sizeof("kayahli")];
+    char uniname2ctype_pool_str3098[sizeof("inplayingcards")];
+    char uniname2ctype_pool_str3099[sizeof("inarabicpresentationformsb")];
+    char uniname2ctype_pool_str3100[sizeof("ogham")];
+    char uniname2ctype_pool_str3101[sizeof("elym")];
+    char uniname2ctype_pool_str3107[sizeof("graphemeclusterbreak=t")];
+    char uniname2ctype_pool_str3109[sizeof("graphemeclusterbreak=lvt")];
+    char uniname2ctype_pool_str3111[sizeof("nbat")];
+    char uniname2ctype_pool_str3125[sizeof("nabataean")];
+    char uniname2ctype_pool_str3126[sizeof("hangul")];
+    char uniname2ctype_pool_str3134[sizeof("elymaic")];
+    char uniname2ctype_pool_str3158[sizeof("inhebrew")];
+    char uniname2ctype_pool_str3165[sizeof("injavanese")];
+    char uniname2ctype_pool_str3169[sizeof("symbol")];
+    char uniname2ctype_pool_str3176[sizeof("inmathematicaloperators")];
+    char uniname2ctype_pool_str3180[sizeof("inarabicsupplement")];
+    char uniname2ctype_pool_str3185[sizeof("cypriot")];
+    char uniname2ctype_pool_str3194[sizeof("hung")];
+    char uniname2ctype_pool_str3205[sizeof("wspace")];
+    char uniname2ctype_pool_str3209[sizeof("changeswhenlowercased")];
+    char uniname2ctype_pool_str3215[sizeof("elbasan")];
+    char uniname2ctype_pool_str3218[sizeof("hluw")];
+    char uniname2ctype_pool_str3237[sizeof("insuperscriptsandsubscripts")];
+    char uniname2ctype_pool_str3239[sizeof("graphemeclusterbreak=extend")];
+    char uniname2ctype_pool_str3240[sizeof("graphemeclusterbreak=prepend")];
+    char uniname2ctype_pool_str3248[sizeof("nshu")];
+    char uniname2ctype_pool_str3254[sizeof("oldnortharabian")];
+    char uniname2ctype_pool_str3266[sizeof("inyijinghexagramsymbols")];
+    char uniname2ctype_pool_str3286[sizeof("hexdigit")];
+    char uniname2ctype_pool_str3297[sizeof("graphemeclusterbreak=l")];
+    char uniname2ctype_pool_str3303[sizeof("graphemeclusterbreak=control")];
+    char uniname2ctype_pool_str3309[sizeof("bassavah")];
+    char uniname2ctype_pool_str3317[sizeof("otherdefaultignorablecodepoint")];
+    char uniname2ctype_pool_str3328[sizeof("changeswhenuppercased")];
+    char uniname2ctype_pool_str3329[sizeof("inalchemicalsymbols")];
+    char uniname2ctype_pool_str3348[sizeof("insupplementalarrowsa")];
+    char uniname2ctype_pool_str3349[sizeof("inyisyllables")];
+    char uniname2ctype_pool_str3351[sizeof("tibt")];
+    char uniname2ctype_pool_str3360[sizeof("othermath")];
+    char uniname2ctype_pool_str3363[sizeof("tibetan")];
+    char uniname2ctype_pool_str3365[sizeof("inmahjongtiles")];
+    char uniname2ctype_pool_str3433[sizeof("signwriting")];
+    char uniname2ctype_pool_str3436[sizeof("nushu")];
+    char uniname2ctype_pool_str3439[sizeof("modifiersymbol")];
+    char uniname2ctype_pool_str3442[sizeof("inhalfwidthandfullwidthforms")];
+    char uniname2ctype_pool_str3458[sizeof("upper")];
+    char uniname2ctype_pool_str3460[sizeof("insupplementalarrowsc")];
+    char uniname2ctype_pool_str3511[sizeof("insupplementalmathematicaloperators")];
+    char uniname2ctype_pool_str3512[sizeof("incypriotsyllabary")];
+    char uniname2ctype_pool_str3517[sizeof("dupl")];
+    char uniname2ctype_pool_str3531[sizeof("tavt")];
+    char uniname2ctype_pool_str3532[sizeof("inpahawhhmong")];
+    char uniname2ctype_pool_str3533[sizeof("alphabetic")];
+    char uniname2ctype_pool_str3550[sizeof("dashpunctuation")];
+    char uniname2ctype_pool_str3558[sizeof("uppercase")];
+    char uniname2ctype_pool_str3613[sizeof("soyombo")];
+    char uniname2ctype_pool_str3614[sizeof("hanifirohingya")];
+    char uniname2ctype_pool_str3616[sizeof("otherpunctuation")];
+    char uniname2ctype_pool_str3628[sizeof("defaultignorablecodepoint")];
+    char uniname2ctype_pool_str3648[sizeof("inhanguljamoextendedb")];
+    char uniname2ctype_pool_str3664[sizeof("aghb")];
+    char uniname2ctype_pool_str3703[sizeof("tifinagh")];
+    char uniname2ctype_pool_str3705[sizeof("inlatinextendedb")];
+    char uniname2ctype_pool_str3714[sizeof("tfng")];
+    char uniname2ctype_pool_str3766[sizeof("inhighprivateusesurrogates")];
+    char uniname2ctype_pool_str3791[sizeof("changeswhencasefolded")];
+    char uniname2ctype_pool_str3805[sizeof("dep")];
+    char uniname2ctype_pool_str3819[sizeof("oldsoutharabian")];
+    char uniname2ctype_pool_str3821[sizeof("graphemeclusterbreak=lf")];
+    char uniname2ctype_pool_str3842[sizeof("pahawhhmong")];
+    char uniname2ctype_pool_str3845[sizeof("unifiedideograph")];
+    char uniname2ctype_pool_str3891[sizeof("uppercaseletter")];
+    char uniname2ctype_pool_str3924[sizeof("insupplementalpunctuation")];
+    char uniname2ctype_pool_str3942[sizeof("ethiopic")];
+    char uniname2ctype_pool_str3976[sizeof("inglagoliticsupplement")];
+    char uniname2ctype_pool_str3995[sizeof("rejang")];
+    char uniname2ctype_pool_str4087[sizeof("inbopomofoextended")];
+    char uniname2ctype_pool_str4109[sizeof("tagb")];
+    char uniname2ctype_pool_str4137[sizeof("othergraphemeextend")];
+    char uniname2ctype_pool_str4162[sizeof("inegyptianhieroglyphs")];
+    char uniname2ctype_pool_str4175[sizeof("inegyptianhieroglyphformatcontrols")];
+    char uniname2ctype_pool_str4203[sizeof("hebrew")];
+    char uniname2ctype_pool_str4254[sizeof("tglg")];
+    char uniname2ctype_pool_str4276[sizeof("tagalog")];
+    char uniname2ctype_pool_str4291[sizeof("graphemeclusterbreak=zwj")];
+    char uniname2ctype_pool_str4321[sizeof("zyyy")];
+    char uniname2ctype_pool_str4360[sizeof("hyphen")];
+    char uniname2ctype_pool_str4397[sizeof("inboxdrawing")];
+    char uniname2ctype_pool_str4405[sizeof("graphemeclusterbreak=v")];
+    char uniname2ctype_pool_str4406[sizeof("graphemeclusterbreak=lv")];
+    char uniname2ctype_pool_str4460[sizeof("telugu")];
+    char uniname2ctype_pool_str4485[sizeof("duployan")];
+    char uniname2ctype_pool_str4528[sizeof("openpunctuation")];
+    char uniname2ctype_pool_str4674[sizeof("insupplementaryprivateuseareaa")];
+    char uniname2ctype_pool_str4683[sizeof("inhighsurrogates")];
+    char uniname2ctype_pool_str4772[sizeof("insupplementalarrowsb")];
+    char uniname2ctype_pool_str4948[sizeof("insupplementalsymbolsandpictographs")];
+    char uniname2ctype_pool_str4955[sizeof("egyp")];
+    char uniname2ctype_pool_str4986[sizeof("inhangulcompatibilityjamo")];
+    char uniname2ctype_pool_str5114[sizeof("nyiakengpuachuehmong")];
+    char uniname2ctype_pool_str5608[sizeof("egyptianhieroglyphs")];
+    char uniname2ctype_pool_str6098[sizeof("insupplementaryprivateuseareab")];
 #endif /* USE_UNICODE_PROPERTIES */
   };
 static const struct uniname2ctype_pool_t uniname2ctype_pool_contents =
   {
 #ifndef USE_UNICODE_PROPERTIES
     "word",
+#else /* USE_UNICODE_PROPERTIES */
+    "yi",
+    "yiii",
+    "lana",
+    "z",
+    "lina",
+    "maka",
+    "mani",
+    "mn",
+    "miao",
+    "lo",
+    "ci",
+    "lao",
+    "laoo",
+    "inkannada",
+    "cn",
+    "pi",
+    "innko",
+    "zzzz",
+    "gran",
+    "co",
+    "lineara",
+    "mark",
+    "po",
+    "me",
+    "cari",
+    "inkharoshthi",
+    "kana",
+    "loe",
+    "m",
+    "grek",
+    "mro",
+    "mroo",
+    "carian",
+    "geor",
+    "greek",
+    "gonm",
+    "mendekikakui",
+    "pe",
+    "mero",
+    "inosmanya",
+    "cakm",
+    "inmanichaean",
+    "inmro",
+    "inmiao",
+    "inchakma",
+    "c",
+    "mandaic",
+    "meeteimayek",
+    "inarmenian",
+    "inmyanmar",
+    "inmakasar",
+    "common",
+    "lm",
+    "marc",
+    "inrunic",
+    "incarian",
+    "inideographicsymbolsandpunctuation",
+    "inkhmer",
+    "qaai",
+    "inahom",
+    "merc",
+    "combiningmark",
+    "lc",
+    "perm",
+    "mc",
+    "connectorpunctuation",
+    "cans",
+    "incuneiformnumbersandpunctuation",
+    "armi",
+    "cc",
+    "armn",
+    "incherokee",
+    "prependedconcatenationmark",
+    "incuneiform",
+    "inavestan",
+    "inipaextensions",
+    "pc",
+    "armenian",
+    "insharada",
+    "inmarchen",
+    "makasar",
+    "masaramgondi",
+    "inarrows",
+    "incyrillic",
+    "incham",
+    "qmark",
+    "ri",
+    "qaac",
+    "insamaritan",
+    "latn",
+    "inmasaramgondi",
+    "inthaana",
+    "latin",
+    "inthai",
+    "lineseparator",
+    "pcm",
+    "inkatakana",
+    "inkaithi",
+    "inzanabazarsquare",
+    "inscriptionalparthian",
+    "initialpunctuation",
+    "mtei",
+    "vai",
+    "vaii",
+    "inkhmersymbols",
+    "insyriac",
+    "intakri",
+    "arabic",
+    "zs",
+    "katakana",
+    "prti",
+    "ascii",
+    "cs",
+    "ps",
+    "mand",
+    "privateuse",
+    "inruminumeralsymbols",
+    "inmyanmarextendeda",
+    "modi",
+    "incjkcompatibilityforms",
+    "inkanaextendeda",
+    "incjkcompatibilityideographs",
+    "brai",
+    "mend",
+    "ideo",
+    "letter",
+    "l",
+    "inmeeteimayek",
+    "inideographicdescriptioncharacters",
+    "xidcontinue",
+    "knda",
+    "innandinagari",
+    "kannada",
+    "inmodi",
+    "inlao",
+    "inoldnortharabian",
+    "intransportandmapsymbols",
+    "letternumber",
+    "gothic",
+    "inlineara",
+    "inmendekikakui",
+    "xidc",
+    "mongolian",
+    "inmiscellaneousmathematicalsymbolsa",
+    "inspecials",
+    "grlink",
+    "brahmi",
+    "inemoticons",
+    "kali",
+    "inolditalic",
+    "inmedefaidrin",
+    "inchesssymbols",
+    "incjkcompatibilityideographssupplement",
+    "inadlam",
+    "psalterpahlavi",
+    "incommonindicnumberforms",
+    "lt",
+    "innewa",
+    "sk",
+    "control",
+    "inancientsymbols",
+    "palm",
+    "inlycian",
+    "so",
+    "patternwhitespace",
+    "xids",
+    "inmandaic",
+    "idc",
+    "meroiticcursive",
+    "inwarangciti",
+    "sora",
+    "inopticalcharacterrecognition",
+    "inoldsogdian",
+    "inmalayalam",
+    "bamum",
+    "inkanasupplement",
+    "insundanese",
+    "grext",
+#endif /* USE_UNICODE_PROPERTIES */
     "print",
+#ifndef USE_UNICODE_PROPERTIES
     "punct",
     "alpha",
-    "alnum",
-    "xdigit",
-    "upper",
 #else /* USE_UNICODE_PROPERTIES */
-    "n",
-    "mn",
-    "m",
-    "cn",
-    "mani",
-    "ci",
-    "inmanichaean",
-    "z",
-    "qaai",
-    "c",
-    "mc",
-    "qaac",
+    "intaitham",
+    "lower",
+    "joinc",
+    "inoldsoutharabian",
+    "incjkstrokes",
+    "batk",
+    "samr",
+    "inwancho",
+    "batak",
+    "vs",
+    "patws",
+    "samaritan",
+    "idsbinaryoperator",
+    "pauc",
+    "insmallkanaextension",
     "sm",
-    "incham",
-    "me",
-    "inarmenian",
-    "cc",
-    "mandaic",
-    "incuneiform",
-    "zzzz",
-    "insamaritan",
-    "cans",
-    "s",
-    "sc",
+    "indominotiles",
 #endif /* USE_UNICODE_PROPERTIES */
-    "ascii",
+    "alnum",
 #ifdef USE_UNICODE_PROPERTIES
-    "inavestan",
-    "zs",
-    "cs",
-    "inipaextensions",
-    "incuneiformnumbersandpunctuation",
-    "incommonindicnumberforms",
-    "inthai",
-    "mtei",
-    "inspecials",
-    "initialpunctuation",
-    "inthaana",
-    "inancientsymbols",
-    "inmiscellaneousmathematicalsymbolsa",
+    "insylotinagri",
+    "inugaritic",
+    "incontrolpictures",
+    "inlinearbideograms",
     "inmusicalsymbols",
-    "taile",
-    "inmyanmarextendeda",
-    "sterm",
-    "lm",
-    "lina",
+    "s",
+    "ital",
+    "inmodifiertoneletters",
+    "inancientgreekmusicalnotation",
+    "patternsyntax",
+    "lisu",
+    "lowercase",
+    "cwcm",
+    "sc",
+    "bass",
+    "ids",
+    "inlatinextendeda",
+    "oriya",
+    "intaile",
     "inmiscellaneoussymbols",
-    "lana",
-    "intransportandmapsymbols",
-    "alnum",
-    "inlycian",
     "inmiscellaneoussymbolsandarrows",
-    "intaitham",
-    "lc",
-    "inmalayalam",
+    "incaucasianalbanian",
     "inmiscellaneoussymbolsandpictographs",
-    "inadlam",
-    "incontrolpictures",
-    "inlineara",
-    "taiviet",
-    "armn",
-    "armi",
-    "sinhala",
-    "armenian",
-    "inmyanmar",
-    "inrunic",
-    "incarian",
-    "cari",
-    "inmarchen",
-    "marc",
-    "carian",
-    "merc",
-    "incyrillic",
-    "samr",
-    "latn",
-    "latin",
-    "ital",
+    "inoldturkic",
+    "insaurashtra",
+    "idcontinue",
     "intamil",
-    "taml",
     "inmultani",
-    "samaritan",
-    "arabic",
-    "insyriac",
-    "insharada",
-    "miao",
-    "inlinearbideograms",
-    "incherokee",
-    "intaile",
-    "tale",
-    "inahom",
-    "inmeeteimayekextensions",
-    "inruminumeralsymbols",
-    "inlatinextendeda",
-    "inosmanya",
-    "inlatinextendedc",
-    "osma",
     "inlatinextendede",
-    "l",
-    "han",
-    "nl",
-    "term",
-    "hani",
-    "inideographicsymbolsandpunctuation",
-    "zinh",
-    "lt",
+    "pd",
+    "bali",
+    "blank",
+    "idst",
+    "inlydian",
+    "innewtailue",
+    "bengali",
+    "runr",
     "zl",
-    "inmahajani",
-    "cham",
-    "connectorpunctuation",
-    "sinh",
-    "manichaean",
+    "incyrillicextendeda",
+    "ll",
+    "indeseret",
+    "intaixuanjingsymbols",
+    "inancientgreeknumbers",
+    "idstart",
+    "inmeeteimayekextensions",
+    "balinese",
+    "dia",
+    "di",
+    "inspacingmodifierletters",
+    "inearlydynasticcuneiform",
+    "plrd",
+    "canadianaboriginal",
+    "zinh",
+    "sind",
     "osage",
-    "inmiscellaneoustechnical",
-    "inethiopic",
-    "insinhala",
-    "chakma",
-    "shavian",
-    "inideographicdescriptioncharacters",
-    "lineara",
-    "meroiticcursive",
-    "thai",
-    "math",
-    "inemoticons",
-    "thaa",
-    "ethi",
-    "hatran",
-    "inenclosedalphanumerics",
-    "sentenceterminal",
-    "tamil",
+    "inlatinextendedc",
+    "uideo",
+    "incountingrodnumerals",
+    "xidstart",
 #endif /* USE_UNICODE_PROPERTIES */
-    "cntrl",
+    "xdigit",
 #ifndef USE_UNICODE_PROPERTIES
-    "space",
-    "xposixpunct",
+    "upper",
+    "ascii",
 #else /* USE_UNICODE_PROPERTIES */
-    "taitham",
-    "thaana",
-    "terminalpunctuation",
-    "insinhalaarchaicnumbers",
-    "innewa",
-    "newa",
-    "inlatinextendedadditional",
-    "cwcm",
-    "loe",
-    "inopticalcharacterrecognition",
-    "inearlydynasticcuneiform",
-    "di",
-    "asciihexdigit",
-    "ll",
-    "newtailue",
-    "inscriptionalparthian",
-    "inenclosedalphanumericsupplement",
-    "oriya",
-    "mero",
-    "inmongolian",
-    "mand",
-    "inmodi",
-    "dia",
-    "mend",
+    "osma",
+    "inkhudawadi",
+    "inhanifirohingya",
+    "gong",
     "ingrantha",
-    "no",
-    "sora",
-    "inmandaic",
+    "bidic",
+    "mong",
+    "cased",
+    "incyrillicextendedc",
+    "inhiragana",
+    "sinhala",
+    "adlm",
+    "glagolitic",
+    "sterm",
+    "bamu",
+    "georgian",
+    "inosage",
+    "gunjalagondi",
+    "phoenician",
+    "multani",
+    "kaithi",
+    "joincontrol",
+    "runic",
+    "ingeneralpunctuation",
+    "inmahajani",
+    "incyrillicsupplement",
+    "lowercaseletter",
+    "marchen",
+    "graphemelink",
+    "ingeorgian",
+    "khojki",
+    "cham",
+    "inogham",
+    "cher",
+    "chakma",
+    "emoji",
+    "insiddham",
+    "cherokee",
+    "khar",
+    "inmongolian",
+    "incherokeesupplement",
+    "diacritic",
+    "manichaean",
+    "xsux",
+    "inolchiki",
+    "quotationmark",
+    "adlam",
+    "inethiopic",
+    "graphemebase",
+#ifdef USE_UNICODE_AGE_PROPERTIES
+    "age=11.0",
+    "age=12.1",
+    "age=10.0",
+    "age=12.0",
+#endif /* USE_UNICODE_AGE_PROPERTIES */
+    "casedletter",
+    "ingurmukhi",
+    "odi",
+    "incjkunifiedideographsextensiona",
 #ifdef USE_UNICODE_AGE_PROPERTIES
     "age=1.1",
-    "age=2.1",
 #endif /* USE_UNICODE_AGE_PROPERTIES */
-    "idc",
-    "innko",
-    "sind",
-    "inarrows",
+    "lu",
 #ifdef USE_UNICODE_AGE_PROPERTIES
-    "age=6.1",
-    "age=6.2",
+    "age=4.1",
+    "age=2.1",
+    "age=4.0",
     "age=2.0",
+    "age=9.0",
 #endif /* USE_UNICODE_AGE_PROPERTIES */
-    "inmro",
+    "intamilsupplement",
 #ifdef USE_UNICODE_AGE_PROPERTIES
-    "age=3.1",
-    "age=3.2",
+    "age=6.1",
 #endif /* USE_UNICODE_AGE_PROPERTIES */
-    "titlecaseletter",
+    "unknown",
 #ifdef USE_UNICODE_AGE_PROPERTIES
     "age=6.0",
-#endif /* USE_UNICODE_AGE_PROPERTIES */
-    "co",
-    "hira",
-#ifdef USE_UNICODE_AGE_PROPERTIES
-    "age=6.3",
-    "age=3.0",
-#endif /* USE_UNICODE_AGE_PROPERTIES */
-    "ingeneralpunctuation",
-#ifdef USE_UNICODE_AGE_PROPERTIES
-    "age=9.0",
+    "age=6.2",
+    "age=3.1",
     "age=8.0",
-    "age=5.1",
-    "age=5.2",
+    "age=3.0",
+    "age=3.2",
 #endif /* USE_UNICODE_AGE_PROPERTIES */
-    "inmiao",
+    "cwt",
 #ifdef USE_UNICODE_AGE_PROPERTIES
-    "age=4.1",
     "age=7.0",
 #endif /* USE_UNICODE_AGE_PROPERTIES */
-    "innewtailue",
-    "common",
+    "unassigned",
 #ifdef USE_UNICODE_AGE_PROPERTIES
+    "age=6.3",
+    "age=5.1",
     "age=5.0",
-    "age=4.0",
+    "age=5.2",
 #endif /* USE_UNICODE_AGE_PROPERTIES */
-    "so",
-    "inhiragana",
-    "insundanese",
-    "ids",
-    "cher",
-    "marchen",
-    "indominotiles",
-    "joinc",
-    "tang",
-    "hano",
     "ahom",
-    "inogham",
+    "incjkunifiedideographsextensione",
+    "khmr",
+    "insinhala",
+    "inmiscellaneoustechnical",
+    "saur",
+    "guru",
+    "sundanese",
+    "punct",
+    "paucinhau",
+    "gurmukhi",
+    "variationselector",
+    "logicalorderexception",
+    "khmer",
+    "limbu",
     "inscriptionalpahlavi",
-    "mahj",
-    "inolchiki",
-    "invai",
-    "tagbanwa",
-    "tirh",
-    "idst",
-    "vai",
-    "vaii",
-    "cwt",
-    "inhatran",
-    "hatr",
-    "mahajani",
-    "idcontinue",
-    "cf",
-    "intirhuta",
-    "inenclosedcjklettersandmonths",
-    "intaixuanjingsymbols",
-    "inspacingmodifierletters",
-    "indeseret",
-    "intags",
-    "wara",
-    "inshavian",
-    "inlydian",
-    "inwarangciti",
-    "inmathematicalalphanumericsymbols",
-    "adlm",
-    "intangut",
-    "vs",
-    "adlam",
-    "lo",
-    "ext",
-    "insylotinagri",
-    "inlao",
-    "inlowsurrogates",
-    "anatolianhieroglyphs",
-    "lao",
-    "laoo",
-    "mongolian",
-    "gran",
-    "lineseparator",
-    "ingurmukhi",
-    "letter",
-    "intifinagh",
-    "tifinagh",
-    "mro",
-    "mroo",
-    "diacritic",
-    "avst",
-    "avestan",
-    "mong",
-    "inanatolianhieroglyphs",
-    "odi",
-    "nchar",
-    "caseignorable",
-    "modi",
-    "insorasompeng",
-    "ogam",
     "oidc",
-    "cwcf",
-    "cwl",
-    "ideo",
-    "oalpha",
-    "inolditalic",
-    "ingujarati",
-    "inosage",
-    "oids",
-    "shaw",
+    "incjkunifiedideographsextensionc",
+#endif /* USE_UNICODE_PROPERTIES */
+    "cntrl",
+#ifdef USE_UNICODE_PROPERTIES
+    "inlatinextendedadditional",
     "decimalnumber",
-    "tavt",
-    "intaiviet",
-    "hmng",
-    "inmongoliansupplement",
-    "osge",
-    "hang",
-    "insuttonsignwriting",
-    "inmahjongtiles",
-    "dsrt",
-    "ahex",
-    "whitespace",
-    "insundanesesupplement",
-    "inmodifiertoneletters",
-    "idstart",
-    "ingreekandcoptic",
-    "dash",
-    "hanunoo",
-    "siddham",
-    "inoldturkic",
-    "ingeometricshapes",
-    "deseret",
-    "gothic",
-    "sharada",
-    "tfng",
-    "insmallformvariants",
-    "inshorthandformatcontrols",
-    "grext",
-    "java",
+    "insorasompeng",
     "radical",
-    "omath",
-    "canadianaboriginal",
-    "ingothic",
-    "otheridcontinue",
-    "control",
-    "injavanese",
-    "noncharactercodepoint",
-    "invariationselectors",
-    "casedletter",
-    "letternumber",
-    "javanese",
-    "otheralphabetic",
-    "sgnw",
-    "ingeorgian",
-    "rjng",
-    "nd",
-    "format",
-    "geor",
-    "inornamentaldingbats",
-    "inrejang",
-    "inoldnortharabian",
-    "joincontrol",
-    "xidc",
-    "invariationselectorssupplement",
-    "sd",
-    "xids",
-    "sidd",
-    "indingbats",
-    "inherited",
-    "inmeroitichieroglyphs",
-    "inenclosedideographicsupplement",
-    "inoldsoutharabian",
-    "insiddham",
-    "inglagolitic",
-    "ingreekextended",
-    "olditalic",
-    "hiragana",
-    "idsbinaryoperator",
-    "cased",
-    "inhangulsyllables",
-    "shrd",
-    "assigned",
-    "otheridstart",
-    "ogham",
-    "intagalog",
-    "inoldhungarian",
-    "other",
-    "othersymbol",
-    "otherlowercase",
-    "othernumber",
-    "graphemebase",
-    "innabataean",
+    "emojimodifier",
+    "kharoshthi",
+    "n",
+    "math",
+    "goth",
+    "anatolianhieroglyphs",
+    "inenclosedalphanumerics",
+    "nandinagari",
+    "no",
+    "nko",
+    "nkoo",
+    "ingreekandcoptic",
+    "olck",
+    "p",
+    "grantha",
+    "olchiki",
+    "incjkunifiedideographs",
+    "zanb",
+    "intirhuta",
+    "oids",
+    "inhatran",
+    "linb",
+    "xpeo",
+    "mult",
+    "saurashtra",
+    "kthi",
     "inbhaiksuki",
-    "lowercase",
-    "bamum",
-    "glagolitic",
-    "inhanguljamoextendeda",
-    "indevanagari",
+    "olower",
+    "innabataean",
+    "inphoenician",
+    "inkanbun",
+    "inmeroitichieroglyphs",
+    "inkayahli",
+    "phnx",
+    "inoriya",
+    "enclosingmark",
+    "sd",
     "inelbasan",
-    "deva",
-    "grantha",
+    "wara",
+    "inenclosedideographicsupplement",
+    "sidd",
+    "linearb",
+    "hani",
+    "han",
+    "inenclosedalphanumericsupplement",
+    "medf",
+    "bidicontrol",
+    "hano",
+    "inphaistosdisc",
+    "limb",
+    "inkangxiradicals",
+    "lepc",
+    "medefaidrin",
+    "braille",
+    "regionalindicator",
+    "inlowsurrogates",
+    "inshorthandformatcontrols",
+    "brah",
+    "inkhojki",
+    "inoldhungarian",
+    "hanunoo",
+    "hira",
+    "beng",
+    "emojimodifierbase",
     "inarabic",
-    "olower",
+    "lyci",
+    "ahex",
+    "inherited",
+    "glag",
+    "lycian",
+    "indogra",
+    "dsrt",
+    "arab",
+    "mymr",
+    "myanmar",
+    "phli",
+    "inimperialaramaic",
+    "ingreekextended",
+    "inanatolianhieroglyphs",
+    "punctuation",
+    "takri",
+    "graphemeextend",
+    "invai",
+    "cwl",
+    "ingeometricshapes",
+    "emojicomponent",
+    "coptic",
+    "deseret",
+    "inarabicpresentationformsa",
+    "takr",
     "inbasiclatin",
-    "devanagari",
-    "warangciti",
+    "incjkunifiedideographsextensiond",
+    "sinh",
+    "sund",
+    "shavian",
+    "taile",
+    "insundanesesupplement",
+    "inelymaic",
+    "insoyombo",
+    "bhks",
+    "bhaiksuki",
+    "incjkcompatibility",
+    "inhanunoo",
+    "intangut",
+    "sogdian",
+    "inlatinextendedd",
+    "sogo",
+    "insinhalaarchaicnumbers",
+    "ideographic",
+    "ugar",
+    "copt",
+    "imperialaramaic",
+    "insogdian",
+    "indingbats",
+    "format",
+    "ininscriptionalpahlavi",
+    "ininscriptionalparthian",
+    "grbase",
+    "inbatak",
+    "cprt",
+    "cwcf",
+    "cuneiform",
+    "term",
+    "intibetan",
+    "intags",
+    "asciihexdigit",
+    "sentenceterminal",
+    "inmayannumerals",
+    "nand",
+    "patsyn",
+    "hatran",
+    "inblockelements",
+    "inornamentaldingbats",
     "innumberforms",
-    "glag",
-    "goth",
-    "invedicextensions",
     "oldpersian",
-    "digit",
-    "xdigit",
-    "bass",
-    "xidstart",
-    "oldpermic",
-    "nbat",
-    "inarabicpresentationformsa",
-    "logicalorderexception",
+    "inshavian",
+    "bopo",
+    "hatr",
+    "caseignorable",
+    "inoldpersian",
+    "modifierletter",
+    "cwu",
+    "lydi",
     "inbyzantinemusicalsymbols",
-    "nabataean",
-    "intibetan",
-    "othermath",
-    "inmiscellaneousmathematicalsymbolsb",
-    "inverticalforms",
-    "tglg",
+    "ingeometricshapesextended",
     "inmyanmarextendedb",
-    "ideographic",
-    "incyrillicextendeda",
+    "innushu",
+    "lydian",
+    "inunifiedcanadianaboriginalsyllabics",
+    "orkh",
+    "inyiradicals",
+    "inkatakanaphoneticextensions",
+    "inethiopicextendeda",
+    "incoptic",
+    "inarabicextendeda",
+    "oldpermic",
+    "incjksymbolsandpunctuation",
+    "word",
+    "bopomofo",
+    "ogam",
+    "inlisu",
+    "inoldpermic",
+    "innoblock",
+    "taiviet",
     "inbraillepatterns",
-    "incyrillicextendedc",
-    "linb",
-    "inlatinextendedd",
-    "limb",
-    "otherletter",
-    "bali",
-    "tibt",
-    "georgian",
-    "xidcontinue",
-#endif /* USE_UNICODE_PROPERTIES */
-    "lower",
-#ifdef USE_UNICODE_PROPERTIES
-    "tibetan",
-    "elba",
+    "alpha",
     "inbalinese",
-    "yi",
-    "bengali",
-    "yiii",
-    "inhighprivateusesurrogates",
-    "extender",
-    "narb",
     "sorasompeng",
-    "brai",
-    "hex",
-    "balinese",
-    "arab",
-    "pi",
-    "brahmi",
-    "elbasan",
-    "ingeometricshapesextended",
-    "inhanguljamo",
+    "closepunctuation",
+    "inmiscellaneousmathematicalsymbolsb",
+    "inlepcha",
+    "insyriacsupplement",
+    "newa",
+    "spacingmark",
+    "inpalmyrene",
+    "cyrl",
+    "assigned",
+    "mlym",
+    "malayalam",
+    "ext",
+    "newtailue",
 #endif /* USE_UNICODE_PROPERTIES */
-    "graph",
+    "space",
+#ifdef USE_UNICODE_PROPERTIES
+    "intelugu",
+    "idsb",
+    "indevanagari",
+    "avestan",
+    "cf",
+    "palmyrene",
+    "inethiopicsupplement",
+    "soyo",
+#endif /* USE_UNICODE_PROPERTIES */
+    "xposixpunct",
 #ifndef USE_UNICODE_PROPERTIES
-    "digit",
-    "blank"
+    "lower",
 #else /* USE_UNICODE_PROPERTIES */
+    "pf",
     "sarb",
-    "pcm",
-    "pc",
-    "inethiopicextendeda",
-    "incaucasianalbanian",
-    "pe",
-    "sundanese",
-    "inphaistosdisc",
-    "inancientgreekmusicalnotation",
-    "modifierletter",
-    "word",
-    "ps",
-    "changeswhencasemapped",
-    "lowercaseletter",
-    "inancientgreeknumbers",
-    "saurashtra",
-    "hexdigit",
-    "space",
-    "inbrahmi",
-    "inblockelements",
-    "incoptic",
-    "mlym",
-    "multani",
-    "lyci",
-    "linearb",
-    "changeswhentitlecased",
-    "rejang",
-    "lycian",
-    "inbassavah",
-    "lisu",
-    "incombininghalfmarks",
-    "malayalam",
-    "patws",
-    "palm",
-    "tagalog",
-    "psalterpahlavi",
-    "mymr",
-    "incopticepactnumbers",
-    "inletterlikesymbols",
-    "alpha",
-    "inlepcha",
-    "inpalmyrene",
-    "lepc",
-    "runic",
-    "inugaritic",
-    "myanmar",
-    "saur",
-    "mult",
-    "talu",
+    "zanabazarsquare",
+    "ugaritic",
+    "osge",
+    "java",
+    "sharada",
+    "dogra",
+    "bugi",
+    "meroitichieroglyphs",
+    "separator",
+    "ingeorgiansupplement",
+    "sogd",
+    "tale",
+    "inunifiedcanadianaboriginalsyllabicsextended",
+    "terminalpunctuation",
+    "shrd",
+#endif /* USE_UNICODE_PROPERTIES */
+    "graph",
+#ifdef USE_UNICODE_PROPERTIES
+    "olditalic",
+    "dogr",
+    "gujr",
+    "phag",
+    "gujarati",
+    "inhanguljamo",
+    "javanese",
+    "taml",
+    "inphoneticextensions",
+    "siddham",
+    "buginese",
+    "inmongoliansupplement",
+    "invariationselectors",
+    "inhanguljamoextendeda",
+    "inverticalforms",
     "syrc",
-    "perm",
-    "telu",
-    "tangut",
-    "insaurashtra",
-    "inoriya",
-    "graphemeextend",
-    "imperialaramaic",
-    "inbengali",
-    "variationselector",
-    "syriac",
-    "inarabicmathematicalalphabeticsymbols",
-    "beng",
-    "inimperialaramaic",
-    "sylotinagri",
-    "inyiradicals",
-    "mathsymbol",
-    "inbuginese",
-    "osmanya",
-    "idsb",
-    "bidic",
-    "inphoenician",
-    "prti",
-    "brah",
-    "cuneiform",
-    "ogrext",
-    "incountingrodnumerals",
-    "hebr",
-    "cprt",
-    "coptic",
-    "indevanagariextended",
-    "inyijinghexagramsymbols",
-    "incyrillicsupplement",
-    "inarabicextendeda",
-    "inalchemicalsymbols",
-    "signwriting",
-    "inaegeannumbers",
-    "privateuse",
-    "ininscriptionalparthian",
-    "braille",
-    "ininscriptionalpahlavi",
-    "incherokeesupplement",
-    "tagb",
-    "inlinearbsyllabary",
-    "cyrl",
-    "intagbanwa",
-    "inunifiedcanadianaboriginalsyllabics",
-    "copt",
-    "inkannada",
-    "tirhuta",
-    "kana",
-    "changeswhencasefolded",
-    "inhighsurrogates",
-    "runr",
-    "cakm",
-    "inlatin1supplement",
-    "print",
-    "inchakma",
-    "patternwhitespace",
     "number",
-    "mendekikakui",
-    "spaceseparator",
-    "changeswhenlowercased",
-    "sylo",
-    "meeteimayek",
-    "inethiopicsupplement",
+    "incopticepactnumbers",
+    "avst",
+    "inbamum",
+    "nd",
+    "insuttonsignwriting",
+    "extender",
+    "intaiviet",
+    "hex",
+    "incjkunifiedideographsextensionf",
+    "other",
+    "otheridcontinue",
+    "shaw",
+    "dash",
+    "othernumber",
     "orya",
-    "inalphabeticpresentationforms",
-    "inkaithi",
-    "incjkcompatibilityforms",
-    "takri",
-    "incjkcompatibilityideographs",
-    "inkatakana",
-    "phli",
-    "sund",
-    "inmathematicaloperators",
-    "closepunctuation",
-    "incjkstrokes",
-    "separator",
-    "finalpunctuation",
-    "inmeeteimayek",
+    "invedicextensions",
+    "sgnw",
+    "caucasianalbanian",
+    "inmathematicalalphanumericsymbols",
+    "inphoneticextensionssupplement",
+    "invariationselectorssupplement",
+    "induployan",
+    "syriac",
+    "oalpha",
+    "innyiakengpuachuehmong",
+    "incombiningdiacriticalmarks",
     "inethiopicextended",
-    "unassigned",
-    "inpsalterpahlavi",
+    "nl",
+    "incombiningdiacriticalmarksforsymbols",
+    "khudawadi",
+    "otheralphabetic",
+    "oldhungarian",
+    "incurrencysymbols",
+    "incjkradicalssupplement",
+    "inglagolitic",
+    "intifinagh",
+    "ingeorgianextended",
+    "surrogate",
+    "incyrillicextendedb",
+    "ethi",
+    "titlecaseletter",
+    "rohg",
+    "inmeroiticcursive",
+    "idstrinaryoperator",
     "inphagspa",
-    "po",
-    "otherdefaultignorablecodepoint",
-    "incjkcompatibilityideographssupplement",
-    "kali",
     "lepcha",
-    "wspace",
+    "intagalog",
+    "mathsymbol",
+    "incombiningdiacriticalmarkssupplement",
+    "inbrahmi",
+    "insymbolsandpictographsextendeda",
+    "inlinearbsyllabary",
+    "oldturkic",
+    "inbengali",
+    "wancho",
+    "osmanya",
+    "buhd",
+    "insmallformvariants",
+    "indevanagariextended",
     "softdotted",
-    "grbase",
-    "inhanunoo",
+    "inbuginese",
+    "mahj",
+    "inlatin1supplement",
+    "ingothic",
+    "mahajani",
+    "hang",
+    "sylo",
+    "warangciti",
+    "ingujarati",
+    "tirhuta",
+    "incombiningdiacriticalmarksextended",
+    "spaceseparator",
+    "ingunjalagondi",
+    "wcho",
+    "hiragana",
+    "extendedpictographic",
+    "inrejang",
+    "inottomansiyaqnumbers",
+    "nchar",
     "cyrillic",
-    "incombiningdiacriticalmarks",
-    "incombiningdiacriticalmarksforsymbols",
-    "meroitichieroglyphs",
-    "mark",
-    "ugaritic",
-    "aghb",
+    "khoj",
+    "inlimbu",
+    "hmng",
+    "thaa",
+    "thai",
+    "incjkunifiedideographsextensionb",
+    "deva",
+    "thaana",
+    "phagspa",
+    "devanagari",
+    "tang",
+    "currencysymbol",
+    "tagbanwa",
+    "inenclosedcjklettersandmonths",
+    "tamil",
+    "tirh",
+#endif /* USE_UNICODE_PROPERTIES */
+    "digit",
+#ifndef USE_UNICODE_PROPERTIES
+    "blank"
+#else /* USE_UNICODE_PROPERTIES */
+    "talu",
+    "zp",
+    "inpaucinhau",
+    "taitham",
+    "otherlowercase",
+    "telu",
+    "inaegeannumbers",
+    "otherletter",
+    "whitespace",
+    "nonspacingmark",
+    "graphemeclusterbreak=spacingmark",
+    "inletterlikesymbols",
+    "intagbanwa",
+    "oldsogdian",
+    "otheridstart",
+    "graphemeclusterbreak=cr",
+    "narb",
+    "changeswhencasemapped",
+    "inbopomofo",
+    "tangut",
+    "graphemeclusterbreak=regionalindicator",
+    "noncharactercodepoint",
+    "otheruppercase",
+    "rjng",
+    "sylotinagri",
+    "inhangulsyllables",
+    "emojipresentation",
+    "inindicsiyaqnumbers",
+    "inbassavah",
+    "ogrext",
+    "othersymbol",
+    "oupper",
     "inbuhid",
-    "inkanasupplement",
-    "phoenician",
-    "inkharoshthi",
-    "inkhmer",
-    "symbol",
-    "pf",
-    "incombiningdiacriticalmarkssupplement",
-    "lydi",
-    "hangul",
-    "incurrencysymbols",
+    "hmnp",
+    "inpsalterpahlavi",
+    "finalpunctuation",
+    "phlp",
+    "inbamumsupplement",
+    "buhid",
+    "paragraphseparator",
+    "inalphabeticpresentationforms",
+    "omath",
+    "any",
+    "elba",
+    "changeswhentitlecased",
+    "incombininghalfmarks",
     "intangutcomponents",
-    "lydian",
-    "othergraphemeextend",
-    "intakri",
-    "takr",
-    "induployan",
-    "ugar",
+    "hebr",
+    "deprecated",
+    "inarabicmathematicalalphabeticsymbols",
     "inprivateusearea",
-    "kaithi",
-    "inkhmersymbols",
-    "bidicontrol",
-    "ethiopic",
-    "inhebrew",
-    "bassavah",
-    "kthi",
-    "inoldpersian",
-    "hung",
-    "xpeo",
-    "inoldpermic",
-    "olck",
-    "phnx",
-    "olchiki",
-    "phag",
-    "inunifiedcanadianaboriginalsyllabicsextended",
-    "inpahawhhmong",
-    "inhalfwidthandfullwidthforms",
-    "patternsyntax",
-    "inphoneticextensions",
-    "knda",
-    "combiningmark",
-    "plrd",
-    "inmendekikakui",
-    "hluw",
-    "nko",
-    "nkoo",
-    "inhanguljamoextendedb",
-    "kannada",
-    "khmr",
-    "khar",
-    "otheruppercase",
-    "oldhungarian",
-    "graphemeclusterbreak=ebasegaz",
-    "inkhojki",
-    "graphemeclusterbreak=ebase",
-    "otherpunctuation",
-    "inphoneticextensionssupplement",
-    "enclosingmark",
-    "inkatakanaphoneticextensions",
-    "gujr",
-    "inkangxiradicals",
+    "kayahli",
+    "inplayingcards",
     "inarabicpresentationformsb",
-    "gujarati",
+    "ogham",
+    "elym",
     "graphemeclusterbreak=t",
     "graphemeclusterbreak=lvt",
-    "pd",
-    "xsux",
-    "uideo",
-    "hebrew",
-    "kharoshthi",
-    "surrogate",
-    "incyrillicextendedb",
-    "cherokee",
-    "modifiersymbol",
-    "incombiningdiacriticalmarksextended",
-    "graphemeclusterbreak=l",
-    "graphemeclusterbreak=control",
-    "deprecated",
-    "ingeorgiansupplement",
-    "idstrinaryoperator",
-    "bamu",
-    "inbamum",
-    "grek",
-    "graphemeclusterbreak=cr",
-    "inmeroiticcursive",
-    "graphemeclusterbreak=emodifier",
-    "khmer",
-    "graphemeclusterbreak=regionalindicator",
-    "inglagoliticsupplement",
-    "oldturkic",
-    "inlatinextendedb",
-    "unifiedideograph",
-    "orkh",
-    "graphemeclusterbreak=zwj",
-    "caucasianalbanian",
-    "graphemeclusterbreak=glueafterzwj",
-    "oldnortharabian",
-    "graphemeclusterbreak=lf",
-    "khoj",
-    "inlimbu",
+    "nbat",
+    "nabataean",
+    "hangul",
+    "elymaic",
+    "inhebrew",
+    "injavanese",
+    "symbol",
+    "inmathematicaloperators",
     "inarabicsupplement",
-    "any",
-    "alphabetic",
-    "defaultignorablecodepoint",
-    "p",
-    "pauc",
-    "zp",
-    "inbamumsupplement",
-    "xposixpunct",
+    "cypriot",
+    "hung",
+    "wspace",
+    "changeswhenlowercased",
+    "elbasan",
+    "hluw",
+    "insuperscriptsandsubscripts",
     "graphemeclusterbreak=extend",
     "graphemeclusterbreak=prepend",
-    "inyisyllables",
-    "patsyn",
-    "lu",
-    "limbu",
-    "inkanbun",
-    "insuperscriptsandsubscripts",
-    "inlisu",
-    "punct",
-    "currencysymbol",
-    "graphemeclusterbreak=v",
-    "graphemeclusterbreak=lv",
-    "intelugu",
-    "insupplementalmathematicaloperators",
-    "batk",
-    "bugi",
+    "nshu",
+    "oldnortharabian",
+    "inyijinghexagramsymbols",
+    "hexdigit",
+    "graphemeclusterbreak=l",
+    "graphemeclusterbreak=control",
+    "bassavah",
+    "otherdefaultignorablecodepoint",
     "changeswhenuppercased",
-    "inbatak",
-    "inplayingcards",
-    "pahawhhmong",
-    "buginese",
-    "bopo",
-    "innoblock",
-    "inbopomofo",
-    "hyphen",
-    "inkayahli",
-    "cypriot",
+    "inalchemicalsymbols",
     "insupplementalarrowsa",
-    "cwu",
+    "inyisyllables",
+    "tibt",
+    "othermath",
+    "tibetan",
+    "inmahjongtiles",
+    "signwriting",
+    "nushu",
+    "modifiersymbol",
+    "inhalfwidthandfullwidthforms",
+    "upper",
     "insupplementalarrowsc",
-    "phagspa",
-    "incjkcompatibility",
-    "palmyrene",
+    "insupplementalmathematicaloperators",
     "incypriotsyllabary",
-    "inboxdrawing",
-    "spacingmark",
-    "bhks",
-    "incjksymbolsandpunctuation",
-    "egyp",
-    "phlp",
-    "bhaiksuki",
-    "dep",
-    "buhd",
-    "inegyptianhieroglyphs",
-    "bopomofo",
-    "dashpunctuation",
     "dupl",
-    "guru",
-    "nonspacingmark",
-    "prependedconcatenationmark",
-    "oupper",
-    "telugu",
-    "qmark",
-    "sk",
-    "egyptianhieroglyphs",
-    "inkhudawadi",
-    "kayahli",
-    "katakana",
-    "inhangulcompatibilityjamo",
-    "incjkradicalssupplement",
-    "quotationmark",
+    "tavt",
+    "inpahawhhmong",
+    "alphabetic",
+    "dashpunctuation",
+    "uppercase",
+    "soyombo",
+    "hanifirohingya",
+    "otherpunctuation",
+    "defaultignorablecodepoint",
+    "inhanguljamoextendedb",
+    "aghb",
+    "tifinagh",
+    "inlatinextendedb",
+    "tfng",
+    "inhighprivateusesurrogates",
+    "changeswhencasefolded",
+    "dep",
     "oldsoutharabian",
-    "unknown",
-    "buhid",
-    "khudawadi",
-    "incjkunifiedideographsextensiona",
-    "incjkunifiedideographsextensionc",
-    "incjkunifiedideographsextensione",
-    "incjkunifiedideographs",
-    "paragraphseparator",
-    "graphemeclusterbreak=spacingmark",
-    "zyyy",
-    "paucinhau",
-    "inpaucinhau",
-    "khojki",
-    "punctuation",
-    "greek",
+    "graphemeclusterbreak=lf",
+    "pahawhhmong",
+    "unifiedideograph",
+    "uppercaseletter",
     "insupplementalpunctuation",
-    "insupplementalarrowsb",
-    "insupplementaryprivateuseareaa",
-    "insupplementalsymbolsandpictographs",
+    "ethiopic",
+    "inglagoliticsupplement",
+    "rejang",
     "inbopomofoextended",
-    "uppercase",
-    "grlink",
-    "incjkunifiedideographsextensiond",
-    "openpunctuation",
-    "upper",
-    "graphemelink",
-    "uppercaseletter",
-    "batak",
-    "blank",
+    "tagb",
+    "othergraphemeextend",
+    "inegyptianhieroglyphs",
+    "inegyptianhieroglyphformatcontrols",
+    "hebrew",
+    "tglg",
+    "tagalog",
+    "graphemeclusterbreak=zwj",
+    "zyyy",
+    "hyphen",
+    "inboxdrawing",
+    "graphemeclusterbreak=v",
+    "graphemeclusterbreak=lv",
+    "telugu",
     "duployan",
-    "incjkunifiedideographsextensionb",
-    "gurmukhi",
+    "openpunctuation",
+    "insupplementaryprivateuseareaa",
+    "inhighsurrogates",
+    "insupplementalarrowsb",
+    "insupplementalsymbolsandpictographs",
+    "egyp",
+    "inhangulcompatibilityjamo",
+    "nyiakengpuachuehmong",
+    "egyptianhieroglyphs",
     "insupplementaryprivateuseareab"
 #endif /* USE_UNICODE_PROPERTIES */
   };
 #define uniname2ctype_pool ((const char *) &uniname2ctype_pool_contents)
-#ifdef __GNUC__
-__inline
-#if defined __GNUC_STDC_INLINE__ || defined __GNUC_GNU_INLINE__
-__attribute__ ((__gnu_inline__))
-#endif
-#endif
 const struct uniname2ctype_struct *
-uniname2ctype_p (str, len)
-     register const char *str;
-     register unsigned int len;
+uniname2ctype_p (register const char *str, register size_t len)
 {
   static const struct uniname2ctype_struct wordlist[] =
     {
 #ifdef USE_UNICODE_PROPERTIES
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3), 35},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1},
+      {uniname2ctype_offset(str11), 111},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str17), 111},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str22), 152},
+      {-1},
+      {uniname2ctype_offset(str24), 52},
+      {uniname2ctype_offset(str25), 184},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str11), 34},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str15), 31},
+      {uniname2ctype_offset(str33), 218},
+      {-1},
+      {uniname2ctype_offset(str35), 186},
+      {uniname2ctype_offset(str36), 34},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str24), 21},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str29), 186},
-      {uniname2ctype_offset(str30), 61},
-      {uniname2ctype_offset(str31), 475},
+      {uniname2ctype_offset(str45), 173},
+      {uniname2ctype_offset(str46), 28},
+      {uniname2ctype_offset(str47), 61},
+      {uniname2ctype_offset(str48), 95},
+      {uniname2ctype_offset(str49), 95},
+      {-1}, {-1},
+      {uniname2ctype_offset(str52), 331},
+      {-1}, {-1},
+      {uniname2ctype_offset(str55), 21},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str64), 44},
+      {-1},
+      {uniname2ctype_offset(str66), 319},
+      {uniname2ctype_offset(str67), 267},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str35), 52},
-      {uniname2ctype_offset(str36), 115},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str41), 18},
+      {uniname2ctype_offset(str71), 181},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str75), 22},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str49), 32},
+      {uniname2ctype_offset(str83), 184},
       {-1}, {-1},
-      {uniname2ctype_offset(str52), 129},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str56), 50},
-      {-1},
-      {uniname2ctype_offset(str58), 417},
-      {uniname2ctype_offset(str59), 33},
+      {uniname2ctype_offset(str86), 31},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str92), 45},
       {-1},
-      {uniname2ctype_offset(str61), 291},
-      {uniname2ctype_offset(str62), 19},
-      {-1}, {-1},
-      {uniname2ctype_offset(str65), 169},
+      {uniname2ctype_offset(str94), 33},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str100), 149},
+      {uniname2ctype_offset(str101), 496},
+      {uniname2ctype_offset(str102), 108},
+      {uniname2ctype_offset(str103), 252},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str69), 505},
+      {uniname2ctype_offset(str107), 31},
+      {uniname2ctype_offset(str108), 77},
       {-1}, {-1},
-      {uniname2ctype_offset(str72), 245},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str77), 298},
-      {uniname2ctype_offset(str78), 102},
+      {uniname2ctype_offset(str111), 189},
+      {uniname2ctype_offset(str112), 189},
       {-1}, {-1},
-      {uniname2ctype_offset(str81), 47},
-      {uniname2ctype_offset(str82), 48},
+      {uniname2ctype_offset(str115), 149},
+      {-1},
+      {uniname2ctype_offset(str117), 98},
+      {uniname2ctype_offset(str118), 77},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str86), 14},
+      {uniname2ctype_offset(str122), 212},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str93), 476},
+      {uniname2ctype_offset(str129), 187},
+      {uniname2ctype_offset(str130), 42},
+      {uniname2ctype_offset(str131), 172},
+      {-1}, {-1},
+      {uniname2ctype_offset(str134), 482},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str139), 170},
       {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str99), 55},
+      {uniname2ctype_offset(str145), 499},
+      {uniname2ctype_offset(str146), 548},
+      {-1},
+      {uniname2ctype_offset(str148), 552},
+      {uniname2ctype_offset(str149), 514},
+      {-1},
+      {uniname2ctype_offset(str151), 18},
+      {uniname2ctype_offset(str152), 169},
+      {uniname2ctype_offset(str153), 160},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str161), 313},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str177), 337},
+      {uniname2ctype_offset(str178), 539},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str183), 75},
       {-1}, {-1},
-      {uniname2ctype_offset(str102), 23},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str106), 285},
+      {uniname2ctype_offset(str186), 27},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str110), 506},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str114), 408},
+      {uniname2ctype_offset(str190), 208},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str124), 311},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str132), 160},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str203), 345},
+      {uniname2ctype_offset(str204), 473},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str210), 553},
+      {-1},
+      {uniname2ctype_offset(str212), 350},
+      {uniname2ctype_offset(str213), 115},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str218), 528},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str140), 441},
-      {uniname2ctype_offset(str141), 44},
+      {uniname2ctype_offset(str226), 171},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str231), 31},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str236), 25},
+      {uniname2ctype_offset(str237), 194},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str246), 32},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str250), 40},
       {-1}, {-1},
-      {uniname2ctype_offset(str144), 296},
-      {uniname2ctype_offset(str145), 446},
+      {uniname2ctype_offset(str253), 102},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str152), 367},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str159), 522},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str164), 121},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str174), 418},
+      {uniname2ctype_offset(str260), 542},
+      {-1}, {-1},
+      {uniname2ctype_offset(str263), 161},
       {-1},
-      {uniname2ctype_offset(str176), 240},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str185), 27},
+      {uniname2ctype_offset(str265), 19},
+      {-1},
+      {uniname2ctype_offset(str267), 79},
+      {uniname2ctype_offset(str268), 342},
+      {-1},
+      {uniname2ctype_offset(str270), 259},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str274), 541},
+      {uniname2ctype_offset(str275), 500},
       {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str191), 184},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str199), 365},
-      {uniname2ctype_offset(str200), 152},
-      {uniname2ctype_offset(str201), 540},
-      {uniname2ctype_offset(str202), 13},
+      {uniname2ctype_offset(str281), 307},
+      {uniname2ctype_offset(str282), 40},
+      {uniname2ctype_offset(str283), 79},
+      {-1},
+      {uniname2ctype_offset(str285), 516},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str289), 536},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str293), 218},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str297), 212},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str301), 380},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str311), 311},
+      {-1},
+      {uniname2ctype_offset(str313), 441},
+      {-1},
+      {uniname2ctype_offset(str315), 232},
       {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str207), 448},
-      {uniname2ctype_offset(str208), 373},
-      {uniname2ctype_offset(str209), 335},
+      {uniname2ctype_offset(str320), 260},
       {-1},
-      {uniname2ctype_offset(str211), 25},
-      {uniname2ctype_offset(str212), 309},
-      {uniname2ctype_offset(str213), 537},
-      {uniname2ctype_offset(str214), 530},
+      {uniname2ctype_offset(str322), 129},
       {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str220), 359},
+      {uniname2ctype_offset(str328), 320},
+      {-1}, {-1},
+      {uniname2ctype_offset(str331), 76},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str335), 537},
+      {-1}, {-1},
+      {uniname2ctype_offset(str338), 318},
+      {-1},
+      {uniname2ctype_offset(str340), 76},
+      {-1},
+      {uniname2ctype_offset(str342), 334},
+      {-1}, {-1},
+      {uniname2ctype_offset(str345), 53},
+      {uniname2ctype_offset(str346), 259},
       {-1},
-      {uniname2ctype_offset(str222), 462},
+      {uniname2ctype_offset(str348), 411},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str352), 512},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str357), 532},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str362), 163},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str366), 44},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str373), 160},
+      {-1}, {-1},
+      {uniname2ctype_offset(str376), 144},
+      {uniname2ctype_offset(str377), 144},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str386), 356},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str237), 153},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str399), 316},
       {-1},
-      {uniname2ctype_offset(str239), 79},
+      {uniname2ctype_offset(str401), 527},
+      {-1}, {-1},
+      {uniname2ctype_offset(str404), 81},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str411), 55},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str418), 108},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str426), 163},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str442), 14},
       {-1}, {-1},
-      {uniname2ctype_offset(str242), 161},
+      {uniname2ctype_offset(str445), 23},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str462), 46},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str468), 169},
+      {-1},
+      {uniname2ctype_offset(str470), 22},
       {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str247), 93},
-      {uniname2ctype_offset(str248), 79},
-      {uniname2ctype_offset(str249), 314},
+      {uniname2ctype_offset(str475), 507},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str480), 442},
+      {uniname2ctype_offset(str481), 188},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str486), 461},
       {-1},
-      {uniname2ctype_offset(str251), 322},
-      {uniname2ctype_offset(str252), 449},
+      {uniname2ctype_offset(str488), 557},
+      {-1}, {-1},
+      {uniname2ctype_offset(str491), 455},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str500), 127},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str504), 187},
+      {uniname2ctype_offset(str505), 238},
+      {uniname2ctype_offset(str506), 24},
       {-1}, {-1},
-      {uniname2ctype_offset(str255), 149},
-      {uniname2ctype_offset(str256), 504},
+      {uniname2ctype_offset(str509), 24},
       {-1},
-      {uniname2ctype_offset(str258), 208},
+      {uniname2ctype_offset(str511), 448},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str520), 408},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str268), 149},
-      {-1},
-      {uniname2ctype_offset(str270), 171},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str535), 70},
       {-1}, {-1},
-      {uniname2ctype_offset(str273), 289},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str278), 156},
-      {uniname2ctype_offset(str279), 76},
+      {uniname2ctype_offset(str538), 91},
+      {-1}, {-1},
+      {uniname2ctype_offset(str541), 531},
+      {-1},
+      {uniname2ctype_offset(str543), 91},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str556), 525},
       {-1},
-      {uniname2ctype_offset(str281), 76},
-      {uniname2ctype_offset(str282), 112},
+      {uniname2ctype_offset(str558), 335},
       {-1},
-      {uniname2ctype_offset(str284), 306},
-      {uniname2ctype_offset(str285), 89},
-      {uniname2ctype_offset(str286), 491},
+      {uniname2ctype_offset(str560), 498},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str565), 586},
+      {uniname2ctype_offset(str566), 37},
       {-1},
-      {uniname2ctype_offset(str288), 156},
+      {uniname2ctype_offset(str568), 113},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str572), 486},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str577), 573},
+      {uniname2ctype_offset(str578), 70},
+      {uniname2ctype_offset(str579), 106},
+      {-1}, {-1},
+      {uniname2ctype_offset(str582), 391},
+      {uniname2ctype_offset(str583), 465},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str590), 74},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str594), 168},
       {-1},
-      {uniname2ctype_offset(str290), 81},
-      {uniname2ctype_offset(str291), 294},
+      {uniname2ctype_offset(str596), 584},
+      {uniname2ctype_offset(str597), 146},
+      {-1}, {-1},
+      {uniname2ctype_offset(str600), 475},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str604), 551},
+      {uniname2ctype_offset(str605), 591},
+      {-1}, {-1},
+      {uniname2ctype_offset(str608), 598},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str614), 574},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str624), 195},
+      {uniname2ctype_offset(str625), 432},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str630), 29},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str636), 522},
       {-1}, {-1},
-      {uniname2ctype_offset(str294), 488},
-      {uniname2ctype_offset(str295), 173},
-      {uniname2ctype_offset(str296), 443},
+      {uniname2ctype_offset(str639), 49},
       {-1}, {-1},
-      {uniname2ctype_offset(str299), 319},
+      {uniname2ctype_offset(str642), 19},
       {-1}, {-1},
-      {uniname2ctype_offset(str302), 331},
-      {uniname2ctype_offset(str303), 121},
+      {uniname2ctype_offset(str645), 470},
       {-1},
-      {uniname2ctype_offset(str305), 500},
+      {uniname2ctype_offset(str647), 192},
+      {-1}, {-1},
+      {uniname2ctype_offset(str650), 472},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str657), 51},
+      {-1}, {-1},
+      {uniname2ctype_offset(str660), 257},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str668), 69},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str309), 420},
-      {uniname2ctype_offset(str310), 482},
+      {uniname2ctype_offset(str672), 321},
       {-1}, {-1},
-      {uniname2ctype_offset(str313), 283},
-      {uniname2ctype_offset(str314), 458},
+      {uniname2ctype_offset(str675), 68},
+      {-1}, {-1},
+      {uniname2ctype_offset(str678), 171},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str327), 375},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str331), 125},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str695), 530},
+      {uniname2ctype_offset(str696), 175},
+      {uniname2ctype_offset(str697), 384},
       {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str337), 422},
+      {uniname2ctype_offset(str703), 508},
       {-1},
-      {uniname2ctype_offset(str339), 24},
-      {uniname2ctype_offset(str340), 110},
-      {uniname2ctype_offset(str341), 37},
-      {uniname2ctype_offset(str342), 218},
+      {uniname2ctype_offset(str705), 332},
       {-1},
-      {uniname2ctype_offset(str344), 110},
-      {-1}, {-1},
-      {uniname2ctype_offset(str347), 515},
-      {uniname2ctype_offset(str348), 115},
+      {uniname2ctype_offset(str707), 158},
+      {uniname2ctype_offset(str708), 556},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str713), 361},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str355), 29},
-      {-1},
-      {uniname2ctype_offset(str357), 53},
+      {uniname2ctype_offset(str720), 72},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str737), 7},
+      {uniname2ctype_offset(str738), 358},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str361), 487},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str366), 151},
+      {uniname2ctype_offset(str742), 6},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1},
+      {uniname2ctype_offset(str753), 229},
       {-1},
-      {uniname2ctype_offset(str368), 40},
+      {uniname2ctype_offset(str755), 497},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str760), 416},
+      {uniname2ctype_offset(str761), 167},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str766), 156},
+      {uniname2ctype_offset(str767), 572},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str771), 167},
+      {uniname2ctype_offset(str772), 256},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str776), 257},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str783), 156},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str787), 245},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str791), 193},
+      {-1}, {-1},
+      {uniname2ctype_offset(str794), 558},
       {-1}, {-1},
-      {uniname2ctype_offset(str371), 93},
+      {uniname2ctype_offset(str797), 50},
+      {-1},
+      {uniname2ctype_offset(str799), 579},
       {-1}, {-1},
-      {uniname2ctype_offset(str374), 186},
-      {uniname2ctype_offset(str375), 210},
+      {uniname2ctype_offset(str802), 13},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str382), 358},
+      {uniname2ctype_offset(str809), 431},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str814), 478},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str386), 317},
+      {uniname2ctype_offset(str818), 383},
+      {-1}, {-1},
+      {uniname2ctype_offset(str821), 467},
+      {uniname2ctype_offset(str822), 563},
+      {uniname2ctype_offset(str823), 47},
+      {uniname2ctype_offset(str824), 112},
+      {uniname2ctype_offset(str825), 429},
+      {-1}, {-1},
+      {uniname2ctype_offset(str828), 564},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str834), 258},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str838), 157},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str390), 310},
+      {uniname2ctype_offset(str842), 58},
+      {-1}, {-1},
+      {uniname2ctype_offset(str845), 66},
+      {-1},
+      {uniname2ctype_offset(str847), 48},
+      {uniname2ctype_offset(str848), 178},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str855), 67},
+      {-1},
+      {uniname2ctype_offset(str857), 305},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str862), 88},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str394), 170},
+      {uniname2ctype_offset(str875), 354},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1},
+      {uniname2ctype_offset(str886), 389},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str895), 397},
+      {-1}, {-1},
+      {uniname2ctype_offset(str898), 485},
+      {-1},
+      {uniname2ctype_offset(str900), 583},
       {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str400), 124},
+      {uniname2ctype_offset(str906), 504},
+      {uniname2ctype_offset(str907), 434},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str924), 68},
+      {-1},
+      {uniname2ctype_offset(str926), 329},
+      {-1},
+      {uniname2ctype_offset(str928), 519},
+      {uniname2ctype_offset(str929), 446},
+      {uniname2ctype_offset(str930), 41},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str946), 136},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str961), 2},
+      {-1},
+      {uniname2ctype_offset(str963), 246},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str419), 384},
       {-1},
-      {uniname2ctype_offset(str421), 184},
-      {uniname2ctype_offset(str422), 171},
+      {uniname2ctype_offset(str974), 493},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1},
+      {uniname2ctype_offset(str986), 355},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str994), 85},
+      {uniname2ctype_offset(str995), 104},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1005), 53},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str435), 94},
+      {uniname2ctype_offset(str1009), 404},
+      {uniname2ctype_offset(str1010), 26},
       {-1}, {-1},
-      {uniname2ctype_offset(str438), 56},
-      {-1},
-      {uniname2ctype_offset(str440), 538},
+      {uniname2ctype_offset(str1013), 480},
+      {uniname2ctype_offset(str1014), 566},
+      {uniname2ctype_offset(str1015), 469},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1021), 67},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str444), 83},
+      {uniname2ctype_offset(str1025), 444},
       {-1}, {-1},
-      {uniname2ctype_offset(str447), 100},
-      {uniname2ctype_offset(str448), 202},
+      {uniname2ctype_offset(str1028), 136},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str452), 361},
-      {uniname2ctype_offset(str453), 240},
+      {uniname2ctype_offset(str1032), 239},
+      {uniname2ctype_offset(str1033), 71},
       {-1},
-      {uniname2ctype_offset(str455), 89},
-      {uniname2ctype_offset(str456), 3},
-      {-1},
-      {uniname2ctype_offset(str458), 152},
+      {uniname2ctype_offset(str1035), 308},
+      {uniname2ctype_offset(str1036), 543},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1049), 173},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1067), 102},
+      {-1}, {-1},
+      {uniname2ctype_offset(str1070), 115},
       {-1},
-      {uniname2ctype_offset(str460), 83},
+      {uniname2ctype_offset(str1072), 197},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str468), 218},
+      {uniname2ctype_offset(str1080), 210},
+      {uniname2ctype_offset(str1081), 399},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1085), 248},
+      {-1},
+      {uniname2ctype_offset(str1087), 567},
       {-1}, {-1},
-      {uniname2ctype_offset(str471), 489},
-      {uniname2ctype_offset(str472), 494},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str477), 209},
-      {uniname2ctype_offset(str478), 348},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str485), 66},
+      {uniname2ctype_offset(str1090), 69},
+      {uniname2ctype_offset(str1091), 11},
+      {-1},
+      {uniname2ctype_offset(str1093), 125},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str489), 237},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1097), 520},
       {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str503), 360},
-      {uniname2ctype_offset(str504), 507},
+      {uniname2ctype_offset(str1102), 506},
       {-1}, {-1},
-      {uniname2ctype_offset(str507), 71},
-      {uniname2ctype_offset(str508), 221},
-      {uniname2ctype_offset(str509), 26},
+      {uniname2ctype_offset(str1105), 217},
       {-1},
-      {uniname2ctype_offset(str511), 130},
-      {uniname2ctype_offset(str512), 163},
-      {uniname2ctype_offset(str513), 535},
-      {-1}, {-1},
-      {uniname2ctype_offset(str516), 88},
-      {uniname2ctype_offset(str517), 172},
+      {uniname2ctype_offset(str1107), 521},
+      {-1},
+      {uniname2ctype_offset(str1109), 228},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1119), 106},
+      {uniname2ctype_offset(str1120), 60},
+      {uniname2ctype_offset(str1121), 365},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1134), 410},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1140), 93},
+      {-1},
+      {uniname2ctype_offset(str1142), 206},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1146), 131},
+      {uniname2ctype_offset(str1147), 255},
       {-1},
-      {uniname2ctype_offset(str519), 328},
+      {uniname2ctype_offset(str1149), 158},
+      {uniname2ctype_offset(str1150), 98},
+      {uniname2ctype_offset(str1151), 483},
+      {uniname2ctype_offset(str1152), 217},
+      {uniname2ctype_offset(str1153), 138},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1157), 203},
+      {uniname2ctype_offset(str1158), 166},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1164), 229},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1168), 104},
+      {-1},
+      {uniname2ctype_offset(str1170), 374},
+      {uniname2ctype_offset(str1171), 515},
       {-1}, {-1},
-      {uniname2ctype_offset(str522), 169},
-      {uniname2ctype_offset(str523), 497},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str530), 224},
+      {uniname2ctype_offset(str1174), 312},
+      {uniname2ctype_offset(str1175), 26},
+      {uniname2ctype_offset(str1176), 208},
+      {uniname2ctype_offset(str1177), 74},
+      {uniname2ctype_offset(str1178), 338},
+      {-1},
+      {uniname2ctype_offset(str1180), 183},
+      {uniname2ctype_offset(str1181), 151},
+      {uniname2ctype_offset(str1182), 344},
+      {uniname2ctype_offset(str1183), 101},
+      {-1},
+      {uniname2ctype_offset(str1185), 170},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1190), 261},
+      {uniname2ctype_offset(str1191), 524},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1197), 101},
+      {uniname2ctype_offset(str1198), 135},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1203), 351},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str534), 187},
-      {uniname2ctype_offset(str535), 493},
+      {uniname2ctype_offset(str1207), 447},
+      {uniname2ctype_offset(str1208), 239},
+      {uniname2ctype_offset(str1209), 186},
+      {uniname2ctype_offset(str1210), 137},
       {-1},
-      {uniname2ctype_offset(str537), 38},
-      {uniname2ctype_offset(str538), 175},
-      {uniname2ctype_offset(str539), 299},
+      {uniname2ctype_offset(str1212), 364},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1227), 232},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1231), 206},
+      {uniname2ctype_offset(str1232), 340},
+      {uniname2ctype_offset(str1233), 73},
 #ifndef USE_UNICODE_AGE_PROPERTIES
-      {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
 #else /* USE_UNICODE_AGE_PROPERTIES */
-      {-1}, {-1},
-      {uniname2ctype_offset(str542), 246},
-      {uniname2ctype_offset(str543), 248},
+      {uniname2ctype_offset(str1234), 287},
+      {uniname2ctype_offset(str1235), 289},
+      {uniname2ctype_offset(str1236), 286},
+      {uniname2ctype_offset(str1237), 288},
+      {-1}, {-1}, {-1}, {-1}, {-1},
 #endif /* USE_UNICODE_AGE_PROPERTIES */
-      {uniname2ctype_offset(str544), 68},
-      {uniname2ctype_offset(str545), 297},
-      {uniname2ctype_offset(str546), 197},
-      {uniname2ctype_offset(str547), 356},
+      {uniname2ctype_offset(str1243), 25},
+      {uniname2ctype_offset(str1244), 326},
+      {uniname2ctype_offset(str1245), 249},
+      {uniname2ctype_offset(str1246), 420},
 #ifndef USE_UNICODE_AGE_PROPERTIES
-      {-1}, {-1}, {-1},
+      {-1},
 #else /* USE_UNICODE_AGE_PROPERTIES */
-      {uniname2ctype_offset(str548), 258},
-      {uniname2ctype_offset(str549), 259},
-      {uniname2ctype_offset(str550), 247},
+      {uniname2ctype_offset(str1247), 268},
 #endif /* USE_UNICODE_AGE_PROPERTIES */
-      {uniname2ctype_offset(str551), 511},
+      {uniname2ctype_offset(str1248), 30},
 #ifndef USE_UNICODE_AGE_PROPERTIES
-      {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1},
 #else /* USE_UNICODE_AGE_PROPERTIES */
-      {uniname2ctype_offset(str552), 250},
-      {uniname2ctype_offset(str553), 251},
+      {uniname2ctype_offset(str1249), 275},
+      {uniname2ctype_offset(str1250), 270},
+      {uniname2ctype_offset(str1251), 274},
+      {uniname2ctype_offset(str1252), 269},
+      {uniname2ctype_offset(str1253), 285},
 #endif /* USE_UNICODE_AGE_PROPERTIES */
-      {uniname2ctype_offset(str554), 29},
+      {uniname2ctype_offset(str1254), 540},
 #ifndef USE_UNICODE_AGE_PROPERTIES
       {-1},
 #else /* USE_UNICODE_AGE_PROPERTIES */
-      {uniname2ctype_offset(str555), 257},
-#endif /* USE_UNICODE_AGE_PROPERTIES */
-      {uniname2ctype_offset(str556), 22},
-      {uniname2ctype_offset(str557), 107},
-#ifndef USE_UNICODE_AGE_PROPERTIES
-      {-1}, {-1},
-#else /* USE_UNICODE_AGE_PROPERTIES */
-      {uniname2ctype_offset(str558), 260},
-      {uniname2ctype_offset(str559), 249},
+      {uniname2ctype_offset(str1255), 280},
 #endif /* USE_UNICODE_AGE_PROPERTIES */
-      {uniname2ctype_offset(str560), 350},
+      {uniname2ctype_offset(str1256), 267},
 #ifndef USE_UNICODE_AGE_PROPERTIES
-      {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
 #else /* USE_UNICODE_AGE_PROPERTIES */
-      {uniname2ctype_offset(str561), 263},
-      {uniname2ctype_offset(str562), 262},
-      {uniname2ctype_offset(str563), 255},
-      {uniname2ctype_offset(str564), 256},
+      {uniname2ctype_offset(str1257), 279},
+      {uniname2ctype_offset(str1258), 281},
+      {uniname2ctype_offset(str1259), 272},
+      {uniname2ctype_offset(str1260), 284},
+      {uniname2ctype_offset(str1261), 271},
+      {uniname2ctype_offset(str1262), 273},
 #endif /* USE_UNICODE_AGE_PROPERTIES */
-      {uniname2ctype_offset(str565), 514},
+      {uniname2ctype_offset(str1263), 64},
 #ifndef USE_UNICODE_AGE_PROPERTIES
       {-1}, {-1},
 #else /* USE_UNICODE_AGE_PROPERTIES */
-      {uniname2ctype_offset(str566), 253},
-      {uniname2ctype_offset(str567), 261},
+      {uniname2ctype_offset(str1264), 283},
+      {-1},
 #endif /* USE_UNICODE_AGE_PROPERTIES */
-      {uniname2ctype_offset(str568), 332},
-      {uniname2ctype_offset(str569), 75},
+      {uniname2ctype_offset(str1266), 21},
 #ifndef USE_UNICODE_AGE_PROPERTIES
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
 #else /* USE_UNICODE_AGE_PROPERTIES */
-      {uniname2ctype_offset(str570), 254},
-      {-1}, {-1},
-      {uniname2ctype_offset(str573), 252},
-      {-1}, {-1},
-#endif /* USE_UNICODE_AGE_PROPERTIES */
-      {uniname2ctype_offset(str576), 51},
-      {uniname2ctype_offset(str577), 386},
-      {-1},
-      {uniname2ctype_offset(str579), 338},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str584), 67},
-      {uniname2ctype_offset(str585), 101},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str589), 208},
+      {uniname2ctype_offset(str1267), 282},
+      {uniname2ctype_offset(str1268), 277},
       {-1},
-      {uniname2ctype_offset(str591), 533},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str595), 214},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str604), 211},
+      {uniname2ctype_offset(str1270), 276},
+      {uniname2ctype_offset(str1271), 278},
       {-1}, {-1},
-      {uniname2ctype_offset(str607), 117},
-      {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str613), 200},
+#endif /* USE_UNICODE_AGE_PROPERTIES */
+      {uniname2ctype_offset(str1274), 200},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str621), 321},
-      {uniname2ctype_offset(str622), 164},
+      {uniname2ctype_offset(str1282), 596},
       {-1}, {-1},
-      {uniname2ctype_offset(str625), 185},
-      {-1},
-      {uniname2ctype_offset(str627), 341},
-      {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str633), 402},
-      {uniname2ctype_offset(str634), 119},
-      {-1},
-      {uniname2ctype_offset(str636), 198},
-      {uniname2ctype_offset(str637), 231},
-      {-1},
-      {uniname2ctype_offset(str639), 144},
-      {uniname2ctype_offset(str640), 144},
-      {uniname2ctype_offset(str641), 64},
-      {uniname2ctype_offset(str642), 467},
-      {-1}, {-1},
-      {uniname2ctype_offset(str645), 202},
-      {uniname2ctype_offset(str646), 185},
-      {-1}, {-1},
-      {uniname2ctype_offset(str649), 68},
-      {-1}, {-1},
-      {uniname2ctype_offset(str652), 20},
-      {-1}, {-1},
-      {uniname2ctype_offset(str655), 495},
+      {uniname2ctype_offset(str1285), 105},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str659), 394},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str663), 524},
-      {uniname2ctype_offset(str664), 286},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str668), 456},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str677), 550},
-      {uniname2ctype_offset(str678), 199},
+      {uniname2ctype_offset(str1289), 333},
+      {-1}, {-1},
+      {uniname2ctype_offset(str1292), 382},
       {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str683), 457},
-      {uniname2ctype_offset(str684), 469},
-      {-1},
-      {uniname2ctype_offset(str686), 501},
-      {-1},
-      {uniname2ctype_offset(str688), 526},
-      {-1},
-      {uniname2ctype_offset(str690), 206},
-      {-1},
-      {uniname2ctype_offset(str692), 516},
+      {uniname2ctype_offset(str1297), 145},
+      {-1}, {-1},
+      {uniname2ctype_offset(str1300), 86},
+      {uniname2ctype_offset(str1301), 141},
       {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str697), 241},
-      {uniname2ctype_offset(str698), 206},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str705), 28},
-      {uniname2ctype_offset(str706), 225},
-      {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str712), 407},
-      {uniname2ctype_offset(str713), 312},
+      {uniname2ctype_offset(str1306), 15},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1314), 193},
       {-1}, {-1},
-      {uniname2ctype_offset(str716), 429},
-      {uniname2ctype_offset(str717), 201},
+      {uniname2ctype_offset(str1317), 86},
       {-1},
-      {uniname2ctype_offset(str719), 95},
-      {uniname2ctype_offset(str720), 95},
-      {uniname2ctype_offset(str721), 106},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str726), 181},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str733), 53},
-      {uniname2ctype_offset(str734), 303},
+      {uniname2ctype_offset(str1319), 256},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1},
-      {uniname2ctype_offset(str745), 24},
       {-1}, {-1},
-      {uniname2ctype_offset(str748), 378},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str755), 132},
+      {uniname2ctype_offset(str1331), 252},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1340), 105},
       {-1}, {-1},
-      {uniname2ctype_offset(str758), 189},
-      {uniname2ctype_offset(str759), 189},
+      {uniname2ctype_offset(str1343), 120},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1},
-      {uniname2ctype_offset(str761), 224},
+      {uniname2ctype_offset(str1354), 164},
+      {uniname2ctype_offset(str1355), 254},
       {-1}, {-1},
-      {uniname2ctype_offset(str764), 154},
-      {-1},
-      {uniname2ctype_offset(str766), 154},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str773), 106},
-      {uniname2ctype_offset(str774), 509},
-      {uniname2ctype_offset(str775), 234},
-      {uniname2ctype_offset(str776), 228},
-      {-1},
-      {uniname2ctype_offset(str778), 61},
-      {uniname2ctype_offset(str779), 188},
-      {uniname2ctype_offset(str780), 485},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str785), 103},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str792), 239},
-      {uniname2ctype_offset(str793), 65},
-      {-1},
-      {uniname2ctype_offset(str795), 62},
+      {uniname2ctype_offset(str1358), 594},
       {-1},
-      {uniname2ctype_offset(str797), 223},
-      {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str803), 222},
-      {uniname2ctype_offset(str804), 451},
-      {uniname2ctype_offset(str805), 304},
-      {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str811), 459},
-      {uniname2ctype_offset(str812), 238},
-      {uniname2ctype_offset(str813), 124},
-      {uniname2ctype_offset(str814), 36},
+      {uniname2ctype_offset(str1360), 3},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1365), 372},
+      {uniname2ctype_offset(str1366), 36},
+      {uniname2ctype_offset(str1367), 513},
       {-1},
-      {uniname2ctype_offset(str816), 153},
-      {uniname2ctype_offset(str817), 419},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1369), 247},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1373), 263},
       {-1},
-      {uniname2ctype_offset(str828), 182},
-      {uniname2ctype_offset(str829), 498},
-      {uniname2ctype_offset(str830), 210},
+      {uniname2ctype_offset(str1375), 135},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1380), 35},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str834), 99},
-      {uniname2ctype_offset(str835), 527},
-      {uniname2ctype_offset(str836), 532},
+      {uniname2ctype_offset(str1384), 56},
+      {-1}, {-1},
+      {uniname2ctype_offset(str1387), 113},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1400), 201},
+      {uniname2ctype_offset(str1401), 385},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1407), 224},
       {-1},
-      {uniname2ctype_offset(str847), 114},
+      {uniname2ctype_offset(str1409), 38},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1419), 140},
+      {uniname2ctype_offset(str1420), 140},
       {-1},
-      {uniname2ctype_offset(str858), 221},
+      {uniname2ctype_offset(str1422), 310},
+      {uniname2ctype_offset(str1423), 143},
+      {-1}, {-1},
+      {uniname2ctype_offset(str1426), 39},
       {-1},
-      {uniname2ctype_offset(str860), 212},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str865), 343},
-      {uniname2ctype_offset(str866), 405},
-      {uniname2ctype_offset(str867), 67},
+      {uniname2ctype_offset(str1428), 181},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1434), 143},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1438), 422},
+      {-1}, {-1},
+      {uniname2ctype_offset(str1441), 215},
+      {uniname2ctype_offset(str1442), 523},
+      {-1}, {-1},
+      {uniname2ctype_offset(str1445), 253},
+      {-1}, {-1},
+      {uniname2ctype_offset(str1448), 491},
+      {uniname2ctype_offset(str1449), 122},
+      {uniname2ctype_offset(str1450), 134},
+      {uniname2ctype_offset(str1451), 203},
+      {-1}, {-1},
+      {uniname2ctype_offset(str1454), 145},
+      {-1}, {-1},
+      {uniname2ctype_offset(str1457), 166},
       {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str872), 288},
+      {uniname2ctype_offset(str1462), 535},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1466), 241},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1470), 490},
+      {uniname2ctype_offset(str1471), 492},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str876), 215},
+      {uniname2ctype_offset(str1475), 414},
+      {uniname2ctype_offset(str1476), 494},
       {-1},
-      {uniname2ctype_offset(str878), 117},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1478), 436},
       {-1}, {-1},
-      {uniname2ctype_offset(str890), 196},
+      {uniname2ctype_offset(str1481), 138},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1485), 328},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1489), 33},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1495), 251},
       {-1},
-      {uniname2ctype_offset(str892), 480},
+      {uniname2ctype_offset(str1497), 484},
+      {uniname2ctype_offset(str1498), 199},
+      {uniname2ctype_offset(str1499), 582},
+      {-1},
+      {uniname2ctype_offset(str1501), 196},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1507), 122},
+      {-1},
+      {uniname2ctype_offset(str1509), 110},
       {-1}, {-1},
-      {uniname2ctype_offset(str895), 364},
+      {uniname2ctype_offset(str1512), 110},
       {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str900), 114},
+      {uniname2ctype_offset(str1517), 581},
+      {-1},
+      {uniname2ctype_offset(str1519), 219},
+      {uniname2ctype_offset(str1520), 228},
       {-1}, {-1},
-      {uniname2ctype_offset(str903), 113},
+      {uniname2ctype_offset(str1523), 117},
+      {uniname2ctype_offset(str1524), 471},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1529), 120},
       {-1},
-      {uniname2ctype_offset(str905), 174},
-      {uniname2ctype_offset(str906), 132},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str914), 438},
+      {uniname2ctype_offset(str1531), 407},
+      {-1},
+      {uniname2ctype_offset(str1533), 142},
+      {-1},
+      {uniname2ctype_offset(str1535), 219},
+      {uniname2ctype_offset(str1536), 127},
+      {uniname2ctype_offset(str1537), 260},
       {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str919), 520},
-      {-1}, {-1},
-      {uniname2ctype_offset(str922), 72},
+      {uniname2ctype_offset(str1542), 453},
       {-1},
-      {uniname2ctype_offset(str924), 159},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str933), 232},
+      {uniname2ctype_offset(str1544), 561},
       {-1}, {-1},
-      {uniname2ctype_offset(str936), 219},
-      {uniname2ctype_offset(str937), 102},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str941), 452},
+      {uniname2ctype_offset(str1547), 168},
+      {uniname2ctype_offset(str1548), 518},
+      {uniname2ctype_offset(str1549), 505},
+      {-1}, {-1},
+      {uniname2ctype_offset(str1552), 117},
+      {-1}, {-1},
+      {uniname2ctype_offset(str1555), 107},
       {-1},
-      {uniname2ctype_offset(str943), 239},
+      {uniname2ctype_offset(str1557), 85},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1563), 264},
       {-1},
-      {uniname2ctype_offset(str945), 19},
+      {uniname2ctype_offset(str1565), 315},
       {-1},
-      {uniname2ctype_offset(str947), 415},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str956), 228},
+      {uniname2ctype_offset(str1567), 148},
       {-1},
-      {uniname2ctype_offset(str958), 434},
-      {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str964), 25},
-      {uniname2ctype_offset(str965), 37},
-      {uniname2ctype_offset(str966), 159},
+      {uniname2ctype_offset(str1569), 236},
+      {-1}, {-1},
+      {uniname2ctype_offset(str1572), 115},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1580), 131},
       {-1},
-      {uniname2ctype_offset(str968), 222},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str973), 205},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str991), 315},
-      {uniname2ctype_offset(str992), 147},
+      {uniname2ctype_offset(str1582), 148},
       {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str997), 36},
-      {-1},
-      {uniname2ctype_offset(str999), 20},
+      {uniname2ctype_offset(str1587), 529},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1594), 114},
+      {-1}, {-1},
+      {uniname2ctype_offset(str1597), 81},
       {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1004), 98},
+      {uniname2ctype_offset(str1602), 97},
       {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1009), 539},
+      {uniname2ctype_offset(str1607), 97},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1613), 164},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1013), 413},
-      {-1},
-      {uniname2ctype_offset(str1015), 474},
-      {-1},
-      {uniname2ctype_offset(str1017), 214},
+      {uniname2ctype_offset(str1617), 488},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1622), 373},
+      {uniname2ctype_offset(str1623), 546},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1629), 39},
       {-1},
-      {uniname2ctype_offset(str1019), 70},
-      {uniname2ctype_offset(str1020), 551},
+      {uniname2ctype_offset(str1631), 176},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1635), 72},
+      {-1}, {-1},
+      {uniname2ctype_offset(str1638), 426},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1643), 62},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1},
+      {uniname2ctype_offset(str1654), 388},
+      {uniname2ctype_offset(str1655), 265},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1036), 236},
-      {-1}, {-1},
-      {uniname2ctype_offset(str1039), 69},
-      {-1}, {-1},
-      {uniname2ctype_offset(str1042), 196},
+      {uniname2ctype_offset(str1662), 129},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1671), 114},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1675), 457},
+      {uniname2ctype_offset(str1676), 176},
+      {uniname2ctype_offset(str1677), 303},
       {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1047), 366},
+      {uniname2ctype_offset(str1682), 595},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1051), 115},
-      {uniname2ctype_offset(str1052), 470},
-      {uniname2ctype_offset(str1053), 536},
-      {uniname2ctype_offset(str1054), 473},
-      {uniname2ctype_offset(str1055), 496},
-      {-1}, {-1},
-      {uniname2ctype_offset(str1058), 374},
+      {uniname2ctype_offset(str1686), 93},
+      {uniname2ctype_offset(str1687), 141},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1062), 349},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1067), 112},
-      {uniname2ctype_offset(str1068), 107},
-      {uniname2ctype_offset(str1069), 230},
+      {uniname2ctype_offset(str1691), 124},
+      {uniname2ctype_offset(str1692), 121},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1699), 367},
       {-1}, {-1},
-      {uniname2ctype_offset(str1072), 60},
-      {uniname2ctype_offset(str1073), 425},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1077), 174},
+      {uniname2ctype_offset(str1702), 510},
+      {uniname2ctype_offset(str1703), 533},
+      {uniname2ctype_offset(str1704), 207},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1093), 17},
+      {uniname2ctype_offset(str1714), 207},
+      {-1},
+      {uniname2ctype_offset(str1716), 419},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1722), 347},
       {-1},
-      {uniname2ctype_offset(str1095), 238},
+      {uniname2ctype_offset(str1724), 554},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1728), 221},
+      {uniname2ctype_offset(str1729), 430},
+      {uniname2ctype_offset(str1730), 222},
+      {uniname2ctype_offset(str1731), 517},
+      {uniname2ctype_offset(str1732), 238},
+      {uniname2ctype_offset(str1733), 123},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1102), 103},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1107), 323},
+      {uniname2ctype_offset(str1740), 129},
+      {-1},
+      {uniname2ctype_offset(str1742), 161},
       {-1}, {-1},
-      {uniname2ctype_offset(str1110), 481},
+      {uniname2ctype_offset(str1745), 509},
+      {uniname2ctype_offset(str1746), 390},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1114), 18},
-      {uniname2ctype_offset(str1115), 51},
-      {uniname2ctype_offset(str1116), 226},
+      {uniname2ctype_offset(str1750), 20},
+      {-1},
+      {uniname2ctype_offset(str1752), 502},
       {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1121), 38},
+      {uniname2ctype_offset(str1757), 501},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1130), 73},
-      {uniname2ctype_offset(str1131), 466},
-      {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1137), 503},
-      {uniname2ctype_offset(str1138), 58},
-      {uniname2ctype_offset(str1139), 158},
+      {uniname2ctype_offset(str1766), 73},
+      {-1}, {-1},
+      {uniname2ctype_offset(str1769), 362},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1776), 126},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1780), 65},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1788), 137},
       {-1}, {-1},
-      {uniname2ctype_offset(str1142), 131},
+      {uniname2ctype_offset(str1791), 233},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1148), 414},
+      {uniname2ctype_offset(str1806), 336},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1810), 599},
+      {uniname2ctype_offset(str1811), 236},
       {-1},
-      {uniname2ctype_offset(str1150), 301},
+      {uniname2ctype_offset(str1813), 255},
       {-1}, {-1},
-      {uniname2ctype_offset(str1153), 460},
-      {uniname2ctype_offset(str1154), 84},
-      {uniname2ctype_offset(str1155), 181},
+      {uniname2ctype_offset(str1816), 565},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1821), 224},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1159), 293},
+      {uniname2ctype_offset(str1825), 258},
+      {uniname2ctype_offset(str1826), 202},
+      {-1},
+      {uniname2ctype_offset(str1828), 387},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1838), 585},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1842), 379},
+      {uniname2ctype_offset(str1843), 134},
       {-1}, {-1},
-      {uniname2ctype_offset(str1162), 226},
-      {uniname2ctype_offset(str1163), 281},
+      {uniname2ctype_offset(str1846), 481},
       {-1},
-      {uniname2ctype_offset(str1165), 84},
+      {uniname2ctype_offset(str1848), 109},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1861), 202},
       {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1170), 199},
-      {-1}, {-1},
-      {uniname2ctype_offset(str1173), 355},
-      {uniname2ctype_offset(str1174), 131},
+      {uniname2ctype_offset(str1866), 61},
       {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1179), 113},
-      {uniname2ctype_offset(str1180), 344},
+      {uniname2ctype_offset(str1871), 479},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1878), 27},
       {-1}, {-1},
-      {uniname2ctype_offset(str1183), 134},
-      {uniname2ctype_offset(str1184), 4},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1189), 11},
+      {uniname2ctype_offset(str1881), 63},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1891), 150},
+      {uniname2ctype_offset(str1892), 562},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1896), 588},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1197), 178},
-      {-1}, {-1},
-      {uniname2ctype_offset(str1200), 69},
-      {uniname2ctype_offset(str1201), 194},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1210), 191},
+      {uniname2ctype_offset(str1904), 440},
+      {uniname2ctype_offset(str1905), 559},
+      {uniname2ctype_offset(str1906), 150},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1911), 343},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1915), 165},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1223), 433},
-      {uniname2ctype_offset(str1224), 237},
-      {-1}, {-1},
-      {uniname2ctype_offset(str1227), 521},
+      {uniname2ctype_offset(str1928), 424},
+      {uniname2ctype_offset(str1929), 417},
+      {uniname2ctype_offset(str1930), 445},
+      {-1},
+      {uniname2ctype_offset(str1932), 400},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1936), 323},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1},
-      {uniname2ctype_offset(str1229), 191},
+      {uniname2ctype_offset(str1947), 194},
       {-1}, {-1},
-      {uniname2ctype_offset(str1232), 313},
-      {uniname2ctype_offset(str1233), 219},
-      {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1239), 371},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1248), 435},
+      {uniname2ctype_offset(str1950), 409},
+      {uniname2ctype_offset(str1951), 12},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str1958), 109},
+      {-1}, {-1},
+      {uniname2ctype_offset(str1961), 103},
+      {-1}, {-1},
+      {uniname2ctype_offset(str1964), 425},
+      {-1}, {-1},
+      {uniname2ctype_offset(str1967), 477},
+      {uniname2ctype_offset(str1968), 603},
+      {-1}, {-1},
+      {uniname2ctype_offset(str1971), 153},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1253), 116},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1261), 416},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1265), 223},
-      {uniname2ctype_offset(str1266), 380},
+      {uniname2ctype_offset(str1985), 393},
       {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1272), 369},
-      {uniname2ctype_offset(str1273), 342},
+      {uniname2ctype_offset(str1991), 1},
+      {-1},
+      {uniname2ctype_offset(str1993), 360},
+      {uniname2ctype_offset(str1994), 175},
+      {-1},
+      {uniname2ctype_offset(str1996), 42},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2006), 395},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2010), 363},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2014), 322},
+      {-1},
+      {uniname2ctype_offset(str2016), 209},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2023), 32},
+      {uniname2ctype_offset(str2024), 489},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2033), 78},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2043), 17},
       {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1278), 122},
+      {uniname2ctype_offset(str2048), 92},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2055), 92},
       {-1}, {-1},
-      {uniname2ctype_offset(str1281), 406},
+      {uniname2ctype_offset(str2058), 240},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2062), 130},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2070), 9},
       {-1}, {-1},
-      {uniname2ctype_offset(str1284), 120},
+      {uniname2ctype_offset(str2073), 330},
       {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1289), 28},
-      {uniname2ctype_offset(str1290), 136},
+      {uniname2ctype_offset(str2078), 245},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2083), 324},
+      {uniname2ctype_offset(str2084), 154},
+      {uniname2ctype_offset(str2085), 20},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2093), 192},
       {-1},
-      {uniname2ctype_offset(str1292), 96},
-      {uniname2ctype_offset(str1293), 98},
-      {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1299), 70},
+      {uniname2ctype_offset(str2095), 341},
+      {-1},
+      {uniname2ctype_offset(str2097), 214},
+      {uniname2ctype_offset(str2098), 8},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1303), 6},
+      {uniname2ctype_offset(str2102), 43},
+      {uniname2ctype_offset(str2103), 162},
       {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1309), 96},
+      {uniname2ctype_offset(str2109), 215},
+      {uniname2ctype_offset(str2110), 123},
       {-1},
-      {uniname2ctype_offset(str1311), 180},
+      {uniname2ctype_offset(str2112), 210},
       {-1},
-      {uniname2ctype_offset(str1313), 337},
+      {uniname2ctype_offset(str2114), 159},
       {-1}, {-1},
-      {uniname2ctype_offset(str1316), 111},
+      {uniname2ctype_offset(str2117), 174},
+      {-1},
+      {uniname2ctype_offset(str2119), 216},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2135), 128},
+      {-1},
+      {uniname2ctype_offset(str2137), 172},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2145), 52},
+      {uniname2ctype_offset(str2146), 401},
       {-1}, {-1},
-      {uniname2ctype_offset(str1319), 85},
+      {uniname2ctype_offset(str2149), 221},
+      {uniname2ctype_offset(str2150), 121},
       {-1}, {-1},
-      {uniname2ctype_offset(str1322), 111},
+      {uniname2ctype_offset(str2153), 352},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2161), 233},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1326), 428},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1331), 225},
-      {uniname2ctype_offset(str1332), 190},
-      {uniname2ctype_offset(str1333), 175},
-      {-1},
-      {uniname2ctype_offset(str1335), 127},
+      {uniname2ctype_offset(str2165), 174},
+      {uniname2ctype_offset(str2166), 5},
+      {uniname2ctype_offset(str2167), 112},
       {-1}, {-1},
-      {uniname2ctype_offset(str1338), 220},
+      {uniname2ctype_offset(str2170), 216},
       {-1}, {-1},
-      {uniname2ctype_offset(str1341), 136},
-      {-1}, {-1},
-      {uniname2ctype_offset(str1344), 81},
-      {-1},
-      {uniname2ctype_offset(str1346), 44},
-      {-1},
-      {uniname2ctype_offset(str1348), 168},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1355), 180},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1360), 542},
+      {uniname2ctype_offset(str2173), 87},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1368), 316},
-      {-1},
-      {uniname2ctype_offset(str1370), 5},
-      {uniname2ctype_offset(str1371), 162},
+      {uniname2ctype_offset(str2181), 139},
+      {uniname2ctype_offset(str2182), 87},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2195), 339},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2199), 159},
       {-1},
-      {uniname2ctype_offset(str1373), 244},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1378), 40},
-      {uniname2ctype_offset(str1379), 421},
-      {uniname2ctype_offset(str1380), 461},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1388), 42},
+      {uniname2ctype_offset(str2201), 89},
+      {-1}, {-1},
+      {uniname2ctype_offset(str2204), 369},
+      {-1}, {-1},
+      {uniname2ctype_offset(str2207), 196},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2217), 128},
+      {uniname2ctype_offset(str2218), 526},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2222), 458},
       {-1},
-      {uniname2ctype_offset(str1390), 141},
+      {uniname2ctype_offset(str2224), 438},
+      {uniname2ctype_offset(str2225), 459},
+      {-1}, {-1},
+      {uniname2ctype_offset(str2228), 82},
+      {uniname2ctype_offset(str2229), 35},
       {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1396), 447},
-      {-1},
-      {uniname2ctype_offset(str1398), 523},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2235), 474},
+      {-1}, {-1},
+      {uniname2ctype_offset(str2238), 154},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2244), 428},
       {-1}, {-1},
-      {uniname2ctype_offset(str1410), 27},
+      {uniname2ctype_offset(str2247), 36},
+      {uniname2ctype_offset(str2248), 569},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2252), 240},
       {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1416), 12},
+      {uniname2ctype_offset(str2258), 443},
       {-1},
-      {uniname2ctype_offset(str1418), 46},
-      {uniname2ctype_offset(str1419), 66},
+      {uniname2ctype_offset(str2260), 235},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2268), 597},
+      {-1}, {-1},
+      {uniname2ctype_offset(str2271), 18},
+      {uniname2ctype_offset(str2272), 254},
       {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1425), 26},
+      {uniname2ctype_offset(str2278), 124},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1429), 445},
-      {uniname2ctype_offset(str1430), 145},
+      {uniname2ctype_offset(str2282), 230},
+      {-1}, {-1},
+      {uniname2ctype_offset(str2285), 38},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1439), 220},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1444), 9},
+      {uniname2ctype_offset(str2294), 88},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1452), 483},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2302), 368},
+      {-1}, {-1},
+      {uniname2ctype_offset(str2305), 205},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2312), 177},
+      {-1}, {-1},
+      {uniname2ctype_offset(str2315), 568},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2321), 370},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1},
-      {uniname2ctype_offset(str1472), 363},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1481), 376},
+      {uniname2ctype_offset(str2339), 600},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2343), 560},
+      {uniname2ctype_offset(str2344), 82},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1},
-      {uniname2ctype_offset(str1493), 92},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1502), 203},
-      {uniname2ctype_offset(str1503), 148},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1508), 122},
-      {uniname2ctype_offset(str1509), 64},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1513), 147},
-      {-1}, {-1},
-      {uniname2ctype_offset(str1516), 148},
-      {uniname2ctype_offset(str1517), 512},
-      {uniname2ctype_offset(str1518), 157},
-      {-1}, {-1},
-      {uniname2ctype_offset(str1521), 436},
+      {uniname2ctype_offset(str2357), 237},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2361), 571},
       {-1}, {-1},
-      {uniname2ctype_offset(str1524), 92},
-      {-1},
-      {uniname2ctype_offset(str1526), 242},
+      {uniname2ctype_offset(str2364), 309},
+      {uniname2ctype_offset(str2365), 403},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2373), 37},
+      {uniname2ctype_offset(str2374), 377},
+      {uniname2ctype_offset(str2375), 197},
       {-1}, {-1},
-      {uniname2ctype_offset(str1529), 192},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1536), 116},
-      {uniname2ctype_offset(str1537), 195},
-      {uniname2ctype_offset(str1538), 97},
-      {-1},
-      {uniname2ctype_offset(str1540), 450},
+      {uniname2ctype_offset(str2378), 237},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1},
-      {uniname2ctype_offset(str1542), 354},
+      {uniname2ctype_offset(str2389), 204},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1549), 1},
-      {-1},
-      {uniname2ctype_offset(str1551), 340},
+      {uniname2ctype_offset(str2396), 376},
+      {uniname2ctype_offset(str2397), 406},
+      {uniname2ctype_offset(str2398), 398},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2415), 402},
+      {uniname2ctype_offset(str2416), 366},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1},
-      {uniname2ctype_offset(str1553), 465},
-      {uniname2ctype_offset(str1554), 142},
+      {uniname2ctype_offset(str2427), 23},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2433), 427},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1561), 104},
+      {uniname2ctype_offset(str2440), 100},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1},
-      {uniname2ctype_offset(str1563), 454},
+      {uniname2ctype_offset(str2451), 29},
+      {-1}, {-1},
+      {uniname2ctype_offset(str2454), 220},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1567), 97},
+      {uniname2ctype_offset(str2458), 495},
+      {-1},
+      {uniname2ctype_offset(str2460), 246},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2470), 433},
       {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1572), 145},
-      {uniname2ctype_offset(str1573), 203},
+      {uniname2ctype_offset(str2475), 142},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2479), 346},
+      {uniname2ctype_offset(str2480), 50},
+      {uniname2ctype_offset(str2481), 371},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2506), 511},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2513), 592},
       {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1579), 130},
+      {uniname2ctype_offset(str2519), 466},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2529), 165},
       {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1584), 82},
+      {uniname2ctype_offset(str2534), 325},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2540), 226},
       {-1},
-      {uniname2ctype_offset(str1586), 194},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1591), 90},
+      {uniname2ctype_offset(str2542), 125},
       {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1597), 211},
-      {uniname2ctype_offset(str1598), 410},
+      {uniname2ctype_offset(str2548), 118},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1602), 305},
+      {uniname2ctype_offset(str2552), 462},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2561), 435},
+      {uniname2ctype_offset(str2562), 251},
+      {-1},
+      {uniname2ctype_offset(str2564), 357},
       {-1},
-      {uniname2ctype_offset(str1604), 72},
+      {uniname2ctype_offset(str2566), 185},
+      {uniname2ctype_offset(str2567), 304},
       {-1}, {-1},
-      {uniname2ctype_offset(str1607), 161},
-      {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1613), 302},
-      {uniname2ctype_offset(str1614), 241},
+      {uniname2ctype_offset(str2570), 476},
       {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1619), 82},
+      {uniname2ctype_offset(str2575), 185},
+      {uniname2ctype_offset(str2576), 99},
       {-1}, {-1},
-      {uniname2ctype_offset(str1622), 531},
-      {-1},
-      {uniname2ctype_offset(str1624), 85},
-      {uniname2ctype_offset(str1625), 464},
-      {uniname2ctype_offset(str1626), 133},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1630), 400},
+      {uniname2ctype_offset(str2579), 133},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1637), 50},
-      {uniname2ctype_offset(str1638), 334},
+      {uniname2ctype_offset(str2586), 199},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2595), 327},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2603), 198},
       {-1}, {-1},
-      {uniname2ctype_offset(str1641), 125},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1645), 230},
-      {uniname2ctype_offset(str1646), 213},
-      {uniname2ctype_offset(str1647), 468},
+      {uniname2ctype_offset(str2606), 359},
       {-1}, {-1},
-      {uniname2ctype_offset(str1650), 163},
+      {uniname2ctype_offset(str2609), 55},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2614), 538},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2624), 226},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2631), 107},
       {-1}, {-1},
-      {uniname2ctype_offset(str1653), 168},
+      {uniname2ctype_offset(str2634), 266},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2643), 437},
+      {uniname2ctype_offset(str2644), 576},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1657), 137},
+      {uniname2ctype_offset(str2648), 243},
       {-1},
-      {uniname2ctype_offset(str1659), 229},
+      {uniname2ctype_offset(str2650), 78},
       {-1}, {-1},
-      {uniname2ctype_offset(str1662), 525},
+      {uniname2ctype_offset(str2653), 183},
       {-1}, {-1},
-      {uniname2ctype_offset(str1665), 80},
-      {uniname2ctype_offset(str1666), 126},
+      {uniname2ctype_offset(str2656), 353},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1673), 129},
-      {-1}, {-1},
-      {uniname2ctype_offset(str1676), 411},
-      {uniname2ctype_offset(str1677), 397},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1681), 290},
+      {uniname2ctype_offset(str2663), 182},
       {-1},
-      {uniname2ctype_offset(str1683), 300},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1688), 541},
+      {uniname2ctype_offset(str2665), 83},
       {-1}, {-1},
-      {uniname2ctype_offset(str1691), 205},
-      {uniname2ctype_offset(str1692), 444},
-      {-1},
-      {uniname2ctype_offset(str1694), 22},
+      {uniname2ctype_offset(str2668), 94},
       {-1},
-      {uniname2ctype_offset(str1696), 477},
-      {uniname2ctype_offset(str1697), 127},
-      {uniname2ctype_offset(str1698), 478},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1702), 423},
-      {uniname2ctype_offset(str1703), 119},
+      {uniname2ctype_offset(str2670), 593},
       {-1}, {-1},
-      {uniname2ctype_offset(str1706), 442},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1713), 78},
-      {uniname2ctype_offset(str1714), 326},
-      {uniname2ctype_offset(str1715), 320},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1719), 129},
+      {uniname2ctype_offset(str2673), 84},
       {-1}, {-1},
-      {uniname2ctype_offset(str1722), 308},
-      {uniname2ctype_offset(str1723), 198},
-      {uniname2ctype_offset(str1724), 108},
+      {uniname2ctype_offset(str2676), 83},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1},
-      {uniname2ctype_offset(str1727), 65},
-      {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1733), 427},
-      {uniname2ctype_offset(str1734), 104},
+      {uniname2ctype_offset(str2688), 139},
       {-1}, {-1},
-      {uniname2ctype_offset(str1737), 170},
+      {uniname2ctype_offset(str2691), 84},
+      {uniname2ctype_offset(str2692), 211},
+      {-1},
+      {uniname2ctype_offset(str2694), 48},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1741), 282},
+      {uniname2ctype_offset(str2698), 119},
+      {-1}, {-1},
+      {uniname2ctype_offset(str2701), 418},
+      {uniname2ctype_offset(str2702), 89},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2721), 198},
       {-1},
-      {uniname2ctype_offset(str1743), 7},
+      {uniname2ctype_offset(str2723), 4},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1752), 486},
+      {uniname2ctype_offset(str2732), 130},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1767), 242},
-      {uniname2ctype_offset(str1768), 35},
-      {-1}, {-1},
-      {uniname2ctype_offset(str1771), 187},
+      {uniname2ctype_offset(str2747), 54},
       {-1}, {-1},
-      {uniname2ctype_offset(str1774), 55},
-      {uniname2ctype_offset(str1775), 62},
+      {uniname2ctype_offset(str2750), 534},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1},
-      {uniname2ctype_offset(str1786), 133},
+      {uniname2ctype_offset(str2760), 152},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1790), 160},
+      {uniname2ctype_offset(str2764), 241},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1794), 318},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1804), 88},
-      {uniname2ctype_offset(str1805), 432},
-      {uniname2ctype_offset(str1806), 484},
-      {-1}, {-1},
-      {uniname2ctype_offset(str1809), 437},
-      {-1},
-      {uniname2ctype_offset(str1811), 176},
+      {uniname2ctype_offset(str2768), 90},
+      {uniname2ctype_offset(str2769), 468},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2777), 28},
       {-1}, {-1},
-      {uniname2ctype_offset(str1814), 431},
+      {uniname2ctype_offset(str2780), 227},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2793), 34},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2816), 296},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2821), 378},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2834), 349},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2841), 222},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2848), 253},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2852), 291},
       {-1}, {-1},
-      {uniname2ctype_offset(str1826), 387},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1835), 164},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1843), 141},
-      {-1},
-      {uniname2ctype_offset(str1845), 357},
+      {uniname2ctype_offset(str2855), 190},
+      {uniname2ctype_offset(str2856), 66},
       {-1}, {-1},
-      {uniname2ctype_offset(str1848), 42},
-      {-1},
-      {uniname2ctype_offset(str1850), 392},
-      {uniname2ctype_offset(str1851), 52},
+      {uniname2ctype_offset(str2859), 412},
+      {-1}, {-1},
+      {uniname2ctype_offset(str2862), 211},
       {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1856), 43},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1860), 424},
-      {-1},
-      {uniname2ctype_offset(str1862), 379},
+      {uniname2ctype_offset(str2867), 295},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1866), 21},
+      {uniname2ctype_offset(str2871), 243},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1},
-      {uniname2ctype_offset(str1869), 479},
-      {uniname2ctype_offset(str1870), 409},
+      {uniname2ctype_offset(str2883), 242},
       {-1},
-      {uniname2ctype_offset(str1872), 45},
-      {uniname2ctype_offset(str1873), 234},
+      {uniname2ctype_offset(str2885), 147},
+      {uniname2ctype_offset(str2886), 133},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2904), 449},
+      {uniname2ctype_offset(str2905), 262},
+      {uniname2ctype_offset(str2906), 575},
       {-1}, {-1},
-      {uniname2ctype_offset(str1876), 549},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1883), 146},
-      {uniname2ctype_offset(str1884), 142},
-      {-1},
-      {uniname2ctype_offset(str1886), 212},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1893), 236},
+      {uniname2ctype_offset(str2909), 549},
+      {-1}, {-1},
+      {uniname2ctype_offset(str2912), 244},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1},
-      {uniname2ctype_offset(str1904), 73},
-      {uniname2ctype_offset(str1905), 324},
-      {uniname2ctype_offset(str1906), 78},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1910), 287},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2926), 51},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1920), 353},
-      {uniname2ctype_offset(str1921), 172},
+      {-1}, {-1},
+      {uniname2ctype_offset(str2938), 242},
+      {-1}, {-1},
+      {uniname2ctype_offset(str2941), 348},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1931), 31},
-      {uniname2ctype_offset(str1932), 123},
-      {uniname2ctype_offset(str1933), 177},
-      {-1},
-      {uniname2ctype_offset(str1935), 325},
-      {-1},
-      {uniname2ctype_offset(str1937), 518},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1941), 138},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1945), 472},
-      {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1951), 327},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1964), 47},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1968), 43},
+      {uniname2ctype_offset(str2963), 225},
+      {uniname2ctype_offset(str2964), 503},
+      {-1}, {-1},
+      {uniname2ctype_offset(str2967), 43},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1972), 347},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1980), 150},
-      {uniname2ctype_offset(str1981), 99},
+      {uniname2ctype_offset(str2980), 195},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1985), 352},
+      {uniname2ctype_offset(str2984), 547},
       {-1},
-      {uniname2ctype_offset(str1987), 517},
+      {uniname2ctype_offset(str2986), 118},
+      {uniname2ctype_offset(str2987), 54},
+      {uniname2ctype_offset(str2988), 456},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str2993), 234},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3000), 16},
+      {uniname2ctype_offset(str3001), 180},
+      {uniname2ctype_offset(str3002), 64},
+      {-1}, {-1},
+      {uniname2ctype_offset(str3005), 460},
+      {uniname2ctype_offset(str3006), 555},
       {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str1993), 150},
+      {uniname2ctype_offset(str3012), 80},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1},
-      {uniname2ctype_offset(str2004), 229},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3028), 250},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3045), 577},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3055), 454},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3089), 146},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3098), 580},
+      {uniname2ctype_offset(str3099), 463},
+      {uniname2ctype_offset(str3100), 103},
+      {uniname2ctype_offset(str3101), 223},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3107), 299},
       {-1},
-      {uniname2ctype_offset(str2015), 499},
-      {uniname2ctype_offset(str2016), 176},
+      {uniname2ctype_offset(str3109), 301},
       {-1},
-      {uniname2ctype_offset(str2018), 519},
+      {uniname2ctype_offset(str3111), 191},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3125), 191},
+      {uniname2ctype_offset(str3126), 99},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2026), 123},
-      {uniname2ctype_offset(str2027), 430},
+      {uniname2ctype_offset(str3134), 223},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2046), 166},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3158), 314},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3165), 439},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3169), 47},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3176), 381},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3180), 317},
       {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2051), 333},
+      {uniname2ctype_offset(str3185), 126},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3194), 204},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2068), 213},
       {-1},
-      {uniname2ctype_offset(str2070), 100},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3205), 227},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2083), 292},
+      {uniname2ctype_offset(str3209), 62},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3215), 180},
+      {-1}, {-1},
+      {uniname2ctype_offset(str3218), 201},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3237), 375},
+      {-1},
+      {uniname2ctype_offset(str3239), 294},
+      {uniname2ctype_offset(str3240), 290},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3248), 213},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3254), 190},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2111), 178},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2115), 166},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2119), 455},
       {-1}, {-1},
-      {uniname2ctype_offset(str2122), 204},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2126), 134},
+      {uniname2ctype_offset(str3266), 421},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2136), 453},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1},
+      {uniname2ctype_offset(str3286), 235},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1},
+      {uniname2ctype_offset(str3297), 297},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3303), 293},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3309), 178},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2153), 143},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2157), 138},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2164), 143},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2169), 139},
+      {uniname2ctype_offset(str3317), 249},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1},
-      {uniname2ctype_offset(str2180), 329},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2184), 513},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2193), 440},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2200), 243},
-      {-1}, {-1},
-      {uniname2ctype_offset(str2203), 345},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2208), 91},
+      {uniname2ctype_offset(str3328), 63},
+      {uniname2ctype_offset(str3329), 587},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3348), 392},
+      {uniname2ctype_offset(str3349), 423},
       {-1},
-      {uniname2ctype_offset(str2219), 31},
-      {uniname2ctype_offset(str2220), 173},
-      {uniname2ctype_offset(str2221), 529},
+      {uniname2ctype_offset(str3351), 96},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2230), 201},
-      {uniname2ctype_offset(str2231), 140},
-      {uniname2ctype_offset(str2232), 140},
-      {-1}, {-1},
-      {uniname2ctype_offset(str2235), 426},
-      {-1},
-      {uniname2ctype_offset(str2237), 91},
+      {uniname2ctype_offset(str3360), 234},
       {-1}, {-1},
-      {uniname2ctype_offset(str2240), 105},
-      {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2246), 135},
+      {uniname2ctype_offset(str3363), 96},
       {-1},
-      {uniname2ctype_offset(str2248), 227},
-      {uniname2ctype_offset(str2249), 204},
+      {uniname2ctype_offset(str3365), 578},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2254), 280},
-      {-1},
-      {uniname2ctype_offset(str2256), 490},
+      {uniname2ctype_offset(str3433), 205},
       {-1}, {-1},
-      {uniname2ctype_offset(str2259), 276},
+      {uniname2ctype_offset(str3436), 213},
       {-1}, {-1},
-      {uniname2ctype_offset(str2262), 45},
+      {uniname2ctype_offset(str3439), 49},
       {-1}, {-1},
-      {uniname2ctype_offset(str2265), 346},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2273), 33},
+      {uniname2ctype_offset(str3442), 464},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1},
-      {uniname2ctype_offset(str2285), 393},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2292), 87},
-      {uniname2ctype_offset(str2293), 383},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2310), 439},
-      {-1}, {-1},
-      {uniname2ctype_offset(str2313), 87},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2322), 273},
+      {uniname2ctype_offset(str3458), 10},
       {-1},
-      {uniname2ctype_offset(str2324), 275},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2332), 41},
-      {uniname2ctype_offset(str2333), 137},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2341), 233},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2346), 80},
-      {-1}, {-1},
-      {uniname2ctype_offset(str2349), 135},
-      {uniname2ctype_offset(str2350), 23},
-      {-1}, {-1},
-      {uniname2ctype_offset(str2353), 403},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2360), 101},
+      {uniname2ctype_offset(str3460), 589},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2373), 49},
-      {-1},
-      {uniname2ctype_offset(str2375), 336},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2399), 271},
-      {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2405), 267},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2410), 235},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2418), 377},
-      {uniname2ctype_offset(str2419), 231},
-      {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2425), 158},
-      {-1},
-      {uniname2ctype_offset(str2427), 404},
-      {-1}, {-1},
-      {uniname2ctype_offset(str2430), 77},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2445), 265},
-      {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2451), 471},
-      {uniname2ctype_offset(str2452), 277},
-      {-1}, {-1},
-      {uniname2ctype_offset(str2455), 105},
+      {uniname2ctype_offset(str3511), 396},
+      {uniname2ctype_offset(str3512), 487},
       {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2460), 269},
+      {uniname2ctype_offset(str3517), 179},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2476), 528},
-      {uniname2ctype_offset(str2477), 165},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3531), 153},
+      {uniname2ctype_offset(str3532), 550},
+      {uniname2ctype_offset(str3533), 57},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2487), 284},
-      {-1},
-      {uniname2ctype_offset(str2489), 233},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3550), 41},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3558), 59},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1},
-      {uniname2ctype_offset(str2500), 165},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1},
-      {uniname2ctype_offset(str2511), 278},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2518), 177},
-      {-1},
-      {uniname2ctype_offset(str2520), 279},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2530), 190},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2546), 266},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2565), 183},
+      {uniname2ctype_offset(str3613), 214},
+      {uniname2ctype_offset(str3614), 220},
+      {-1},
+      {uniname2ctype_offset(str3616), 45},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1},
+      {uniname2ctype_offset(str3628), 71},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2589), 330},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2602), 295},
+      {-1},
+      {uniname2ctype_offset(str3648), 450},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3664), 177},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2629), 16},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2661), 57},
+      {-1}, {-1},
+      {uniname2ctype_offset(str3703), 132},
       {-1},
-      {uniname2ctype_offset(str2663), 71},
+      {uniname2ctype_offset(str3705), 306},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3714), 132},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2673), 39},
-      {uniname2ctype_offset(str2674), 193},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2691), 54},
-      {uniname2ctype_offset(str2692), 510},
-      {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2698), 8},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2732), 268},
-      {uniname2ctype_offset(str2733), 264},
-      {-1},
-      {uniname2ctype_offset(str2735), 399},
+      {uniname2ctype_offset(str3766), 452},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1},
-      {uniname2ctype_offset(str2755), 243},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3791), 65},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2773), 30},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3805), 250},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2787), 120},
+      {uniname2ctype_offset(str3819), 162},
+      {-1},
+      {uniname2ctype_offset(str3821), 292},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1},
-      {uniname2ctype_offset(str2808), 390},
-      {-1},
-      {uniname2ctype_offset(str2810), 351},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3842), 182},
       {-1}, {-1},
-      {uniname2ctype_offset(str2822), 401},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2827), 15},
+      {uniname2ctype_offset(str3845), 248},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2844), 48},
-      {uniname2ctype_offset(str2845), 272},
-      {uniname2ctype_offset(str2846), 274},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1},
-      {uniname2ctype_offset(str2876), 307},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3891), 30},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1},
-      {uniname2ctype_offset(str2897), 372},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2902), 167},
-      {uniname2ctype_offset(str2903), 128},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2907), 63},
-      {-1}, {-1},
-      {uniname2ctype_offset(str2910), 339},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2928), 534},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2932), 182},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3924), 405},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2954), 128},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3942), 100},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1},
-      {uniname2ctype_offset(str2974), 109},
-      {-1}, {-1},
-      {uniname2ctype_offset(str2977), 554},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str2985), 388},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1},
-      {uniname2ctype_offset(str2997), 216},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3976), 570},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str3995), 147},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3030), 412},
-      {-1},
-      {uniname2ctype_offset(str3032), 126},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3057), 368},
-      {-1},
-      {uniname2ctype_offset(str3059), 63},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3064), 543},
-      {-1}, {-1},
-      {uniname2ctype_offset(str3067), 139},
-      {-1}, {-1},
-      {uniname2ctype_offset(str3070), 395},
-      {-1},
-      {uniname2ctype_offset(str3072), 192},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3081), 463},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3096), 362},
-      {-1},
-      {uniname2ctype_offset(str3098), 32},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3159), 207},
       {-1},
-      {uniname2ctype_offset(str3161), 385},
+      {uniname2ctype_offset(str4087), 415},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3165), 155},
-      {-1},
-      {uniname2ctype_offset(str3167), 195},
+      {uniname2ctype_offset(str4109), 119},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3181), 207},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3197), 235},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str4137), 244},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3224), 118},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3231), 508},
+      {uniname2ctype_offset(str4162), 544},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str4175), 545},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1},
-      {uniname2ctype_offset(str3252), 109},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str4203), 80},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3295), 41},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1},
-      {uniname2ctype_offset(str3307), 179},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3314), 86},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3338), 34},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3346), 244},
+      {uniname2ctype_offset(str4254), 116},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3363), 227},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str4276), 116},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3388), 90},
+      {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str4291), 302},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3413), 217},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3428), 49},
+      {-1}, {-1},
+      {uniname2ctype_offset(str4321), 75},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1},
+      {uniname2ctype_offset(str4360), 231},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3500), 155},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1},
-      {uniname2ctype_offset(str3511), 492},
-      {-1}, {-1},
-      {uniname2ctype_offset(str3514), 146},
+      {uniname2ctype_offset(str4397), 386},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str4405), 298},
+      {uniname2ctype_offset(str4406), 300},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1},
-      {uniname2ctype_offset(str3525), 108},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3550), 389},
-      {-1},
-      {uniname2ctype_offset(str3552), 382},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str4460), 90},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3595), 217},
+      {uniname2ctype_offset(str4485), 179},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3617), 162},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str4528), 46},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
@@ -36536,133 +41560,114 @@ uniname2ctype_p (str, len)
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3704), 245},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3722), 118},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1},
+      {uniname2ctype_offset(str4674), 601},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3776), 197},
+      {uniname2ctype_offset(str4683), 451},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3828), 396},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3835), 546},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3840), 548},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3845), 398},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str4772), 394},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3931), 54},
-      {-1},
-      {uniname2ctype_offset(str3933), 270},
-      {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3939), 75},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3965), 193},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3974), 502},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str3989), 183},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str4043), 39},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str4948), 590},
+#endif /* USE_UNICODE_PROPERTIES */
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+#ifndef USE_UNICODE_PROPERTIES
+      {uniname2ctype_offset(str6), 12},
+      {uniname2ctype_offset(str7), 7},
+      {uniname2ctype_offset(str8), 15},
+      {uniname2ctype_offset(str9), 1},
+      {uniname2ctype_offset(str10), 13},
+      {uniname2ctype_offset(str11), 11},
+      {uniname2ctype_offset(str12), 10},
+      {uniname2ctype_offset(str13), 14},
+      {uniname2ctype_offset(str14), 3},
+      {uniname2ctype_offset(str15), 9},
+      {uniname2ctype_offset(str16), 8},
+      {uniname2ctype_offset(str17), 6},
+      {uniname2ctype_offset(str18), 5},
+      {uniname2ctype_offset(str19), 4},
+      {uniname2ctype_offset(str20), 2}
+#else /* USE_UNICODE_PROPERTIES */
+      {uniname2ctype_offset(str4955), 155},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str4986), 413},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str4124), 77},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1},
-      {uniname2ctype_offset(str4136), 381},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str4144), 370},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str4188), 552},
-      {-1},
-      {uniname2ctype_offset(str4190), 544},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str4214), 391},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str4241), 59},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1},
-      {uniname2ctype_offset(str4270), 74},
+      {uniname2ctype_offset(str5114), 225},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str4312), 547},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str4373), 46},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str4406), 10},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str4466), 74},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str4528), 30},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
@@ -36670,8 +41675,6 @@ uniname2ctype_p (str, len)
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str4596), 167},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
@@ -36680,32 +41683,10 @@ uniname2ctype_p (str, len)
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str4673), 2},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-#endif /* USE_UNICODE_PROPERTIES */
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-#ifndef USE_UNICODE_PROPERTIES
-      {uniname2ctype_offset(str6), 12},
-      {uniname2ctype_offset(str7), 7},
-      {uniname2ctype_offset(str8), 15},
-      {uniname2ctype_offset(str9), 1},
-      {uniname2ctype_offset(str10), 13},
-      {uniname2ctype_offset(str11), 11},
-      {uniname2ctype_offset(str12), 10},
-      {uniname2ctype_offset(str13), 14},
-      {uniname2ctype_offset(str14), 3},
-      {uniname2ctype_offset(str15), 9},
-      {uniname2ctype_offset(str16), 8},
-      {uniname2ctype_offset(str17), 6},
-      {uniname2ctype_offset(str18), 5},
-      {uniname2ctype_offset(str19), 4},
-      {uniname2ctype_offset(str20), 2}
-#else /* USE_UNICODE_PROPERTIES */
-      {uniname2ctype_offset(str4716), 179},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
@@ -36716,6 +41697,8 @@ uniname2ctype_p (str, len)
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str5608), 155},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
@@ -36728,7 +41711,6 @@ uniname2ctype_p (str, len)
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str4915), 545},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
@@ -36740,7 +41722,6 @@ uniname2ctype_p (str, len)
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str5015), 86},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
@@ -36769,16 +41750,19 @@ uniname2ctype_p (str, len)
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
       {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
-      {uniname2ctype_offset(str5275), 553}
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1}, {-1},
+      {-1}, {-1}, {-1},
+      {uniname2ctype_offset(str6098), 602}
 #endif /* USE_UNICODE_PROPERTIES */
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
     {
-      register int key = uniname2ctype_hash (str, len);
+      register unsigned int key = uniname2ctype_hash (str, len);
 
-      if (key <= MAX_HASH_VALUE && key >= 0)
+      if (key <= MAX_HASH_VALUE)
         {
           register int o = wordlist[key].name;
           if (o >= 0)
@@ -36801,13 +41785,13 @@ uniname2ctype(const UChar *name, unsigned int len)
   return -1;
 }
 #if defined ONIG_UNICODE_VERSION_STRING && !( \
-      ONIG_UNICODE_VERSION_MAJOR == 9 && \
-      ONIG_UNICODE_VERSION_MINOR == 0 && \
+      ONIG_UNICODE_VERSION_MAJOR == 12 && \
+      ONIG_UNICODE_VERSION_MINOR == 1 && \
       ONIG_UNICODE_VERSION_TEENY == 0 && \
       1)
 # error ONIG_UNICODE_VERSION_STRING mismatch
 #endif
-#define ONIG_UNICODE_VERSION_STRING "9.0.0"
-#define ONIG_UNICODE_VERSION_MAJOR 9
-#define ONIG_UNICODE_VERSION_MINOR 0
+#define ONIG_UNICODE_VERSION_STRING "12.1.0"
+#define ONIG_UNICODE_VERSION_MAJOR 12
+#define ONIG_UNICODE_VERSION_MINOR 1
 #define ONIG_UNICODE_VERSION_TEENY 0
diff --git a/lib/onigmo/enc/us_ascii.c b/lib/onigmo/enc/us_ascii.c
new file mode 100644
index 000000000..253ee6957
--- /dev/null
+++ b/lib/onigmo/enc/us_ascii.c
@@ -0,0 +1,45 @@
+#include "regenc.h"
+#ifdef RUBY
+# include "encindex.h"
+#endif
+
+#ifndef ENCINDEX_US_ASCII
+# define ENCINDEX_US_ASCII 0
+#endif
+
+static int
+us_ascii_mbc_enc_len(const UChar* p, const UChar* e, OnigEncoding enc)
+{
+  if (*p & 0x80)
+    return ONIGENC_CONSTRUCT_MBCLEN_INVALID();
+  return ONIGENC_CONSTRUCT_MBCLEN_CHARFOUND(1);
+}
+
+OnigEncodingDefine(us_ascii, US_ASCII) = {
+  us_ascii_mbc_enc_len,
+  "US-ASCII",/* name */
+  1,           /* max byte length */
+  1,           /* min byte length */
+  onigenc_is_mbc_newline_0x0a,
+  onigenc_single_byte_mbc_to_code,
+  onigenc_single_byte_code_to_mbclen,
+  onigenc_single_byte_code_to_mbc,
+  onigenc_ascii_mbc_case_fold,
+  onigenc_ascii_apply_all_case_fold,
+  onigenc_ascii_get_case_fold_codes_by_str,
+  onigenc_minimum_property_name_to_ctype,
+  onigenc_ascii_is_code_ctype,
+  onigenc_not_support_get_ctype_code_range,
+  onigenc_single_byte_left_adjust_char_head,
+  onigenc_always_true_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
+  onigenc_single_byte_ascii_only_case_map,
+#else
+  NULL,
+#endif
+  ENCINDEX_US_ASCII,
+  ONIGENC_FLAG_NONE,
+};
+ENC_ALIAS("ASCII", "US-ASCII")
+ENC_ALIAS("ANSI_X3.4-1968", "US-ASCII")
+ENC_ALIAS("646", "US-ASCII")
diff --git a/lib/onigmo/enc/utf_16be.c b/lib/onigmo/enc/utf_16be.c
index f9dd7119d..0086040b5 100644
--- a/lib/onigmo/enc/utf_16be.c
+++ b/lib/onigmo/enc/utf_16be.c
@@ -249,7 +249,11 @@ OnigEncodingDefine(utf_16be, UTF_16BE) = {
   onigenc_utf16_32_get_ctype_code_range,
   utf16be_left_adjust_char_head,
   onigenc_always_false_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   onigenc_unicode_case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_UNICODE,
 };
diff --git a/lib/onigmo/enc/utf_16le.c b/lib/onigmo/enc/utf_16le.c
index 2c8438d0b..ca0fce538 100644
--- a/lib/onigmo/enc/utf_16le.c
+++ b/lib/onigmo/enc/utf_16le.c
@@ -242,7 +242,11 @@ OnigEncodingDefine(utf_16le, UTF_16LE) = {
   onigenc_utf16_32_get_ctype_code_range,
   utf16le_left_adjust_char_head,
   onigenc_always_false_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   onigenc_unicode_case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_UNICODE,
 };
diff --git a/lib/onigmo/enc/utf_32be.c b/lib/onigmo/enc/utf_32be.c
index 17841e52a..e05cfaf1b 100644
--- a/lib/onigmo/enc/utf_32be.c
+++ b/lib/onigmo/enc/utf_32be.c
@@ -199,7 +199,11 @@ OnigEncodingDefine(utf_32be, UTF_32BE) = {
   onigenc_utf16_32_get_ctype_code_range,
   utf32be_left_adjust_char_head,
   onigenc_always_false_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   onigenc_unicode_case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_UNICODE,
 };
diff --git a/lib/onigmo/enc/utf_32le.c b/lib/onigmo/enc/utf_32le.c
index 18b798f10..651efdcec 100644
--- a/lib/onigmo/enc/utf_32le.c
+++ b/lib/onigmo/enc/utf_32le.c
@@ -199,7 +199,11 @@ OnigEncodingDefine(utf_32le, UTF_32LE) = {
   onigenc_utf16_32_get_ctype_code_range,
   utf32le_left_adjust_char_head,
   onigenc_always_false_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   onigenc_unicode_case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_UNICODE,
 };
diff --git a/lib/onigmo/enc/utf_8.c b/lib/onigmo/enc/utf_8.c
index 3dad2f729..cb233feea 100644
--- a/lib/onigmo/enc/utf_8.c
+++ b/lib/onigmo/enc/utf_8.c
@@ -37,13 +37,19 @@
 #endif
 
 #define USE_INVALID_CODE_SCHEME
+/* #define USE_UTF8_31BITS */
 
 #ifdef USE_INVALID_CODE_SCHEME
 /* virtual codepoint values for invalid encoding byte 0xfe and 0xff */
 # define INVALID_CODE_FE  0xfffffffe
 # define INVALID_CODE_FF  0xffffffff
 #endif
+
+#ifndef USE_UTF8_31BITS
 #define VALID_CODE_LIMIT  0x0010ffff
+#else
+#define VALID_CODE_LIMIT  0x7fffffff
+#endif
 
 #define utf8_islead(c)     ((UChar )((c) & 0xc0) != 0x80)
 
@@ -63,14 +69,19 @@ static const int EncLen_UTF8[] = {
   2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
   2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
   3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
+#ifndef USE_UTF8_31BITS
   4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
+#else
+  4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 1, 1
+#endif
 };
 
 typedef enum {
   FAILURE = -2,
   ACCEPT,
   S0, S1, S2, S3,
-  S4, S5, S6, S7
+  S4, S5, S6, S7,
+  S8, S9,S10,S11,
 } state_t;
 #define A ACCEPT
 #define F FAILURE
@@ -91,7 +102,11 @@ static const signed char trans[][0x100] = {
     /* c */ F, F, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
     /* d */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
     /* e */ 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3,
+#ifndef USE_UTF8_31BITS
     /* f */ 5, 6, 6, 6, 7, F, F, F, F, F, F, F, F, F, F, F
+#else
+    /* f */ 5, 6, 6, 6, 6, 6, 6, 6, 8, 9, 9, 9,10,11, F, F
+#endif
   },
   { /* S1   0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f */
     /* 0 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
@@ -219,6 +234,80 @@ static const signed char trans[][0x100] = {
     /* e */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
     /* f */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F
   },
+#ifdef USE_UTF8_31BITS
+  { /* S8   0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f */
+    /* 0 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 1 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 2 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 3 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 4 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 5 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 6 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 7 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 8 */ F, F, F, F, F, F, F, F, 6, 6, 6, 6, 6, 6, 6, 6,
+    /* 9 */ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
+    /* a */ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
+    /* b */ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
+    /* c */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* d */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* e */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* f */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F
+  },
+  { /* S9   0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f */
+    /* 0 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 1 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 2 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 3 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 4 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 5 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 6 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 7 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 8 */ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
+    /* 9 */ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
+    /* a */ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
+    /* b */ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
+    /* c */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* d */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* e */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* f */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F
+  },
+  { /* S10  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f */
+    /* 0 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 1 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 2 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 3 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 4 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 5 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 6 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 7 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 8 */ F, F, F, F, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
+    /* 9 */ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
+    /* a */ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
+    /* b */ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
+    /* c */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* d */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* e */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* f */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F
+  },
+  { /* S11  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f */
+    /* 0 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 1 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 2 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 3 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 4 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 5 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 6 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 7 */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* 8 */ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
+    /* 9 */ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
+    /* a */ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
+    /* b */ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
+    /* c */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* d */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* e */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
+    /* f */ F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F
+  },
+#endif // USE_UTF8_31BITS
 };
 #undef A
 #undef F
@@ -244,8 +333,24 @@ mbc_enc_len(const UChar* p, const UChar* e, OnigEncoding enc ARG_UNUSED)
 
   if (p == e) return ONIGENC_CONSTRUCT_MBCLEN_NEEDMORE(EncLen_UTF8[firstbyte]-3);
   s = trans[s][*p++];
+
+#ifndef USE_UTF8_31BITS
   return s == ACCEPT ? ONIGENC_CONSTRUCT_MBCLEN_CHARFOUND(4) :
                        ONIGENC_CONSTRUCT_MBCLEN_INVALID();
+#else
+  if (s < 0) return s == ACCEPT ? ONIGENC_CONSTRUCT_MBCLEN_CHARFOUND(4) :
+                                  ONIGENC_CONSTRUCT_MBCLEN_INVALID();
+
+  if (p == e) return ONIGENC_CONSTRUCT_MBCLEN_NEEDMORE(EncLen_UTF8[firstbyte]-4);
+  s = trans[s][*p++];
+  if (s < 0) return s == ACCEPT ? ONIGENC_CONSTRUCT_MBCLEN_CHARFOUND(5) :
+                                  ONIGENC_CONSTRUCT_MBCLEN_INVALID();
+
+  if (p == e) return ONIGENC_CONSTRUCT_MBCLEN_NEEDMORE(EncLen_UTF8[firstbyte]-5);
+  s = trans[s][*p++];
+  return s == ACCEPT ? ONIGENC_CONSTRUCT_MBCLEN_CHARFOUND(6) :
+                       ONIGENC_CONSTRUCT_MBCLEN_INVALID();
+#endif
 }
 
 static int
@@ -304,7 +409,13 @@ code_to_mbclen(OnigCodePoint code, OnigEncoding enc ARG_UNUSED)
   if      ((code & 0xffffff80) == 0) return 1;
   else if ((code & 0xfffff800) == 0) return 2;
   else if ((code & 0xffff0000) == 0) return 3;
+#ifndef USE_UTF8_31BITS
   else if (code <= VALID_CODE_LIMIT) return 4;
+#else
+  else if ((code & 0xffe00000) == 0) return 4;
+  else if ((code & 0xfc000000) == 0) return 5;
+  else if (code <= VALID_CODE_LIMIT) return 6;
+#endif
 #ifdef USE_INVALID_CODE_SCHEME
   else if (code == INVALID_CODE_FE) return 1;
   else if (code == INVALID_CODE_FF) return 1;
@@ -333,11 +444,33 @@ code_to_mbc(OnigCodePoint code, UChar *buf, OnigEncoding enc ARG_UNUSED)
       *p++ = (UChar )(((code>>12) & 0x0f) | 0xe0);
       *p++ = UTF8_TRAILS(code, 6);
     }
+#ifndef USE_UTF8_31BITS
     else if (code <= VALID_CODE_LIMIT) {
       *p++ = (UChar )(((code>>18) & 0x07) | 0xf0);
       *p++ = UTF8_TRAILS(code, 12);
       *p++ = UTF8_TRAILS(code,  6);
     }
+#else
+    else if ((code & 0xffe00000) == 0) {
+        *p++ = (UChar )(((code>>18) & 0x07) | 0xf0);
+        *p++ = UTF8_TRAILS(code, 12);
+        *p++ = UTF8_TRAILS(code,  6);
+    }
+    else if ((code & 0xfc000000) == 0) {
+        *p++ = (UChar )(((code>>24) & 0x03) | 0xf8);
+        *p++ = UTF8_TRAILS(code, 18);
+        *p++ = UTF8_TRAILS(code, 12);
+        *p++ = UTF8_TRAILS(code,  6);
+    }
+    else if (code <= VALID_CODE_LIMIT) {
+        *p++ = (UChar )(((code>>30) & 0x01) | 0xfc);
+        *p++ = UTF8_TRAILS(code, 24);
+        *p++ = UTF8_TRAILS(code, 18);
+        *p++ = UTF8_TRAILS(code, 12);
+        *p++ = UTF8_TRAILS(code,  6);
+    }
+#endif
+
 #ifdef USE_INVALID_CODE_SCHEME
     else if (code == INVALID_CODE_FE) {
       *p = 0xfe;
@@ -417,7 +550,11 @@ get_case_fold_codes_by_str(OnigCaseFoldType flag,
 OnigEncodingDefine(utf_8, UTF_8) = {
   mbc_enc_len,
   "UTF-8",     /* name */
+#ifndef USE_UTF8_31BITS
+  4,           /* max byte length */
+#else
   6,           /* max byte length */
+#endif
   1,           /* min byte length */
   is_mbc_newline,
   mbc_to_code,
@@ -431,7 +568,11 @@ OnigEncodingDefine(utf_8, UTF_8) = {
   get_ctype_code_range,
   left_adjust_char_head,
   onigenc_always_true_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   onigenc_unicode_case_map,
+#else
+  NULL,
+#endif
   ENCINDEX_UTF_8,
   ONIGENC_FLAG_UNICODE,
 };
diff --git a/lib/onigmo/enc/windows_1250.c b/lib/onigmo/enc/windows_1250.c
index d2cf7b16b..ca52444d1 100644
--- a/lib/onigmo/enc/windows_1250.c
+++ b/lib/onigmo/enc/windows_1250.c
@@ -190,6 +190,7 @@ cp1250_get_case_fold_codes_by_str(OnigCaseFoldType flag,
 	     flag, p, end, items);
 }
 
+#ifdef USE_CASE_MAP_API
 static int
 case_map(OnigCaseFoldType* flagP, const OnigUChar** pp,
 	 const OnigUChar* end, OnigUChar* to, OnigUChar* to_end,
@@ -239,6 +240,7 @@ case_map(OnigCaseFoldType* flagP, const OnigUChar** pp,
   *flagP = flags;
   return (int )(to - to_start);
 }
+#endif
 
 OnigEncodingDefine(windows_1250, Windows_1250) = {
   onigenc_single_byte_mbc_enc_len,
@@ -257,7 +259,11 @@ OnigEncodingDefine(windows_1250, Windows_1250) = {
   onigenc_not_support_get_ctype_code_range,
   onigenc_single_byte_left_adjust_char_head,
   onigenc_always_true_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_NONE,
 };
diff --git a/lib/onigmo/enc/windows_1251.c b/lib/onigmo/enc/windows_1251.c
index fcd0f1015..08002d02a 100644
--- a/lib/onigmo/enc/windows_1251.c
+++ b/lib/onigmo/enc/windows_1251.c
@@ -180,6 +180,7 @@ cp1251_get_case_fold_codes_by_str(OnigCaseFoldType flag,
 	     flag, p, end, items);
 }
 
+#ifdef USE_CASE_MAP_API
 static int
 case_map(OnigCaseFoldType* flagP, const OnigUChar** pp,
 	 const OnigUChar* end, OnigUChar* to, OnigUChar* to_end,
@@ -221,6 +222,7 @@ case_map(OnigCaseFoldType* flagP, const OnigUChar** pp,
   *flagP = flags;
   return (int )(to - to_start);
 }
+#endif
 
 OnigEncodingDefine(windows_1251, Windows_1251) = {
   onigenc_single_byte_mbc_enc_len,
@@ -239,7 +241,11 @@ OnigEncodingDefine(windows_1251, Windows_1251) = {
   onigenc_not_support_get_ctype_code_range,
   onigenc_single_byte_left_adjust_char_head,
   onigenc_always_true_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_NONE,
 };
diff --git a/lib/onigmo/enc/windows_1252.c b/lib/onigmo/enc/windows_1252.c
index 5f90c1560..b833df956 100644
--- a/lib/onigmo/enc/windows_1252.c
+++ b/lib/onigmo/enc/windows_1252.c
@@ -181,6 +181,7 @@ cp1252_get_case_fold_codes_by_str(OnigCaseFoldType flag,
 	     flag, p, end, items);
 }
 
+#ifdef USE_CASE_MAP_API
 static int
 case_map(OnigCaseFoldType* flagP, const OnigUChar** pp,
 	 const OnigUChar* end, OnigUChar* to, OnigUChar* to_end,
@@ -228,6 +229,7 @@ case_map(OnigCaseFoldType* flagP, const OnigUChar** pp,
   *flagP = flags;
   return (int )(to - to_start);
 }
+#endif
 
 OnigEncodingDefine(windows_1252, Windows_1252) = {
   onigenc_single_byte_mbc_enc_len,
@@ -246,7 +248,11 @@ OnigEncodingDefine(windows_1252, Windows_1252) = {
   onigenc_not_support_get_ctype_code_range,
   onigenc_single_byte_left_adjust_char_head,
   onigenc_always_true_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_NONE,
 };
diff --git a/lib/onigmo/enc/windows_1253.c b/lib/onigmo/enc/windows_1253.c
index 9e9c63a58..4a1b5e427 100644
--- a/lib/onigmo/enc/windows_1253.c
+++ b/lib/onigmo/enc/windows_1253.c
@@ -213,6 +213,7 @@ get_case_fold_codes_by_str(OnigCaseFoldType flag,
 	     flag, p, end, items);
 }
 
+#ifdef USE_CASE_MAP_API
 static int
 case_map(OnigCaseFoldType* flagP, const OnigUChar** pp,
 	 const OnigUChar* end, OnigUChar* to, OnigUChar* to_end,
@@ -272,6 +273,7 @@ case_map(OnigCaseFoldType* flagP, const OnigUChar** pp,
   *flagP = flags;
   return (int )(to - to_start);
 }
+#endif
 
 OnigEncodingDefine(windows_1253, Windows_1253) = {
   onigenc_single_byte_mbc_enc_len,
@@ -290,7 +292,11 @@ OnigEncodingDefine(windows_1253, Windows_1253) = {
   onigenc_not_support_get_ctype_code_range,
   onigenc_single_byte_left_adjust_char_head,
   onigenc_always_true_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_NONE,
 };
diff --git a/lib/onigmo/enc/windows_1254.c b/lib/onigmo/enc/windows_1254.c
index 9ae66978a..fbb19d756 100644
--- a/lib/onigmo/enc/windows_1254.c
+++ b/lib/onigmo/enc/windows_1254.c
@@ -221,6 +221,7 @@ get_case_fold_codes_by_str(OnigCaseFoldType flag,
 	     flag, p, end, items);
 }
 
+#ifdef USE_CASE_MAP_API
 #define DOTLESS_i        (0xFD)
 #define I_WITH_DOT_ABOVE (0xDD)
 static int
@@ -277,6 +278,7 @@ case_map(OnigCaseFoldType* flagP, const OnigUChar** pp,
   *flagP = flags;
   return (int )(to - to_start);
 }
+#endif
 
 OnigEncodingDefine(windows_1254, Windows_1254) = {
   onigenc_single_byte_mbc_enc_len,
@@ -295,7 +297,11 @@ OnigEncodingDefine(windows_1254, Windows_1254) = {
   onigenc_not_support_get_ctype_code_range,
   onigenc_single_byte_left_adjust_char_head,
   onigenc_always_true_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_NONE,
 };
diff --git a/lib/onigmo/enc/windows_1257.c b/lib/onigmo/enc/windows_1257.c
index 936a94ac7..9f8d5bd7b 100644
--- a/lib/onigmo/enc/windows_1257.c
+++ b/lib/onigmo/enc/windows_1257.c
@@ -225,6 +225,7 @@ get_case_fold_codes_by_str(OnigCaseFoldType flag,
 	     flag, p, end, items);
 }
 
+#ifdef USE_CASE_MAP_API
 #define DOTLESS_i        (0xB9)
 #define I_WITH_DOT_ABOVE (0xA9)
 static int
@@ -279,6 +280,7 @@ case_map(OnigCaseFoldType* flagP, const OnigUChar** pp,
   *flagP = flags;
   return (int )(to - to_start);
 }
+#endif
 
 OnigEncodingDefine(windows_1257, Windows_1257) = {
   onigenc_single_byte_mbc_enc_len,
@@ -297,7 +299,11 @@ OnigEncodingDefine(windows_1257, Windows_1257) = {
   onigenc_not_support_get_ctype_code_range,
   onigenc_single_byte_left_adjust_char_head,
   onigenc_always_true_is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_NONE,
 };
diff --git a/lib/onigmo/enc/windows_31j.c b/lib/onigmo/enc/windows_31j.c
index e3a468f41..0fd6d1e8f 100644
--- a/lib/onigmo/enc/windows_31j.c
+++ b/lib/onigmo/enc/windows_31j.c
@@ -48,7 +48,11 @@ OnigEncodingDefine(windows_31j, Windows_31J) = {
   get_ctype_code_range,
   left_adjust_char_head,
   is_allowed_reverse_match,
+#ifdef USE_CASE_MAP_API
   onigenc_ascii_only_case_map,
+#else
+  NULL,
+#endif
   0,
   ONIGENC_FLAG_NONE,
 };
diff --git a/lib/onigmo/onigmo.h b/lib/onigmo/onigmo.h
index 385f2d6a8..d1d705ff3 100644
--- a/lib/onigmo/onigmo.h
+++ b/lib/onigmo/onigmo.h
@@ -4,8 +4,8 @@
   onigmo.h - Onigmo (Oniguruma-mod) (regular expression library)
 **********************************************************************/
 /*-
- * Copyright (c) 2002-2009  K.Kosako  <sndgk393 AT ybb DOT ne DOT jp>
- * Copyright (c) 2011-2017  K.Takata  <kentkt AT csc DOT jp>
+ * Copyright (c) 2002-2016  K.Kosako  <sndgk393 AT ybb DOT ne DOT jp>
+ * Copyright (c) 2011-2019  K.Takata  <kentkt AT csc DOT jp>
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -38,8 +38,8 @@ extern "C" {
 #endif
 
 #define ONIGMO_VERSION_MAJOR   6
-#define ONIGMO_VERSION_MINOR   1
-#define ONIGMO_VERSION_TEENY   3
+#define ONIGMO_VERSION_MINOR   2
+#define ONIGMO_VERSION_TEENY   0
 
 #ifndef ONIG_EXTERN
 # ifdef RUBY_EXTERN
@@ -701,6 +701,7 @@ ONIG_EXTERN const OnigSyntaxType*   OnigDefaultSyntax;
 #define ONIG_IS_CAPTURE_HISTORY_GROUP(r, i) \
   ((i) <= ONIG_MAX_CAPTURE_HISTORY_GROUP && (r)->list && (r)->list[i])
 
+#ifdef USE_CAPTURE_HISTORY
 typedef struct OnigCaptureTreeNodeStruct {
   int group;   /* group number */
   OnigPosition beg;
@@ -709,6 +710,7 @@ typedef struct OnigCaptureTreeNodeStruct {
   int num_childs;
   struct OnigCaptureTreeNodeStruct** childs;
 } OnigCaptureTreeNode;
+#endif
 
 /* match result region type */
 struct re_registers {
@@ -716,8 +718,10 @@ struct re_registers {
   int  num_regs;
   OnigPosition* beg;
   OnigPosition* end;
+#ifdef USE_CAPTURE_HISTORY
   /* extended */
   OnigCaptureTreeNode* history_root;  /* capture history tree root */
+#endif
 };
 
 /* capture tree traverse */
@@ -784,8 +788,8 @@ typedef struct re_pattern_buffer {
   unsigned char *exact;
   unsigned char *exact_end;
   unsigned char  map[ONIG_CHAR_TABLE_SIZE]; /* used as BM skip or char-map */
-  int           *int_map;                   /* BM skip for exact_len > 255 */
-  int           *int_map_backward;          /* BM skip for backward search */
+  int           *reserved1;
+  int           *reserved2;
   OnigDistance   dmin;                      /* min-distance of exact or map */
   OnigDistance   dmax;                      /* max-distance of exact or map */
 
@@ -866,8 +870,10 @@ ONIG_EXTERN
 int onig_number_of_captures(const OnigRegexType *reg);
 ONIG_EXTERN
 int onig_number_of_capture_histories(const OnigRegexType *reg);
+#ifdef USE_CAPTURE_HISTORY
 ONIG_EXTERN
 OnigCaptureTreeNode* onig_get_capture_tree(OnigRegion* region);
+#endif
 ONIG_EXTERN
 int onig_capture_tree_traverse(OnigRegion* region, int at, int(*callback_func)(int,OnigPosition,OnigPosition,int,int,void*), void* arg);
 ONIG_EXTERN
diff --git a/lib/onigmo/onigmo.pc.cmake b/lib/onigmo/onigmo.pc.cmake
new file mode 100644
index 000000000..75ffcee07
--- /dev/null
+++ b/lib/onigmo/onigmo.pc.cmake
@@ -0,0 +1,13 @@
+prefix=@CMAKE_INSTALL_PREFIX@
+exec_prefix=@CMAKE_INSTALL_PREFIX@
+libdir=@CMAKE_INSTALL_PREFIX@/@ONIGMO_INSTALL_LIBDIR@
+includedir=@ONIGMO_INSTALL_INCLUDEDIR@
+datarootdir=@ONIGMO_INSTALL_DATADIR@
+datadir=@ONIGMO_INSTALL_DATADIR@
+
+Name: onigmo
+Description: Regular expression library
+Version: @PACKAGE_VERSION@
+Requires:
+Libs: -L${libdir} -lonigmo
+Cflags: -I${includedir}
diff --git a/lib/onigmo/onigmo.py b/lib/onigmo/onigmo.py
index 79439b252..4c8eca30e 100644
--- a/lib/onigmo/onigmo.py
+++ b/lib/onigmo/onigmo.py
@@ -1,5 +1,29 @@
 # -*- coding: utf-8 -*-
 
+# Copyright (c) 2011-2019  K.Takata  <kentkt AT csc DOT jp>
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 1. Redistributions of source code must retain the above copyright
+#    notice, this list of conditions and the following disclaimer.
+# 2. Redistributions in binary form must reproduce the above copyright
+#    notice, this list of conditions and the following disclaimer in the
+#    documentation and/or other materials provided with the distribution.
+#
+# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+# SUCH DAMAGE.
+
 """Using Onigmo (Oniguruma-mod) regular expression library.
 
 This is a low level wrapper for Onigmo regular expression DLL/shared object.
@@ -115,20 +139,26 @@ class OnigErrorInfo(ctypes.Structure):
 
 # load the DLL or the shared library
 
+if sys.version_info[0:3] < (3, 8, 0):
+    loadargs = {}
+else:
+    # Use the default (potentially insecure) search path
+    loadargs = {'winmode': 0}
+
 if os.name in ("nt", "ce"):
     # Win32
     _libname = "onigmo.dll"
     try:
-        libonig = ctypes.cdll.LoadLibrary(_libname)
+        libonig = ctypes.CDLL(_libname, **loadargs)
     except OSError:
         # Sometimes MinGW version has a prefix "lib".
         _libname = "libonigmo.dll"
         try:
-            libonig = ctypes.cdll.LoadLibrary(_libname)
+            libonig = ctypes.CDLL(_libname, **loadargs)
         except OSError:
             # Sometimes MinGW version has the API version.
             _libname = "libonigmo-%d.dll" % _onig_api_version
-            libonig = ctypes.cdll.LoadLibrary(_libname)
+            libonig = ctypes.CDLL(_libname, **loadargs)
 elif sys.platform == "cygwin":
     # Cygwin
     _libname = "cygonigmo-%d.dll" % _onig_api_version
diff --git a/lib/onigmo/regcomp.c b/lib/onigmo/regcomp.c
index 59b1f40d4..177977ec5 100644
--- a/lib/onigmo/regcomp.c
+++ b/lib/onigmo/regcomp.c
@@ -2,8 +2,8 @@
   regcomp.c -  Onigmo (Oniguruma-mod) (regular expression library)
 **********************************************************************/
 /*-
- * Copyright (c) 2002-2013  K.Kosako  <sndgk393 AT ybb DOT ne DOT jp>
- * Copyright (c) 2011-2016  K.Takata  <kentkt AT csc DOT jp>
+ * Copyright (c) 2002-2018  K.Kosako  <sndgk393 AT ybb DOT ne DOT jp>
+ * Copyright (c) 2011-2019  K.Takata  <kentkt AT csc DOT jp>
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -535,6 +535,9 @@ compile_string_node(Node* node, regex_t* reg)
     }
     else {
       r = add_compile_string(prev, prev_len, blen, reg, ambig);
+      if (p + len > end) {
+        return 0;
+      }
       if (r) return r;
 
       prev  = p;
@@ -772,7 +775,7 @@ compile_length_quantifier_node(QtfrNode* qn, regex_t* reg)
     }
   }
   else if (qn->upper == 0) {
-    if (qn->is_refered != 0) /* /(?<n>..){0}/ */
+    if (qn->is_referred != 0) /* /(?<n>..){0}/ */
       len = SIZE_OP_JUMP + tlen;
     else
       len = 0;
@@ -901,7 +904,7 @@ compile_quantifier_node(QtfrNode* qn, regex_t* reg)
     }
   }
   else if (qn->upper == 0) {
-    if (qn->is_refered != 0) { /* /(?<n>..){0}/ */
+    if (qn->is_referred != 0) { /* /(?<n>..){0}/ */
       r = add_opcode_rel_addr(reg, OP_JUMP, tlen);
       if (r) return r;
       r = compile_tree(qn->target, reg);
@@ -1005,7 +1008,7 @@ compile_length_quantifier_node(QtfrNode* qn, regex_t* reg)
     else
       len += SIZE_OP_JUMP + mod_tlen + SIZE_OP_PUSH;
   }
-  else if (qn->upper == 0 && qn->is_refered != 0) { /* /(?<n>..){0}/ */
+  else if (qn->upper == 0 && qn->is_referred != 0) { /* /(?<n>..){0}/ */
     len = SIZE_OP_JUMP + tlen;
   }
   else if (!infinite && qn->greedy &&
@@ -1124,7 +1127,7 @@ compile_quantifier_node(QtfrNode* qn, regex_t* reg)
       r = add_opcode_rel_addr(reg, OP_PUSH, -(mod_tlen + (int )SIZE_OP_PUSH));
     }
   }
-  else if (qn->upper == 0 && qn->is_refered != 0) { /* /(?<n>..){0}/ */
+  else if (qn->upper == 0 && qn->is_referred != 0) { /* /(?<n>..){0}/ */
     r = add_opcode_rel_addr(reg, OP_JUMP, tlen);
     if (r) return r;
     r = compile_tree(qn->target, reg);
@@ -2770,10 +2773,8 @@ get_head_value_node(Node* node, int exact, regex_t* reg)
       if (sn->end <= sn->s)
 	break;
 
-      if (exact != 0 &&
-	  !NSTRING_IS_RAW(node) && IS_IGNORECASE(reg->options)) {
-      }
-      else {
+      if (exact == 0 ||
+	  NSTRING_IS_RAW(node) || !IS_IGNORECASE(reg->options)) {
 	n = node;
       }
     }
@@ -3106,7 +3107,7 @@ subexp_recursive_check_trav(Node* node, ScanEnv* env)
     r = subexp_recursive_check_trav(NQTFR(node)->target, env);
     if (NQTFR(node)->upper == 0) {
       if (r == FOUND_CALLED_NODE)
-	NQTFR(node)->is_refered = 1;
+	NQTFR(node)->is_referred = 1;
     }
     break;
 
@@ -3264,6 +3265,14 @@ setup_subexp_call(Node* node, ScanEnv* env)
 }
 #endif
 
+#define IN_ALT          (1<<0)
+#define IN_NOT          (1<<1)
+#define IN_REPEAT       (1<<2)
+#define IN_VAR_REPEAT   (1<<3)
+#define IN_CALL         (1<<4)
+#define IN_RECCALL      (1<<5)
+#define IN_LOOK_BEHIND  (1<<6)
+
 /* divide different length alternatives in look-behind.
   (?<=A|B) ==> (?<=A)|(?<=B)
   (?<!A|B) ==> (?<!A)(?<!B)
@@ -3560,24 +3569,29 @@ expand_case_fold_string_alt(int item_num, OnigCaseFoldCodeItem items[],
   return ONIGERR_MEMORY;
 }
 
-static int
-expand_case_fold_string(Node* node, regex_t* reg)
-{
 #define THRESHOLD_CASE_FOLD_ALT_FOR_EXPANSION  8
 
+static int
+expand_case_fold_string(Node* node, regex_t* reg, int state)
+{
   int r, n, len, alt_num;
   int varlen = 0;
+  int is_in_look_behind;
   UChar *start, *end, *p;
   Node *top_root, *root, *snode, *prev_node;
   OnigCaseFoldCodeItem items[ONIGENC_GET_CASE_FOLD_CODES_MAX_NUM];
-  StrNode* sn = NSTR(node);
+  StrNode* sn;
 
   if (NSTRING_IS_AMBIG(node)) return 0;
 
+  sn = NSTR(node);
+
   start = sn->s;
   end   = sn->end;
   if (start >= end) return 0;
 
+  is_in_look_behind = (state & IN_LOOK_BEHIND) != 0;
+
   r = 0;
   top_root = root = prev_node = snode = NULL_NODE;
   alt_num = 1;
@@ -3593,9 +3607,10 @@ expand_case_fold_string(Node* node, regex_t* reg)
     len = enclen(reg->enc, p, end);
 
     varlen = is_case_fold_variable_len(n, items, len);
-    if (n == 0 || varlen == 0) {
+    if (n == 0 || varlen == 0 || is_in_look_behind) {
       if (IS_NULL(snode)) {
 	if (IS_NULL(root) && IS_NOT_NULL(prev_node)) {
+          onig_node_free(top_root);
 	  top_root = root = onig_node_list_add(NULL_NODE, prev_node);
 	  if (IS_NULL(root)) {
 	    onig_node_free(prev_node);
@@ -3627,6 +3642,7 @@ expand_case_fold_string(Node* node, regex_t* reg)
 	}
       }
       if (IS_NULL(root) && IS_NOT_NULL(prev_node)) {
+        onig_node_free(top_root);
 	top_root = root = onig_node_list_add(NULL_NODE, prev_node);
 	if (IS_NULL(root)) {
 	  onig_node_free(prev_node);
@@ -3677,6 +3693,7 @@ expand_case_fold_string(Node* node, regex_t* reg)
     if (r != 0) goto mem_err;
 
     if (IS_NOT_NULL(prev_node) && IS_NULL(root)) {
+      onig_node_free(top_root);
       top_root = root = onig_node_list_add(NULL_NODE, prev_node);
       if (IS_NULL(root)) {
 	onig_node_free(srem);
@@ -3851,13 +3868,6 @@ setup_comb_exp_check(Node* node, int state, ScanEnv* env)
 }
 #endif
 
-#define IN_ALT        (1<<0)
-#define IN_NOT        (1<<1)
-#define IN_REPEAT     (1<<2)
-#define IN_VAR_REPEAT (1<<3)
-#define IN_CALL       (1<<4)
-#define IN_RECCALL    (1<<5)
-
 /* setup_tree does the following work.
  1. check empty loop. (set qn->target_empty_info)
  2. expand ignore-case in char class.
@@ -3899,7 +3909,7 @@ restart:
 
   case NT_STR:
     if (IS_IGNORECASE(reg->options) && !NSTRING_IS_RAW(node)) {
-      r = expand_case_fold_string(node, reg);
+      r = expand_case_fold_string(node, reg, state);
     }
     break;
 
@@ -4142,7 +4152,7 @@ restart:
 	  if (r < 0) return r;
 	  if (r > 0) return ONIGERR_INVALID_LOOK_BEHIND_PATTERN;
 	  if (NTYPE(node) != NT_ANCHOR) goto restart;
-	  r = setup_tree(an->target, reg, state, env);
+	  r = setup_tree(an->target, reg, (state | IN_LOOK_BEHIND), env);
 	  if (r != 0) return r;
 	  r = setup_look_behind(node, reg, env);
 	}
@@ -4155,7 +4165,8 @@ restart:
 	  if (r < 0) return r;
 	  if (r > 0) return ONIGERR_INVALID_LOOK_BEHIND_PATTERN;
 	  if (NTYPE(node) != NT_ANCHOR) goto restart;
-	  r = setup_tree(an->target, reg, (state | IN_NOT), env);
+	  r = setup_tree(an->target, reg, (state | IN_NOT | IN_LOOK_BEHIND),
+			 env);
 	  if (r != 0) return r;
 	  r = setup_look_behind(node, reg, env);
 	}
@@ -4171,169 +4182,73 @@ restart:
   return r;
 }
 
-#ifndef USE_SUNDAY_QUICK_SEARCH
-/* set skip map for Boyer-Moore search */
+/* set skip map for Sunday's quick search */
 static int
 set_bm_skip(UChar* s, UChar* end, regex_t* reg,
-	    UChar skip[], int** int_skip, int ignore_case)
+	    UChar skip[], int ignore_case)
 {
   OnigDistance i, len;
   int clen, flen, n, j, k;
-  UChar *p, buf[ONIGENC_GET_CASE_FOLD_CODES_MAX_NUM][ONIGENC_MBC_CASE_FOLD_MAXLEN];
+  UChar *p, buf[ONIGENC_MBC_CASE_FOLD_MAXLEN];
   OnigCaseFoldCodeItem items[ONIGENC_GET_CASE_FOLD_CODES_MAX_NUM];
   OnigEncoding enc = reg->enc;
 
   len = end - s;
-  if (len < ONIG_CHAR_TABLE_SIZE) {
-    for (i = 0; i < ONIG_CHAR_TABLE_SIZE; i++) skip[i] = (UChar )len;
-
-    n = 0;
-    for (i = 0; i < len - 1; i += clen) {
-      p = s + i;
-      if (ignore_case)
-	n = ONIGENC_GET_CASE_FOLD_CODES_BY_STR(enc, reg->case_fold_flag,
-					       p, end, items);
-      clen = enclen(enc, p, end);
-      if (p + clen > end)
-	clen = (int )(end - p);
-
-      for (j = 0; j < n; j++) {
-	if ((items[j].code_len != 1) || (items[j].byte_len != clen))
-	  return 1;  /* different length isn't supported. */
-	flen = ONIGENC_CODE_TO_MBC(enc, items[j].code[0], buf[j]);
-	if (flen != clen)
-	  return 1;  /* different length isn't supported. */
-      }
-      for (j = 0; j < clen; j++) {
-	skip[s[i + j]] = (UChar )(len - 1 - i - j);
-	for (k = 0; k < n; k++) {
-	  skip[buf[k][j]] = (UChar )(len - 1 - i - j);
-	}
-      }
-    }
-  }
-  else {
-# if OPT_EXACT_MAXLEN < ONIG_CHAR_TABLE_SIZE
+  if (len >= ONIG_CHAR_TABLE_SIZE) {
     /* This should not happen. */
     return ONIGERR_TYPE_BUG;
-# else
-    if (IS_NULL(*int_skip)) {
-      *int_skip = (int* )xmalloc(sizeof(int) * ONIG_CHAR_TABLE_SIZE);
-      if (IS_NULL(*int_skip)) return ONIGERR_MEMORY;
-    }
-    for (i = 0; i < ONIG_CHAR_TABLE_SIZE; i++) (*int_skip)[i] = (int )len;
-
-    n = 0;
-    for (i = 0; i < len - 1; i += clen) {
-      p = s + i;
-      if (ignore_case)
-	n = ONIGENC_GET_CASE_FOLD_CODES_BY_STR(enc, reg->case_fold_flag,
-					       p, end, items);
-      clen = enclen(enc, p, end);
-      if (p + clen > end)
-	clen = (int )(end - p);
-
-      for (j = 0; j < n; j++) {
-	if ((items[j].code_len != 1) || (items[j].byte_len != clen))
-	  return 1;  /* different length isn't supported. */
-	flen = ONIGENC_CODE_TO_MBC(enc, items[j].code[0], buf[j]);
-	if (flen != clen)
-	  return 1;  /* different length isn't supported. */
-      }
-      for (j = 0; j < clen; j++) {
-	(*int_skip)[s[i + j]] = (int )(len - 1 - i - j);
-	for (k = 0; k < n; k++) {
-	  (*int_skip)[buf[k][j]] = (int )(len - 1 - i - j);
-	}
-      }
-    }
-# endif
   }
-  return 0;
-}
-
-#else /* USE_SUNDAY_QUICK_SEARCH */
-
-/* set skip map for Sunday's quick search */
-static int
-set_bm_skip(UChar* s, UChar* end, regex_t* reg,
-	    UChar skip[], int** int_skip, int ignore_case)
-{
-  OnigDistance i, len;
-  int clen, flen, n, j, k;
-  UChar *p, buf[ONIGENC_GET_CASE_FOLD_CODES_MAX_NUM][ONIGENC_MBC_CASE_FOLD_MAXLEN];
-  OnigCaseFoldCodeItem items[ONIGENC_GET_CASE_FOLD_CODES_MAX_NUM];
-  OnigEncoding enc = reg->enc;
 
-  len = end - s;
-  if (len < ONIG_CHAR_TABLE_SIZE) {
-    for (i = 0; i < ONIG_CHAR_TABLE_SIZE; i++) skip[i] = (UChar )(len + 1);
-
-    n = 0;
+  if (ignore_case) {
     for (i = 0; i < len; i += clen) {
       p = s + i;
-      if (ignore_case)
-	n = ONIGENC_GET_CASE_FOLD_CODES_BY_STR(enc, reg->case_fold_flag,
-					       p, end, items);
+      n = ONIGENC_GET_CASE_FOLD_CODES_BY_STR(enc, reg->case_fold_flag,
+	  p, end, items);
       clen = enclen(enc, p, end);
       if (p + clen > end)
 	clen = (int )(end - p);
 
       for (j = 0; j < n; j++) {
-	if ((items[j].code_len != 1) || (items[j].byte_len != clen))
-	  return 1;  /* different length isn't supported. */
-	flen = ONIGENC_CODE_TO_MBC(enc, items[j].code[0], buf[j]);
-	if (flen != clen)
-	  return 1;  /* different length isn't supported. */
-      }
-      for (j = 0; j < clen; j++) {
-	skip[s[i + j]] = (UChar )(len - i - j);
-	for (k = 0; k < n; k++) {
-	  skip[buf[k][j]] = (UChar )(len - i - j);
+	if ((items[j].code_len != 1) || (items[j].byte_len != clen)) {
+	  /* Different length isn't supported. Stop optimization at here. */
+	  end = p;
+	  goto endcheck;
+	}
+	flen = ONIGENC_CODE_TO_MBC(enc, items[j].code[0], buf);
+	if (flen != clen) {
+	  /* Different length isn't supported. Stop optimization at here. */
+	  end = p;
+	  goto endcheck;
 	}
       }
     }
+endcheck:
+    len = end - s;
   }
-  else {
-# if OPT_EXACT_MAXLEN < ONIG_CHAR_TABLE_SIZE
-    /* This should not happen. */
-    return ONIGERR_TYPE_BUG;
-# else
-    if (IS_NULL(*int_skip)) {
-      *int_skip = (int* )xmalloc(sizeof(int) * ONIG_CHAR_TABLE_SIZE);
-      if (IS_NULL(*int_skip)) return ONIGERR_MEMORY;
-    }
-    for (i = 0; i < ONIG_CHAR_TABLE_SIZE; i++) (*int_skip)[i] = (int )(len + 1);
-
-    n = 0;
-    for (i = 0; i < len; i += clen) {
-      p = s + i;
-      if (ignore_case)
-	n = ONIGENC_GET_CASE_FOLD_CODES_BY_STR(enc, reg->case_fold_flag,
-					       p, end, items);
-      clen = enclen(enc, p, end);
-      if (p + clen > end)
-	clen = (int )(end - p);
 
-      for (j = 0; j < n; j++) {
-	if ((items[j].code_len != 1) || (items[j].byte_len != clen))
-	  return 1;  /* different length isn't supported. */
-	flen = ONIGENC_CODE_TO_MBC(enc, items[j].code[0], buf[j]);
-	if (flen != clen)
-	  return 1;  /* different length isn't supported. */
-      }
-      for (j = 0; j < clen; j++) {
-	(*int_skip)[s[i + j]] = (int )(len - i - j);
-	for (k = 0; k < n; k++) {
-	  (*int_skip)[buf[k][j]] = (int )(len - i - j);
-	}
+  for (i = 0; i < ONIG_CHAR_TABLE_SIZE; i++)
+    skip[i] = (UChar )(len + 1);
+  n = 0;
+  for (i = 0; i < len; i += clen) {
+    p = s + i;
+    if (ignore_case)
+      n = ONIGENC_GET_CASE_FOLD_CODES_BY_STR(enc, reg->case_fold_flag,
+					     p, end, items);
+    clen = enclen(enc, p, end);
+    if (p + clen > end)
+      clen = (int )(end - p);
+
+    for (j = 0; j < clen; j++) {
+      skip[s[i + j]] = (UChar )(len - i - j);
+      for (k = 0; k < n; k++) {
+	ONIGENC_CODE_TO_MBC(enc, items[k].code[0], buf);
+	skip[buf[j]] = (UChar )(len - i - j);
       }
     }
-# endif
   }
-  return 0;
+
+  return (int )len;
 }
-#endif /* USE_SUNDAY_QUICK_SEARCH */
 
 typedef struct {
   OnigDistance min;  /* min byte length */
@@ -5011,7 +4926,7 @@ optimize_node_left(Node* node, NodeOptInfo* opt, OptEnv* env)
 
 	if (NSTRING_IS_DONT_GET_OPT_INFO(node)) {
 	  int n = onigenc_strlen(env->enc, sn->s, sn->end);
-	  max = ONIGENC_MBC_MAXLEN_DIST(env->enc) * n;
+	  max = (OnigDistance )ONIGENC_MBC_MAXLEN_DIST(env->enc) * n;
 	}
 	else {
 	  concat_opt_exact_info_str(&opt->exb, sn->s, sn->end,
@@ -5194,7 +5109,7 @@ optimize_node_left(Node* node, NodeOptInfo* opt, OptEnv* env)
       r = optimize_node_left(qn->target, &nopt, env);
       if (r) break;
 
-      if (/*qn->lower == 0 &&*/ IS_REPEAT_INFINITE(qn->upper)) {
+      if (qn->lower == 0 && IS_REPEAT_INFINITE(qn->upper)) {
 	if (env->mmd.max == 0 &&
 	    NTYPE(qn->target) == NT_CANY && qn->greedy) {
 	  if (IS_MULTILINE(env->options))
@@ -5304,7 +5219,6 @@ optimize_node_left(Node* node, NodeOptInfo* opt, OptEnv* env)
 static int
 set_optimize_exact_info(regex_t* reg, OptExactInfo* e)
 {
-  int r;
   int allow_reverse;
 
   if (e->len == 0) return 0;
@@ -5319,15 +5233,18 @@ set_optimize_exact_info(regex_t* reg, OptExactInfo* e)
 
   if (e->ignore_case > 0) {
     if (e->len >= 3 || (e->len >= 2 && allow_reverse)) {
-      r = set_bm_skip(reg->exact, reg->exact_end, reg,
-		      reg->map, &(reg->int_map), 1);
-      if (r == 0) {
+      e->len = set_bm_skip(reg->exact, reg->exact_end, reg,
+		      reg->map, 1);
+      reg->exact_end = reg->exact + e->len;
+      if (e->len >= 3) {
 	reg->optimize = (allow_reverse != 0
 			 ? ONIG_OPTIMIZE_EXACT_BM_IC : ONIG_OPTIMIZE_EXACT_BM_NOT_REV_IC);
       }
-      else {
+      else if (e->len > 0) {
 	reg->optimize = ONIG_OPTIMIZE_EXACT_IC;
       }
+      else
+	return 0;
     }
     else {
       reg->optimize = ONIG_OPTIMIZE_EXACT_IC;
@@ -5335,15 +5252,10 @@ set_optimize_exact_info(regex_t* reg, OptExactInfo* e)
   }
   else {
     if (e->len >= 3 || (e->len >= 2 && allow_reverse)) {
-      r = set_bm_skip(reg->exact, reg->exact_end, reg,
-		      reg->map, &(reg->int_map), 0);
-      if (r == 0) {
-	reg->optimize = (allow_reverse != 0
-		       ? ONIG_OPTIMIZE_EXACT_BM : ONIG_OPTIMIZE_EXACT_BM_NOT_REV);
-      }
-      else {
-	reg->optimize = ONIG_OPTIMIZE_EXACT;
-      }
+      set_bm_skip(reg->exact, reg->exact_end, reg,
+		  reg->map, 0);
+      reg->optimize = (allow_reverse != 0
+		     ? ONIG_OPTIMIZE_EXACT_BM : ONIG_OPTIMIZE_EXACT_BM_NOT_REV);
     }
     else {
       reg->optimize = ONIG_OPTIMIZE_EXACT;
@@ -5626,8 +5538,6 @@ onig_free_body(regex_t* reg)
   if (IS_NOT_NULL(reg)) {
     if (IS_NOT_NULL(reg->p))                xfree(reg->p);
     if (IS_NOT_NULL(reg->exact))            xfree(reg->exact);
-    if (IS_NOT_NULL(reg->int_map))          xfree(reg->int_map);
-    if (IS_NOT_NULL(reg->int_map_backward)) xfree(reg->int_map_backward);
     if (IS_NOT_NULL(reg->repeat_range))     xfree(reg->repeat_range);
     if (IS_NOT_NULL(reg->chain))            onig_free(reg->chain);
 
@@ -5654,8 +5564,6 @@ onig_memsize(const regex_t *reg)
     if (IS_NULL(reg)) return 0;
     if (IS_NOT_NULL(reg->p))                size += reg->alloc;
     if (IS_NOT_NULL(reg->exact))            size += reg->exact_end - reg->exact;
-    if (IS_NOT_NULL(reg->int_map))          size += sizeof(int) * ONIG_CHAR_TABLE_SIZE;
-    if (IS_NOT_NULL(reg->int_map_backward)) size += sizeof(int) * ONIG_CHAR_TABLE_SIZE;
     if (IS_NOT_NULL(reg->repeat_range))     size += reg->repeat_range_alloc * sizeof(OnigRepeatRange);
     if (IS_NOT_NULL(reg->chain))            size += onig_memsize(reg->chain);
 
@@ -5919,6 +5827,12 @@ onig_reg_init(regex_t* reg, OnigOptionType option,
   if (IS_NULL(reg))
     return ONIGERR_INVALID_ARGUMENT;
 
+  (reg)->exact            = (UChar* )NULL;
+  (reg)->chain            = (regex_t* )NULL;
+  (reg)->p                = (UChar* )NULL;
+  (reg)->name_table       = (void* )NULL;
+  (reg)->repeat_range     = (OnigRepeatRange* )NULL;
+
   if (ONIGENC_IS_UNDEF(enc))
     return ONIGERR_DEFAULT_ENCODING_IS_NOT_SET;
 
@@ -5938,15 +5852,9 @@ onig_reg_init(regex_t* reg, OnigOptionType option,
   (reg)->options          = option;
   (reg)->syntax           = syntax;
   (reg)->optimize         = 0;
-  (reg)->exact            = (UChar* )NULL;
-  (reg)->int_map          = (int* )NULL;
-  (reg)->int_map_backward = (int* )NULL;
-  (reg)->chain            = (regex_t* )NULL;
 
-  (reg)->p                = (UChar* )NULL;
   (reg)->alloc            = 0;
   (reg)->used             = 0;
-  (reg)->name_table       = (void* )NULL;
 
   (reg)->case_fold_flag   = case_fold_flag;
   return 0;
diff --git a/lib/onigmo/regenc.c b/lib/onigmo/regenc.c
index 16d62fdf4..8cbb3dca2 100644
--- a/lib/onigmo/regenc.c
+++ b/lib/onigmo/regenc.c
@@ -3,7 +3,7 @@
 **********************************************************************/
 /*-
  * Copyright (c) 2002-2007  K.Kosako  <sndgk393 AT ybb DOT ne DOT jp>
- * Copyright (c) 2011-2016  K.Takata  <kentkt AT csc DOT jp>
+ * Copyright (c) 2011-2019  K.Takata  <kentkt AT csc DOT jp>
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -625,18 +625,23 @@ onigenc_single_byte_mbc_to_code(const UChar* p, const UChar* end ARG_UNUSED,
 }
 
 extern int
-onigenc_single_byte_code_to_mbclen(OnigCodePoint code ARG_UNUSED, OnigEncoding enc ARG_UNUSED)
+onigenc_single_byte_code_to_mbclen(OnigCodePoint code, OnigEncoding enc ARG_UNUSED)
 {
+  if (code > 0xff)
+    return ONIGERR_INVALID_CODE_POINT_VALUE;
   return 1;
 }
 
 extern int
 onigenc_single_byte_code_to_mbc(OnigCodePoint code, UChar *buf, OnigEncoding enc ARG_UNUSED)
 {
+  if (code > 0xff) {
 #ifdef RUBY
-  if (code > 0xff)
     rb_raise(rb_eRangeError, "%u out of char range", code);
+#else
+    return ONIGERR_INVALID_CODE_POINT_VALUE;
 #endif
+  }
   *buf = (UChar )(code & 0xff);
   return 1;
 }
@@ -951,6 +956,7 @@ onigenc_property_list_add_property(UChar* name, const OnigCodePoint* prop,
 }
 #endif
 
+#ifdef USE_CASE_MAP_API
 extern int
 onigenc_ascii_only_case_map(OnigCaseFoldType* flagP, const OnigUChar** pp, const OnigUChar* end,
 			    OnigUChar* to, OnigUChar* to_end, const struct OnigEncodingTypeST* enc)
@@ -969,7 +975,7 @@ onigenc_ascii_only_case_map(OnigCaseFoldType* flagP, const OnigUChar** pp, const
 
     if (code >= 'a' && code <= 'z' && (flags & ONIGENC_CASE_UPCASE)) {
       flags |= ONIGENC_CASE_MODIFIED;
-      code += 'A' - 'a';
+      code -= 'a' - 'A';
     } else if (code >= 'A' && code <= 'Z' &&
 	(flags & (ONIGENC_CASE_DOWNCASE | ONIGENC_CASE_FOLD))) {
       flags |= ONIGENC_CASE_MODIFIED;
@@ -997,7 +1003,7 @@ onigenc_single_byte_ascii_only_case_map(OnigCaseFoldType* flagP, const OnigUChar
 
     if (code >= 'a' && code <= 'z' && (flags & ONIGENC_CASE_UPCASE)) {
       flags |= ONIGENC_CASE_MODIFIED;
-      code += 'A' - 'a';
+      code -= 'a' - 'A';
     } else if (code >= 'A' && code <= 'Z' &&
 	(flags & (ONIGENC_CASE_DOWNCASE | ONIGENC_CASE_FOLD))) {
       flags |= ONIGENC_CASE_MODIFIED;
@@ -1010,3 +1016,4 @@ onigenc_single_byte_ascii_only_case_map(OnigCaseFoldType* flagP, const OnigUChar
   *flagP = flags;
   return (int )(to - to_start);
 }
+#endif
diff --git a/lib/onigmo/regenc.h b/lib/onigmo/regenc.h
index 969e114bf..56eb968d0 100644
--- a/lib/onigmo/regenc.h
+++ b/lib/onigmo/regenc.h
@@ -5,7 +5,7 @@
 **********************************************************************/
 /*-
  * Copyright (c) 2002-2008  K.Kosako  <sndgk393 AT ybb DOT ne DOT jp>
- * Copyright (c) 2011-2016  K.Takata  <kentkt AT csc DOT jp>
+ * Copyright (c) 2011-2019  K.Takata  <kentkt AT csc DOT jp>
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -122,18 +122,20 @@ typedef struct {
 } PosixBracketEntryType;
 
 #define POSIX_BRACKET_ENTRY_INIT(name, ctype) \
-  {(short int )(sizeof(name) - 1), (name), (ctype)}
+  {(short int )(sizeof(name) - 1), name, (ctype)}
 
 #ifndef numberof
 # define numberof(array) (int )(sizeof(array) / sizeof((array)[0]))
 #endif
 
 
+/* config */
 #define USE_CRNL_AS_LINE_TERMINATOR
 #define USE_UNICODE_PROPERTIES
 #define USE_UNICODE_AGE_PROPERTIES
 /* #define USE_UNICODE_CASE_FOLD_TURKISH_AZERI */
 /* #define USE_UNICODE_ALL_LINE_TERMINATORS */  /* see Unicode.org UTS #18 */
+#define USE_CASE_MAP_API
 
 
 #define ONIG_ENCODING_INIT_DEFAULT           ONIG_ENCODING_ASCII
diff --git a/lib/onigmo/regerror.c b/lib/onigmo/regerror.c
index aff635419..5569c8b3f 100644
--- a/lib/onigmo/regerror.c
+++ b/lib/onigmo/regerror.c
@@ -3,7 +3,7 @@
 **********************************************************************/
 /*-
  * Copyright (c) 2002-2007  K.Kosako  <sndgk393 AT ybb DOT ne DOT jp>
- * Copyright (c) 2011-2016  K.Takata  <kentkt AT csc DOT jp>
+ * Copyright (c) 2011-2019  K.Takata  <kentkt AT csc DOT jp>
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -63,14 +63,18 @@ onig_error_code_to_format(OnigPosition code)
     p = "parse depth limit over"; break;
   case ONIGERR_DEFAULT_ENCODING_IS_NOT_SET:
     p = "default multibyte-encoding is not set"; break;
+#if 0
   case ONIGERR_SPECIFIED_ENCODING_CANT_CONVERT_TO_WIDE_CHAR:
     p = "can't convert to wide-char on specified multibyte-encoding"; break;
+#endif
   case ONIGERR_INVALID_ARGUMENT:
     p = "invalid argument"; break;
   case ONIGERR_END_PATTERN_AT_LEFT_BRACE:
     p = "end pattern at left brace"; break;
+#if 0
   case ONIGERR_END_PATTERN_AT_LEFT_BRACKET:
     p = "end pattern at left bracket"; break;
+#endif
   case ONIGERR_EMPTY_CHAR_CLASS:
     p = "empty char-class"; break;
   case ONIGERR_PREMATURE_END_OF_CHAR_CLASS:
@@ -87,16 +91,20 @@ onig_error_code_to_format(OnigPosition code)
     p = "invalid control-code syntax"; break;
   case ONIGERR_CHAR_CLASS_VALUE_AT_END_OF_RANGE:
     p = "char-class value at end of range"; break;
+#if 0
   case ONIGERR_CHAR_CLASS_VALUE_AT_START_OF_RANGE:
     p = "char-class value at start of range"; break;
+#endif
   case ONIGERR_UNMATCHED_RANGE_SPECIFIER_IN_CHAR_CLASS:
     p = "unmatched range specifier in char-class"; break;
   case ONIGERR_TARGET_OF_REPEAT_OPERATOR_NOT_SPECIFIED:
     p = "target of repeat operator is not specified"; break;
   case ONIGERR_TARGET_OF_REPEAT_OPERATOR_INVALID:
     p = "target of repeat operator is invalid"; break;
+#if 0
   case ONIGERR_NESTED_REPEAT_OPERATOR:
     p = "nested repeat operator"; break;
+#endif
   case ONIGERR_UNMATCHED_CLOSE_PARENTHESIS:
     p = "unmatched close parenthesis"; break;
   case ONIGERR_END_PATTERN_WITH_UNMATCHED_PARENTHESIS:
@@ -121,14 +129,18 @@ onig_error_code_to_format(OnigPosition code)
     p = "upper is smaller than lower in repeat range"; break;
   case ONIGERR_EMPTY_RANGE_IN_CHAR_CLASS:
     p = "empty range in char class"; break;
+#if 0
   case ONIGERR_MISMATCH_CODE_LENGTH_IN_CLASS_RANGE:
     p = "mismatch multibyte code length in char-class range"; break;
+#endif
   case ONIGERR_TOO_MANY_MULTI_BYTE_RANGES:
     p = "too many multibyte code ranges are specified"; break;
   case ONIGERR_TOO_SHORT_MULTI_BYTE_STRING:
     p = "too short multibyte code string"; break;
+#if 0
   case ONIGERR_TOO_BIG_BACKREF_NUMBER:
     p = "too big backref number"; break;
+#endif
   case ONIGERR_INVALID_BACKREF:
 #ifdef USE_NAMED_GROUP
     p = "invalid backref number/name"; break;
@@ -161,8 +173,10 @@ onig_error_code_to_format(OnigPosition code)
     p = "multiplex definition name <%n> call"; break;
   case ONIGERR_NEVER_ENDING_RECURSION:
     p = "never ending recursion"; break;
+#ifdef USE_CAPTURE_HISTORY
   case ONIGERR_GROUP_NUMBER_OVER_FOR_CAPTURE_HISTORY:
     p = "group number is too big for capture history"; break;
+#endif
   case ONIGERR_INVALID_CHAR_PROPERTY_NAME:
     p = "invalid character property name {%n}"; break;
   case ONIGERR_TOO_MANY_CAPTURE_GROUPS:
@@ -242,8 +256,8 @@ static int to_ascii(OnigEncoding enc, UChar *s, UChar *end,
 }
 
 
-/* for ONIG_MAX_ERROR_MESSAGE_LEN */
-#define MAX_ERROR_PAR_LEN   30
+/* < ONIG_MAX_ERROR_MESSAGE_LEN - max length of messages with %n */
+#define MAX_ERROR_PAR_LEN   50
 
 extern int
 onig_error_code_to_str(UChar* s, OnigPosition code, ...)
@@ -356,7 +370,8 @@ onig_vsnprintf_with_pattern(UChar buf[], int bufsize, OnigEncoding enc,
 	*s++ = *p++;
       }
       else if (!ONIGENC_IS_CODE_PRINT(enc, *p) &&
-	       !ONIGENC_IS_CODE_SPACE(enc, *p)) {
+	       (!ONIGENC_IS_CODE_SPACE(enc, *p) ||
+                ONIGENC_IS_CODE_CNTRL(enc, *p))) {
 	sprint_byte_with_x((char* )bs, (unsigned int )(*p++));
 	len = onigenc_str_bytelen_null(ONIG_ENCODING_ASCII, bs);
         bp = bs;
diff --git a/lib/onigmo/regexec.c b/lib/onigmo/regexec.c
index 6ac18bc33..9b3e7e624 100644
--- a/lib/onigmo/regexec.c
+++ b/lib/onigmo/regexec.c
@@ -2,8 +2,8 @@
   regexec.c -  Onigmo (Oniguruma-mod) (regular expression library)
 **********************************************************************/
 /*-
- * Copyright (c) 2002-2008  K.Kosako  <sndgk393 AT ybb DOT ne DOT jp>
- * Copyright (c) 2011-2016  K.Takata  <kentkt AT csc DOT jp>
+ * Copyright (c) 2002-2018  K.Kosako  <sndgk393 AT ybb DOT ne DOT jp>
+ * Copyright (c) 2011-2019  K.Takata  <kentkt AT csc DOT jp>
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -323,7 +323,9 @@ onig_region_init(OnigRegion* region)
   region->allocated    = 0;
   region->beg          = (OnigPosition* )0;
   region->end          = (OnigPosition* )0;
+#ifdef USE_CAPTURE_HISTORY
   region->history_root = (OnigCaptureTreeNode* )0;
+#endif
 }
 
 extern OnigRegion*
@@ -1461,9 +1463,9 @@ match_at(regex_t* reg, const UChar* str, const UChar* end,
 # define CASE(x) L_##x: sbegin = s; OPCODE_EXEC_HOOK;
 # define DEFAULT L_DEFAULT:
 # define NEXT sprev = sbegin; JUMP
-# define JUMP goto *oplabels[*p++]
+# define JUMP RB_GNUC_EXTENSION_BLOCK(goto *oplabels[*p++])
 
-  static const void *oplabels[] = {
+  RB_GNUC_EXTENSION static const void *oplabels[] = {
     &&L_OP_FINISH,               /* matching process terminator (no more alternative) */
     &&L_OP_END,                  /* pattern code terminator (success end) */
 
@@ -1808,7 +1810,6 @@ match_at(regex_t* reg, const UChar* str, const UChar* end,
 
       /* default behavior: return first-matching result. */
       goto finish;
-      NEXT;
 
     CASE(OP_EXACT1)  MOP_IN(OP_EXACT1);
       DATA_ENSURE(1);
@@ -2369,7 +2370,6 @@ match_at(regex_t* reg, const UChar* str, const UChar* end,
 	}
       }
       goto fail;
-      NEXT;
 
     CASE(OP_ASCII_WORD_BEGIN)  MOP_IN(OP_ASCII_WORD_BEGIN);
       if (DATA_ENSURE_CHECK1 && ONIGENC_IS_MBC_ASCII_WORD(encode, s, end)) {
@@ -2379,7 +2379,6 @@ match_at(regex_t* reg, const UChar* str, const UChar* end,
 	}
       }
       goto fail;
-      NEXT;
 
     CASE(OP_WORD_END)  MOP_IN(OP_WORD_END);
       if (!ON_STR_BEGIN(s) && ONIGENC_IS_MBC_WORD(encode, sprev, end)) {
@@ -2389,7 +2388,6 @@ match_at(regex_t* reg, const UChar* str, const UChar* end,
 	}
       }
       goto fail;
-      NEXT;
 
     CASE(OP_ASCII_WORD_END)  MOP_IN(OP_ASCII_WORD_END);
       if (!ON_STR_BEGIN(s) && ONIGENC_IS_MBC_ASCII_WORD(encode, sprev, end)) {
@@ -2399,7 +2397,6 @@ match_at(regex_t* reg, const UChar* str, const UChar* end,
 	}
       }
       goto fail;
-      NEXT;
 #endif
 
     CASE(OP_BEGIN_BUF)  MOP_IN(OP_BEGIN_BUF);
@@ -2432,7 +2429,6 @@ match_at(regex_t* reg, const UChar* str, const UChar* end,
 	JUMP;
       }
       goto fail;
-      NEXT;
 
     CASE(OP_END_LINE)  MOP_IN(OP_END_LINE);
       if (ON_STR_END(s)) {
@@ -2451,7 +2447,6 @@ match_at(regex_t* reg, const UChar* str, const UChar* end,
 	JUMP;
       }
       goto fail;
-      NEXT;
 
     CASE(OP_SEMI_END_BUF)  MOP_IN(OP_SEMI_END_BUF);
       if (ON_STR_END(s)) {
@@ -2483,7 +2478,6 @@ match_at(regex_t* reg, const UChar* str, const UChar* end,
 #endif
       }
       goto fail;
-      NEXT;
 
     CASE(OP_BEGIN_POSITION)  MOP_IN(OP_BEGIN_POSITION);
       if (s != msa->gpos)
@@ -2501,6 +2495,7 @@ match_at(regex_t* reg, const UChar* str, const UChar* end,
     CASE(OP_MEMORY_START)  MOP_IN(OP_MEMORY_START);
       GET_MEMNUM_INC(mem, p);
       mem_start_stk[mem] = (OnigStackIndex )((void* )s);
+      mem_end_stk[mem] = INVALID_STACK_INDEX;
       MOP_OUT;
       JUMP;
 
@@ -2548,12 +2543,10 @@ match_at(regex_t* reg, const UChar* str, const UChar* end,
     CASE(OP_BACKREF1)  MOP_IN(OP_BACKREF1);
       mem = 1;
       goto backref;
-      NEXT;
 
     CASE(OP_BACKREF2)  MOP_IN(OP_BACKREF2);
       mem = 2;
       goto backref;
-      NEXT;
 
     CASE(OP_BACKREFN)  MOP_IN(OP_BACKREFN);
       GET_MEMNUM_INC(mem, p);
@@ -2963,7 +2956,6 @@ match_at(regex_t* reg, const UChar* str, const UChar* end,
       STACK_GET_REPEAT(mem, stkp);
       si = GET_STACK_INDEX(stkp);
       goto repeat_inc;
-      NEXT;
 
     CASE(OP_REPEAT_INC_NG)  MOP_IN(OP_REPEAT_INC_NG);
       GET_MEMNUM_INC(mem, p); /* mem: OP_REPEAT ID */
@@ -2996,7 +2988,6 @@ match_at(regex_t* reg, const UChar* str, const UChar* end,
       STACK_GET_REPEAT(mem, stkp);
       si = GET_STACK_INDEX(stkp);
       goto repeat_inc_ng;
-      NEXT;
 
     CASE(OP_PUSH_POS)  MOP_IN(OP_PUSH_POS);
       STACK_PUSH_POS(s, sprev, pkeep);
@@ -3021,7 +3012,6 @@ match_at(regex_t* reg, const UChar* str, const UChar* end,
     CASE(OP_FAIL_POS)  MOP_IN(OP_FAIL_POS);
       STACK_POP_TIL_POS_NOT;
       goto fail;
-      NEXT;
 
     CASE(OP_PUSH_STOP_BT)  MOP_IN(OP_PUSH_STOP_BT);
       STACK_PUSH_STOP_BT;
@@ -3062,7 +3052,6 @@ match_at(regex_t* reg, const UChar* str, const UChar* end,
     CASE(OP_FAIL_LOOK_BEHIND_NOT)  MOP_IN(OP_FAIL_LOOK_BEHIND_NOT);
       STACK_POP_TIL_LOOK_BEHIND_NOT;
       goto fail;
-      NEXT;
 
     CASE(OP_PUSH_ABSENT_POS)  MOP_IN(OP_PUSH_ABSENT_POS);
       /* Save the absent-start-pos and the original end-pos. */
@@ -3119,7 +3108,6 @@ match_at(regex_t* reg, const UChar* str, const UChar* end,
 #endif
       STACK_POP_TIL_ABSENT;
       goto fail;
-      NEXT;
 
 #ifdef USE_SUBEXP_CALL
     CASE(OP_CALL)  MOP_IN(OP_CALL);
@@ -3149,7 +3137,6 @@ match_at(regex_t* reg, const UChar* str, const UChar* end,
 
     CASE(OP_FINISH)
       goto finish;
-      NEXT;
 
     CASE(OP_FAIL)
       if (0) {
@@ -3345,219 +3332,6 @@ slow_search_backward_ic(OnigEncoding enc, int case_fold_flag,
   return (UChar* )NULL;
 }
 
-#ifndef USE_SUNDAY_QUICK_SEARCH
-/* Boyer-Moore-Horspool search applied to a multibyte string */
-static UChar*
-bm_search_notrev(regex_t* reg, const UChar* target, const UChar* target_end,
-		 const UChar* text, const UChar* text_end,
-		 const UChar* text_range)
-{
-  const UChar *s, *se, *t, *p, *end;
-  const UChar *tail;
-  ptrdiff_t skip, tlen1;
-
-# ifdef ONIG_DEBUG_SEARCH
-  fprintf(stderr, "bm_search_notrev: text: %"PRIuPTR" (%p), text_end: %"PRIuPTR" (%p), text_range: %"PRIuPTR" (%p)\n",
-	  (uintptr_t )text, text, (uintptr_t )text_end, text_end, (uintptr_t )text_range, text_range);
-# endif
-
-  tail = target_end - 1;
-  tlen1 = tail - target;
-  end = text_range;
-  if (end + tlen1 > text_end)
-    end = text_end - tlen1;
-
-  s = text;
-
-  if (IS_NULL(reg->int_map)) {
-    while (s < end) {
-      p = se = s + tlen1;
-      t = tail;
-      while (*p == *t) {
-	if (t == target) return (UChar* )s;
-	p--; t--;
-      }
-      skip = reg->map[*se];
-      t = s;
-      do {
-	s += enclen(reg->enc, s, end);
-      } while ((s - t) < skip && s < end);
-    }
-  }
-  else {
-# if OPT_EXACT_MAXLEN >= ONIG_CHAR_TABLE_SIZE
-    while (s < end) {
-      p = se = s + tlen1;
-      t = tail;
-      while (*p == *t) {
-	if (t == target) return (UChar* )s;
-	p--; t--;
-      }
-      skip = reg->int_map[*se];
-      t = s;
-      do {
-	s += enclen(reg->enc, s, end);
-      } while ((s - t) < skip && s < end);
-    }
-# endif
-  }
-
-  return (UChar* )NULL;
-}
-
-/* Boyer-Moore-Horspool search */
-static UChar*
-bm_search(regex_t* reg, const UChar* target, const UChar* target_end,
-	  const UChar* text, const UChar* text_end, const UChar* text_range)
-{
-  const UChar *s, *t, *p, *end;
-  const UChar *tail;
-
-# ifdef ONIG_DEBUG_SEARCH
-  fprintf(stderr, "bm_search: text: %"PRIuPTR" (%p), text_end: %"PRIuPTR" (%p), text_range: %"PRIuPTR" (%p)\n",
-	  (uintptr_t )text, text, (uintptr_t )text_end, text_end, (uintptr_t )text_range, text_range);
-# endif
-
-  end = text_range + (target_end - target) - 1;
-  if (end > text_end)
-    end = text_end;
-
-  tail = target_end - 1;
-  s = text + (target_end - target) - 1;
-  if (IS_NULL(reg->int_map)) {
-    while (s < end) {
-      p = s;
-      t = tail;
-# ifdef ONIG_DEBUG_SEARCH
-      fprintf(stderr, "bm_search_loop: pos: %"PRIdPTR" %s\n",
-	  (intptr_t )(s - text), s);
-# endif
-      while (*p == *t) {
-	if (t == target) return (UChar* )p;
-	p--; t--;
-      }
-      s += reg->map[*s];
-    }
-  }
-  else { /* see int_map[] */
-# if OPT_EXACT_MAXLEN >= ONIG_CHAR_TABLE_SIZE
-    while (s < end) {
-      p = s;
-      t = tail;
-      while (*p == *t) {
-	if (t == target) return (UChar* )p;
-	p--; t--;
-      }
-      s += reg->int_map[*s];
-    }
-# endif
-  }
-  return (UChar* )NULL;
-}
-
-/* Boyer-Moore-Horspool search applied to a multibyte string (ignore case) */
-static UChar*
-bm_search_notrev_ic(regex_t* reg, const UChar* target, const UChar* target_end,
-		    const UChar* text, const UChar* text_end,
-		    const UChar* text_range)
-{
-  const UChar *s, *se, *t, *end;
-  const UChar *tail;
-  ptrdiff_t skip, tlen1;
-  OnigEncoding enc = reg->enc;
-  int case_fold_flag = reg->case_fold_flag;
-
-# ifdef ONIG_DEBUG_SEARCH
-  fprintf(stderr, "bm_search_notrev_ic: text: %d (%p), text_end: %d (%p), text_range: %d (%p)\n",
-	  (int )text, text, (int )text_end, text_end, (int )text_range, text_range);
-# endif
-
-  tail = target_end - 1;
-  tlen1 = tail - target;
-  end = text_range;
-  if (end + tlen1 > text_end)
-    end = text_end - tlen1;
-
-  s = text;
-
-  if (IS_NULL(reg->int_map)) {
-    while (s < end) {
-      se = s + tlen1;
-      if (str_lower_case_match(enc, case_fold_flag, target, target_end,
-			       s, se + 1))
-	return (UChar* )s;
-      skip = reg->map[*se];
-      t = s;
-      do {
-	s += enclen(reg->enc, s, end);
-      } while ((s - t) < skip && s < end);
-    }
-  }
-  else {
-# if OPT_EXACT_MAXLEN >= ONIG_CHAR_TABLE_SIZE
-    while (s < end) {
-      se = s + tlen1;
-      if (str_lower_case_match(enc, case_fold_flag, target, target_end,
-			       s, se + 1))
-	return (UChar* )s;
-      skip = reg->int_map[*se];
-      t = s;
-      do {
-	s += enclen(reg->enc, s, end);
-      } while ((s - t) < skip && s < end);
-    }
-# endif
-  }
-
-  return (UChar* )NULL;
-}
-
-/* Boyer-Moore-Horspool search (ignore case) */
-static UChar*
-bm_search_ic(regex_t* reg, const UChar* target, const UChar* target_end,
-	     const UChar* text, const UChar* text_end, const UChar* text_range)
-{
-  const UChar *s, *p, *end;
-  const UChar *tail;
-  OnigEncoding enc = reg->enc;
-  int case_fold_flag = reg->case_fold_flag;
-
-# ifdef ONIG_DEBUG_SEARCH
-  fprintf(stderr, "bm_search_ic: text: %d (%p), text_end: %d (%p), text_range: %d (%p)\n",
-	  (int )text, text, (int )text_end, text_end, (int )text_range, text_range);
-# endif
-
-  end = text_range + (target_end - target) - 1;
-  if (end > text_end)
-    end = text_end;
-
-  tail = target_end - 1;
-  s = text + (target_end - target) - 1;
-  if (IS_NULL(reg->int_map)) {
-    while (s < end) {
-      p = s - (target_end - target) + 1;
-      if (str_lower_case_match(enc, case_fold_flag, target, target_end,
-			       p, s + 1))
-	return (UChar* )p;
-      s += reg->map[*s];
-    }
-  }
-  else { /* see int_map[] */
-# if OPT_EXACT_MAXLEN >= ONIG_CHAR_TABLE_SIZE
-    while (s < end) {
-      p = s - (target_end - target) + 1;
-      if (str_lower_case_match(enc, case_fold_flag, target, target_end,
-			       p, s + 1))
-	return (UChar* )p;
-      s += reg->int_map[*s];
-    }
-# endif
-  }
-  return (UChar* )NULL;
-}
-
-#else /* USE_SUNDAY_QUICK_SEARCH */
-
 /* Sunday's quick search applied to a multibyte string */
 static UChar*
 bm_search_notrev(regex_t* reg, const UChar* target, const UChar* target_end,
@@ -3582,39 +3356,19 @@ bm_search_notrev(regex_t* reg, const UChar* target, const UChar* target_end,
 
   s = text;
 
-  if (IS_NULL(reg->int_map)) {
-    while (s < end) {
-      p = se = s + tlen1;
-      t = tail;
-      while (*p == *t) {
-	if (t == target) return (UChar* )s;
-	p--; t--;
-      }
-      if (s + 1 >= end) break;
-      skip = reg->map[se[1]];
-      t = s;
-      do {
-	s += enclen(enc, s, end);
-      } while ((s - t) < skip && s < end);
-    }
-  }
-  else {
-# if OPT_EXACT_MAXLEN >= ONIG_CHAR_TABLE_SIZE
-    while (s < end) {
-      p = se = s + tlen1;
-      t = tail;
-      while (*p == *t) {
-	if (t == target) return (UChar* )s;
-	p--; t--;
-      }
-      if (s + 1 >= end) break;
-      skip = reg->int_map[se[1]];
-      t = s;
-      do {
-	s += enclen(enc, s, end);
-      } while ((s - t) < skip && s < end);
+  while (s < end) {
+    p = se = s + tlen1;
+    t = tail;
+    while (*p == *t) {
+      if (t == target) return (UChar* )s;
+      p--; t--;
     }
-# endif
+    if (s + 1 >= end) break;
+    skip = reg->map[se[1]];
+    t = s;
+    do {
+      s += enclen(enc, s, end);
+    } while ((s - t) < skip && s < end);
   }
 
   return (UChar* )NULL;
@@ -3641,32 +3395,17 @@ bm_search(regex_t* reg, const UChar* target, const UChar* target_end,
     end = text_end;
 
   s = text + tlen1;
-  if (IS_NULL(reg->int_map)) {
-    while (s < end) {
-      p = s;
-      t = tail;
-      while (*p == *t) {
-	if (t == target) return (UChar* )p;
-	p--; t--;
-      }
-      if (s + 1 >= end) break;
-      s += reg->map[s[1]];
-    }
-  }
-  else { /* see int_map[] */
-# if OPT_EXACT_MAXLEN >= ONIG_CHAR_TABLE_SIZE
-    while (s < end) {
-      p = s;
-      t = tail;
-      while (*p == *t) {
-	if (t == target) return (UChar* )p;
-	p--; t--;
-      }
-      if (s + 1 >= end) break;
-      s += reg->int_map[s[1]];
+  while (s < end) {
+    p = s;
+    t = tail;
+    while (*p == *t) {
+      if (t == target) return (UChar* )p;
+      p--; t--;
     }
-# endif
+    if (s + 1 >= end) break;
+    s += reg->map[s[1]];
   }
+
   return (UChar* )NULL;
 }
 
@@ -3695,35 +3434,17 @@ bm_search_notrev_ic(regex_t* reg, const UChar* target, const UChar* target_end,
 
   s = text;
 
-  if (IS_NULL(reg->int_map)) {
-    while (s < end) {
-      se = s + tlen1;
-      if (str_lower_case_match(enc, case_fold_flag, target, target_end,
-			       s, se + 1))
-	return (UChar* )s;
-      if (s + 1 >= end) break;
-      skip = reg->map[se[1]];
-      t = s;
-      do {
-	s += enclen(enc, s, end);
-      } while ((s - t) < skip && s < end);
-    }
-  }
-  else {
-# if OPT_EXACT_MAXLEN >= ONIG_CHAR_TABLE_SIZE
-    while (s < end) {
-      se = s + tlen1;
-      if (str_lower_case_match(enc, case_fold_flag, target, target_end,
-			       s, se + 1))
-	return (UChar* )s;
-      if (s + 1 >= end) break;
-      skip = reg->int_map[se[1]];
-      t = s;
-      do {
-	s += enclen(enc, s, end);
-      } while ((s - t) < skip && s < end);
-    }
-# endif
+  while (s < end) {
+    se = s + tlen1;
+    if (str_lower_case_match(enc, case_fold_flag, target, target_end,
+			     s, se + 1))
+      return (UChar* )s;
+    if (s + 1 >= end) break;
+    skip = reg->map[se[1]];
+    t = s;
+    do {
+      s += enclen(enc, s, end);
+    } while ((s - t) < skip && s < end);
   }
 
   return (UChar* )NULL;
@@ -3752,83 +3473,17 @@ bm_search_ic(regex_t* reg, const UChar* target, const UChar* target_end,
     end = text_end;
 
   s = text + tlen1;
-  if (IS_NULL(reg->int_map)) {
-    while (s < end) {
-      p = s - tlen1;
-      if (str_lower_case_match(enc, case_fold_flag, target, target_end,
-			       p, s + 1))
-	return (UChar* )p;
-      if (s + 1 >= end) break;
-      s += reg->map[s[1]];
-    }
-  }
-  else { /* see int_map[] */
-# if OPT_EXACT_MAXLEN >= ONIG_CHAR_TABLE_SIZE
-    while (s < end) {
-      p = s - tlen1;
-      if (str_lower_case_match(enc, case_fold_flag, target, target_end,
-			       p, s + 1))
-	return (UChar* )p;
-      if (s + 1 >= end) break;
-      s += reg->int_map[s[1]];
-    }
-# endif
-  }
-  return (UChar* )NULL;
-}
-#endif /* USE_SUNDAY_QUICK_SEARCH */
-
-#ifdef USE_INT_MAP_BACKWARD
-static int
-set_bm_backward_skip(UChar* s, UChar* end, OnigEncoding enc ARG_UNUSED,
-		     int** skip)
-{
-  int i, len;
-
-  if (IS_NULL(*skip)) {
-    *skip = (int* )xmalloc(sizeof(int) * ONIG_CHAR_TABLE_SIZE);
-    if (IS_NULL(*skip)) return ONIGERR_MEMORY;
-  }
-
-  len = (int )(end - s);
-  for (i = 0; i < ONIG_CHAR_TABLE_SIZE; i++)
-    (*skip)[i] = len;
-
-  for (i = len - 1; i > 0; i--)
-    (*skip)[s[i]] = i;
-
-  return 0;
-}
-
-static UChar*
-bm_search_backward(regex_t* reg, const UChar* target, const UChar* target_end,
-		   const UChar* text, const UChar* adjust_text,
-		   const UChar* text_end, const UChar* text_start)
-{
-  const UChar *s, *t, *p;
-
-  s = text_end - (target_end - target);
-  if (text_start < s)
-    s = text_start;
-  else
-    s = ONIGENC_LEFT_ADJUST_CHAR_HEAD(reg->enc, adjust_text, s, text_end);
-
-  while (s >= text) {
-    p = s;
-    t = target;
-    while (t < target_end && *p == *t) {
-      p++; t++;
-    }
-    if (t == target_end)
-      return (UChar* )s;
-
-    s -= reg->int_map_backward[*s];
-    s = ONIGENC_LEFT_ADJUST_CHAR_HEAD(reg->enc, adjust_text, s, text_end);
+  while (s < end) {
+    p = s - tlen1;
+    if (str_lower_case_match(enc, case_fold_flag, target, target_end,
+			     p, s + 1))
+      return (UChar* )p;
+    if (s + 1 >= end) break;
+    s += reg->map[s[1]];
   }
 
   return (UChar* )NULL;
 }
-#endif
 
 static UChar*
 map_search(OnigEncoding enc, UChar map[],
@@ -4063,21 +3718,7 @@ backward_search_range(regex_t* reg, const UChar* str, const UChar* end,
 
   case ONIG_OPTIMIZE_EXACT_BM:
   case ONIG_OPTIMIZE_EXACT_BM_NOT_REV:
-#ifdef USE_INT_MAP_BACKWARD
-    if (IS_NULL(reg->int_map_backward)) {
-      int r;
-      if (s - range < BM_BACKWARD_SEARCH_LENGTH_THRESHOLD)
-	goto exact_method;
-
-      r = set_bm_backward_skip(reg->exact, reg->exact_end, reg->enc,
-			       &(reg->int_map_backward));
-      if (r) return r;
-    }
-    p = bm_search_backward(reg, reg->exact, reg->exact_end, range, adjrange,
-			   end, p);
-#else
     goto exact_method;
-#endif
     break;
 
   case ONIG_OPTIMIZE_MAP:
@@ -4616,4 +4257,3 @@ onig_copy_encoding(OnigEncodingType *to, OnigEncoding from)
 {
   *to = *from;
 }
-
diff --git a/lib/onigmo/regint.h b/lib/onigmo/regint.h
index a2f5bbba1..a58d3b8f0 100644
--- a/lib/onigmo/regint.h
+++ b/lib/onigmo/regint.h
@@ -5,7 +5,7 @@
 **********************************************************************/
 /*-
  * Copyright (c) 2002-2013  K.Kosako  <sndgk393 AT ybb DOT ne DOT jp>
- * Copyright (c) 2011-2016  K.Takata  <kentkt AT csc DOT jp>
+ * Copyright (c) 2011-2019  K.Takata  <kentkt AT csc DOT jp>
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -81,13 +81,12 @@
 /* #define USE_OP_PUSH_OR_JUMP_EXACT */
 #define USE_QTFR_PEEK_NEXT
 #define USE_ST_LIBRARY
-#define USE_SUNDAY_QUICK_SEARCH
 
 #define INIT_MATCH_STACK_SIZE                     160
 #define DEFAULT_MATCH_STACK_LIMIT_SIZE              0 /* unlimited */
 #define DEFAULT_PARSE_DEPTH_LIMIT                4096
 
-#define OPT_EXACT_MAXLEN   24
+#define OPT_EXACT_MAXLEN   24	/* This must be smaller than ONIG_CHAR_TABLE_SIZE. */
 
 /* check config */
 #if defined(USE_PERL_SUBEXP_CALL) || defined(USE_CAPITAL_P_NAMED_GROUP)
@@ -193,6 +192,14 @@
 /* */
 # define onig_st_is_member              st_is_member
 
+# ifdef __GNUC__
+#  define RB_GNUC_EXTENSION __extension__
+#  define RB_GNUC_EXTENSION_BLOCK(x) __extension__ ({ x; })
+# else
+#  define RB_GNUC_EXTENSION
+#  define RB_GNUC_EXTENSION_BLOCK(x) (x)
+# endif
+
 #endif /* RUBY */
 
 #define STATE_CHECK_STRING_THRESHOLD_LEN             7
diff --git a/lib/onigmo/regparse.c b/lib/onigmo/regparse.c
index 431aad92a..49b7e9c84 100644
--- a/lib/onigmo/regparse.c
+++ b/lib/onigmo/regparse.c
@@ -3,7 +3,7 @@
 **********************************************************************/
 /*-
  * Copyright (c) 2002-2008  K.Kosako  <sndgk393 AT ybb DOT ne DOT jp>
- * Copyright (c) 2011-2016  K.Takata  <kentkt AT csc DOT jp>
+ * Copyright (c) 2011-2019  K.Takata  <kentkt AT csc DOT jp>
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -108,7 +108,7 @@ extern void onig_set_verb_warn_func(OnigWarnFunc f)
   onig_verb_warn = f;
 }
 
-static void CC_DUP_WARN(ScanEnv *env);
+static void CC_DUP_WARN(ScanEnv *env, OnigCodePoint from, OnigCodePoint to);
 
 
 static unsigned int ParseDepthLimit = DEFAULT_PARSE_DEPTH_LIMIT;
@@ -174,7 +174,7 @@ bbuf_clone(BBuf** rto, BBuf* from)
 
 
 #define BITSET_SET_BIT_CHKDUP(bs, pos) do { \
-  if (BITSET_AT(bs, pos)) CC_DUP_WARN(env); \
+  if (BITSET_AT(bs, pos)) CC_DUP_WARN(env, pos, pos); \
   BS_ROOM(bs, pos) |= BS_BIT(pos); \
 } while (0)
 
@@ -1315,7 +1315,7 @@ node_new_quantifier(int lower, int upper, int by_number)
   NQTFR(node)->target_empty_info = NQ_TARGET_ISNOT_EMPTY;
   NQTFR(node)->head_exact        = NULL_NODE;
   NQTFR(node)->next_head_exact   = NULL_NODE;
-  NQTFR(node)->is_refered        = 0;
+  NQTFR(node)->is_referred       = 0;
   if (by_number != 0)
     NQTFR(node)->state |= NST_BY_NUMBER;
 
@@ -1720,7 +1720,7 @@ add_code_range_to_buf0(BBuf** pbuf, ScanEnv* env, OnigCodePoint from, OnigCodePo
   if (inc_n != 1) {
     if (checkdup && from <= data[low*2+1]
 	&& (data[low*2] <= from || data[low*2+1] <= to))
-      CC_DUP_WARN(env);
+      CC_DUP_WARN(env, from, to);
     if (from > data[low*2])
       from = data[low*2];
     if (to < data[(high - 1)*2 + 1])
@@ -2886,14 +2886,18 @@ CLOSE_BRACKET_WITHOUT_ESC_WARN(ScanEnv* env, UChar* c)
 #endif
 
 static void
-CC_DUP_WARN(ScanEnv *env)
+CC_DUP_WARN(ScanEnv *env, OnigCodePoint from ARG_UNUSED, OnigCodePoint to ARG_UNUSED)
 {
   if (onig_warn == onig_null_warn || !RTEST(ruby_verbose)) return ;
 
   if (IS_SYNTAX_BV(env->syntax, ONIG_SYN_WARN_CC_DUP) &&
       !(env->warnings_flag & ONIG_SYN_WARN_CC_DUP)) {
+#ifdef WARN_ALL_CC_DUP
+    onig_syntax_warn(env, "character class has duplicated range: %04x-%04x", from, to);
+#else
     env->warnings_flag |= ONIG_SYN_WARN_CC_DUP;
     onig_syntax_warn(env, "character class has duplicated range");
+#endif
   }
 }
 
@@ -3319,6 +3323,7 @@ fetch_token(OnigToken* tok, UChar** src, UChar* end, ScanEnv* env)
   tok->backp = p;
 
   PFETCH(c);
+	if (p > end) return ONIGERR_PREMATURE_END_OF_CHAR_CLASS;
   if (IS_MC_ESC_CODE(c, syn)) {
     if (PEND) return ONIGERR_END_PATTERN_AT_ESCAPE;
 
@@ -3906,7 +3911,11 @@ fetch_token(OnigToken* tok, UChar** src, UChar* end, ScanEnv* env)
 
 	  if (c == 'R' || c == '0') {
 	    PINC;   /* skip 'R' / '0' */
-	    if (!PPEEK_IS(')')) return ONIGERR_INVALID_GROUP_NAME;
+	    if (!PPEEK_IS(')')) {
+	      r = ONIGERR_INVALID_GROUP_NAME;
+	      onig_scan_env_set_error_string(env, r, p - 1, p + 1);
+	      return r;
+	    }
 	    PINC;   /* skip ')' */
 	    name_end = name = p;
 	    gnum = 0;
@@ -5697,731 +5706,329 @@ static int
 propname2ctype(ScanEnv* env, const char* propname)
 {
   UChar* name = (UChar* )propname;
+  UChar* name_end = name + strlen(propname);
   int ctype = env->enc->property_name_to_ctype(ONIG_ENCODING_ASCII,
-      name, name + strlen(propname));
+      name, name_end);
+  if (ctype < 0) {
+    onig_scan_env_set_error_string(env, ctype, name, name_end);
+  }
   return ctype;
 }
 
 static int
-node_extended_grapheme_cluster(Node** np, ScanEnv* env)
+add_property_to_cc(CClassNode* cc, const char* propname, int not, ScanEnv* env)
 {
-  Node* tmp = NULL;
-  Node* np1 = NULL;
-  Node* list = NULL;
-  Node* list2 = NULL;
-  Node* alt = NULL;
-  Node* alt2 = NULL;
-  BBuf *pbuf1 = NULL;
-  int r = 0;
-  int num1;
-  UChar buf[ONIGENC_CODE_TO_MBC_MAXLEN * 2];
-  OnigOptionType option;
-
-#ifdef USE_UNICODE_PROPERTIES
-  if (ONIGENC_IS_UNICODE(env->enc)) {
-    /* UTF-8, UTF-16BE/LE, UTF-32BE/LE */
-    CClassNode* cc;
-    OnigCodePoint sb_out = (ONIGENC_MBC_MINLEN(env->enc) > 1) ? 0x00 : 0x80;
-    int extend = propname2ctype(env, "Grapheme_Cluster_Break=Extend");
-
-    /* Prepend*
-     * ( RI-sequence | Hangul-Syllable | !Control )
-     * ( Grapheme_Extend | SpacingMark )* */
-
-    /* ( Grapheme_Extend | SpacingMark )* */
-    np1 = node_new_cclass();
-    if (IS_NULL(np1)) goto err;
-    cc = NCCLASS(np1);
-    r = add_ctype_to_cc(cc, extend, 0, 0, env);
-    if (r != 0) goto err;
-    r = add_ctype_to_cc(cc, propname2ctype(env, "Grapheme_Cluster_Break=SpacingMark"), 0, 0, env);
-    if (r != 0) goto err;
-    r = add_code_range(&(cc->mbuf), env, 0x200D, 0x200D);
-    if (r != 0) goto err;
-
-    tmp = node_new_quantifier(0, REPEAT_INFINITE, 0);
-    if (IS_NULL(tmp)) goto err;
-    NQTFR(tmp)->target = np1;
-    np1 = tmp;
-
-    tmp = node_new_list(np1, NULL_NODE);
-    if (IS_NULL(tmp)) goto err;
-    list = tmp;
-    np1 = NULL;
-
-    /* ( RI-sequence | Hangul-Syllable | !Control ) */
-    /* !Control */
-    np1 = node_new_cclass();
-    if (IS_NULL(np1)) goto err;
-    cc = NCCLASS(np1);
-    r = add_ctype_to_cc(cc, propname2ctype(env, "Grapheme_Cluster_Break=Control"), 1, 0, env);
-    if (r != 0) goto err;
-    if (ONIGENC_MBC_MINLEN(env->enc) > 1) {
-      BBuf *pbuf2 = NULL;
-      r = add_code_range(&pbuf1, env, 0x0a, 0x0a);
-      if (r != 0) goto err;
-      r = add_code_range(&pbuf1, env, 0x0d, 0x0d);
-      if (r != 0) goto err;
-      r = and_code_range_buf(cc->mbuf, 0, pbuf1, 1, &pbuf2, env);
-      if (r != 0) {
-	bbuf_free(pbuf2);
-	goto err;
-      }
-      bbuf_free(pbuf1);
-      pbuf1 = NULL;
-      bbuf_free(cc->mbuf);
-      cc->mbuf = pbuf2;
-    }
-    else {
-      BITSET_CLEAR_BIT(cc->bs, 0x0a);
-      BITSET_CLEAR_BIT(cc->bs, 0x0d);
-    }
-
-    tmp = onig_node_new_alt(np1, NULL_NODE);
-    if (IS_NULL(tmp)) goto err;
-    alt = tmp;
-    np1 = NULL;
-
-    /* Hangul-Syllable
-     *  := L* V+ T*
-     *  | L* LV V* T*
-     *  | L* LVT T*
-     *  | L+
-     *  | T+ */
-
-    /* T+ */
-    np1 = node_new_cclass();
-    if (IS_NULL(np1)) goto err;
-    cc = NCCLASS(np1);
-    r = add_ctype_to_cc(cc, propname2ctype(env, "Grapheme_Cluster_Break=T"), 0, 0, env);
-    if (r != 0) goto err;
-
-    tmp = node_new_quantifier(1, REPEAT_INFINITE, 0);
-    if (IS_NULL(tmp)) goto err;
-    NQTFR(tmp)->target = np1;
-    np1 = tmp;
-
-    tmp = onig_node_new_alt(np1, alt);
-    if (IS_NULL(tmp)) goto err;
-    alt = tmp;
-    np1 = NULL;
-
-    /* L+ */
-    np1 = node_new_cclass();
-    if (IS_NULL(np1)) goto err;
-    cc = NCCLASS(np1);
-    r = add_ctype_to_cc(cc, propname2ctype(env, "Grapheme_Cluster_Break=L"), 0, 0, env);
-    if (r != 0) goto err;
-
-    tmp = node_new_quantifier(1, REPEAT_INFINITE, 0);
-    if (IS_NULL(tmp)) goto err;
-    NQTFR(tmp)->target = np1;
-    np1 = tmp;
-
-    tmp = onig_node_new_alt(np1, alt);
-    if (IS_NULL(tmp)) goto err;
-    alt = tmp;
-    np1 = NULL;
-
-    /* L* LVT T* */
-    np1 = node_new_cclass();
-    if (IS_NULL(np1)) goto err;
-    cc = NCCLASS(np1);
-    r = add_ctype_to_cc(cc, propname2ctype(env, "Grapheme_Cluster_Break=T"), 0, 0, env);
-    if (r != 0) goto err;
-
-    tmp = node_new_quantifier(0, REPEAT_INFINITE, 0);
-    if (IS_NULL(tmp)) goto err;
-    NQTFR(tmp)->target = np1;
-    np1 = tmp;
-
-    tmp = node_new_list(np1, NULL_NODE);
-    if (IS_NULL(tmp)) goto err;
-    list2 = tmp;
-    np1 = NULL;
-
-    np1 = node_new_cclass();
-    if (IS_NULL(np1)) goto err;
-    cc = NCCLASS(np1);
-    r = add_ctype_to_cc(cc, propname2ctype(env, "Grapheme_Cluster_Break=LVT"), 0, 0, env);
-    if (r != 0) goto err;
-
-    tmp = node_new_list(np1, list2);
-    if (IS_NULL(tmp)) goto err;
-    list2 = tmp;
-    np1 = NULL;
-
-    np1 = node_new_cclass();
-    if (IS_NULL(np1)) goto err;
-    cc = NCCLASS(np1);
-    r = add_ctype_to_cc(cc, propname2ctype(env, "Grapheme_Cluster_Break=L"), 0, 0, env);
-    if (r != 0) goto err;
-
-    tmp = node_new_quantifier(0, REPEAT_INFINITE, 0);
-    if (IS_NULL(tmp)) goto err;
-    NQTFR(tmp)->target = np1;
-    np1 = tmp;
-
-    tmp = node_new_list(np1, list2);
-    if (IS_NULL(tmp)) goto err;
-    list2 = tmp;
-    np1 = NULL;
-
-    tmp = onig_node_new_alt(list2, alt);
-    if (IS_NULL(tmp)) goto err;
-    alt = tmp;
-    list2 = NULL;
-
-    /* L* LV V* T* */
-    np1 = node_new_cclass();
-    if (IS_NULL(np1)) goto err;
-    cc = NCCLASS(np1);
-    r = add_ctype_to_cc(cc, propname2ctype(env, "Grapheme_Cluster_Break=T"), 0, 0, env);
-    if (r != 0) goto err;
-
-    tmp = node_new_quantifier(0, REPEAT_INFINITE, 0);
-    if (IS_NULL(tmp)) goto err;
-    NQTFR(tmp)->target = np1;
-    np1 = tmp;
-
-    tmp = node_new_list(np1, NULL_NODE);
-    if (IS_NULL(tmp)) goto err;
-    list2 = tmp;
-    np1 = NULL;
-
-    np1 = node_new_cclass();
-    if (IS_NULL(np1)) goto err;
-    cc = NCCLASS(np1);
-    r = add_ctype_to_cc(cc, propname2ctype(env, "Grapheme_Cluster_Break=V"), 0, 0, env);
-    if (r != 0) goto err;
-
-    tmp = node_new_quantifier(0, REPEAT_INFINITE, 0);
-    if (IS_NULL(tmp)) goto err;
-    NQTFR(tmp)->target = np1;
-    np1 = tmp;
-
-    tmp = node_new_list(np1, list2);
-    if (IS_NULL(tmp)) goto err;
-    list2 = tmp;
-    np1 = NULL;
-
-    np1 = node_new_cclass();
-    if (IS_NULL(np1)) goto err;
-    cc = NCCLASS(np1);
-    r = add_ctype_to_cc(cc, propname2ctype(env, "Grapheme_Cluster_Break=LV"), 0, 0, env);
-    if (r != 0) goto err;
-
-    tmp = node_new_list(np1, list2);
-    if (IS_NULL(tmp)) goto err;
-    list2 = tmp;
-    np1 = NULL;
-
-    np1 = node_new_cclass();
-    if (IS_NULL(np1)) goto err;
-    cc = NCCLASS(np1);
-    r = add_ctype_to_cc(cc, propname2ctype(env, "Grapheme_Cluster_Break=L"), 0, 0, env);
-    if (r != 0) goto err;
-
-    tmp = node_new_quantifier(0, REPEAT_INFINITE, 0);
-    if (IS_NULL(tmp)) goto err;
-    NQTFR(tmp)->target = np1;
-    np1 = tmp;
-
-    tmp = node_new_list(np1, list2);
-    if (IS_NULL(tmp)) goto err;
-    list2 = tmp;
-    np1 = NULL;
-
-    tmp = onig_node_new_alt(list2, alt);
-    if (IS_NULL(tmp)) goto err;
-    alt = tmp;
-    list2 = NULL;
-
-    /* L* V+ T* */
-    np1 = node_new_cclass();
-    if (IS_NULL(np1)) goto err;
-    cc = NCCLASS(np1);
-    r = add_ctype_to_cc(cc, propname2ctype(env, "Grapheme_Cluster_Break=T"), 0, 0, env);
-    if (r != 0) goto err;
-
-    tmp = node_new_quantifier(0, REPEAT_INFINITE, 0);
-    if (IS_NULL(tmp)) goto err;
-    NQTFR(tmp)->target = np1;
-    np1 = tmp;
-
-    tmp = node_new_list(np1, NULL_NODE);
-    if (IS_NULL(tmp)) goto err;
-    list2 = tmp;
-    np1 = NULL;
+  int ctype = propname2ctype(env, propname);
+  if (ctype < 0) return ctype;
+  return add_ctype_to_cc(cc, ctype, not, 0, env);
+}
 
-    np1 = node_new_cclass();
-    if (IS_NULL(np1)) goto err;
-    cc = NCCLASS(np1);
-    r = add_ctype_to_cc(cc, propname2ctype(env, "Grapheme_Cluster_Break=V"), 0, 0, env);
-    if (r != 0) goto err;
+/*
+ * helper methods for node_extended_grapheme_cluster (/\X/)
+ */
+static int
+create_property_node(Node **np, ScanEnv* env, const char* propname)
+{
+  int r;
+  CClassNode* cc;
 
-    tmp = node_new_quantifier(1, REPEAT_INFINITE, 0);
-    if (IS_NULL(tmp)) goto err;
-    NQTFR(tmp)->target = np1;
-    np1 = tmp;
+  *np = node_new_cclass();
+  if (IS_NULL(*np)) return ONIGERR_MEMORY;
+  cc = NCCLASS(*np);
+  r = add_property_to_cc(cc, propname, 0, env);
+  if (r != 0)
+    onig_node_free(*np);
+  return r;
+}
 
-    tmp = node_new_list(np1, list2);
-    if (IS_NULL(tmp)) goto err;
-    list2 = tmp;
-    np1 = NULL;
+static int
+quantify_node(Node **np, int lower, int upper)
+{
+  Node* tmp = node_new_quantifier(lower, upper, 0);
+  if (IS_NULL(tmp)) return ONIGERR_MEMORY;
+  NQTFR(tmp)->target = *np;
+  *np = tmp;
+  return 0;
+}
 
-    np1 = node_new_cclass();
-    if (IS_NULL(np1)) goto err;
-    cc = NCCLASS(np1);
-    r = add_ctype_to_cc(cc, propname2ctype(env, "Grapheme_Cluster_Break=L"), 0, 0, env);
-    if (r != 0) goto err;
+static int
+quantify_property_node(Node **np, ScanEnv* env, const char* propname, char repetitions)
+{
+  int r;
+  int lower = 0;
+  int upper = REPEAT_INFINITE;
 
-    tmp = node_new_quantifier(0, REPEAT_INFINITE, 0);
-    if (IS_NULL(tmp)) goto err;
-    NQTFR(tmp)->target = np1;
-    np1 = tmp;
-
-    tmp = node_new_list(np1, list2);
-    if (IS_NULL(tmp)) goto err;
-    list2 = tmp;
-    np1 = NULL;
-
-    tmp = onig_node_new_alt(list2, alt);
-    if (IS_NULL(tmp)) goto err;
-    alt = tmp;
-    list2 = NULL;
-
-    /* Emoji sequence := (E_Base | EBG) Extend* E_Modifier?
-     *                   (ZWJ (Glue_After_Zwj | EBG Extend* E_Modifier?) )* */
-
-    /* ZWJ (Glue_After_Zwj | E_Base_GAZ Extend* E_Modifier?) */
-    np1 = node_new_cclass();
-    if (IS_NULL(np1)) goto err;
-    cc = NCCLASS(np1);
-    r = add_ctype_to_cc(cc, propname2ctype(env, "Grapheme_Cluster_Break=E_Modifier"), 0, 0, env);
-    if (r != 0) goto err;
+  r = create_property_node(np, env, propname);
+  if (r != 0) return r;
+  switch (repetitions) {
+    case '?':  upper = 1;          break;
+    case '+':  lower = 1;          break;
+    case '*':                      break;
+    case '2':  lower = upper = 2;  break;
+    default :  return ONIGERR_PARSER_BUG;
+  }
+  return quantify_node(np, lower, upper);
+}
 
-    tmp = node_new_quantifier(0, 1, 0);
-    if (IS_NULL(tmp)) goto err;
-    NQTFR(tmp)->target = np1;
-    np1 = tmp;
+#define LIST 0
+#define ALT  1
 
-    tmp = node_new_list(np1, NULL_NODE);
-    if (IS_NULL(tmp)) goto err;
-    list2 = tmp;
-    np1 = NULL;
+/* IMPORTANT: Make sure node_array ends with NULL_NODE */
+static int
+create_node_from_array(int kind, Node **np, Node **node_array)
+{
+  Node* tmp = NULL_NODE;
+  int i = 0;
 
-    np1 = node_new_cclass();
-    if (IS_NULL(np1)) goto err;
-    cc = NCCLASS(np1);
-    r = add_ctype_to_cc(cc, extend, 0, 0, env);
-    if (r != 0) goto err;
+  while (node_array[i] != NULL_NODE)  i++;
+  while (--i >= 0) {
+    *np = kind==LIST ? node_new_list(node_array[i], tmp)
+                     : onig_node_new_alt(node_array[i], tmp);
+    if (IS_NULL(*np)) {
+      while (i >= 0) {
+        onig_node_free(node_array[i]);
+        node_array[i--] = NULL_NODE;
+      }
+      onig_node_free(tmp);
+      return ONIGERR_MEMORY;
+    }
+    else
+      node_array[i] = NULL_NODE;
+    tmp = *np;
+  }
+  return 0;
+}
 
-    tmp = node_new_quantifier(0, REPEAT_INFINITE, 0);
-    if (IS_NULL(tmp)) goto err;
-    NQTFR(tmp)->target = np1;
-    np1 = tmp;
+#define R_ERR(call) r=(call);if(r!=0)goto err
 
-    tmp = node_new_list(np1, list2);
-    if (IS_NULL(tmp)) goto err;
-    list2 = tmp;
-    np1 = NULL;
+/* Memory layout for common node array:
+ * The main purpose is to be able to easily free all leftover nodes
+ * after an error. As a side effect, we share some memory.
+ *
+ * The layout is as shown below (each line corresponds to one call of
+ * create_node_from_array()). Because create_node_from_array sets all
+ * nodes of the source to NULL_NODE, we can overlap the target array
+ * as long as we do not override the actual target location.
+ *
+ * Target       Array name          Index
+ *
+ *              node_array          0 1 2 3 4 5 6 7 8 9 A B C D E F
+ * top_alts     alts[5]             0 1 2 3 4*
+ * alts+1       list[4]                   0 1 2 3*
+ * list+1       core_alts[7]                  0 1 2 3 4 5 6*
+ * core_alts+0  H_list[4]                       0 1 2 3*
+ * H_list+1     H_alt2[4]                           0 1 2 3*
+ * h_alt2+1     H_list2[3]                              0 1 2*
+ * core_alts+4  XP_list[4]                              0 1 2 3*
+ * XP_list+1    Ex_list[4]                                  0 1 2 3*
+ */
+#define NODE_COMMON_SIZE 16
 
-    np1 = node_new_cclass();
-    if (IS_NULL(np1)) goto err;
-    cc = NCCLASS(np1);
-    r = add_ctype_to_cc(cc, propname2ctype(env, "Grapheme_Cluster_Break=E_Base_GAZ"), 0, 0, env);
-    if (r != 0) goto err;
+static int
+node_extended_grapheme_cluster(Node** np, ScanEnv* env)
+{
+  Node* tmp = NULL;
+  Node* np1 = NULL;
+  Node* top_alt = NULL;
+  int r = 0;
+  int num1;
+  int i;
+  int any_target_position;
+  UChar buf[ONIGENC_CODE_TO_MBC_MAXLEN * 2];
+  OnigOptionType option;
+  /* node_common is function-global so that we can free all nodes
+   * in case of error. Unused slots are set to NULL_NODE at all times. */
+  Node *node_common[NODE_COMMON_SIZE];
+  Node **alts = node_common+0; /* size: 5 */
 
-    tmp = node_new_list(np1, list2);
-    if (IS_NULL(tmp)) goto err;
-    list2 = tmp;
-    np1 = NULL;
-
-    tmp = onig_node_new_alt(list2, NULL_NODE);
-    if (IS_NULL(tmp)) goto err;
-    alt2 = tmp;
-    list2 = NULL;
-
-    /* Glue_After_Zwj */
-    np1 = node_new_cclass();
-    if (IS_NULL(np1)) goto err;
-    cc = NCCLASS(np1);
-    r = add_ctype_to_cc(cc, extend, 0, 0, env);
-    if (r != 0) goto err;
+  for (i=0; i<NODE_COMMON_SIZE; i++)
+    node_common[i] = NULL_NODE;
 
-    tmp = node_new_quantifier(0, REPEAT_INFINITE, 0);
-    if (IS_NULL(tmp)) goto err;
-    NQTFR(tmp)->target = np1;
-    np1 = tmp;
+  /* CRLF, common for both Unicode and non-Unicode */
+  /* \x0D\x0A */
+  r = ONIGENC_CODE_TO_MBC(env->enc, 0x0D, buf);
+  if (r < 0) goto err;
+  num1 = r;
+  r = ONIGENC_CODE_TO_MBC(env->enc, 0x0A, buf + num1);
+  if (r < 0) goto err;
+  alts[0] = node_new_str_raw(buf, buf + num1 + r);
+  if (IS_NULL(alts[0])) goto err;
 
-    tmp = node_new_list(np1, NULL_NODE);
-    if (IS_NULL(tmp)) goto err;
-    list2 = tmp;
-    np1 = NULL;
+#ifdef USE_UNICODE_PROPERTIES
+  if (ONIGENC_IS_UNICODE(env->enc)) {  /* UTF-8, UTF-16BE/LE, UTF-32BE/LE */
+    CClassNode* cc;
 
-    np1 = node_new_cclass();
-    if (IS_NULL(np1)) goto err;
-    cc = NCCLASS(np1);
-    {
-      static const OnigCodePoint ranges[] = {
-	13,
-	0x1F308, 0x1F308,
-	0x1F33E, 0x1F33E,
-	0x1F373, 0x1F373,
-	0x1F393, 0x1F393,
-	0x1F3A4, 0x1F3A4,
-	0x1F3A8, 0x1F3A8,
-	0x1F3EB, 0x1F3EB,
-	0x1F3ED, 0x1F3ED,
-	0x1F4BB, 0x1F4BC,
-	0x1F527, 0x1F527,
-	0x1F52C, 0x1F52C,
-	0x1F680, 0x1F680,
-	0x1F692, 0x1F692,
-      };
-      r = add_ctype_to_cc_by_range(cc, -1, 0, env, sb_out, ranges);
-      if (r != 0) goto err;
+    if (propname2ctype(env, "Grapheme_Cluster_Break=Extend") < 0) goto err;
+    /* Unicode 11.0.0
+     *   CRLF     (already done)
+     * | [Control CR LF]
+     * | precore* core postcore*
+     * | .      (to catch invalid stuff, because this seems to be spec for String#grapheme_clusters) */
+
+    /* [Control CR LF]    (CR and LF are not in the spec, but this is a conformed fix) */
+    alts[1] = node_new_cclass();
+    if (IS_NULL(alts[1])) goto err;
+    cc = NCCLASS(alts[1]);
+    R_ERR(add_property_to_cc(cc, "Grapheme_Cluster_Break=Control", 0, env));
+    if (ONIGENC_MBC_MINLEN(env->enc) > 1) { /* UTF-16/UTF-32 */
+      R_ERR(add_code_range(&(cc->mbuf), env, 0x000A, 0x000A)); /* CR */
+      R_ERR(add_code_range(&(cc->mbuf), env, 0x000D, 0x000D)); /* LF */
     }
-    r = add_ctype_to_cc(cc, propname2ctype(env, "Grapheme_Cluster_Break=Glue_After_Zwj"), 0, 0, env);
-    if (r != 0) goto err;
-
-    tmp = node_new_list(np1, list2);
-    if (IS_NULL(tmp)) goto err;
-    list2 = tmp;
-    np1 = NULL;
-
-    tmp = onig_node_new_alt(list2, alt2);
-    if (IS_NULL(tmp)) goto err;
-    alt2 = tmp;
-    list2 = NULL;
-
-    /* Emoji variation sequence
-     * http://unicode.org/Public/emoji/4.0/emoji-zwj-sequences.txt
-     */
-    r = ONIGENC_CODE_TO_MBC(env->enc, 0xfe0f, buf);
-    if (r < 0) goto err;
-    np1 = node_new_str_raw(buf, buf + r);
-    if (IS_NULL(np1)) goto err;
-
-    tmp = node_new_quantifier(0, 1, 0);
-    if (IS_NULL(tmp)) goto err;
-    NQTFR(tmp)->target = np1;
-    np1 = tmp;
-
-    tmp = node_new_list(np1, NULL_NODE);
-    if (IS_NULL(tmp)) goto err;
-    list2 = tmp;
-    np1 = NULL;
-
-    np1 = node_new_cclass();
-    if (IS_NULL(np1)) goto err;
-    cc = NCCLASS(np1);
-    {
-      static const OnigCodePoint ranges[] = {
-	4,
-	0x2640, 0x2640,
-	0x2642, 0x2642,
-	0x2695, 0x2696,
-	0x2708, 0x2708,
-      };
-      r = add_ctype_to_cc_by_range(cc, -1, 0, env, sb_out, ranges);
-      if (r != 0) goto err;
+    else {
+      BITSET_SET_BIT(cc->bs, 0x0a);
+      BITSET_SET_BIT(cc->bs, 0x0d);
     }
 
-    tmp = node_new_list(np1, list2);
-    if (IS_NULL(tmp)) goto err;
-    list2 = tmp;
-    np1 = NULL;
-
-    tmp = onig_node_new_alt(list2, alt2);
-    if (IS_NULL(tmp)) goto err;
-    alt2 = tmp;
-    list2 = NULL;
-
-    tmp = node_new_list(alt2, NULL_NODE);
-    if (IS_NULL(tmp)) goto err;
-    list2 = tmp;
-    alt2 = NULL;
-
-    /* ZWJ */
-    r = ONIGENC_CODE_TO_MBC(env->enc, 0x200D, buf);
-    if (r < 0) goto err;
-    np1 = node_new_str_raw(buf, buf + r);
-    if (IS_NULL(np1)) goto err;
-
-    tmp = node_new_list(np1, list2);
-    if (IS_NULL(tmp)) goto err;
-    list2 = tmp;
-    np1 = NULL;
-
-    tmp = node_new_quantifier(0, REPEAT_INFINITE, 0);
-    if (IS_NULL(tmp)) goto err;
-    NQTFR(tmp)->target = list2;
-    np1 = tmp;
-    list2 = NULL;
-
-    tmp = node_new_list(np1, NULL_NODE);
-    if (IS_NULL(tmp)) goto err;
-    list2 = tmp;
-    np1 = NULL;
-
-    /* E_Modifier? */
-    np1 = node_new_cclass();
-    if (IS_NULL(np1)) goto err;
-    cc = NCCLASS(np1);
-    r = add_ctype_to_cc(cc, propname2ctype(env, "Grapheme_Cluster_Break=E_Modifier"), 0, 0, env);
-    if (r != 0) goto err;
-
-    tmp = node_new_quantifier(0, 1, 0);
-    if (IS_NULL(tmp)) goto err;
-    NQTFR(tmp)->target = np1;
-    np1 = tmp;
-
-    tmp = node_new_list(np1, list2);
-    if (IS_NULL(tmp)) goto err;
-    list2 = tmp;
-    np1 = NULL;
-
-    /* Extend* */
-    np1 = node_new_cclass();
-    if (IS_NULL(np1)) goto err;
-    cc = NCCLASS(np1);
-    r = add_ctype_to_cc(cc, extend, 0, 0, env);
-    if (r != 0) goto err;
-
-    tmp = node_new_quantifier(0, REPEAT_INFINITE, 0);
-    if (IS_NULL(tmp)) goto err;
-    NQTFR(tmp)->target = np1;
-    np1 = tmp;
-
-    tmp = node_new_list(np1, list2);
-    if (IS_NULL(tmp)) goto err;
-    list2 = tmp;
-    np1 = NULL;
-
-    /* (E_Base | EBG) */
-    np1 = node_new_cclass();
-    if (IS_NULL(np1)) goto err;
-    cc = NCCLASS(np1);
+    /* precore* core postcore* */
     {
-      static const OnigCodePoint ranges[] = {
-	8,
-	0x1F3C2, 0x1F3C2,
-	0x1F3C7, 0x1F3C7,
-	0x1F3CC, 0x1F3CC,
-	0x1F3F3, 0x1F3F3,
-	0x1F441, 0x1F441,
-	0x1F46F, 0x1F46F,
-	0x1F574, 0x1F574,
-	0x1F6CC, 0x1F6CC,
-      };
-      r = add_ctype_to_cc_by_range(cc, -1, 0, env, sb_out, ranges);
-      if (r != 0) goto err;
-    }
-    r = add_ctype_to_cc(cc, propname2ctype(env, "Grapheme_Cluster_Break=E_Base"), 0, 0, env);
-    if (r != 0) goto err;
-    r = add_ctype_to_cc(cc, propname2ctype(env, "Grapheme_Cluster_Break=E_Base_GAZ"), 0, 0, env);
-    if (r != 0) goto err;
-
-    tmp = node_new_list(np1, list2);
-    if (IS_NULL(tmp)) goto err;
-    list2 = tmp;
-    np1 = NULL;
-
-    tmp = onig_node_new_alt(list2, alt);
-    if (IS_NULL(tmp)) goto err;
-    alt = tmp;
-    list2 = NULL;
-
-    /* ZWJ (E_Base_GAZ | Glue_After_Zwj) E_Modifier? */
-    /* a sequence starting with ZWJ seems artificial, but GraphemeBreakTest
-     * has such examples.
-     * http://www.unicode.org/Public/9.0.0/ucd/auxiliary/GraphemeBreakTest.html
-     */
-    np1 = node_new_cclass();
-    if (IS_NULL(np1)) goto err;
-    cc = NCCLASS(np1);
-    r = add_ctype_to_cc(cc, propname2ctype(env, "Grapheme_Cluster_Break=E_Modifier"), 0, 0, env);
-    if (r != 0) goto err;
-
-    tmp = node_new_quantifier(0, 1, 0);
-    if (IS_NULL(tmp)) goto err;
-    NQTFR(tmp)->target = np1;
-    np1 = tmp;
-
-    tmp = node_new_list(np1, NULL_NODE);
-    if (IS_NULL(tmp)) goto err;
-    list2 = tmp;
-    np1 = NULL;
-
-    np1 = node_new_cclass();
-    if (IS_NULL(np1)) goto err;
-    cc = NCCLASS(np1);
-    r = add_ctype_to_cc(cc, propname2ctype(env, "Grapheme_Cluster_Break=Glue_After_Zwj"), 0, 0, env);
-    if (r != 0) goto err;
-    r = add_ctype_to_cc(cc, propname2ctype(env, "Grapheme_Cluster_Break=E_Base_GAZ"), 0, 0, env);
-    if (r != 0) goto err;
-
-    tmp = node_new_list(np1, list2);
-    if (IS_NULL(tmp)) goto err;
-    list2 = tmp;
-    np1 = NULL;
-
-    r = ONIGENC_CODE_TO_MBC(env->enc, 0x200D, buf);
-    if (r < 0) goto err;
-    np1 = node_new_str_raw(buf, buf + r);
-    if (IS_NULL(np1)) goto err;
-
-    tmp = node_new_list(np1, list2);
-    if (IS_NULL(tmp)) goto err;
-    list2 = tmp;
-    np1 = NULL;
-
-    tmp = onig_node_new_alt(list2, alt);
-    if (IS_NULL(tmp)) goto err;
-    alt = tmp;
-    list2 = NULL;
-
-    /* RI-Sequence := Regional_Indicator{2} */
-    np1 = node_new_cclass();
-    if (IS_NULL(np1)) goto err;
-    cc = NCCLASS(np1);
-    r = add_code_range(&(cc->mbuf), env, 0x1F1E6, 0x1F1FF);
-    if (r != 0) goto err;
-
-    tmp = node_new_quantifier(2, 2, 0);
-    if (IS_NULL(tmp)) goto err;
-    NQTFR(tmp)->target = np1;
-    np1 = tmp;
-
-    tmp = node_new_list(np1, list2);
-    if (IS_NULL(tmp)) goto err;
-    list2 = tmp;
-    np1 = NULL;
-
-    tmp = onig_node_new_alt(list2, alt);
-    if (IS_NULL(tmp)) goto err;
-    alt = tmp;
-    list2 = NULL;
-
-    tmp = node_new_list(alt, list);
-    if (IS_NULL(tmp)) goto err;
-    list = tmp;
-    alt = NULL;
-
-    /* Prepend* */
-    np1 = node_new_cclass();
-    if (IS_NULL(np1)) goto err;
-    cc = NCCLASS(np1);
-    r = add_ctype_to_cc(cc, propname2ctype(env, "Grapheme_Cluster_Break=Prepend"), 0, 0, env);
-    if (r != 0) goto err;
-
-    tmp = node_new_quantifier(0, REPEAT_INFINITE, 0);
-    if (IS_NULL(tmp)) goto err;
-    NQTFR(tmp)->target = np1;
-    np1 = tmp;
+      Node **list = alts + 3; /* size: 4 */
 
-    tmp = node_new_list(np1, list);
-    if (IS_NULL(tmp)) goto err;
-    list = tmp;
-    np1 = NULL;
+      /* precore*; precore := Prepend */
+      R_ERR(quantify_property_node(list+0, env, "Grapheme_Cluster_Break=Prepend", '*'));
 
-    /* PerlSyntax: (?s:.), RubySyntax: (?m:.) */
-    np1 = node_new_anychar();
-    if (IS_NULL(np1)) goto err;
-
-    option = env->option;
-    ONOFF(option, ONIG_OPTION_MULTILINE, 0);
-    tmp = node_new_option(option);
-    if (IS_NULL(tmp)) goto err;
-    NENCLOSE(tmp)->target = np1;
-    np1 = tmp;
-
-    tmp = onig_node_new_alt(np1, NULL_NODE);
-    if (IS_NULL(tmp)) goto err;
-    alt = tmp;
-    np1 = NULL;
-
-    /* Prepend+ */
-    r = ONIGENC_CODE_TO_MBC(env->enc, 0x200D, buf);
-    if (r < 0) goto err;
-    np1 = node_new_str_raw(buf, buf + r);
-    if (IS_NULL(np1)) goto err;
-
-    tmp = node_new_quantifier(0, 1, 0);
-    if (IS_NULL(tmp)) goto err;
-    NQTFR(tmp)->target = np1;
-    np1 = tmp;
-
-    tmp = node_new_list(np1, NULL_NODE);
-    if (IS_NULL(tmp)) goto err;
-    list2 = tmp;
-    np1 = NULL;
-
-    np1 = node_new_cclass();
-    if (IS_NULL(np1)) goto err;
-    cc = NCCLASS(np1);
-    r = add_ctype_to_cc(cc, propname2ctype(env, "Grapheme_Cluster_Break=Prepend"), 0, 0, env);
-    if (r != 0) goto err;
-
-    tmp = node_new_quantifier(1, REPEAT_INFINITE, 0);
-    if (IS_NULL(tmp)) goto err;
-    NQTFR(tmp)->target = np1;
-    np1 = tmp;
-
-    tmp = node_new_list(np1, list2);
-    if (IS_NULL(tmp)) goto err;
-    list2 = tmp;
-    np1 = NULL;
-
-    tmp = onig_node_new_alt(list2, alt);
-    if (IS_NULL(tmp)) goto err;
-    alt = tmp;
-    list2 = NULL;
-
-    tmp = onig_node_new_alt(list, alt);
-    if (IS_NULL(tmp)) goto err;
-    alt = tmp;
-    list = NULL;
+      /* core := hangul-syllable
+       *       | ri-sequence
+       *       | xpicto-sequence
+       *       | [^Control CR LF] */
+      {
+        Node **core_alts = list + 2; /* size: 7 */
+
+        /* hangul-syllable :=
+         *     L* (V+ | LV V* | LVT) T*
+         *   | L+
+         *   | T+ */
+        /* hangul-syllable is an alternative (would be called H_alt)
+         * inside an alternative, but we flatten it into core_alts */
+
+        /* L* (V+ | LV V* | LVT) T* */
+        {
+          Node **H_list = core_alts + 1; /* size: 4 */
+          R_ERR(quantify_property_node(H_list+0, env, "Grapheme_Cluster_Break=L", '*'));
+
+          /* V+ | LV V* | LVT */
+          {
+            Node **H_alt2 = H_list + 2; /* size: 4 */
+            R_ERR(quantify_property_node(H_alt2+0, env, "Grapheme_Cluster_Break=V", '+'));
+
+            /* LV V* */
+            {
+              Node **H_list2 = H_alt2 + 2; /* size: 3 */
+
+              R_ERR(create_property_node(H_list2+0, env, "Grapheme_Cluster_Break=LV"));
+              R_ERR(quantify_property_node(H_list2+1, env, "Grapheme_Cluster_Break=V", '*'));
+              R_ERR(create_node_from_array(LIST, H_alt2+1, H_list2));
+            }
+
+            R_ERR(create_property_node(H_alt2+2, env, "Grapheme_Cluster_Break=LVT"));
+            R_ERR(create_node_from_array(ALT, H_list+1, H_alt2));
+          }
+
+          R_ERR(quantify_property_node(H_list+2, env, "Grapheme_Cluster_Break=T", '*'));
+          R_ERR(create_node_from_array(LIST, core_alts+0, H_list));
+        }
+
+        R_ERR(quantify_property_node(core_alts+1, env, "Grapheme_Cluster_Break=L", '+'));
+        R_ERR(quantify_property_node(core_alts+2, env, "Grapheme_Cluster_Break=T", '+'));
+        /* end of hangul-syllable */
+
+        /* ri-sequence := RI RI */
+        R_ERR(quantify_property_node(core_alts+3, env, "Regional_Indicator", '2'));
+
+        /* xpicto-sequence := \p{Extended_Pictographic} (Extend* ZWJ \p{Extended_Pictographic})* */
+        {
+          Node **XP_list = core_alts + 5; /* size: 3 */
+          R_ERR(create_property_node(XP_list+0, env, "Extended_Pictographic"));
+
+          /* (Extend* ZWJ \p{Extended_Pictographic})* */
+          {
+            Node **Ex_list = XP_list + 2; /* size: 4 */
+            /* assert(Ex_list+4 == node_common+NODE_COMMON_SIZE); */
+            R_ERR(quantify_property_node(Ex_list+0, env, "Grapheme_Cluster_Break=Extend", '*'));
+
+            /* ZWJ (ZERO WIDTH JOINER) */
+            r = ONIGENC_CODE_TO_MBC(env->enc, 0x200D, buf);
+            if (r < 0) goto err;
+            Ex_list[1] = node_new_str_raw(buf, buf + r);
+            if (IS_NULL(Ex_list[1])) goto err;
+
+            R_ERR(create_property_node(Ex_list+2, env, "Extended_Pictographic"));
+            R_ERR(create_node_from_array(LIST, XP_list+1, Ex_list));
+          }
+          R_ERR(quantify_node(XP_list+1, 0, REPEAT_INFINITE)); /* TODO: Check about node freeing */
+
+          R_ERR(create_node_from_array(LIST, core_alts+4, XP_list));
+        }
+
+        /* [^Control CR LF] */
+        core_alts[5] = node_new_cclass();
+        if (IS_NULL(core_alts[5])) goto err;
+        cc = NCCLASS(core_alts[5]);
+        if (ONIGENC_MBC_MINLEN(env->enc) > 1) { /* UTF-16/UTF-32 */
+          BBuf *inverted_buf = NULL;
+
+          /* TODO: fix false warning */
+          const int dup_not_warned = env->warnings_flag | ~ONIG_SYN_WARN_CC_DUP;
+          env->warnings_flag |= ONIG_SYN_WARN_CC_DUP;
+
+          /* Start with a positive buffer and invert at the end.
+           * Otherwise, adding single-character ranges work the wrong way. */
+          R_ERR(add_property_to_cc(cc, "Grapheme_Cluster_Break=Control", 0, env));
+          R_ERR(add_code_range(&(cc->mbuf), env, 0x000A, 0x000A)); /* CR */
+          R_ERR(add_code_range(&(cc->mbuf), env, 0x000D, 0x000D)); /* LF */
+          R_ERR(not_code_range_buf(env->enc, cc->mbuf, &inverted_buf, env));
+          cc->mbuf = inverted_buf; /* TODO: check what to do with buffer before inversion */
+
+          env->warnings_flag &= dup_not_warned; /* TODO: fix false warning */
+        }
+        else {
+          R_ERR(add_property_to_cc(cc, "Grapheme_Cluster_Break=Control", 1, env));
+          BITSET_CLEAR_BIT(cc->bs, 0x0a);
+          BITSET_CLEAR_BIT(cc->bs, 0x0d);
+        }
+
+        R_ERR(create_node_from_array(ALT, list+1, core_alts));
+      }
+
+      /* postcore*; postcore = [Extend ZWJ SpacingMark] */
+      R_ERR(create_property_node(list+2, env, "Grapheme_Cluster_Break=Extend"));
+      cc = NCCLASS(list[2]);
+      R_ERR(add_property_to_cc(cc, "Grapheme_Cluster_Break=SpacingMark", 0, env));
+      R_ERR(add_code_range(&(cc->mbuf), env, 0x200D, 0x200D));
+      R_ERR(quantify_node(list+2, 0, REPEAT_INFINITE));
+
+      R_ERR(create_node_from_array(LIST, alts+2, list));
+    }
+
+    any_target_position = 3;
   }
   else
 #endif /* USE_UNICODE_PROPERTIES */
   {
-    /* PerlSyntax: (?s:.), RubySyntax: (?m:.) */
-    np1 = node_new_anychar();
-    if (IS_NULL(np1)) goto err;
-
-    option = env->option;
-    ONOFF(option, ONIG_OPTION_MULTILINE, 0);
-    tmp = node_new_option(option);
-    if (IS_NULL(tmp)) goto err;
-    NENCLOSE(tmp)->target = np1;
-    np1 = tmp;
-
-    alt = onig_node_new_alt(np1, NULL_NODE);
-    if (IS_NULL(alt)) goto err;
-    np1 = NULL;
+    any_target_position = 1;
   }
 
-  /* \x0D\x0A */
-  r = ONIGENC_CODE_TO_MBC(env->enc, 0x0D, buf);
-  if (r < 0) goto err;
-  num1 = r;
-  r = ONIGENC_CODE_TO_MBC(env->enc, 0x0A, buf + num1);
-  if (r < 0) goto err;
-  np1 = node_new_str_raw(buf, buf + num1 + r);
+  /* PerlSyntax: (?s:.), RubySyntax: (?m:.), common for both Unicode and non-Unicode */
+  /* Not in Unicode spec (UAX #29), but added to catch invalid stuff,
+   * because this is Ruby spec for String#grapheme_clusters. */
+  np1 = node_new_anychar();
   if (IS_NULL(np1)) goto err;
 
-  tmp = onig_node_new_alt(np1, alt);
+  option = env->option;
+  ONOFF(option, ONIG_OPTION_MULTILINE, 0);
+  tmp = node_new_option(option);
   if (IS_NULL(tmp)) goto err;
-  alt = tmp;
+  NENCLOSE(tmp)->target = np1;
+  alts[any_target_position] = tmp;
   np1 = NULL;
 
-  /* (?>\x0D\x0A|...) */
+  R_ERR(create_node_from_array(ALT, &top_alt, alts));
+
+  /* (?>): For efficiency, because there is no text piece
+   *       that is not in a grapheme cluster, and there is only one way
+   *       to split a string into grapheme clusters. */
   tmp = node_new_enclose(ENCLOSE_STOP_BACKTRACK);
   if (IS_NULL(tmp)) goto err;
-  NENCLOSE(tmp)->target = alt;
+  NENCLOSE(tmp)->target = top_alt;
   np1 = tmp;
 
 #ifdef USE_UNICODE_PROPERTIES
@@ -6442,13 +6049,11 @@ node_extended_grapheme_cluster(Node** np, ScanEnv* env)
 
  err:
   onig_node_free(np1);
-  onig_node_free(list);
-  onig_node_free(list2);
-  onig_node_free(alt);
-  onig_node_free(alt2);
-  bbuf_free(pbuf1);
+  for (i=0; i<NODE_COMMON_SIZE; i++)
+    onig_node_free(node_common[i]);
   return (r == 0) ? ONIGERR_MEMORY : r;
 }
+#undef R_ERR
 
 static int
 countbits(unsigned int bits)
@@ -6517,11 +6122,14 @@ parse_exp(Node** np, OnigToken* tok, int term,
   int r, len, group = 0;
   Node* qn;
   Node** targetp;
+  unsigned int parse_depth;
 
   *np = NULL;
   if (tok->type == (enum TokenSyms )term)
     goto end_of_token;
 
+  parse_depth = env->parse_depth;
+
   switch (tok->type) {
   case TK_ALT:
   case TK_EOT:
@@ -6832,6 +6440,10 @@ parse_exp(Node** np, OnigToken* tok, int term,
       if (is_invalid_quantifier_target(*targetp))
 	return ONIGERR_TARGET_OF_REPEAT_OPERATOR_INVALID;
 
+      parse_depth++;
+      if (parse_depth > ParseDepthLimit)
+	return ONIGERR_PARSE_DEPTH_LIMIT_OVER;
+
       qn = node_new_quantifier(tok->u.repeat.lower, tok->u.repeat.upper,
 			       (r == TK_INTERVAL ? 1 : 0));
       CHECK_NULL_RETURN_MEMERR(qn);
diff --git a/lib/onigmo/regparse.h b/lib/onigmo/regparse.h
index 888ebf4ce..5e8b1f6d0 100644
--- a/lib/onigmo/regparse.h
+++ b/lib/onigmo/regparse.h
@@ -5,7 +5,7 @@
 **********************************************************************/
 /*-
  * Copyright (c) 2002-2007  K.Kosako  <sndgk393 AT ybb DOT ne DOT jp>
- * Copyright (c) 2011-2016  K.Takata  <kentkt AT csc DOT jp>
+ * Copyright (c) 2011-2019  K.Takata  <kentkt AT csc DOT jp>
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -186,7 +186,7 @@ typedef struct {
   int target_empty_info;
   struct _Node* head_exact;
   struct _Node* next_head_exact;
-  int is_refered;     /* include called node. don't eliminate even if {0} */
+  int is_referred;     /* include called node. don't eliminate even if {0} */
 #ifdef USE_COMBINATION_EXPLOSION_CHECK
   int comb_exp_check_num;  /* 1,2,3...: check,  0: no check  */
 #endif
diff --git a/lib/onigmo/regversion.c b/lib/onigmo/regversion.c
index d80e8d280..9e9e3875b 100644
--- a/lib/onigmo/regversion.c
+++ b/lib/onigmo/regversion.c
@@ -2,8 +2,8 @@
   regversion.c -  Onigmo (Oniguruma-mod) (regular expression library)
 **********************************************************************/
 /*-
- * Copyright (c) 2002-2016  K.Kosako  <sndgk393 AT ybb DOT ne DOT jp>
- * Copyright (c) 2011-2017  K.Takata  <kentkt AT csc DOT jp>
+ * Copyright (c) 2002-2018  K.Kosako  <sndgk393 AT ybb DOT ne DOT jp>
+ * Copyright (c) 2011-2019  K.Takata  <kentkt AT csc DOT jp>
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -48,8 +48,8 @@ extern const char*
 onig_copyright(void)
 {
   const char *s =
-    "Onigmo " ONIG_VERSION_STRING " : Copyright (C) 2002-2016 K.Kosako, "
-    "2011-2017 K.Takata";
+    "Onigmo " ONIG_VERSION_STRING " : Copyright (C) 2002-2018 K.Kosako, "
+    "2011-2019 K.Takata";
 
   return s;
 }
diff --git a/lib/onigmo/sample/Makefile.am b/lib/onigmo/sample/Makefile.am
index 6bca32a55..65ca11d8c 100644
--- a/lib/onigmo/sample/Makefile.am
+++ b/lib/onigmo/sample/Makefile.am
@@ -2,7 +2,7 @@ noinst_PROGRAMS = encode listcap names posix simple sql syntax scan crnl
 
 libname = $(top_builddir)/libonigmo.la
 LDADD   = $(libname)
-INCLUDES  = -I$(top_srcdir) -I$(includedir)
+AM_CPPFLAGS = -I$(top_srcdir) -I$(includedir)
 
 encode_SOURCES  = encode.c
 listcap_SOURCES = listcap.c
diff --git a/lib/onigmo/st.c b/lib/onigmo/st.c
index 19e9b251f..028798682 100644
--- a/lib/onigmo/st.c
+++ b/lib/onigmo/st.c
@@ -90,6 +90,11 @@
    o To save more memory we use 8-, 16-, 32- and 64- bit indexes in
      bins depending on the current hash table size.
 
+   o The implementation takes into account that the table can be
+     rebuilt during hashing or comparison functions.  It can happen if
+     the functions are implemented in Ruby and a thread switch occurs
+     during their execution.
+
    This implementation speeds up the Ruby hash table benchmarks in
    average by more 40% on Intel Haswell CPU.
 
@@ -118,7 +123,7 @@
 #endif
 
 #ifdef ST_DEBUG
-#define st_assert(cond) assert(cond)
+#define st_assert assert
 #else
 #define st_assert(cond) ((void)(0 && (cond)))
 #endif
@@ -134,7 +139,7 @@ struct st_table_entry {
 
 #ifdef RUBY
 #define type_numhash st_hashtype_num
-const struct st_hash_type st_hashtype_num = {
+static const struct st_hash_type st_hashtype_num = {
     st_numcmp,
     st_numhash,
 };
@@ -176,6 +181,15 @@ static const struct st_hash_type type_strcasehash = {
 #define PTR_EQUAL(tab, ptr, hash_val, key_) \
     ((ptr)->hash == (hash_val) && EQUAL((tab), (key_), (ptr)->key))
 
+/* As PRT_EQUAL only its result is returned in RES.  REBUILT_P is set
+   up to TRUE if the table is rebuilt during the comparison.  */
+#define DO_PTR_EQUAL_CHECK(tab, ptr, hash_val, key, res, rebuilt_p) \
+    do {							    \
+	unsigned int _old_rebuilds_num = (tab)->rebuilds_num;       \
+	res = PTR_EQUAL(tab, ptr, hash_val, key);		    \
+	rebuilt_p = _old_rebuilds_num != (tab)->rebuilds_num;	    \
+    } while (FALSE)
+
 /* Features of a table.  */
 struct st_features {
     /* Power of 2 used for number of allocated entries.  */
@@ -303,6 +317,9 @@ static const struct st_features features[] = {
 #define RESERVED_HASH_VAL (~(st_hash_t) 0)
 #define RESERVED_HASH_SUBSTITUTION_VAL ((st_hash_t) 0)
 
+const st_hash_t st_reserved_hash_val = RESERVED_HASH_VAL;
+const st_hash_t st_reserved_hash_substitution_val = RESERVED_HASH_SUBSTITUTION_VAL;
+
 /* Return hash value of KEY for table TAB.  */
 static inline st_hash_t
 do_hash(st_data_t key, st_table *tab)
@@ -348,10 +365,10 @@ get_power2(st_index_t size)
 static inline st_index_t
 get_bin(st_index_t *bins, int s, st_index_t n)
 {
-  return (s == 0 ? ((unsigned char *) bins)[n]
-	  : s == 1 ? ((unsigned short *) bins)[n]
-	  : s == 2 ? ((unsigned int *) bins)[n]
-	  : ((st_index_t *) bins)[n]);
+    return (s == 0 ? ((unsigned char *) bins)[n]
+	    : s == 1 ? ((unsigned short *) bins)[n]
+	    : s == 2 ? ((unsigned int *) bins)[n]
+	    : ((st_index_t *) bins)[n]);
 }
 
 /* Set up N-th bin in array BINS of table with bins size index S to
@@ -382,6 +399,11 @@ set_bin(st_index_t *bins, int s, st_index_t n, st_index_t v)
 #define UNDEFINED_ENTRY_IND (~(st_index_t) 0)
 #define UNDEFINED_BIN_IND (~(st_index_t) 0)
 
+/* Entry and bin values returned when we found a table rebuild during
+   the search.  */
+#define REBUILT_TABLE_ENTRY_IND (~(st_index_t) 1)
+#define REBUILT_TABLE_BIN_IND (~(st_index_t) 1)
+
 /* Mark I-th bin of table TAB as corresponding to a deleted table
    entry.  Update number of entries in the table and number of bins
    corresponding to deleted entries. */
@@ -470,6 +492,12 @@ make_tab_empty(st_table *tab)
 }
 
 #ifdef ST_DEBUG
+#define st_assert_notinitial(ent) \
+    do { \
+	st_assert(ent.hash != (st_hash_t) ST_INIT_VAL);  \
+	st_assert(ent.key != ST_INIT_VAL); \
+	st_assert(ent.record != ST_INIT_VAL); \
+    } while (0)
 /* Check the table T consistency.  It can be extremely slow.  So use
    it only for debugging.  */
 static void
@@ -480,26 +508,24 @@ st_check(st_table *tab)
     for (p = get_allocated_entries(tab), i = 0; p > 1; i++, p>>=1)
         ;
     p = i;
-    assert(p >= MINIMAL_POWER2);
-    assert(tab->entries_bound <= get_allocated_entries(tab)
-	   && tab->entries_start <= tab->entries_bound);
+    st_assert(p >= MINIMAL_POWER2);
+    st_assert(tab->entries_bound <= get_allocated_entries(tab));
+    st_assert(tab->entries_start <= tab->entries_bound);
     n = 0;
     return;
     if (tab->entries_bound != 0)
         for (i = tab->entries_start; i < tab->entries_bound; i++) {
-	    assert(tab->entries[i].hash != (st_hash_t) ST_INIT_VAL
-		   && tab->entries[i].key != ST_INIT_VAL
-		   && tab->entries[i].record != ST_INIT_VAL);
+	    st_assert_notinitial(tab->entries[i]);
 	    if (! DELETED_ENTRY_P(&tab->entries[i]))
 	        n++;
 	}
-    assert(n == tab->num_entries);
+    st_assert(n == tab->num_entries);
     if (tab->bins == NULL)
-        assert(p <= MAX_POWER2_FOR_TABLES_WITHOUT_BINS);
+        st_assert(p <= MAX_POWER2_FOR_TABLES_WITHOUT_BINS);
     else {
-        assert(p > MAX_POWER2_FOR_TABLES_WITHOUT_BINS);
+        st_assert(p > MAX_POWER2_FOR_TABLES_WITHOUT_BINS);
 	for (n = d = i = 0; i < get_bins_num(tab); i++) {
-	    assert(get_bin(tab->bins, tab->size_ind, i) != ST_INIT_VAL);
+	    st_assert(get_bin(tab->bins, tab->size_ind, i) != ST_INIT_VAL);
 	    if (IND_DELETED_BIN_P(tab, i)) {
 	        d++;
 		continue;
@@ -508,14 +534,12 @@ st_check(st_table *tab)
 	        continue;
 	    n++;
 	    e = get_bin(tab->bins, tab->size_ind, i) - ENTRY_BASE;
-	    assert(tab->entries_start <= e && e < tab->entries_bound);
-	    assert(! DELETED_ENTRY_P(&tab->entries[e]));
-	    assert(tab->entries[e].hash != (st_hash_t) ST_INIT_VAL
-		   && tab->entries[e].key != ST_INIT_VAL
-		   && tab->entries[e].record != ST_INIT_VAL);
+	    st_assert(tab->entries_start <= e && e < tab->entries_bound);
+	    st_assert(! DELETED_ENTRY_P(&tab->entries[e]));
+	    st_assert_notinitial(tab->entries[e]);
 	}
-	assert(n == tab->num_entries);
-	assert(n + d < get_bins_num(tab));
+	st_assert(n == tab->num_entries);
+	st_assert(n + d < get_bins_num(tab));
     }
 }
 #endif
@@ -541,8 +565,8 @@ stat_col(void)
     FILE *f;
     if (!collision.total) return;
     f = fopen((snprintf(fname, sizeof(fname), "/tmp/col%ld", (long)getpid()), fname), "w");
-    if (f == 0) return ;
-
+    if (f == NULL)
+        return;
     fprintf(f, "collision: %d / %d (%6.2f)\n", collision.all, collision.total,
             ((double)collision.all / (collision.total)) * 100);
     fprintf(f, "num: %d, str: %d, strcase: %d\n", collision.num, collision.str, collision.strcase);
@@ -575,11 +599,13 @@ st_init_table_with_size(const struct st_hash_type *type, st_index_t size)
     n = get_power2(size);
 #ifndef RUBY
     if (n < 0)
-	return NULL;
+        return NULL;
 #endif
     tab = (st_table *) malloc(sizeof (st_table));
+#ifndef RUBY
     if (tab == NULL)
-	return NULL;
+        return NULL;
+#endif
     tab->type = type;
     tab->entry_power = n;
     tab->bin_power = features[n].bin_power;
@@ -588,17 +614,21 @@ st_init_table_with_size(const struct st_hash_type *type, st_index_t size)
         tab->bins = NULL;
     else {
         tab->bins = (st_index_t *) malloc(bins_size(tab));
-	if (tab->bins == NULL) {
-	    free(tab);
-	    return NULL;
-	}
+#ifndef RUBY
+        if (tab->bins == NULL) {
+            free(tab);
+            return NULL;
+        }
+#endif
     }
     tab->entries = (st_table_entry *) malloc(get_allocated_entries(tab)
 					     * sizeof(st_table_entry));
+#ifndef RUBY
     if (tab->entries == NULL) {
-	st_free_table(tab);
-	return NULL;
+        st_free_table(tab);
+        return NULL;
     }
+#endif
 #ifdef ST_DEBUG
     memset(tab->entries, ST_INIT_VAL_BYTE,
 	   get_allocated_entries(tab) * sizeof(st_table_entry));
@@ -793,9 +823,9 @@ rebuild_table(st_table *tab)
 	if (EXPECT(bins != NULL, 1)) {
 	    bin_ind = find_table_bin_ind_direct(new_tab, curr_entry_ptr->hash,
 						curr_entry_ptr->key);
-	    st_assert(bin_ind != UNDEFINED_BIN_IND
-		      && (tab == new_tab || new_tab->rebuilds_num == 0)
-		      && IND_EMPTY_BIN_P(new_tab, bin_ind));
+	    st_assert(bin_ind != UNDEFINED_BIN_IND);
+	    st_assert(tab == new_tab || new_tab->rebuilds_num == 0);
+	    st_assert(IND_EMPTY_BIN_P(new_tab, bin_ind));
 	    set_bin(bins, size_ind, bin_ind, ni + ENTRY_BASE);
 	}
 	new_tab->num_entries++;
@@ -805,7 +835,8 @@ rebuild_table(st_table *tab)
         tab->entry_power = new_tab->entry_power;
 	tab->bin_power = new_tab->bin_power;
 	tab->size_ind = new_tab->size_ind;
-	st_assert (tab->num_entries == ni && new_tab->num_entries == ni);
+	st_assert(tab->num_entries == ni);
+	st_assert(new_tab->num_entries == ni);
 	if (tab->bins != NULL)
 	    free(tab->bins);
 	tab->bins = new_tab->bins;
@@ -843,17 +874,22 @@ secondary_hash(st_index_t ind, st_table *tab, st_index_t *perterb)
 
 /* Find an entry with HASH_VALUE and KEY in TABLE using a linear
    search.  Return the index of the found entry in array `entries`.
-   If it is not found, return UNDEFINED_ENTRY_IND.  */
+   If it is not found, return UNDEFINED_ENTRY_IND.  If the table was
+   rebuilt during the search, return REBUILT_TABLE_ENTRY_IND.  */
 static inline st_index_t
 find_entry(st_table *tab, st_hash_t hash_value, st_data_t key)
 {
+    int eq_p, rebuilt_p;
     st_index_t i, bound;
     st_table_entry *entries;
 
     bound = tab->entries_bound;
     entries = tab->entries;
     for (i = tab->entries_start; i < bound; i++) {
-	if (PTR_EQUAL(tab, &entries[i], hash_value, key))
+	DO_PTR_EQUAL_CHECK(tab, &entries[i], hash_value, key, eq_p, rebuilt_p);
+	if (EXPECT(rebuilt_p, 0))
+	    return REBUILT_TABLE_ENTRY_IND;
+	if (eq_p)
 	    return i;
     }
     return UNDEFINED_ENTRY_IND;
@@ -865,10 +901,12 @@ find_entry(st_table *tab, st_hash_t hash_value, st_data_t key)
 /*#define QUADRATIC_PROBE*/
 
 /* Return index of entry with HASH_VALUE and KEY in table TAB.  If
-   there is no such entry, return UNDEFINED_ENTRY_IND.  */
+   there is no such entry, return UNDEFINED_ENTRY_IND.  If the table
+   was rebuilt during the search, return REBUILT_TABLE_ENTRY_IND.  */
 static st_index_t
 find_table_entry_ind(st_table *tab, st_hash_t hash_value, st_data_t key)
 {
+    int eq_p, rebuilt_p;
     st_index_t ind;
 #ifdef QUADRATIC_PROBE
     st_index_t d;
@@ -878,7 +916,8 @@ find_table_entry_ind(st_table *tab, st_hash_t hash_value, st_data_t key)
     st_index_t bin;
     st_table_entry *entries = tab->entries;
 
-    st_assert(tab != NULL && tab->bins != NULL);
+    st_assert(tab != NULL);
+    st_assert(tab->bins != NULL);
     ind = hash_bin(hash_value, tab);
 #ifdef QUADRATIC_PROBE
     d = 1;
@@ -888,10 +927,13 @@ find_table_entry_ind(st_table *tab, st_hash_t hash_value, st_data_t key)
     FOUND_BIN;
     for (;;) {
         bin = get_bin(tab->bins, get_size_ind(tab), ind);
-        if (! EMPTY_OR_DELETED_BIN_P(bin)
-            && PTR_EQUAL(tab, &entries[bin - ENTRY_BASE], hash_value, key))
-            break;
-        else if (EMPTY_BIN_P(bin))
+        if (! EMPTY_OR_DELETED_BIN_P(bin)) {
+	    DO_PTR_EQUAL_CHECK(tab, &entries[bin - ENTRY_BASE], hash_value, key, eq_p, rebuilt_p);
+	    if (EXPECT(rebuilt_p, 0))
+		return REBUILT_TABLE_ENTRY_IND;
+	    if (eq_p)
+		break;
+	} else if (EMPTY_BIN_P(bin))
             return UNDEFINED_ENTRY_IND;
 #ifdef QUADRATIC_PROBE
 	ind = hash_bin(ind + d, tab);
@@ -906,10 +948,12 @@ find_table_entry_ind(st_table *tab, st_hash_t hash_value, st_data_t key)
 
 /* Find and return index of table TAB bin corresponding to an entry
    with HASH_VALUE and KEY.  If there is no such bin, return
-   UNDEFINED_BIN_IND.  */
+   UNDEFINED_BIN_IND.  If the table was rebuilt during the search,
+   return REBUILT_TABLE_BIN_IND.  */
 static st_index_t
 find_table_bin_ind(st_table *tab, st_hash_t hash_value, st_data_t key)
 {
+    int eq_p, rebuilt_p;
     st_index_t ind;
 #ifdef QUADRATIC_PROBE
     st_index_t d;
@@ -919,7 +963,8 @@ find_table_bin_ind(st_table *tab, st_hash_t hash_value, st_data_t key)
     st_index_t bin;
     st_table_entry *entries = tab->entries;
 
-    st_assert(tab != NULL && tab->bins != NULL);
+    st_assert(tab != NULL);
+    st_assert(tab->bins != NULL);
     ind = hash_bin(hash_value, tab);
 #ifdef QUADRATIC_PROBE
     d = 1;
@@ -929,10 +974,13 @@ find_table_bin_ind(st_table *tab, st_hash_t hash_value, st_data_t key)
     FOUND_BIN;
     for (;;) {
         bin = get_bin(tab->bins, get_size_ind(tab), ind);
-        if (! EMPTY_OR_DELETED_BIN_P(bin)
-            && PTR_EQUAL(tab, &entries[bin - ENTRY_BASE], hash_value, key))
-            break;
-        else if (EMPTY_BIN_P(bin))
+        if (! EMPTY_OR_DELETED_BIN_P(bin)) {
+	    DO_PTR_EQUAL_CHECK(tab, &entries[bin - ENTRY_BASE], hash_value, key, eq_p, rebuilt_p);
+	    if (EXPECT(rebuilt_p, 0))
+		return REBUILT_TABLE_BIN_IND;
+	    if (eq_p)
+		break;
+	} else if (EMPTY_BIN_P(bin))
             return UNDEFINED_BIN_IND;
 #ifdef QUADRATIC_PROBE
 	ind = hash_bin(ind + d, tab);
@@ -960,7 +1008,8 @@ find_table_bin_ind_direct(st_table *tab, st_hash_t hash_value, st_data_t key)
     st_index_t bin;
     st_table_entry *entries = tab->entries;
 
-    st_assert(tab != NULL && tab->bins != NULL);
+    st_assert(tab != NULL);
+    st_assert(tab->bins != NULL);
     ind = hash_bin(hash_value, tab);
 #ifdef QUADRATIC_PROBE
     d = 1;
@@ -972,7 +1021,7 @@ find_table_bin_ind_direct(st_table *tab, st_hash_t hash_value, st_data_t key)
         bin = get_bin(tab->bins, get_size_ind(tab), ind);
         if (EMPTY_OR_DELETED_BIN_P(bin))
 	    return ind;
-	st_assert (! PTR_EQUAL(tab, &entries[bin - ENTRY_BASE], hash_value, key));
+	st_assert (entries[bin - ENTRY_BASE].hash != hash_value);
 #ifdef QUADRATIC_PROBE
 	ind = hash_bin(ind + d, tab);
 	d++;
@@ -990,10 +1039,13 @@ find_table_bin_ind_direct(st_table *tab, st_hash_t hash_value, st_data_t key)
    bigger entries array.  Although we can reuse a deleted bin, the
    result bin value is always empty if the table has no entry with
    KEY.  Return the entries array index of the found entry or
-   UNDEFINED_ENTRY_IND if it is not found.  */
+   UNDEFINED_ENTRY_IND if it is not found.  If the table was rebuilt
+   during the search, return REBUILT_TABLE_ENTRY_IND.  */
 static st_index_t
 find_table_bin_ptr_and_reserve(st_table *tab, st_hash_t *hash_value,
-			       st_data_t key, st_index_t *bin_ind) {
+			       st_data_t key, st_index_t *bin_ind)
+{
+    int eq_p, rebuilt_p;
     st_index_t ind;
     st_hash_t curr_hash_value = *hash_value;
 #ifdef QUADRATIC_PROBE
@@ -1005,9 +1057,10 @@ find_table_bin_ptr_and_reserve(st_table *tab, st_hash_t *hash_value,
     st_index_t first_deleted_bin_ind;
     st_table_entry *entries;
 
-    st_assert(tab != NULL && tab->bins != NULL
-	      && tab->entries_bound <= get_allocated_entries(tab)
-	      && tab->entries_start <= tab->entries_bound);
+    st_assert(tab != NULL);
+    st_assert(tab->bins != NULL);
+    st_assert(tab->entries_bound <= get_allocated_entries(tab));
+    st_assert(tab->entries_start <= tab->entries_bound);
     ind = hash_bin(curr_hash_value, tab);
 #ifdef QUADRATIC_PROBE
     d = 1;
@@ -1028,10 +1081,15 @@ find_table_bin_ptr_and_reserve(st_table *tab, st_hash_t *hash_value,
                 MARK_BIN_EMPTY(tab, ind);
             }
             break;
-        } else if (! DELETED_BIN_P(entry_index)) {
-            if (PTR_EQUAL(tab, &entries[entry_index - ENTRY_BASE], curr_hash_value, key))
+	}
+	else if (! DELETED_BIN_P(entry_index)) {
+	    DO_PTR_EQUAL_CHECK(tab, &entries[entry_index - ENTRY_BASE], curr_hash_value, key, eq_p, rebuilt_p);
+	    if (EXPECT(rebuilt_p, 0))
+		return REBUILT_TABLE_ENTRY_IND;
+            if (eq_p)
                 break;
-        } else if (first_deleted_bin_ind == UNDEFINED_BIN_IND)
+	}
+	else if (first_deleted_bin_ind == UNDEFINED_BIN_IND)
             first_deleted_bin_ind = ind;
 #ifdef QUADRATIC_PROBE
 	ind = hash_bin(ind + d, tab);
@@ -1053,12 +1111,18 @@ st_lookup(st_table *tab, st_data_t key, st_data_t *value)
     st_index_t bin;
     st_hash_t hash = do_hash(key, tab);
 
+ retry:
     if (tab->bins == NULL) {
         bin = find_entry(tab, hash, key);
+	if (EXPECT(bin == REBUILT_TABLE_ENTRY_IND, 0))
+	    goto retry;
 	if (bin == UNDEFINED_ENTRY_IND)
 	    return 0;
-    } else {
+    }
+    else {
         bin = find_table_entry_ind(tab, hash, key);
+	if (EXPECT(bin == REBUILT_TABLE_ENTRY_IND, 0))
+	    goto retry;
 	if (bin == UNDEFINED_ENTRY_IND)
 	    return 0;
 	bin -= ENTRY_BASE;
@@ -1077,12 +1141,18 @@ st_get_key(st_table *tab, st_data_t key, st_data_t *result)
     st_index_t bin;
     st_hash_t hash = do_hash(key, tab);
 
+ retry:
     if (tab->bins == NULL) {
         bin = find_entry(tab, hash, key);
+	if (EXPECT(bin == REBUILT_TABLE_ENTRY_IND, 0))
+	    goto retry;
 	if (bin == UNDEFINED_ENTRY_IND)
 	    return 0;
-    } else {
+    }
+    else {
         bin = find_table_entry_ind(tab, hash, key);
+	if (EXPECT(bin == REBUILT_TABLE_ENTRY_IND, 0))
+	    goto retry;
 	if (bin == UNDEFINED_ENTRY_IND)
 	    return 0;
 	bin -= ENTRY_BASE;
@@ -1095,7 +1165,7 @@ st_get_key(st_table *tab, st_data_t key, st_data_t *result)
 
 /* Check the table and rebuild it if it is necessary.  */
 static inline void
-rebuild_table_if_necessary (st_table *tab)
+rebuild_table_if_necessary(st_table *tab)
 {
     st_index_t bound = tab->entries_bound;
 
@@ -1117,17 +1187,23 @@ st_insert(st_table *tab, st_data_t key, st_data_t value)
     st_index_t bin_ind;
     int new_p;
 
-    rebuild_table_if_necessary(tab);
     hash_value = do_hash(key, tab);
+ retry:
+    rebuild_table_if_necessary(tab);
     if (tab->bins == NULL) {
         bin = find_entry(tab, hash_value, key);
+	if (EXPECT(bin == REBUILT_TABLE_ENTRY_IND, 0))
+	    goto retry;
 	new_p = bin == UNDEFINED_ENTRY_IND;
 	if (new_p)
 	    tab->num_entries++;
 	bin_ind = UNDEFINED_BIN_IND;
-    } else {
+    }
+    else {
         bin = find_table_bin_ptr_and_reserve(tab, &hash_value,
 					     key, &bin_ind);
+	if (EXPECT(bin == REBUILT_TABLE_ENTRY_IND, 0))
+	    goto retry;
 	new_p = bin == UNDEFINED_ENTRY_IND;
 	bin -= ENTRY_BASE;
     }
@@ -1155,9 +1231,10 @@ st_insert(st_table *tab, st_data_t key, st_data_t value)
 #ifdef RUBY
 /* Insert (KEY, VALUE, HASH) into table TAB.  The table should not have
    entry with KEY before the insertion.  */
-static inline void
+void
 st_add_direct_with_hash(st_table *tab,
-			st_data_t key, st_data_t value, st_hash_t hash) {
+			st_data_t key, st_data_t value, st_hash_t hash)
+{
     st_table_entry *entry;
     st_index_t ind;
     st_index_t bin_ind;
@@ -1195,7 +1272,8 @@ st_add_direct(st_table *tab, st_data_t key, st_data_t value)
    and update the value of the found entry.  */
 int
 st_insert2(st_table *tab, st_data_t key, st_data_t value,
-           st_data_t (*func)(st_data_t)) {
+           st_data_t (*func)(st_data_t))
+{
     st_table_entry *entry;
     st_index_t bin;
     st_index_t ind, check;
@@ -1203,15 +1281,23 @@ st_insert2(st_table *tab, st_data_t key, st_data_t value,
     st_index_t bin_ind;
     int new_p;
 
-    rebuild_table_if_necessary (tab);
     hash_value = do_hash(key, tab);
+ retry:
+    rebuild_table_if_necessary (tab);
     if (tab->bins == NULL) {
         bin = find_entry(tab, hash_value, key);
+	if (EXPECT(bin == REBUILT_TABLE_ENTRY_IND, 0))
+	    goto retry;
 	new_p = bin == UNDEFINED_ENTRY_IND;
+	if (new_p)
+	    tab->num_entries++;
 	bin_ind = UNDEFINED_BIN_IND;
-    } else {
+    }
+    else {
         bin = find_table_bin_ptr_and_reserve(tab, &hash_value,
 					     key, &bin_ind);
+	if (EXPECT(bin == REBUILT_TABLE_ENTRY_IND, 0))
+	    goto retry;
 	new_p = bin == UNDEFINED_ENTRY_IND;
 	bin -= ENTRY_BASE;
     }
@@ -1219,8 +1305,7 @@ st_insert2(st_table *tab, st_data_t key, st_data_t value,
         st_assert(tab->entries_bound < get_allocated_entries(tab));
         check = tab->rebuilds_num;
         key = (*func)(key);
-        st_assert(check == tab->rebuilds_num
-                  && do_hash(key, tab) == hash_value);
+        st_assert(check == tab->rebuilds_num);
         ind = tab->entries_bound++;
         entry = &tab->entries[ind];
         entry->hash = hash_value;
@@ -1228,6 +1313,7 @@ st_insert2(st_table *tab, st_data_t key, st_data_t value,
         entry->record = value;
 	if (bin_ind != UNDEFINED_BIN_IND)
 	    set_bin(tab->bins, get_size_ind(tab), bin_ind, ind + ENTRY_BASE);
+	st_assert(do_hash(key, tab) == hash_value);
 #ifdef ST_DEBUG
 	st_check(tab);
 #endif
@@ -1247,24 +1333,30 @@ st_copy(st_table *old_tab)
     st_table *new_tab;
 
     new_tab = (st_table *) malloc(sizeof(st_table));
+#ifndef RUBY
     if (new_tab == NULL)
-	return NULL;
+        return NULL;
+#endif
     *new_tab = *old_tab;
     if (old_tab->bins == NULL)
         new_tab->bins = NULL;
     else {
         new_tab->bins = (st_index_t *) malloc(bins_size(old_tab));
-	if (new_tab->bins == NULL) {
-	    free(new_tab);
-	    return NULL;
-	}
+#ifndef RUBY
+        if (new_tab->bins == NULL) {
+            free(new_tab);
+            return NULL;
+        }
+#endif
     }
     new_tab->entries = (st_table_entry *) malloc(get_allocated_entries(old_tab)
 						 * sizeof(st_table_entry));
+#ifndef RUBY
     if (new_tab->entries == NULL) {
-	st_free_table(new_tab);
-	return NULL;
+        st_free_table(new_tab);
+        return NULL;
     }
+#endif
     MEMCPY(new_tab->entries, old_tab->entries, st_table_entry,
 	   get_allocated_entries(old_tab));
     if (old_tab->bins != NULL)
@@ -1302,14 +1394,20 @@ st_general_delete(st_table *tab, st_data_t *key, st_data_t *value)
 
     st_assert(tab != NULL);
     hash = do_hash(*key, tab);
+ retry:
     if (tab->bins == NULL) {
         bin = find_entry(tab, hash, *key);
+	if (EXPECT(bin == REBUILT_TABLE_ENTRY_IND, 0))
+	    goto retry;
 	if (bin == UNDEFINED_ENTRY_IND) {
 	    if (value != 0) *value = 0;
 	    return 0;
 	}
-    } else {
+    }
+    else {
         bin_ind = find_table_bin_ind(tab, hash, *key);
+	if (EXPECT(bin_ind == REBUILT_TABLE_BIN_IND, 0))
+	    goto retry;
 	if (bin_ind == UNDEFINED_BIN_IND) {
 	    if (value != 0) *value = 0;
 	    return 0;
@@ -1342,7 +1440,8 @@ st_delete(st_table *tab, st_data_t *key, st_data_t *value)
    traversing without a specific way to do this.  */
 int
 st_delete_safe(st_table *tab, st_data_t *key, st_data_t *value,
-               st_data_t never ATTRIBUTE_UNUSED) {
+               st_data_t never ATTRIBUTE_UNUSED)
+{
     return st_general_delete(tab, key, value);
 }
 
@@ -1363,20 +1462,33 @@ st_shift(st_table *tab, st_data_t *key, st_data_t *value)
     for (i = tab->entries_start; i < bound; i++) {
         curr_entry_ptr = &entries[i];
 	if (! DELETED_ENTRY_P(curr_entry_ptr)) {
+	    st_hash_t entry_hash = curr_entry_ptr->hash;
+	    st_data_t entry_key = curr_entry_ptr->key;
+
 	    if (value != 0) *value = curr_entry_ptr->record;
-	    *key = curr_entry_ptr->key;
+	    *key = entry_key;
+	retry:
 	    if (tab->bins == NULL) {
-	        bin = find_entry(tab, curr_entry_ptr->hash, curr_entry_ptr->key);
-		st_assert(bin != UNDEFINED_ENTRY_IND
-			  && &entries[bin] == curr_entry_ptr);
-	    } else {
-	        bin_ind = find_table_bin_ind(tab, curr_entry_ptr->hash,
-					     curr_entry_ptr->key);
-		st_assert(bin_ind != UNDEFINED_BIN_IND
-			  && &entries[get_bin(tab->bins, get_size_ind(tab), bin_ind)
-				      - ENTRY_BASE] == curr_entry_ptr);
+	        bin = find_entry(tab, entry_hash, entry_key);
+		if (EXPECT(bin == REBUILT_TABLE_ENTRY_IND, 0)) {
+		    entries = tab->entries;
+		    goto retry;
+		}
+		st_assert(bin != UNDEFINED_ENTRY_IND);
+		curr_entry_ptr = &entries[bin];
+	    }
+	    else {
+	        bin_ind = find_table_bin_ind(tab, entry_hash, entry_key);
+		if (EXPECT(bin_ind == REBUILT_TABLE_BIN_IND, 0)) {
+		    entries = tab->entries;
+		    goto retry;
+		}
+		st_assert(bin_ind != UNDEFINED_BIN_IND);
+		curr_entry_ptr = &entries[get_bin(tab->bins, get_size_ind(tab), bin_ind)
+					  - ENTRY_BASE];
 		MARK_BIN_DELETED(tab, bin_ind);
 	    }
+	    st_assert(entry_hash != curr_entry_ptr->hash && entry_key == curr_entry_ptr->key);
 	    MARK_ENTRY_DELETED(curr_entry_ptr);
 	    tab->num_entries--;
 	    update_range_for_deleted(tab, i);
@@ -1395,7 +1507,8 @@ st_shift(st_table *tab, st_data_t *key, st_data_t *value)
 /* See comments for function st_delete_safe.  */
 void
 st_cleanup_safe(st_table *tab ATTRIBUTE_UNUSED,
-                st_data_t never ATTRIBUTE_UNUSED) {
+                st_data_t never ATTRIBUTE_UNUSED)
+{
 }
 
 /* Find entry with KEY in table TAB, call FUNC with the key and the
@@ -1408,7 +1521,8 @@ st_cleanup_safe(st_table *tab ATTRIBUTE_UNUSED,
    in the table before the call.  */
 int
 st_update(st_table *tab, st_data_t key,
-	  st_update_callback_func *func, st_data_t arg) {
+	  st_update_callback_func *func, st_data_t arg)
+{
     st_table_entry *entry = NULL; /* to avoid uninitialized value warning */
     st_index_t bin = 0; /* Ditto */
     st_table_entry *entries;
@@ -1418,14 +1532,20 @@ st_update(st_table *tab, st_data_t key,
     int retval, existing;
     st_hash_t hash = do_hash(key, tab);
 
+ retry:
     entries = tab->entries;
     if (tab->bins == NULL) {
         bin = find_entry(tab, hash, key);
+	if (EXPECT(bin == REBUILT_TABLE_ENTRY_IND, 0))
+	    goto retry;
 	existing = bin != UNDEFINED_ENTRY_IND;
 	entry = &entries[bin];
 	bin_ind = UNDEFINED_BIN_IND;
-    } else {
+    }
+    else {
         bin_ind = find_table_bin_ind(tab, hash, key);
+	if (EXPECT(bin_ind == REBUILT_TABLE_BIN_IND, 0))
+	    goto retry;
 	existing = bin_ind != UNDEFINED_BIN_IND;
 	if (existing) {
 	    bin = get_bin(tab->bins, get_size_ind(tab), bin_ind) - ENTRY_BASE;
@@ -1441,7 +1561,7 @@ st_update(st_table *tab, st_data_t key,
     retval = (*func)(&key, &value, arg, existing);
     st_assert(check == tab->rebuilds_num);
     switch (retval) {
-    case ST_CONTINUE:
+      case ST_CONTINUE:
         if (! existing) {
 	    st_add_direct_with_hash(tab, key, value, hash);
             break;
@@ -1451,7 +1571,7 @@ st_update(st_table *tab, st_data_t key,
         }
         entry->record = value;
         break;
-    case ST_DELETE:
+      case ST_DELETE:
         if (existing) {
 	    if (bin_ind != UNDEFINED_BIN_IND)
 	        MARK_BIN_DELETED(tab, bin_ind);
@@ -1480,8 +1600,9 @@ st_update(st_table *tab, st_data_t key,
    different for ST_CHECK and when the current element is removed
    during traversing.  */
 static inline int
-st_general_foreach(st_table *tab, int (*func)(ANYARGS), st_data_t arg,
-		   int check_p) {
+st_general_foreach(st_table *tab, int (*func)(ANYARGS), st_update_callback_func *replace, st_data_t arg,
+		   int check_p)
+{
     st_index_t bin;
     st_index_t bin_ind;
     st_table_entry *entries, *curr_entry_ptr;
@@ -1503,14 +1624,29 @@ st_general_foreach(st_table *tab, int (*func)(ANYARGS), st_data_t arg,
 	rebuilds_num = tab->rebuilds_num;
 	hash = curr_entry_ptr->hash;
 	retval = (*func)(key, curr_entry_ptr->record, arg, 0);
+
+        if (retval == ST_REPLACE && replace) {
+            st_data_t value;
+            value = curr_entry_ptr->record;
+            retval = (*replace)(&key, &value, arg, TRUE);
+            curr_entry_ptr->key = key;
+            curr_entry_ptr->record = value;
+        }
+
 	if (rebuilds_num != tab->rebuilds_num) {
+	retry:
 	    entries = tab->entries;
 	    packed_p = tab->bins == NULL;
 	    if (packed_p) {
 	        i = find_entry(tab, hash, key);
+		if (EXPECT(i == REBUILT_TABLE_ENTRY_IND, 0))
+		    goto retry;
 		error_p = i == UNDEFINED_ENTRY_IND;
-	    } else {
+	    }
+	    else {
 	        i = find_table_entry_ind(tab, hash, key);
+		if (EXPECT(i == REBUILT_TABLE_ENTRY_IND, 0))
+		    goto retry;
 		error_p = i == UNDEFINED_ENTRY_IND;
 		i -= ENTRY_BASE;
 	    }
@@ -1525,29 +1661,39 @@ st_general_foreach(st_table *tab, int (*func)(ANYARGS), st_data_t arg,
 	    curr_entry_ptr = &entries[i];
 	}
 	switch (retval) {
-	case ST_CONTINUE:
+          case ST_REPLACE:
+            break;
+	  case ST_CONTINUE:
 	    break;
-	case ST_CHECK:
+	  case ST_CHECK:
 	    if (check_p)
 		break;
-	case ST_STOP:
+	  case ST_STOP:
 #ifdef ST_DEBUG
 	    st_check(tab);
 #endif
 	    return 0;
-	case ST_DELETE:
+	  case ST_DELETE: {
+	    st_data_t key = curr_entry_ptr->key;
+
+	    again:
 	    if (packed_p) {
-	        bin = find_entry(tab, hash, curr_entry_ptr->key);
+		bin = find_entry(tab, hash, key);
+		if (EXPECT(bin == REBUILT_TABLE_ENTRY_IND, 0))
+		    goto again;
 		if (bin == UNDEFINED_ENTRY_IND)
 		    break;
-	    } else {
-	        bin_ind = find_table_bin_ind(tab, hash, curr_entry_ptr->key);
+	    }
+	    else {
+		bin_ind = find_table_bin_ind(tab, hash, key);
+		if (EXPECT(bin_ind == REBUILT_TABLE_BIN_IND, 0))
+		    goto again;
 		if (bin_ind == UNDEFINED_BIN_IND)
 		    break;
 		bin = get_bin(tab->bins, get_size_ind(tab), bin_ind) - ENTRY_BASE;
 		MARK_BIN_DELETED(tab, bin_ind);
 	    }
-	    st_assert(&entries[bin] == curr_entry_ptr);
+	    curr_entry_ptr = &entries[bin];
 	    MARK_ENTRY_DELETED(curr_entry_ptr);
 	    tab->num_entries--;
 	    update_range_for_deleted(tab, bin);
@@ -1555,6 +1701,7 @@ st_general_foreach(st_table *tab, int (*func)(ANYARGS), st_data_t arg,
 	    st_check(tab);
 #endif
 	    break;
+	  }
 	}
     }
 #ifdef ST_DEBUG
@@ -1563,18 +1710,27 @@ st_general_foreach(st_table *tab, int (*func)(ANYARGS), st_data_t arg,
     return 0;
 }
 
+#ifdef RUBY
+int
+st_foreach_with_replace(st_table *tab, int (*func)(ANYARGS), st_update_callback_func *replace, st_data_t arg)
+{
+    return st_general_foreach(tab, func, replace, arg, TRUE);
+}
+#endif /* RUBY */
+
 int
 st_foreach(st_table *tab, int (*func)(ANYARGS), st_data_t arg)
 {
-  return st_general_foreach(tab, func, arg, FALSE);
+    return st_general_foreach(tab, func, NULL, arg, FALSE);
 }
 
 #ifdef RUBY
 /* See comments for function st_delete_safe.  */
 int
 st_foreach_check(st_table *tab, int (*func)(ANYARGS), st_data_t arg,
-                 st_data_t never ATTRIBUTE_UNUSED) {
-  return st_general_foreach(tab, func, arg, TRUE);
+                 st_data_t never ATTRIBUTE_UNUSED)
+{
+    return st_general_foreach(tab, func, NULL, arg, TRUE);
 }
 
 /* Set up array KEYS by at most SIZE keys of head table TAB entries.
@@ -1610,7 +1766,8 @@ st_keys(st_table *tab, st_data_t *keys, st_index_t size)
 /* See comments for function st_delete_safe.  */
 st_index_t
 st_keys_check(st_table *tab, st_data_t *keys, st_index_t size,
-              st_data_t never ATTRIBUTE_UNUSED) {
+              st_data_t never ATTRIBUTE_UNUSED)
+{
     return st_general_keys(tab, keys, size);
 }
 
@@ -1647,12 +1804,11 @@ st_values(st_table *tab, st_data_t *values, st_index_t size)
 /* See comments for function st_delete_safe.  */
 st_index_t
 st_values_check(st_table *tab, st_data_t *values, st_index_t size,
-		st_data_t never ATTRIBUTE_UNUSED) {
+		st_data_t never ATTRIBUTE_UNUSED)
+{
     return st_general_values(tab, values, size);
 }
-#endif /* RUBY */
 
-#ifdef RUBY
 #define FNV1_32A_INIT 0x811c9dc5
 
 /*
@@ -1685,6 +1841,10 @@ st_values_check(st_table *tab, st_data_t *values, st_index_t size,
 #define C1 BIG_CONSTANT(0x87c37b91,0x114253d5);
 #define C2 BIG_CONSTANT(0x4cf5ad43,0x2745937f);
 #endif
+NO_SANITIZE("unsigned-integer-overflow", static inline st_index_t murmur_step(st_index_t h, st_index_t k));
+NO_SANITIZE("unsigned-integer-overflow", static inline st_index_t murmur_finish(st_index_t h));
+NO_SANITIZE("unsigned-integer-overflow", extern st_index_t st_hash(const void *ptr, size_t len, st_index_t h));
+
 static inline st_index_t
 murmur_step(st_index_t h, st_index_t k)
 {
@@ -1828,10 +1988,15 @@ st_hash(const void *ptr, size_t len, st_index_t h)
 	    len -= pack;
 	}
 	else
+#endif
+#ifdef HAVE_BUILTIN___BUILTIN_ASSUME_ALIGNED
+#define aligned_data __builtin_assume_aligned(data, sizeof(st_index_t))
+#else
+#define aligned_data data
 #endif
 	{
 	    do {
-		h = murmur_step(h, *(st_index_t *)data);
+		h = murmur_step(h, *(st_index_t *)aligned_data);
 		data += sizeof(st_index_t);
 		len -= sizeof(st_index_t);
 	    } while (len >= sizeof(st_index_t));
@@ -1843,17 +2008,17 @@ st_hash(const void *ptr, size_t len, st_index_t h)
 #if UNALIGNED_WORD_ACCESS && SIZEOF_ST_INDEX_T <= 8 && CHAR_BIT == 8
     /* in this case byteorder doesn't really matter */
 #if SIZEOF_ST_INDEX_T > 4
-	case 7: t |= data_at(6) << 48;
-	case 6: t |= data_at(5) << 40;
-	case 5: t |= data_at(4) << 32;
-	case 4:
-	    t |= (st_index_t)*(uint32_t*)data;
-	    goto skip_tail;
+      case 7: t |= data_at(6) << 48;
+      case 6: t |= data_at(5) << 40;
+      case 5: t |= data_at(4) << 32;
+      case 4:
+	t |= (st_index_t)*(uint32_t*)aligned_data;
+	goto skip_tail;
 # define SKIP_TAIL 1
 #endif
-	case 3: t |= data_at(2) << 16;
-	case 2: t |= data_at(1) << 8;
-	case 1: t |= data_at(0);
+      case 3: t |= data_at(2) << 16;
+      case 2: t |= data_at(1) << 8;
+      case 1: t |= data_at(0);
 #else
 #ifdef WORDS_BIGENDIAN
 # define UNALIGNED_ADD(n) case (n) + 1: \
@@ -1872,6 +2037,7 @@ st_hash(const void *ptr, size_t len, st_index_t h)
 	h *= C2;
     }
     h ^= l;
+#undef aligned_data
 
     return murmur_finish(h);
 }
@@ -1882,6 +2048,7 @@ st_hash_uint32(st_index_t h, uint32_t i)
     return murmur_step(h, i);
 }
 
+NO_SANITIZE("unsigned-integer-overflow", extern st_index_t st_hash_uint(st_index_t h, st_index_t i));
 st_index_t
 st_hash_uint(st_index_t h, st_index_t i)
 {
@@ -1919,18 +2086,18 @@ strhash(st_data_t arg)
 int
 st_locale_insensitive_strcasecmp(const char *s1, const char *s2)
 {
-    unsigned int c1, c2;
+    char c1, c2;
 
     while (1) {
-        c1 = (unsigned char)*s1++;
-        c2 = (unsigned char)*s2++;
+        c1 = *s1++;
+        c2 = *s2++;
         if (c1 == '\0' || c2 == '\0') {
             if (c1 != '\0') return 1;
             if (c2 != '\0') return -1;
             return 0;
         }
-        if ((unsigned int)(c1 - 'A') <= ('Z' - 'A')) c1 += 'a' - 'A';
-        if ((unsigned int)(c2 - 'A') <= ('Z' - 'A')) c2 += 'a' - 'A';
+        if (('A' <= c1) && (c1 <= 'Z')) c1 += 'a' - 'A';
+        if (('A' <= c2) && (c2 <= 'Z')) c2 += 'a' - 'A';
         if (c1 != c2) {
             if (c1 > c2)
                 return 1;
@@ -1943,18 +2110,19 @@ st_locale_insensitive_strcasecmp(const char *s1, const char *s2)
 int
 st_locale_insensitive_strncasecmp(const char *s1, const char *s2, size_t n)
 {
-    unsigned int c1, c2;
+    char c1, c2;
+    size_t i;
 
-    while (n--) {
-        c1 = (unsigned char)*s1++;
-        c2 = (unsigned char)*s2++;
+    for (i = 0; i < n; i++) {
+        c1 = *s1++;
+        c2 = *s2++;
         if (c1 == '\0' || c2 == '\0') {
             if (c1 != '\0') return 1;
             if (c2 != '\0') return -1;
             return 0;
         }
-        if ((unsigned int)(c1 - 'A') <= ('Z' - 'A')) c1 += 'a' - 'A';
-        if ((unsigned int)(c2 - 'A') <= ('Z' - 'A')) c2 += 'a' - 'A';
+        if (('A' <= c1) && (c1 <= 'Z')) c1 += 'a' - 'A';
+        if (('A' <= c2) && (c2 <= 'Z')) c2 += 'a' - 'A';
         if (c1 != c2) {
             if (c1 > c2)
                 return 1;
@@ -1965,6 +2133,7 @@ st_locale_insensitive_strncasecmp(const char *s1, const char *s2, size_t n)
     return 0;
 }
 
+NO_SANITIZE("unsigned-integer-overflow", PUREFUNC(static st_index_t strcasehash(st_data_t)));
 static st_index_t
 strcasehash(st_data_t arg)
 {
@@ -1997,4 +2166,219 @@ st_numhash(st_data_t n)
     enum {s1 = 11, s2 = 3};
     return (st_index_t)((n>>s1|(n<<s2)) ^ (n>>s2));
 }
+
+/* Expand TAB to be suitable for holding SIZ entries in total.
+   Pre-existing entries remain not deleted inside of TAB, but its bins
+   are cleared to expect future reconstruction. See rehash below. */
+static void
+st_expand_table(st_table *tab, st_index_t siz)
+{
+    st_table *tmp;
+    st_index_t n;
+
+    if (siz <= get_allocated_entries(tab))
+        return; /* enough room already */
+
+    tmp = st_init_table_with_size(tab->type, siz);
+    n = get_allocated_entries(tab);
+    MEMCPY(tmp->entries, tab->entries, st_table_entry, n);
+    free(tab->entries);
+    if (tab->bins != NULL)
+        free(tab->bins);
+    if (tmp->bins != NULL)
+        free(tmp->bins);
+    tab->entry_power = tmp->entry_power;
+    tab->bin_power = tmp->bin_power;
+    tab->size_ind = tmp->size_ind;
+    tab->entries = tmp->entries;
+    tab->bins = NULL;
+    tab->rebuilds_num++;
+    free(tmp);
+}
+
+/* Rehash using linear search.  Return TRUE if we found that the table
+   was rebuilt.  */
+static int
+st_rehash_linear(st_table *tab)
+{
+    int eq_p, rebuilt_p;
+    st_index_t i, j;
+    st_table_entry *p, *q;
+    if (tab->bins) {
+        free(tab->bins);
+        tab->bins = NULL;
+    }
+    for (i = tab->entries_start; i < tab->entries_bound; i++) {
+        p = &tab->entries[i];
+        if (DELETED_ENTRY_P(p))
+            continue;
+        for (j = i + 1; j < tab->entries_bound; j++) {
+            q = &tab->entries[j];
+            if (DELETED_ENTRY_P(q))
+                continue;
+	    DO_PTR_EQUAL_CHECK(tab, p, q->hash, q->key, eq_p, rebuilt_p);
+	    if (EXPECT(rebuilt_p, 0))
+		return TRUE;
+	    if (eq_p) {
+                st_assert(p < q);
+                *p = *q;
+                MARK_ENTRY_DELETED(q);
+                tab->num_entries--;
+                update_range_for_deleted(tab, j);
+            }
+        }
+    }
+    return FALSE;
+}
+
+/* Rehash using index.  Return TRUE if we found that the table was
+   rebuilt.  */
+static int
+st_rehash_indexed(st_table *tab)
+{
+    int eq_p, rebuilt_p;
+    st_index_t i;
+    st_index_t const n = bins_size(tab);
+    unsigned int const size_ind = get_size_ind(tab);
+    st_index_t *bins = realloc(tab->bins, n);
+    st_assert(bins != NULL);
+    tab->bins = bins;
+    initialize_bins(tab);
+    for (i = tab->entries_start; i < tab->entries_bound; i++) {
+        st_table_entry *p = &tab->entries[i];
+        st_index_t ind;
+#ifdef QUADRATIC_PROBE
+        st_index_t d = 1;
+#else
+        st_index_t peterb = p->hash;
+#endif
+
+        if (DELETED_ENTRY_P(p))
+            continue;
+
+        ind = hash_bin(p->hash, tab);
+        for(;;) {
+            st_index_t bin = get_bin(bins, size_ind, ind);
+            if (EMPTY_OR_DELETED_BIN_P(bin)) {
+                /* ok, new room */
+                set_bin(bins, size_ind, ind, i + ENTRY_BASE);
+                break;
+            }
+            else {
+                st_table_entry *q = &tab->entries[bin - ENTRY_BASE];
+		DO_PTR_EQUAL_CHECK(tab, q, p->hash, p->key, eq_p, rebuilt_p);
+		if (EXPECT(rebuilt_p, 0))
+		    return TRUE;
+		if (eq_p) {
+		    /* duplicated key; delete it */
+		    st_assert(q < p);
+		    q->record = p->record;
+		    MARK_ENTRY_DELETED(p);
+		    tab->num_entries--;
+		    update_range_for_deleted(tab, bin);
+		    break;
+		}
+		else {
+		    /* hash collision; skip it */
+#ifdef QUADRATIC_PROBE
+		    ind = hash_bin(ind + d, tab);
+		    d++;
+#else
+		    ind = secondary_hash(ind, tab, &peterb);
+#endif
+		}
+	    }
+        }
+    }
+    return FALSE;
+}
+
+/* Reconstruct TAB's bins according to TAB's entries. This function
+   permits conflicting keys inside of entries.  No errors are reported
+   then.  All but one of them are discarded silently. */
+static void
+st_rehash(st_table *tab)
+{
+    int rebuilt_p;
+
+    do {
+	if (tab->bin_power <= MAX_POWER2_FOR_TABLES_WITHOUT_BINS)
+	    rebuilt_p = st_rehash_linear(tab);
+	else
+	    rebuilt_p = st_rehash_indexed(tab);
+    } while (rebuilt_p);
+}
+
+static st_data_t
+st_stringify(VALUE key)
+{
+    return (rb_obj_class(key) == rb_cString && !RB_OBJ_FROZEN(key)) ?
+        rb_hash_key_str(key) : key;
+}
+
+static void
+st_insert_single(st_table *tab, VALUE hash, VALUE key, VALUE val)
+{
+    st_data_t k = st_stringify(key);
+    st_table_entry e;
+    e.hash = do_hash(k, tab);
+    e.key = k;
+    e.record = val;
+
+    tab->entries[tab->entries_bound++] = e;
+    tab->num_entries++;
+    RB_OBJ_WRITTEN(hash, Qundef, k);
+    RB_OBJ_WRITTEN(hash, Qundef, val);
+}
+
+static void
+st_insert_linear(st_table *tab, long argc, const VALUE *argv, VALUE hash)
+{
+    long i;
+
+    for (i = 0; i < argc; /* */) {
+        st_data_t k = st_stringify(argv[i++]);
+        st_data_t v = argv[i++];
+        st_insert(tab, k, v);
+        RB_OBJ_WRITTEN(hash, Qundef, k);
+        RB_OBJ_WRITTEN(hash, Qundef, v);
+    }
+}
+
+static void
+st_insert_generic(st_table *tab, long argc, const VALUE *argv, VALUE hash)
+{
+    long i;
+
+    /* push elems */
+    for (i = 0; i < argc; /* */) {
+        VALUE key = argv[i++];
+        VALUE val = argv[i++];
+        st_insert_single(tab, hash, key, val);
+    }
+
+    /* reindex */
+    st_rehash(tab);
+}
+
+/* Mimics ruby's { foo => bar } syntax. This function is subpart
+   of rb_hash_bulk_insert. */
+void
+rb_hash_bulk_insert_into_st_table(long argc, const VALUE *argv, VALUE hash)
+{
+    st_index_t n, size = argc / 2;
+    st_table *tab = RHASH_ST_TABLE(hash);
+
+    tab = RHASH_TBL_RAW(hash);
+    n = tab->entries_bound + size;
+    st_expand_table(tab, n);
+    if (UNLIKELY(tab->num_entries))
+        st_insert_generic(tab, argc, argv, hash);
+    else if (argc <= 2)
+        st_insert_single(tab, hash, argv[0], argv[1]);
+    else if (tab->bin_power <= MAX_POWER2_FOR_TABLES_WITHOUT_BINS)
+        st_insert_linear(tab, argc, argv, hash);
+    else
+        st_insert_generic(tab, argc, argv, hash);
+}
 #endif /* RUBY */
diff --git a/lib/onigmo/st.h b/lib/onigmo/st.h
index 812292b77..0135fa443 100644
--- a/lib/onigmo/st.h
+++ b/lib/onigmo/st.h
@@ -1,7 +1,7 @@
 /* This is a public domain general purpose hash table package
    originally written by Peter Moore @ UCB.
 
-   The hash table data strutures were redesigned and the package was
+   The hash table data structures were redesigned and the package was
    rewritten by Vladimir Makarov <vmakarov@redhat.com>.  */
 
 #ifndef RUBY_ST_H
@@ -103,7 +103,7 @@ struct st_table {
 
 #define st_is_member(table,key) st_lookup((table),(key),(st_data_t *)0)
 
-enum st_retval {ST_CONTINUE, ST_STOP, ST_DELETE, ST_CHECK};
+enum st_retval {ST_CONTINUE, ST_STOP, ST_DELETE, ST_CHECK, ST_REPLACE};
 
 st_table *st_init_table(const struct st_hash_type *);
 st_table *st_init_table_with_size(const struct st_hash_type *, st_index_t);
@@ -125,6 +125,7 @@ typedef int st_update_callback_func(st_data_t *key, st_data_t *value, st_data_t
  * results of hash() are same and compare() returns 0, otherwise the
  * behavior is undefined */
 int st_update(st_table *table, st_data_t key, st_update_callback_func *func, st_data_t arg);
+int st_foreach_with_replace(st_table *tab, int (*func)(ANYARGS), st_update_callback_func *replace, st_data_t arg);
 int st_foreach(st_table *, int (*)(ANYARGS), st_data_t);
 int st_foreach_check(st_table *, int (*)(ANYARGS), st_data_t, st_data_t);
 st_index_t st_keys(st_table *table, st_data_t *keys, st_index_t size);
@@ -150,6 +151,10 @@ st_index_t st_hash_end(st_index_t h);
 st_index_t st_hash_start(st_index_t h);
 #define st_hash_start(h) ((st_index_t)(h))
 
+#ifdef RUBY
+void rb_hash_bulk_insert_into_st_table(long, const VALUE *, VALUE);
+#endif
+
 RUBY_SYMBOL_EXPORT_END
 
 #if defined(__cplusplus)
diff --git a/lib/onigmo/test_enc_utf8.c b/lib/onigmo/test_enc_utf8.c
new file mode 100644
index 000000000..6f99fa1d2
--- /dev/null
+++ b/lib/onigmo/test_enc_utf8.c
@@ -0,0 +1,291 @@
+#include "config.h"
+#ifdef ONIG_ESCAPE_UCHAR_COLLISION
+#undef ONIG_ESCAPE_UCHAR_COLLISION
+#endif
+
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+
+#include "onigmo.h"
+
+/* #define USE_UTF8_31BITS */
+
+#define SLEN(s)  strlen(s)
+
+static int nsucc  = 0;
+static int nfail  = 0;
+static int nerror = 0;
+
+static FILE* err_file;
+
+static OnigRegion* region;
+
+static void xx(char* pattern, char* str, int from, int to, int mem, int not)
+{
+  int r;
+
+  regex_t* reg;
+  OnigErrorInfo einfo;
+  OnigSyntaxType syn = *ONIG_SYNTAX_DEFAULT;
+
+  r = onig_new(&reg, (UChar* )pattern, (UChar* )(pattern + SLEN(pattern)),
+	       ONIG_OPTION_NONE, ONIG_ENCODING_UTF8, &syn, &einfo);
+  if (r) {
+    char s[ONIG_MAX_ERROR_MESSAGE_LEN];
+    onig_error_code_to_str((UChar* )s, r, &einfo);
+    fprintf(err_file, "ERROR: %s\n", s);
+    nerror++;
+    return ;
+  }
+
+  r = onig_search(reg, (UChar* )str, (UChar* )(str + SLEN(str)),
+		  (UChar* )str, (UChar* )(str + SLEN(str)),
+		  region, ONIG_OPTION_NONE);
+  if (r < ONIG_MISMATCH) {
+    char s[ONIG_MAX_ERROR_MESSAGE_LEN];
+    onig_error_code_to_str((UChar* )s, r);
+    fprintf(err_file, "ERROR: %s\n", s);
+    nerror++;
+    return ;
+  }
+
+  if (r == ONIG_MISMATCH) {
+    if (not) {
+      fprintf(stdout, "OK(N): /%s/ '%s'\n", pattern, str);
+      nsucc++;
+    }
+    else {
+      fprintf(stdout, "FAIL: /%s/ '%s'\n", pattern, str);
+      nfail++;
+    }
+  }
+  else {
+    if (not) {
+      fprintf(stdout, "FAIL(N): /%s/ '%s'\n", pattern, str);
+      nfail++;
+    }
+    else {
+      if (region->beg[mem] == from && region->end[mem] == to) {
+        fprintf(stdout, "OK: /%s/ '%s'\n", pattern, str);
+        nsucc++;
+      }
+      else {
+        fprintf(stdout, "FAIL: /%s/ '%s' %d-%d : %d-%d\n", pattern, str,
+	        (int)from, (int)to, (int)region->beg[mem], (int)region->end[mem]);
+        nfail++;
+      }
+    }
+  }
+  onig_free(reg);
+}
+
+static void x2(char* pattern, char* str, int from, int to)
+{
+  xx(pattern, str, from, to, 0, 0);
+}
+
+#if 0
+static void x3(char* pattern, char* str, int from, int to, int mem)
+{
+  xx(pattern, str, from, to, mem, 0);
+}
+
+static void n(char* pattern, char* str)
+{
+  xx(pattern, str, 0, 0, 0, 1);
+}
+#endif
+
+const OnigEncodingType * target_encoding = ONIG_ENCODING_UTF8;
+
+static void test_mbc_enc_len(const char * str, int expect) {
+  const OnigEncodingType * enc = target_encoding;
+  size_t len = strlen(str);
+  int actual = ONIGENC_PRECISE_MBC_ENC_LEN(enc, (const UChar *)str, (const UChar *)str + len);
+  if (actual == expect) {
+    fprintf(stdout, "OK: mbc_enc_len(%s)=%d\n", str, expect);
+    nsucc++;
+  } else {
+    fprintf(stdout, "FAIL: mbc_enc_len(%s)=%d\n", str, expect);
+    nfail++;
+  }
+}
+
+static void test_code_to_mbclen(OnigCodePoint code, int expect) {
+  const OnigEncodingType * enc = target_encoding;
+  int actual = ONIGENC_CODE_TO_MBCLEN(enc, code);
+  if (actual == expect) {
+    fprintf(stdout, "OK: code_to_mbclen(U+%04X)=%d\n", code, expect);
+    nsucc++;
+  } else {
+    fprintf(stdout, "FAIL: code_to_mbclen(U+%04X)=%d\n", code, expect);
+    nfail++;
+  }
+}
+
+static void test_mbc_to_code(const char * str, int expect) {
+  const OnigEncodingType * enc = target_encoding;
+  size_t len = strlen(str);
+  int actual = ONIGENC_MBC_TO_CODE(enc, (const UChar *)str, (const UChar *)str + len);
+  if (actual == expect) {
+    fprintf(stdout, "OK: mbc_to_code(%s)=U+%04X\n", str, expect);
+    nsucc++;
+  } else {
+    fprintf(stdout, "FAIL: mbc_to_code(%s)=U+%04X\n", str, expect);
+    nfail++;
+  }
+}
+
+static void test_code_to_mbc(OnigCodePoint code, const char * expect, int exp_error) {
+  const OnigEncodingType * enc = target_encoding;
+  UChar * buf = (UChar *)malloc(ONIGENC_MBC_MAXLEN(enc) + 1);
+  int len = ONIGENC_CODE_TO_MBC(enc, code, buf);
+  if (len < 0) {
+    int err = len;
+    if (err == exp_error) {
+      fprintf(stdout, "OK: code_to_mbc(U+%04X)=(error %d)\n", code, len);
+      nsucc++;
+    } else {
+      fprintf(stdout, "FAIL: code_to_mbc(U+%04X)=(error %d)\n", code, len);
+      nfail++;
+    }
+    goto exit;
+  }
+
+  buf[len] = '\0';
+  if (strcmp((const char *)buf, expect) == 0) {
+    fprintf(stdout, "OK: code_to_mbc(U+%04X)=%s\n", code, expect);
+    nsucc++;
+  } else {
+    fprintf(stdout, "FAIL: code_to_mbc(U+%04X)=%s\n", code, expect);
+    nfail++;
+  }
+
+exit:
+  free(buf);
+}
+
+extern int main(int argc, char* argv[])
+{
+  err_file = stdout;
+
+  region = onig_region_new();
+
+  test_mbc_enc_len("\xC2\x80", 2);            // S0, S1, A
+  test_code_to_mbclen(0x0080, 2);
+  test_code_to_mbc(0x0080, "\xC2\x80", 0);
+  x2("\\x{0080}", "\xC2\x80", 0, 2);
+  x2("\xC2\x80", "\xC2\x80", 0, 2);           // min 2 bytes
+
+  test_mbc_enc_len("\xC2\xC0", -1);           // S0, S1, F
+
+  test_mbc_enc_len("\xDF\xBF", 2);            // S0, S1, A
+  test_code_to_mbclen(0x07FF, 2);
+  test_code_to_mbc(0x07FF, "\xDF\xBF", 0);
+  x2("\\x{07FF}", "\xDF\xBF", 0, 2);
+  x2("\xDF\xBF", "\xDF\xBF", 0, 2);           // max 2 bytes
+
+  test_mbc_enc_len("\xE0\xA0\x80", 3);        // S0, S2, S1, A
+  test_code_to_mbclen(0x0800, 3);
+  test_code_to_mbc(0x0800, "\xE0\xA0\x80", 0);
+  x2("\xE0\xA0\x80", "\xE0\xA0\x80", 0, 3);
+  x2("\\x{0800}", "\xE0\xA0\x80", 0, 3);      // min 3 bytes
+
+  test_mbc_enc_len("\xE0\xC0\x80", -1);       // S0, S2, F
+
+  test_mbc_enc_len("\xEF\xBF\xBF", 3);        // S0, S3, S1, A
+  test_code_to_mbclen(0xFFFF, 3);
+  test_code_to_mbc(0xFFFF, "\xEF\xBF\xBF", 0);
+  x2("\xEF\xBF\xBF", "\xEF\xBF\xBF", 0, 3);
+  x2("\\x{FFFF}", "\xEF\xBF\xBF", 0, 3);      // max 3 bytes
+
+  test_mbc_enc_len("\xEF\xC0\xBF", -1);       // S0, S3, F
+
+  test_mbc_enc_len("\xED\x80\x80", 3);        // S0, S4, S1, A
+  test_code_to_mbclen(0xD000, 3);
+  test_code_to_mbc(0xD000, "\xED\x80\x80", 0);
+  x2("\xED\x80\x80", "\xED\x80\x80", 0, 3);
+  x2("\\x{D000}", "\xED\x80\x80", 0, 3);
+
+  test_mbc_enc_len("\xED\xA0\xA0", -1);       // S0, S4, F
+
+  test_mbc_enc_len("\xF0\x90\x80\x80", 4);    // S0, S5, S3, S1, A
+  test_code_to_mbclen(0x00010000, 4);
+  test_code_to_mbc(0x00010000, "\xF0\x90\x80\x80", 0);
+  x2("\xF0\x90\x80\x80", "\xF0\x90\x80\x80", 0, 4);
+  x2("\\x{00010000}", "\xF0\x90\x80\x80", 0, 4); // min 4 bytes
+
+  test_mbc_enc_len("\xF0\x80\x80\x80", -1);   // S0, S5, F
+
+  test_mbc_enc_len("\xF4\x8F\xBF\xBF", 4);    // S0, S7, S3, S1, A
+  test_code_to_mbclen(0x0010FFFF, 4);
+  test_code_to_mbc(0x0010FFFF, "\xF4\x8F\xBF\xBF", 0);
+  x2("\xF4\x8F\xBF\xBF", "\xF4\x8F\xBF\xBF", 0, 4);
+  x2("\\x{0010FFFF}", "\xF4\x8F\xBF\xBF", 0, 4); // max Unicode
+
+#ifndef USE_UTF8_31BITS
+  test_mbc_enc_len("\xF7\xBF\xBF\xBF", -1);           // S0, F
+#else
+  test_mbc_enc_len("\xF7\xBF\xBF\xBF", 4);            // S0, S6, S3, S1, A
+  test_code_to_mbclen(0x001FFFFF, 4);
+  test_code_to_mbc(0x001FFFFF, "\xF7\xBF\xBF\xBF", 0);
+  x2("\xF7\xBF\xBF\xBF", "\xF7\xBF\xBF\xBF", 0, 4);
+  x2("\\x{001FFFFF}", "\xF7\xBF\xBF\xBF", 0, 4);      // max 4 bytes (21bits)
+
+  test_mbc_enc_len("\xF7\xC0\xBF\xBF", -1);           // S0, S6, F
+
+  test_mbc_enc_len("\xF8\x88\x80\x80\x80", 5);        // S0, S8, S6, S3, S1, A
+  test_code_to_mbclen(0x00200000, 5);
+  test_code_to_mbc(0x00200000, "\xF8\x88\x80\x80\x80", 0);
+  x2("\xF8\x88\x80\x80\x80", "\xF8\x88\x80\x80\x80", 0, 5);
+  x2("\\x{00200000}", "\xF8\x88\x80\x80\x80", 0, 5);  // min 5 bytes
+
+  test_mbc_enc_len("\xF8\x80\x80\x80\x80", -1);       // S0, S8, F
+
+  test_mbc_enc_len("\xFB\xBF\xBF\xBF\xBF", 5);        // S0, S9, S6, S3, S1, A
+  test_code_to_mbclen(0x03FFFFFF, 5);
+  test_code_to_mbc(0x03FFFFFF, "\xFB\xBF\xBF\xBF\xBF", 0);
+  x2("\xFB\xBF\xBF\xBF\xBF", "\xFB\xBF\xBF\xBF\xBF", 0, 5);
+  x2("\\x{03FFFFFF}", "\xFB\xBF\xBF\xBF\xBF", 0, 5);  // max 5 bytes
+
+  test_mbc_enc_len("\xFB\xC0\xBF\xBF\xBF", -1);       // S0, S9, F
+
+  test_mbc_enc_len("\xFC\x84\x80\x80\x80\x80", 6);    // S0, S10, S9, S6, S3, S1, A
+  test_code_to_mbclen(0x04000000, 6);
+  test_code_to_mbc(0x04000000, "\xFC\x84\x80\x80\x80\x80", 0);
+  x2("\xFC\x84\x80\x80\x80\x80", "\xFC\x84\x80\x80\x80\x80", 0, 6);
+  x2("\\x{04000000}", "\xFC\x84\x80\x80\x80\x80", 0, 6); // min 6 bytes
+
+  test_mbc_enc_len("\xFC\x80\x80\x80\x80\x80", -1);   // S0, S10, F
+
+  test_mbc_enc_len("\xFD\xBF\xBF\xBF\xBF\xBF", 6);    // S0, S11, S9, S6, S3, S1, A
+  test_code_to_mbclen(0x7FFFFFFF, 6);
+  test_code_to_mbc(0x7FFFFFFF, "\xFD\xBF\xBF\xBF\xBF\xBF", 0);
+  x2("\xFD\xBF\xBF\xBF\xBF\xBF", "\xFD\xBF\xBF\xBF\xBF\xBF", 0, 6);
+  x2("\\x{7FFFFFFF}", "\xFD\xBF\xBF\xBF\xBF\xBF", 0, 6); // max 6 bytes
+
+  test_mbc_enc_len("\xFD\xC0\xBF\xBF\xBF\xBF", -1);   // S0, S11, F
+
+  test_code_to_mbclen(0x80000000, ONIGERR_TOO_BIG_WIDE_CHAR_VALUE);
+  test_code_to_mbc(0x80000000, "", ONIGERR_TOO_BIG_WIDE_CHAR_VALUE);
+  test_code_to_mbclen(0xFFFFFFFD, ONIGERR_TOO_BIG_WIDE_CHAR_VALUE);
+  test_code_to_mbc(0xFFFFFFFD, "", ONIGERR_TOO_BIG_WIDE_CHAR_VALUE);
+  test_code_to_mbclen(0xFFFFFFFE, 1);
+  test_code_to_mbc(0xFFFFFFFE, "\xFE", 0);
+  test_code_to_mbclen(0xFFFFFFFF, 1);
+  test_code_to_mbc(0xFFFFFFFF, "\xFF", 0);
+#endif
+
+  test_mbc_to_code("\xFE", 0xFFFFFFFE);
+  test_mbc_to_code("\xFF", 0xFFFFFFFF);
+
+  fprintf(stdout,
+       "\nRESULT   SUCC: %d,  FAIL: %d,  ERROR: %d      (by Onigmo %s)\n",
+       nsucc, nfail, nerror, onig_version());
+
+  onig_region_free(region, 1);
+  onig_end();
+
+  return ((nfail == 0 && nerror == 0) ? 0 : -1);
+}
diff --git a/lib/onigmo/testpy.py b/lib/onigmo/testpy.py
index 5f3b477fb..7223886f0 100755
--- a/lib/onigmo/testpy.py
+++ b/lib/onigmo/testpy.py
@@ -1152,6 +1152,7 @@ def main():
     n("(?i)(?<!b|aa)c", "Aac")
     x2("(?<=\\babc)d", " abcd", 4, 5)
     x2("(?<=\\Babc)d", "aabcd", 4, 5)
+    n("(?<!a(?:bb|c))", "", err=onigmo.ONIGERR_INVALID_LOOK_BEHIND_PATTERN)
     x2("a\\b?a", "aa", 0, 2)
     x2("[^x]*x", "aaax", 0, 4)
     x2("(?i)[\\x{0}-B]+", "\x00\x01\x02\x1f\x20@AaBbC", 0, 10)
@@ -1172,9 +1173,32 @@ def main():
         x2("(?i)(?<=\u0149)a", "\u02bcna", 2, 3)    # with look-behind
         # Other Unicode tests
         x2("\\x{25771}", "\U00025771", 0, 1)
+    x2("(?i:ss)", "ss", 0, 2)
+    x2("(?i:ss)", "Ss", 0, 2)
+    x2("(?i:ss)", "SS", 0, 2)
+    if is_unicode_encoding(onig_encoding):
+        x2("(?i:ss)", "\u017fS", 0, 2)  # LATIN SMALL LETTER LONG S
+        x2("(?i:ss)", "s\u017f", 0, 2)
+        x2("(?i:ss)", "\u00df", 0, 1)   # LATIN SMALL LETTER SHARP S
+        x2("(?i:ss)", "\u1e9e", 0, 1)   # LATIN CAPITAL LETTER SHARP S
+    x2("(?i:xssy)", "xssy", 0, 4)
+    x2("(?i:xssy)", "xSsy", 0, 4)
+    x2("(?i:xssy)", "xSSy", 0, 4)
+    if is_unicode_encoding(onig_encoding):
+        x2("(?i:xssy)", "x\u017fSy", 0, 4)
+        x2("(?i:xssy)", "xs\u017fy", 0, 4)
+        x2("(?i:xssy)", "x\u00dfy", 0, 3)
+        x2("(?i:xssy)", "x\u1e9ey", 0, 3)
+        x2("(?i:\u00df)", "ss", 0, 2)
+        x2("(?i:\u00df)", "SS", 0, 2)
+        x2("(?i:[\u00df])", "ss", 0, 2)
+        x2("(?i:[\u00df])", "SS", 0, 2)
+    x2("(?i)(?<!ss)z", "qqz", 2, 3)     # Issue #92
+    x2("(?i)(?<!xss)z", "qqz", 2, 3)
     x2("[0-9-a]+", " 0123456789-a ", 1, 13)     # same as [0-9\-a]
     x2("[0-9-\\s]+", " 0123456789-a ", 0, 12)   # same as [0-9\-\s]
     n("[0-9-a]", "", syn=onigmo.ONIG_SYNTAX_GREP, err=onigmo.ONIGERR_UNMATCHED_RANGE_SPECIFIER_IN_CHAR_CLASS)
+    n("[a-\\d]", "", err=onigmo.ONIGERR_CHAR_CLASS_VALUE_AT_END_OF_RANGE)
     x2("[0-9-あ\\\\/\u0001]+", " 0123456789-あ\\/\u0001 ", 1, 16)
     x2("[a-b-]+", "ab-", 0, 3)
     x2("[a-b-&&-]+", "ab-", 2, 3)
@@ -1224,6 +1248,12 @@ def main():
     x2("(.)(?<a>a)(?<a>b)\\k<a>", "xaba", 0, 4)
     x2("\\p{Print}+", "\n a", 1, 3)
     x2("\\p{Graph}+", "\n a", 2, 3)
+    x2("\\p{^Space}", "x", 0, 1)
+    x2("\\P{^Space}", " ", 0, 1)
+    n("\\px", "")   # warning: invalid Unicode Property
+    x2("[\\p{^Space}]", "x", 0, 1)
+    x2("[\\P{^Space}]", " ", 0, 1)
+    n("[\\px]", "")   # warning: invalid Unicode Property
     n("a(?!b)", "ab");
     x2("(?:(.)\\1)*", "a" * 300, 0, 300)
     x2("\\cA\\C-B\\a[\\b]\\t\\n\\v\\f\\r\\e\\c?", "\x01\x02\x07\x08\x09\x0a\x0b\x0c\x0d\x1b\x7f", 0, 11)
@@ -1239,6 +1269,7 @@ def main():
     n("[c-a]", "", err=onigmo.ONIGERR_EMPTY_RANGE_IN_CHAR_CLASS)
     x2("[[:ab:\\x{30}]]+", ":ab0x", 0, 4)
     x2("[[:x\\]:]+", "[x:]", 0, 4)
+    x2("[\n\n]", "\n", 0, 1)
     x2("[!--x]+", "!-x", 0, 3)
     x2(" ]", " ]", 0, 2)    # warning: ']' without escape
     n("\\x{FFFFFFFF}", "", err=onigmo.ONIGERR_TOO_BIG_WIDE_CHAR_VALUE);
@@ -1288,6 +1319,26 @@ def main():
     x2("c.*\\b", "abc", 2, 3)           # Issue #96
     x2("abc.*\\b", "abc", 0, 3)         # Issue #96
     x2("\\b.*abc.*\\b", "abc", 0, 3)    # Issue #96
+    x2('(?i) *TOOKY', 'Mozilla/5.0 (Linux; Android 4.0.3; TOOKY', 34, 40)   # Issue #120
+    n("(?", "", err=onigmo.ONIGERR_END_PATTERN_IN_GROUP)
+    n("(?#", "", err=onigmo.ONIGERR_END_PATTERN_IN_GROUP)
+    n("\\", "", err=onigmo.ONIGERR_END_PATTERN_AT_ESCAPE)
+    n("\\M", "", err=onigmo.ONIGERR_END_PATTERN_AT_META)
+    n("\\M#", "", err=onigmo.ONIGERR_META_CODE_SYNTAX)
+    n("\\C", "", err=onigmo.ONIGERR_END_PATTERN_AT_CONTROL)
+    n("\\C#", "", err=onigmo.ONIGERR_CONTROL_CODE_SYNTAX)
+    n("(?0d", "", syn=onigmo.ONIG_SYNTAX_PERL, err=onigmo.ONIGERR_INVALID_GROUP_NAME) # Issue #132
+    if onig_encoding == onigmo.ONIG_ENCODING_UTF8:
+        n("\\x{1000000}", "", err=onigmo.ONIGERR_TOO_BIG_WIDE_CHAR_VALUE)
+    else:
+        n("\\x{1000000}", "")   # TODO: Should be an error? (code_to_mbc())
+    if onig_encoding == onigmo.ONIG_ENCODING_SJIS or \
+            onig_encoding == onigmo.ONIG_ENCODING_CP932 or \
+            onig_encoding == onigmo.ONIG_ENCODING_EUC_JP or \
+            onig_encoding == onigmo.ONIG_ENCODING_UTF8:
+        n("[\\x{1000000}]", "", err=onigmo.ONIGERR_TOO_BIG_WIDE_CHAR_VALUE)
+    else:
+        n("[\\x{1000000}]", "") # TODO: Should be an error? (code_to_mbclen())
 
     # ONIG_OPTION_FIND_LONGEST option
     x2("foo|foobar", "foobar", 0, 3)
@@ -1301,6 +1352,7 @@ def main():
     # ONIG_OPTION_DONT_CAPTURE_GROUP option
     x2("(ab|cd)*", "cdab", 0, 4, opt=onigmo.ONIG_OPTION_DONT_CAPTURE_GROUP)
     n("(ab|cd)*\\1", "", opt=onigmo.ONIG_OPTION_DONT_CAPTURE_GROUP, err=onigmo.ONIGERR_INVALID_BACKREF)
+    n("", "", opt=(onigmo.ONIG_OPTION_DONT_CAPTURE_GROUP | onigmo.ONIG_OPTION_CAPTURE_GROUP), err=onigmo.ONIGERR_INVALID_COMBINATION_OF_OPTIONS)
 
     # character classes (tests for character class optimization)
     x2("[@][a]", "@a", 0, 2);
@@ -1398,12 +1450,28 @@ def main():
     x2("((?<v>)a|b(?1)b)", "bbabb", 0, 5, syn=onigmo.ONIG_SYNTAX_PERL)
     x2("((?<v>a|b(?&v)b))", "bbabb", 0, 5, syn=onigmo.ONIG_SYNTAX_PERL)
     n("(?<", "", err=onigmo.ONIGERR_END_PATTERN_WITH_UNMATCHED_PARENTHESIS)
+    n("(?'", "", err=onigmo.ONIGERR_EMPTY_GROUP_NAME)
     n("(?<>)", "", err=onigmo.ONIGERR_EMPTY_GROUP_NAME)
     n("(?<.>)", "", err=onigmo.ONIGERR_INVALID_CHAR_IN_GROUP_NAME)
+    n("(?<1>)", "", err=onigmo.ONIGERR_INVALID_GROUP_NAME)
+    n("(?<-1>)", "", err=onigmo.ONIGERR_INVALID_GROUP_NAME)
     n("\\g<1->", "", err=onigmo.ONIGERR_INVALID_CHAR_IN_GROUP_NAME)
+    n("\\g<", "", err=onigmo.ONIGERR_EMPTY_GROUP_NAME)
+    n("\\g<a", "", err=onigmo.ONIGERR_INVALID_GROUP_NAME)
+    n("\\g<->", "", err=onigmo.ONIGERR_INVALID_GROUP_NAME)
+    n("\\g<-0>", "", err=onigmo.ONIGERR_INVALID_GROUP_NAME)
+    n("\\g<1a>", "", err=onigmo.ONIGERR_INVALID_GROUP_NAME)
+    n("\\g<a/>", "", err=onigmo.ONIGERR_INVALID_CHAR_IN_GROUP_NAME)
+    n("\\k.", "")
+    n("\\k<", "", err=onigmo.ONIGERR_EMPTY_GROUP_NAME)
+    n("\\k<>", "", err=onigmo.ONIGERR_EMPTY_GROUP_NAME)
     n("\\k<1/>", "", err=onigmo.ONIGERR_INVALID_GROUP_NAME)
     n("\\k<1-1/>", "", err=onigmo.ONIGERR_INVALID_GROUP_NAME)
+    n("\\k<1+", "", err=onigmo.ONIGERR_INVALID_CHAR_IN_GROUP_NAME)
+    n("\\k<.>", "", err=onigmo.ONIGERR_INVALID_CHAR_IN_GROUP_NAME)
     n("\\k<a/>", "", err=onigmo.ONIGERR_INVALID_CHAR_IN_GROUP_NAME)
+    n("\\k<aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa>", "", err=onigmo.ONIGERR_UNDEFINED_NAME_REFERENCE)
+    n("\\g<1>", "", err=onigmo.ONIGERR_UNDEFINED_GROUP_REFERENCE)
 
     # character set modifiers
     x2("(?u)\\w+", "あa#", 0, 2);
@@ -1617,6 +1685,7 @@ def main():
     x2("(?~abc|def)x", "abcx", 1, 4)
     x2("(?~abc|def)x", "defx", 1, 4)
     x2("^(?~\\S+)TEST", "TEST", 0, 4)
+    x3('(?~(a)c)', 'aab', -1, -1, 1)    # $1 should not match.
 
     # Perl syntax
     x2("\\Q()\\[a]\\E[b]", "()\\[a]b", 0, 7, syn=onigmo.ONIG_SYNTAX_PERL)
@@ -1677,7 +1746,9 @@ def main():
     # These patterns need deep parse stack.
     x2("(" * 200 + "a" + ")" * 200, "a", 0, 1)
     n("(" * 2000 + "a" + ")" * 2000, "a", err=onigmo.ONIGERR_PARSE_DEPTH_LIMIT_OVER)
-    onigmo.onig_set_match_stack_limit_size(0)
+    x2("X" + "+" * 100, "X", 0, 1)
+    n("X" + "+" * 10000, "X", err=onigmo.ONIGERR_PARSE_DEPTH_LIMIT_OVER)
+    onigmo.onig_set_parse_depth_limit(0)
 
     # syntax functions
     onigmo.onig_set_syntax_op(syntax_default,
diff --git a/lib/onigmo/tool/.gitignore b/lib/onigmo/tool/.gitignore
index 5658d47ae..981fe8fb6 100644
--- a/lib/onigmo/tool/.gitignore
+++ b/lib/onigmo/tool/.gitignore
@@ -10,6 +10,7 @@ Scripts.txt
 SpecialCasing.txt
 UnicodeData.txt
 GraphemeBreakProperty.txt
+emoji-data.txt
 
 # ignore generated files
 casefold.h
diff --git a/lib/onigmo/tool/Makefile b/lib/onigmo/tool/Makefile
index 4b1a3775c..38390ceea 100644
--- a/lib/onigmo/tool/Makefile
+++ b/lib/onigmo/tool/Makefile
@@ -1,4 +1,5 @@
-UNICODE_VERSION = 9.0.0
+UNICODE_VERSION = 12.1.0
+EMOJI_VERSION = 12.0
 
 PROP_FILES = \
 	    $(UNICODE_VERSION)/Blocks.txt \
@@ -9,7 +10,8 @@ PROP_FILES = \
 	    $(UNICODE_VERSION)/PropList.txt \
 	    $(UNICODE_VERSION)/Scripts.txt \
 	    $(UNICODE_VERSION)/UnicodeData.txt \
-	    $(UNICODE_VERSION)/auxiliary/GraphemeBreakProperty.txt
+	    $(UNICODE_VERSION)/auxiliary/GraphemeBreakProperty.txt \
+	    $(UNICODE_VERSION)/emoji-data.txt
 
 CASEFOLD_FILES = \
 	    $(UNICODE_VERSION)/CaseFolding.txt \
@@ -24,18 +26,18 @@ update-unicode-header: casefold.h name2ctype.h
 update-jis-header: ../enc/jis/props.kwd
 	cd .. && ./tool/convert-jis-props.sh enc/jis/props.kwd enc/jis/props.h && cd -
 
-update-doc: $(PROP_FILES)
+update-doc: $(PROP_FILES) update-doc.py
 	$(PYTHON) ./update-doc.py $(UNICODE_VERSION) > ../doc/UnicodeProps.txt
 
 download:
-	./download-ucd.sh $(UNICODE_VERSION)
+	./download-ucd.sh $(UNICODE_VERSION) $(EMOJI_VERSION)
 
 
-casefold.h: $(CASEFOLD_FILES)
+casefold.h: $(CASEFOLD_FILES) case-folding.rb
 	$(RUBY) ./case-folding.rb -m $(UNICODE_VERSION) -o casefold.h
 
-name2ctype.h: $(PROP_FILES)
-	$(RUBY) ./enc-unicode.rb --header $(UNICODE_VERSION) > name2ctype.h
+name2ctype.h: $(PROP_FILES) enc-unicode.rb
+	$(RUBY) ./enc-unicode.rb --header $(UNICODE_VERSION) > name2ctype.h || rm -f name2ctype.h
 
 
 clean:
diff --git a/lib/onigmo/tool/case-folding.rb b/lib/onigmo/tool/case-folding.rb
index c86eb8d8f..e0e9e3d1a 100755
--- a/lib/onigmo/tool/case-folding.rb
+++ b/lib/onigmo/tool/case-folding.rb
@@ -264,7 +264,6 @@ class CaseMapping
     from = Array(from).map {|i| "%04X" % i}.join(" ")
     to   = Array(to).map {|i| "%04X" % i}.join(" ")
     item = map(from)
-    specials_index = nil
     specials = []
     case type
     when 'CaseFold_11'
@@ -309,7 +308,7 @@ class CaseMapping
         end
         unless item.upper == item.title
           if item.code == item.title
-            raise "Unpredicted case 1 in enc/unicode/case_folding.rb. Please contact https://bugs.ruby-lang.org/."
+            flags += '|IT'   # was unpredicted case 1
           elsif item.title==to[1]
             flags += '|ST'
           else
@@ -410,8 +409,8 @@ if $0 == __FILE__
     s = f.string
   end
   if dest
-    open(dest, "wb") do |f|
-      f.print(s)
+    open(dest, "wb") do |file|
+      file.print(s)
     end
   else
     STDOUT.print(s)
diff --git a/lib/onigmo/tool/convert-jis-props.sh b/lib/onigmo/tool/convert-jis-props.sh
index 5eb008cae..476a5a532 100755
--- a/lib/onigmo/tool/convert-jis-props.sh
+++ b/lib/onigmo/tool/convert-jis-props.sh
@@ -5,7 +5,15 @@
 # Usage:
 #   ./tool/convert-jis-props.sh enc/jis/props.kwd enc/jis/props.h
 
+GPERF_VERSION=`gperf -v | head -n1 | sed -e 's/^GNU gperf \([0-9]\+\)\.\([0-9]\+.*\)$/\1 \2/' | xargs printf '%02d%02d'`
+if [ $GPERF_VERSION -ge '0301' ]; then
+    # static const struct enc_property *onig_jis_property(const char *str, unsigned int len);
+    GPERF_REPLACE='s/\(onig_jis_property([^,]\+, \).\+\( len)\)/\1size_t\2/'
+else
+    GPERF_REPLACE='#'
+fi
+
 JIS_PROPS_OPTIONS='-k1,3 -7 -c -j1 -i1 -t -C -P -t --ignore-case -H onig_jis_property_hash -Q onig_jis_property_pool -N onig_jis_property'
 
-gperf $JIS_PROPS_OPTIONS $1 | \
+gperf $JIS_PROPS_OPTIONS $1 | sed "$GPERF_REPLACE" | \
     sed 's/(int)(\(long\|size_t\))&((\([a-zA-Z_0-9 ]*[a-zA-Z_0-9]\) *\*)0)->\([a-zA-Z0-9_]*\),/(char)offsetof(\2, \3),/g' > $2
diff --git a/lib/onigmo/tool/download-ucd.sh b/lib/onigmo/tool/download-ucd.sh
index 770fdf74e..4f60dafe8 100755
--- a/lib/onigmo/tool/download-ucd.sh
+++ b/lib/onigmo/tool/download-ucd.sh
@@ -1,17 +1,19 @@
 #!/bin/bash
 
 files='Blocks.txt CaseFolding.txt DerivedAge.txt DerivedCoreProperties.txt PropertyAliases.txt PropertyValueAliases.txt PropList.txt Scripts.txt SpecialCasing.txt UnicodeData.txt auxiliary/GraphemeBreakProperty.txt'
+emoji_files='emoji-data.txt'
 
-if [ -z $1 ]; then
-	echo "usage: $0 UNICODE_VERSION"
+if [ -z $1 ] || [ -z $2 ]; then
+	echo "usage: $0 UNICODE_VERSION EMOJI_VERSION"
 	exit 1
 fi
 UNICODE_VERSION=$1
+EMOJI_VERSION=$2
 
 # remove old files
 if [ -d $UNICODE_VERSION ]; then
 	cd $UNICODE_VERSION
-	rm -f $files
+	rm -f $files $emoji_files
 	rm -f GraphemeBreakProperty.txt
 	cd -
 fi
@@ -23,3 +25,6 @@ for i in $files; do
 	echo http://www.unicode.org/Public/${UNICODE_VERSION}/ucd/$i
 done | xargs wget
 mv GraphemeBreakProperty.txt auxiliary
+for i in $emoji_files; do
+	echo http://www.unicode.org/Public/emoji/${EMOJI_VERSION}/$i
+done | xargs wget
diff --git a/lib/onigmo/tool/enc-unicode.rb b/lib/onigmo/tool/enc-unicode.rb
index ed45a3036..84f494e8d 100755
--- a/lib/onigmo/tool/enc-unicode.rb
+++ b/lib/onigmo/tool/enc-unicode.rb
@@ -22,6 +22,9 @@ $unicode_version = File.basename(ARGV[0])[/\A[.\d]+\z/]
 
 POSIX_NAMES = %w[NEWLINE Alpha Blank Cntrl Digit Graph Lower Print XPosixPunct Space Upper XDigit Word Alnum ASCII Punct]
 
+GPERF_VERSION = `gperf -v`.split("\n").first # /^GNU gperf (.+)$/
+  .split.last
+
 def pair_codepoints(codepoints)
 
   # We have a sorted Array of codepoints that we wish to partition into
@@ -133,14 +136,15 @@ def parse_scripts(data, categories)
   files = [
     {:fn => 'DerivedCoreProperties.txt', :title => 'Derived Property'},
     {:fn => 'Scripts.txt', :title => 'Script'},
-    {:fn => 'PropList.txt', :title => 'Binary Property'}
+    {:fn => 'PropList.txt', :title => 'Binary Property'},
+    {:fn => 'emoji-data.txt', :title => 'Emoji'}
   ]
   current = nil
   cps = []
   names = {}
   files.each do |file|
     data_foreach(file[:fn]) do |line|
-      if /^# Total code points: / =~ line
+      if /^# Total (?:code points|elements): / =~ line
         data[current] = cps
         categories[current] = file[:title]
         (names[file[:title]] ||= []) << current
@@ -228,7 +232,6 @@ def parse_GraphemeBreakProperty(data)
 end
 
 def parse_block(data)
-  current = nil
   cps = []
   blocks = []
   data_foreach('Blocks.txt') do |line|
@@ -310,13 +313,15 @@ def data_foreach(name, &block)
   pat = /^# #{File.basename(name).sub(/\./, '-([\\d.]+)\\.')}/
   File.open(fn, 'rb') do |f|
     line = f.gets
-    unless pat =~ line
-      raise ArgumentError, "#{name}: no Unicode version"
-    end
-    if !$unicode_version
-      $unicode_version = $1
-    elsif $unicode_version != $1
-      raise ArgumentError, "#{name}: Unicode version mismatch: #$1"
+    unless /^emoji-/ =~ name
+      unless pat =~ line
+        raise ArgumentError, "#{name}: no Unicode version"
+      end
+      if !$unicode_version
+        $unicode_version = $1
+      elsif $unicode_version != $1
+        raise ArgumentError, "#{name}: Unicode version mismatch: #$1"
+      end
     end
     f.each(&block)
   end
@@ -438,7 +443,7 @@ output.ifdef :USE_UNICODE_PROPERTIES do
   blocks.each{|name|puts"  CR_#{name},"}
 end
 
-puts(<<'__HEREDOC')
+puts(<<"__HEREDOC")
 };
 struct uniname2ctype_struct {
   short name;
@@ -446,7 +451,7 @@ struct uniname2ctype_struct {
 };
 #define uniname2ctype_offset(str) offsetof(struct uniname2ctype_pool_t, uniname2ctype_pool_##str)
 
-static const struct uniname2ctype_struct *uniname2ctype_p(const char *, unsigned int);
+static const struct uniname2ctype_struct *uniname2ctype_p(const char *, #{ GPERF_VERSION >= '3.1' ? 'size_t' : 'unsigned int' });
 %}
 struct uniname2ctype_struct;
 %%
diff --git a/lib/onigmo/tool/update-doc.py b/lib/onigmo/tool/update-doc.py
index 14de04769..f66791d25 100755
--- a/lib/onigmo/tool/update-doc.py
+++ b/lib/onigmo/tool/update-doc.py
@@ -10,7 +10,7 @@ import os
 import re
 import datetime
 
-onig_ver = "6.0.0"
+onig_ver = "6.2.1"
 ucddir = "."
 
 def print_list(arr, title):
@@ -50,7 +50,7 @@ def output_categories():
 
 def output_scripts(filename, title, add=[]):
     scripts = set(add)
-    pattern = re.compile('^.*?; (\w+) # ')
+    pattern = re.compile('^[0-9a-fA-F]+(?:\.\.[0-9a-fA-F]+)? *; (\w+) +# ')
     with open(filename, 'r') as f:
         for line in f:
             res = pattern.match(line)
@@ -135,6 +135,7 @@ def main():
     scripts |= output_scripts(ucddir + os.sep + 'Scripts.txt', 'Scripts', ["Unknown"])
     scripts |= output_scripts(ucddir + os.sep + 'DerivedCoreProperties.txt', 'DerivedCoreProperties')
     scripts |= output_scripts(ucddir + os.sep + 'PropList.txt', 'PropList')
+    scripts |= output_scripts(ucddir + os.sep + 'emoji-data.txt', 'Emoji')
     output_aliases(scripts)
     output_valuealiases(scripts)
     output_ages()
diff --git a/lib/onigmo/win32/Makefile b/lib/onigmo/win32/Makefile
index 0e21c4f47..23cecc1d1 100644
--- a/lib/onigmo/win32/Makefile
+++ b/lib/onigmo/win32/Makefile
@@ -43,7 +43,7 @@ RC = rc
 DEFS = -DHAVE_CONFIG_H -DEXPORT
 
 !if "$(ARCH)"=="x86"
-PYTHON = py -3.4-32
+PYTHON = py -3-32
 !else
 PYTHON = py -3
 !endif
diff --git a/lib/onigmo/win32/onigmo.rc b/lib/onigmo/win32/onigmo.rc
index 20ef0e577..c3019d71e 100644
--- a/lib/onigmo/win32/onigmo.rc
+++ b/lib/onigmo/win32/onigmo.rc
@@ -2,7 +2,7 @@
   onigmo.rc - Onigmo (Oniguruma-mod) (regular expression library)
 **********************************************************************/
 /*-
- * Copyright (c) 2011-2016  K.Takata  <kentkt AT csc DOT jp>
+ * Copyright (c) 2011-2019  K.Takata  <kentkt AT csc DOT jp>
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -73,7 +73,7 @@ BEGIN
             VALUE "FileDescription", "Onigmo (Oniguruma-mod) (regular expression library)\0"
             VALUE "FileVersion", ONIG_VERSION_STRING "\0"
             VALUE "InternalName", "onigmo.dll\0"
-            VALUE "LegalCopyright", "Copyright (C) 2002-2016 K.Kosako, 2011-2016 K.Takata\0"
+            VALUE "LegalCopyright", "Copyright (C) 2002-2018 K.Kosako, 2011-2019 K.Takata\0"
             VALUE "LegalTrademarks", "\0"
             VALUE "OriginalFilename", "onigmo.dll\0"
             VALUE "PrivateBuild", "\0"
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 2faa45df7..433970da6 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -200,9 +200,9 @@ if(FLB_JEMALLOC)
 endif()
 
 if(FLB_REGEX)
-  set(extra_libs
-    ${extra_libs}
-    "libonigmo")
+  set(FLB_DEPS
+    ${FLB_DEPSS}
+    onigmo-static)
   set(src
     ${src}
     "flb_regex.c"
@@ -475,7 +475,7 @@ if(FLB_BINARY)
   endif()
 
   if(FLB_REGEX)
-    target_link_libraries(fluent-bit-bin libonigmo)
+    target_link_libraries(fluent-bit-bin onigmo-static)
   endif()
 
   if(FLB_JEMALLOC)
diff --git a/src/proxy/go/CMakeLists.txt b/src/proxy/go/CMakeLists.txt
index 94c199e98..93e500353 100644
--- a/src/proxy/go/CMakeLists.txt
+++ b/src/proxy/go/CMakeLists.txt
@@ -6,5 +6,5 @@ if(FLB_JEMALLOC)
   target_link_libraries(flb-plugin-proxy-go libjemalloc)
 endif()
 if(FLB_REGEX)
-  target_link_libraries(flb-plugin-proxy-go libonigmo)
+  target_link_libraries(flb-plugin-proxy-go onigmo-static)
 endif()
diff --git a/src/record_accessor/CMakeLists.txt b/src/record_accessor/CMakeLists.txt
index 2e57bd38b..9eb3825d9 100644
--- a/src/record_accessor/CMakeLists.txt
+++ b/src/record_accessor/CMakeLists.txt
@@ -24,7 +24,7 @@ add_library(flb-ra-parser STATIC
     )
 
 add_flex_bison_dependency(lexer parser)
-add_dependencies(flb-ra-parser libonigmo)
+add_dependencies(flb-ra-parser onigmo-static)
 
 if(FLB_JEMALLOC)
   target_link_libraries(flb-ra-parser libjemalloc)
diff --git a/src/stream_processor/parser/CMakeLists.txt b/src/stream_processor/parser/CMakeLists.txt
index b05e33600..d14b02bbd 100644
--- a/src/stream_processor/parser/CMakeLists.txt
+++ b/src/stream_processor/parser/CMakeLists.txt
@@ -24,7 +24,7 @@ add_library(flb-sp-parser STATIC
     )
 
 add_flex_bison_dependency(lexer parser)
-add_dependencies(flb-sp-parser libonigmo)
+add_dependencies(flb-sp-parser onigmo-static)
 
 if(FLB_JEMALLOC)
   target_link_libraries(flb-sp-parser libjemalloc)
