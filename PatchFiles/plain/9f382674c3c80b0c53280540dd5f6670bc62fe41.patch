From d314d790853799ac4db940c852dd673dfde8d3cf Mon Sep 17 00:00:00 2001
From: Nathan Moinvaziri <nathan@nathanm.com>
Date: Sat, 10 Oct 2020 20:18:04 -0700
Subject: [PATCH 1/2] Fixed heap-buffer-overflow asan read error on 32-bit arch

---
 blosc/blosc2.c | 10 ++++++----
 1 file changed, 6 insertions(+), 4 deletions(-)

diff --git a/blosc/blosc2.c b/blosc/blosc2.c
index 91fc05034..fda00881f 100644
--- a/blosc/blosc2.c
+++ b/blosc/blosc2.c
@@ -970,7 +970,6 @@ static int blosc_d(
   uint8_t* filters = context->filters;
   uint8_t *tmp3 = thread_context->tmp4;
   int32_t compformat = (context->header_flags & 0xe0) >> 5;
-  uint8_t *src_end = (uint8_t *)src + srcsize;
   int dont_split = (context->header_flags & 0x10) >> 4;
   //uint8_t blosc_version_format = src[0];
   int nstreams;
@@ -995,6 +994,7 @@ static int blosc_d(
   }
 
   src += src_offset;
+  srcsize -= src_offset;
 
   int last_filter_index = last_filter(filters, 'd');
 
@@ -1018,14 +1018,16 @@ static int blosc_d(
 
   neblock = bsize / nstreams;
   for (int j = 0; j < nstreams; j++) {
-    if (src + sizeof(int32_t) > src_end) {
+    srcsize -= sizeof(int32_t);
+    if (srcsize < 0) {
       /* Not enough input to read compressed size */
       return -1;
     }
     cbytes = sw32_(src);      /* amount of compressed bytes */
     src += sizeof(int32_t);
-    if (src + cbytes > src_end) {
-      /* Not enough input to read compressed size */
+    srcsize -= cbytes;
+    if (srcsize < 0) {
+      /* Not enough input to read compressed bytes */
       return -1;
     }
     ctbytes += (int32_t)sizeof(int32_t);

From d0e530f3134ccd7e8d64d8bb1a76da700472eaa2 Mon Sep 17 00:00:00 2001
From: Nathan Moinvaziri <nathan@nathanm.com>
Date: Sun, 11 Oct 2020 09:12:14 -0700
Subject: [PATCH 2/2] Fixed over read check using pointers on 32-bit
 architectures.

---
 blosc/blosc2.c | 32 ++++++++++++++++++--------------
 1 file changed, 18 insertions(+), 14 deletions(-)

diff --git a/blosc/blosc2.c b/blosc/blosc2.c
index fda00881f..1d77bb86f 100644
--- a/blosc/blosc2.c
+++ b/blosc/blosc2.c
@@ -1500,6 +1500,8 @@ static int initialize_context_decompression(blosc2_context* context, const void*
                                             void* dest, int32_t destsize) {
   uint8_t blosc2_flags = 0;
   int32_t cbytes;
+  int32_t bstarts_offset;
+  int32_t bstarts_end;
 
   context->do_compress = 0;
   context->src = (const uint8_t*)src;
@@ -1526,6 +1528,10 @@ static int initialize_context_decompression(blosc2_context* context, const void*
       cbytes > srcsize) {
     return -1;
   }
+  /* Check that we have enough space to decompress */
+  if (context->sourcesize > (int32_t)destsize) {
+    return -1;
+  }
 
   /* Total blocks */
   context->nblocks = context->sourcesize / context->blocksize;
@@ -1557,24 +1563,20 @@ static int initialize_context_decompression(blosc2_context* context, const void*
       context->filters_meta[i] = filters_meta[i];
     }
     context->filter_flags = filters_to_flags(filters);
-    context->bstarts = (int32_t*)(context->src + BLOSC_EXTENDED_HEADER_LENGTH);
-
+    bstarts_offset = BLOSC_EXTENDED_HEADER_LENGTH;
     blosc2_flags = context->src[0x1F];
   } else {
     /* Regular (Blosc1) header */
     context->filter_flags = get_filter_flags(context->header_flags,
                                              context->typesize);
     flags_to_filters(context->header_flags, context->filters);
-    context->bstarts = (int32_t*)(context->src + BLOSC_MIN_HEADER_LENGTH);
+    bstarts_offset = BLOSC_MIN_HEADER_LENGTH;
   }
 
-  /* Check that we have enough space to decompress */
-  if (context->sourcesize > (int32_t)destsize) {
-    return -1;
-  }
-  const uint8_t *src_end = (context->src + context->srcsize);
-  const int32_t *bstarts_end = (int32_t *)(context->bstarts + context->nblocks);
-  if (src_end < (uint8_t *)bstarts_end) {
+  context->bstarts = (int32_t*)(context->src + bstarts_offset);
+  bstarts_end = bstarts_offset + (context->nblocks * sizeof(int32_t));
+  srcsize -= bstarts_end;
+  if (srcsize < 0) {
     /* Not enough input to read entire `bstarts` section */
     return -1;
   }
@@ -1587,21 +1589,23 @@ static int initialize_context_decompression(blosc2_context* context, const void*
       // Free the existing dictionary (probably from another chunk)
       ZSTD_freeDDict(context->dict_ddict);
     }
+    srcsize -= sizeof(int32_t);
     // The trained dictionary is after the bstarts block
-    if (src_end < (uint8_t *)(bstarts_end + 1)) {
+    if (srcsize < 0) {
       /* Not enough input to size of dictionary */
       return -1;
     }
-    context->dict_size = (size_t)sw32_(bstarts_end);
+    context->dict_size = (size_t)sw32_(context->src + bstarts_end);
     if (context->dict_size <= 0 || context->dict_size > BLOSC2_MAXDICTSIZE) {
       /* Dictionary size is smaller than minimum or larger than maximum allowed */
       return -1;
     }
-    if (src_end < (uint8_t *)(bstarts_end + 1) + context->dict_size) {
+    srcsize -= context->dict_size;
+    if (srcsize < 0) {
       /* Not enough input to read entire dictionary */
       return -1;
     }
-    context->dict_buffer = (void*)(bstarts_end + 1);
+    context->dict_buffer = (void*)(context->src + bstarts_end + sizeof(int32_t));
     context->dict_ddict = ZSTD_createDDict(context->dict_buffer, context->dict_size);
 #endif   // HAVE_ZSTD
   }
