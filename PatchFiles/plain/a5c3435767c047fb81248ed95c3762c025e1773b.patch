From 8c21398283a81503ac20f11027c6960a27fde207 Mon Sep 17 00:00:00 2001
From: Gregor Jasny <gjasny@googlemail.com>
Date: Mon, 5 Mar 2018 09:16:38 +0100
Subject: [PATCH] rutil: ParseBuffer: Do not read past the buffer.

That heap-buffer-overflow was found by oss-fuzz.

Bug: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=6713
---
 rutil/ParseBuffer.cxx          |  2 +-
 rutil/test/testParseBuffer.cxx | 26 ++++++++++++++++++++++++++
 2 files changed, 27 insertions(+), 1 deletion(-)

diff --git a/rutil/ParseBuffer.cxx b/rutil/ParseBuffer.cxx
index b0e711fae5..db9c0d2dc6 100644
--- a/rutil/ParseBuffer.cxx
+++ b/rutil/ParseBuffer.cxx
@@ -857,7 +857,7 @@ ParseBuffer::qVal()
          return 0;
       }
       
-      if (*mPosition == '.')
+      if (!eof() && *mPosition == '.')
       {
          skipChar();
          
diff --git a/rutil/test/testParseBuffer.cxx b/rutil/test/testParseBuffer.cxx
index e8b8a7d05f..3647604f4f 100644
--- a/rutil/test/testParseBuffer.cxx
+++ b/rutil/test/testParseBuffer.cxx
@@ -387,6 +387,32 @@ main(int argc, char** argv)
       assert(*pb.position() == 'Z');
    }
    
+   {
+      char buf[] = "1.000";
+      ParseBuffer pb(buf, strlen(buf));
+      assert(pb.qVal() == 1000);
+   }
+
+   {
+      const char buf[] = {'1'};
+      const Data data(Data::Share, buf, sizeof(buf));
+      ParseBuffer pb(data);
+      assert(pb.qVal() == 1000);
+   }
+
+   {
+      const char buf[] = {'1', '.'};
+      const Data data(Data::Share, buf, sizeof(buf));
+      ParseBuffer pb(data);
+      assert(pb.qVal() == 1000);
+   }
+
+   {
+      char buf[] = "0.800";
+      ParseBuffer pb(buf, strlen(buf));
+      assert(pb.qVal() == 800);
+   }
+
    {
       char buf[] = "17 ";
       ParseBuffer pb(buf, strlen(buf));   
