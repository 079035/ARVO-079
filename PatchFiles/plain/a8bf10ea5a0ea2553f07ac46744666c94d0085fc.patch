From a8bf10ea5a0ea2553f07ac46744666c94d0085fc Mon Sep 17 00:00:00 2001
From: Daniel Lemire <lemire@gmail.com>
Date: Fri, 30 Oct 2020 14:51:50 -0400
Subject: [PATCH] Minor patch.

---
 src/from_chars.cpp   | 16 ++++++++--------
 tests/basictests.cpp |  1 +
 2 files changed, 9 insertions(+), 8 deletions(-)

diff --git a/src/from_chars.cpp b/src/from_chars.cpp
index 188df44046..7250c47144 100644
--- a/src/from_chars.cpp
+++ b/src/from_chars.cpp
@@ -75,11 +75,9 @@ decimal parse_decimal(const char *&p) noexcept {
     ++p;
   }
   while (is_integer(*p)) {
-    if (answer.num_digits + 1 < max_digits) {
+    if (answer.num_digits < max_digits) {
       answer.digits[answer.num_digits] = uint8_t(*p - '0');
-    } else {
-      answer.truncated = true;
-    }
+    } 
     answer.num_digits++;
     ++p;
   }
@@ -95,11 +93,9 @@ decimal parse_decimal(const char *&p) noexcept {
       }
     }
     while (is_integer(*p)) {
-      if (answer.num_digits + 1 < max_digits) {
+      if (answer.num_digits < max_digits) {
         answer.digits[answer.num_digits] = uint8_t(*p - '0');
-      } else {
-        answer.truncated = true;
-      }
+      } 
       answer.num_digits++;
       ++p;
     }
@@ -126,6 +122,10 @@ decimal parse_decimal(const char *&p) noexcept {
     answer.decimal_point += (neg_exp ? -exp_number : exp_number);
   }
   answer.decimal_point += answer.num_digits;
+  if(answer.num_digits > max_digits ) {
+    answer.num_digits = max_digits;
+    answer.truncated = true;
+  }
   return answer;
 }
 
diff --git a/tests/basictests.cpp b/tests/basictests.cpp
index eaab08fa57..4aeae99882 100644
--- a/tests/basictests.cpp
+++ b/tests/basictests.cpp
@@ -48,6 +48,7 @@ namespace number_tests {
   bool ground_truth() {
     std::cout << __func__ << std::endl;
     std::pair<std::string,double> ground_truth[] = {
+      {x1.03ae05e8fca1cp+63}, 
       {"2.2250738585072013e-308",0x1p-1022},
       {"-92666518056446206563E3", -0x1.39f764644154dp+76},
       {"-92666518056446206563E3", -0x1.39f764644154dp+76},
