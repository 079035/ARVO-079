commit b609c25f7f881bea4b10c8e1b9b950b635437320
Author: Chris Liddell <chris.liddell@artifex.com>
Date:   Tue Jun 28 13:23:02 2022 +0100

    oss-fuzz 48305: Use ref counting for subclass child device
    
    The .currentoutputdevice (custom) operator leaves the chance that PS VM still
    has a reference to the "child" of a subclassed device. In normal operation,
    this isn't a problem, but on an error, that PS reference may persist until
    after the unsubclass operation, meaning the "child" is freed while there is
    still an active reference to it.
    
    Change the code to use reference counting to ensure that works. This means
    considerable fiddling to ensure that, after subclassing, anything sent to the
    (now moribund) child device doesn't end up affecting the parent.

diff --git a/base/gdevdflt.c b/base/gdevdflt.c
index 72a43ff17..616052cdb 100644
--- a/base/gdevdflt.c
+++ b/base/gdevdflt.c
@@ -1347,6 +1347,9 @@ int gx_device_subclass(gx_device *dev_to_subclass, gx_device *new_prototype, uns
     child_dev->stype = a_std;
     child_dev->stype_is_dynamic = 1;
 
+    /* At this point, the only counted reference to the child is from its parent, and we need it to use the right allocator */
+    rc_init(child_dev, dev_to_subclass->memory->stable_memory, 1);
+
     psubclass_data = (void *)gs_alloc_bytes(dev_to_subclass->memory->non_gc_memory, private_data_size, "subclass memory for subclassing device");
     if (psubclass_data == 0){
         gs_free_const_object(dev_to_subclass->memory->non_gc_memory, b_std, "gs_device_subclass(stype)");
@@ -1432,12 +1435,15 @@ void gx_device_unsubclass(gx_device *dev)
     gx_device *parent, *child;
     gs_memory_struct_type_t *a_std = 0, *b_std = 0;
     int dynamic, ref_count;
+    gs_memory_t *rcmem;
 
     /* This should not happen... */
     if (!dev)
         return;
 
     ref_count = dev->rc.ref_count;
+    rcmem = dev->rc.memory;
+
     child = dev->child;
     psubclass_data = (generic_subclass_data *)dev->subclass_data;
     parent = dev->parent;
@@ -1484,6 +1490,7 @@ void gx_device_unsubclass(gx_device *dev)
          * when we copy back the subclassed device.
          */
         dev->rc.ref_count = ref_count;
+        dev->rc.memory = rcmem;
 
         /* If we have a chain of devices, make sure the chain beyond the
          * device we're unsubclassing doesn't get broken, we need to
@@ -1502,12 +1509,6 @@ void gx_device_unsubclass(gx_device *dev)
      * devices it's possible that their child pointer can then be NULL.
      */
     if (child) {
-        if (child->icc_struct)
-            rc_decrement(child->icc_struct, "gx_device_unsubclass, icc_struct");
-        if (child->PageList)
-            rc_decrement(child->PageList, "gx_device_unsubclass, PageList");
-        if (child->NupControl)
-            rc_decrement(child->NupControl, "gx_device_unsubclass, NupControl");
         /* We cannot afford to free the child device if its stype is not
          * dynamic because we can't 'null' the finalise routine, and we
          * cannot permit the device to be finalised because we have copied
@@ -1520,8 +1521,7 @@ void gx_device_unsubclass(gx_device *dev)
              * just security here. */
             child->parent = NULL;
             child->child = NULL;
-            /* Make certain the memory will be freed, zap the reference count */
-            child->rc.ref_count = 0;
+
             /* We *don't* want to run the finalize routine. This would free
              * the stype and properly handle the icc_struct and PageList,
              * but for devices with a custom finalize (eg psdcmyk) it might
@@ -1530,22 +1530,27 @@ void gx_device_unsubclass(gx_device *dev)
              * variable is just to get rid of const warnings.
              */
             b_std = (gs_memory_struct_type_t *)child->stype;
-            b_std->finalize = NULL;
-            /* Having patched the stype, we need to make sure the memory
+            gs_free_const_object(dev->memory->non_gc_memory, b_std, "gs_device_unsubclass(stype)");
+            /* Make this into a generic device */
+            child->stype = &st_device;
+            child->stype_is_dynamic = false;
+
+            /* We can't simply discard the child device, because there may be references to it elsewhere,
+               but equally, we really don't want it doing anything, so set the procs so actions are just discarded.
+             */
+            gx_copy_device_procs(child, (gx_device *)&gs_null_device, (gx_device *)&gs_null_device);
+
+            /* Having changed the stype, we need to make sure the memory
              * manager uses it. It keeps a copy in its own data structure,
              * and would use that copy, which would mean it would call the
              * finalize routine that we just patched out.
              */
-            gs_set_object_type(dev->memory->stable_memory, child, b_std);
+            gs_set_object_type(dev->memory->stable_memory, child, child->stype);
+            child->finalize = NULL;
             /* Now (finally) free the child memory */
-            gs_free_object(dev->memory->stable_memory, child, "gx_device_unsubclass(device)");
-            /* And the stype for it */
-            gs_free_const_object(dev->memory->non_gc_memory, b_std, "gs_device_unsubclass(stype)");
-            child = 0;
+            rc_decrement(child, "gx_device_unsubclass(device)");
         }
     }
-    if(child)
-        child->parent = dev;
     dev->parent = parent;
 
     /* If this device has a dynamic stype, we wnt to keep using it, but we copied
diff --git a/base/gdevsclass.c b/base/gdevsclass.c
index 85a6d2d24..15a2f1971 100644
--- a/base/gdevsclass.c
+++ b/base/gdevsclass.c
@@ -875,9 +875,8 @@ void default_subclass_finalize(const gs_memory_t *cmem, void *vptr)
     if (dev->finalize)
         dev->finalize(dev);
 
-    if (dev->child) {
-        gs_free_object(dev->memory->stable_memory, dev->child, "free child device memory for subclassing device");
-    }
+    rc_decrement(dev->child, "de-reference child device");
+
     if (psubclass_data) {
         gs_free_object(dev->memory->non_gc_memory, psubclass_data, "gx_epo_finalize(suclass data)");
         dev->subclass_data = NULL;
diff --git a/psi/zdevice.c b/psi/zdevice.c
index 99beaff7f..7e9779f7e 100644
--- a/psi/zdevice.c
+++ b/psi/zdevice.c
@@ -45,7 +45,7 @@ ENUM_PTRS_WITH(psi_device_ref_enum_ptrs, psi_device_ref *devref)
       }
     case 0:
       {
-          if (devref->device->memory != NULL) {
+          if (devref->device != NULL && devref->device->memory != NULL) {
               ENUM_RETURN(gx_device_enum_ptr(devref->device));
           }
           return 0;
@@ -54,7 +54,7 @@ ENUM_PTRS_END
 
 static
 RELOC_PTRS_WITH(psi_device_ref_reloc_ptrs, psi_device_ref *devref)
-    if (devref->device->memory != NULL) {
+    if (devref->device != NULL && devref->device->memory != NULL) {
         devref->device = gx_device_reloc_ptr(devref->device, gcst);
     }
 RELOC_PTRS_END
@@ -71,7 +71,7 @@ psi_device_ref_finalize(const gs_memory_t *cmem, void *vptr)
     /* pdref->device->memory == NULL indicates either a device prototype
        or a device allocated on the stack rather than the heap
      */
-    if (pdref->device->memory != NULL)
+    if (pdref->device != NULL && pdref->device->memory != NULL)
         rc_decrement(pdref->device, "psi_device_ref_finalize");
 
     pdref->device = NULL;
@@ -456,6 +456,7 @@ zmakewordimagedevice(i_ctx_t *i_ctx_p)
             return_error(gs_error_VMerror);
         }
         psdev->device = new_dev;
+        rc_increment(new_dev);
         make_tav(op - 4, t_device, imemory_space(iimemory) | a_all, pdevice, psdev);
         pop(4);
     }
