commit ba3e2927065463a70c4c145137a24e2226316b76
Author: Daniel Baston <dbaston@gmail.com>
Date:   Wed Nov 9 12:13:03 2022 -0500

    Fix double-free when Node::add throws (#730)
    
    Fixes https://github.com/libgeos/geos/issues/606

diff --git a/include/geos/geomgraph/NodeMap.h b/include/geos/geomgraph/NodeMap.h
index 1279a6375..a35ab52e3 100644
--- a/include/geos/geomgraph/NodeMap.h
+++ b/include/geos/geomgraph/NodeMap.h
@@ -71,8 +71,17 @@ public:
 
     Node* addNode(Node* n);
 
+    /// \brief
+    /// Adds a node for the start point of this EdgeEnd
+    /// (if one does not already exist in this map).
+    /// Adds the EdgeEnd to the (possibly new) node.
+    ///
+    /// If ownership of the EdgeEnd should be transferred
+    /// to the Node, use the unique_ptr overload instead.
     void add(EdgeEnd* e);
 
+    void add(std::unique_ptr<EdgeEnd>&& e);
+
     Node* find(const geom::Coordinate& coord) const;
 
     const_iterator
diff --git a/include/geos/operation/relate/EdgeEndBuilder.h b/include/geos/operation/relate/EdgeEndBuilder.h
index 7e57d1a3a..a6c414338 100644
--- a/include/geos/operation/relate/EdgeEndBuilder.h
+++ b/include/geos/operation/relate/EdgeEndBuilder.h
@@ -20,6 +20,7 @@
 
 #include <geos/export.h>
 
+#include <memory>
 #include <vector>
 
 // Forward declarations
@@ -48,18 +49,18 @@ class GEOS_DLL EdgeEndBuilder {
 public:
     EdgeEndBuilder() {}
 
-    std::vector<geomgraph::EdgeEnd*> computeEdgeEnds(std::vector<geomgraph::Edge*>* edges);
-    void computeEdgeEnds(geomgraph::Edge* edge, std::vector<geomgraph::EdgeEnd*>* l);
+    std::vector<std::unique_ptr<geomgraph::EdgeEnd>> computeEdgeEnds(std::vector<geomgraph::Edge*>* edges);
+    void computeEdgeEnds(geomgraph::Edge* edge, std::vector<std::unique_ptr<geomgraph::EdgeEnd>>& l);
 
 protected:
 
     void createEdgeEndForPrev(geomgraph::Edge* edge,
-                              std::vector<geomgraph::EdgeEnd*>* l,
+                              std::vector<std::unique_ptr<geomgraph::EdgeEnd>>& l,
                               const geomgraph::EdgeIntersection* eiCurr,
                               const geomgraph::EdgeIntersection* eiPrev);
 
     void createEdgeEndForNext(geomgraph::Edge* edge,
-                              std::vector<geomgraph::EdgeEnd*>* l,
+                              std::vector<std::unique_ptr<geomgraph::EdgeEnd>>& l,
                               const geomgraph::EdgeIntersection* eiCurr,
                               const geomgraph::EdgeIntersection* eiNext);
 };
diff --git a/include/geos/operation/relate/RelateComputer.h b/include/geos/operation/relate/RelateComputer.h
index dfdcbd4b8..a232534d2 100644
--- a/include/geos/operation/relate/RelateComputer.h
+++ b/include/geos/operation/relate/RelateComputer.h
@@ -99,7 +99,7 @@ private:
     /// the intersection point found (if any)
     geom::Coordinate invalidPoint;
 
-    void insertEdgeEnds(std::vector<geomgraph::EdgeEnd*>* ee);
+    void insertEdgeEnds(std::vector<std::unique_ptr<geomgraph::EdgeEnd>>& ee);
 
     void computeProperIntersectionIM(
         geomgraph::index::SegmentIntersector* intersector,
diff --git a/include/geos/operation/relate/RelateNodeGraph.h b/include/geos/operation/relate/RelateNodeGraph.h
index 257037ef4..d409d9712 100644
--- a/include/geos/operation/relate/RelateNodeGraph.h
+++ b/include/geos/operation/relate/RelateNodeGraph.h
@@ -81,7 +81,7 @@ public:
 
     void copyNodesAndLabels(geomgraph::GeometryGraph* geomGraph, uint8_t argIndex);
 
-    void insertEdgeEnds(std::vector<geomgraph::EdgeEnd*>* ee);
+    void insertEdgeEnds(std::vector<std::unique_ptr<geomgraph::EdgeEnd>>& ee);
 
 private:
 
diff --git a/src/geomgraph/Node.cpp b/src/geomgraph/Node.cpp
index cabb9b89c..211f7f96b 100644
--- a/src/geomgraph/Node.cpp
+++ b/src/geomgraph/Node.cpp
@@ -133,9 +133,8 @@ Node::isIncidentEdgeInResult() const
 }
 
 void
-Node::add(EdgeEnd* p_e)
+Node::add(EdgeEnd* e)
 {
-    std::unique_ptr<EdgeEnd> e(p_e);
     assert(e);
 #if GEOS_DEBUG
     std::cerr << "[" << this << "] Node::add(" << e->print() << ")" << std::endl;
@@ -154,10 +153,10 @@ Node::add(EdgeEnd* p_e)
     assert(edges);
     //if (edges==NULL) return;
 
-    edges->insert(e.release());
-    p_e->setNode(this);
+    edges->insert(e);
+    e->setNode(this);
 #if COMPUTE_Z
-    addZ(p_e->getCoordinate().z);
+    addZ(e->getCoordinate().z);
 #endif
     testInvariant();
 }
diff --git a/src/geomgraph/NodeMap.cpp b/src/geomgraph/NodeMap.cpp
index c7a001268..331fbaa98 100644
--- a/src/geomgraph/NodeMap.cpp
+++ b/src/geomgraph/NodeMap.cpp
@@ -115,6 +115,13 @@ NodeMap::add(EdgeEnd* e)
     n->add(e);
 }
 
+void
+NodeMap::add(std::unique_ptr<EdgeEnd>&& e)
+{
+    add(e.get());
+    e.release();
+}
+
 /*
  * @return the node if found; null otherwise
  */
diff --git a/src/operation/relate/EdgeEndBuilder.cpp b/src/operation/relate/EdgeEndBuilder.cpp
index 586109292..d952dc103 100644
--- a/src/operation/relate/EdgeEndBuilder.cpp
+++ b/src/operation/relate/EdgeEndBuilder.cpp
@@ -23,6 +23,7 @@
 #include <geos/geomgraph/EdgeEnd.h>
 #include <geos/geomgraph/EdgeIntersectionList.h>
 #include <geos/geomgraph/Label.h>
+#include <geos/util.h>
 
 #include <vector>
 
@@ -33,12 +34,12 @@ namespace geos {
 namespace operation { // geos.operation
 namespace relate { // geos.operation.relate
 
-std::vector<EdgeEnd*>
+std::vector<std::unique_ptr<EdgeEnd>>
 EdgeEndBuilder::computeEdgeEnds(std::vector<Edge*>* edges)
 {
-    std::vector<EdgeEnd*> l;
+    std::vector<std::unique_ptr<EdgeEnd>> l;
     for(Edge* e : *edges) {
-        computeEdgeEnds(e, &l);
+        computeEdgeEnds(e, l);
     }
     return l;
 }
@@ -48,7 +49,7 @@ EdgeEndBuilder::computeEdgeEnds(std::vector<Edge*>* edges)
  * Edge (if any) and inserts them into the graph.
  */
 void
-EdgeEndBuilder::computeEdgeEnds(Edge* edge, std::vector<EdgeEnd*>* l)
+EdgeEndBuilder::computeEdgeEnds(Edge* edge, std::vector<std::unique_ptr<EdgeEnd>>& l)
 {
     EdgeIntersectionList& eiList = edge->getEdgeIntersectionList();
     //Debug.print(eiList);
@@ -91,7 +92,7 @@ EdgeEndBuilder::computeEdgeEnds(Edge* edge, std::vector<EdgeEnd*>* l)
  * eiCurr will always be an EdgeIntersection, but eiPrev may be null.
  */
 void
-EdgeEndBuilder::createEdgeEndForPrev(Edge* edge, std::vector<EdgeEnd*>* l,
+EdgeEndBuilder::createEdgeEndForPrev(Edge* edge, std::vector<std::unique_ptr<EdgeEnd>>& l,
                                      const EdgeIntersection* eiCurr, const EdgeIntersection* eiPrev)
 {
     auto iPrev = eiCurr->segmentIndex;
@@ -110,9 +111,9 @@ EdgeEndBuilder::createEdgeEndForPrev(Edge* edge, std::vector<EdgeEnd*>* l,
     Label label(edge->getLabel());
     // since edgeStub is oriented opposite to it's parent edge, have to flip sides for edge label
     label.flip();
-    EdgeEnd* e = new EdgeEnd(edge, eiCurr->coord, pPrev, label);
+    auto e = detail::make_unique<EdgeEnd>(edge, eiCurr->coord, pPrev, label);
     //e.print(System.out);  System.out.println();
-    l->push_back(e);
+    l.push_back(std::move(e));
 }
 
 /**
@@ -124,7 +125,7 @@ EdgeEndBuilder::createEdgeEndForPrev(Edge* edge, std::vector<EdgeEnd*>* l,
  * eiCurr will always be an EdgeIntersection, but eiNext may be null.
  */
 void
-EdgeEndBuilder::createEdgeEndForNext(Edge* edge, std::vector<EdgeEnd*>* l,
+EdgeEndBuilder::createEdgeEndForNext(Edge* edge, std::vector<std::unique_ptr<EdgeEnd>>& l,
                                      const EdgeIntersection* eiCurr, const EdgeIntersection* eiNext)
 {
     std::size_t iNext = eiCurr->segmentIndex + 1;
@@ -137,9 +138,10 @@ EdgeEndBuilder::createEdgeEndForNext(Edge* edge, std::vector<EdgeEnd*>* l,
     if(eiNext != nullptr && eiNext->segmentIndex == eiCurr->segmentIndex) {
         pNext = eiNext->coord;
     }
-    EdgeEnd* e = new EdgeEnd(edge, eiCurr->coord, pNext, edge->getLabel());
+
+    auto e = detail::make_unique<EdgeEnd>(edge, eiCurr->coord, pNext, edge->getLabel());
     //Debug.println(e);
-    l->push_back(e);
+    l.push_back(std::move(e));
 }
 
 } // namespace geos.operation.relate
diff --git a/src/operation/relate/RelateComputer.cpp b/src/operation/relate/RelateComputer.cpp
index 7885c3a68..bbdd255fe 100644
--- a/src/operation/relate/RelateComputer.cpp
+++ b/src/operation/relate/RelateComputer.cpp
@@ -188,9 +188,9 @@ RelateComputer::computeIM()
      */
     // build EdgeEnds for all intersections
     EdgeEndBuilder eeBuilder;
-    std::vector<EdgeEnd*> ee0 = eeBuilder.computeEdgeEnds((*arg)[0]->getEdges());
-    insertEdgeEnds(&ee0);
-    std::vector<EdgeEnd*> ee1 = eeBuilder.computeEdgeEnds((*arg)[1]->getEdges());
+    auto&& ee0 = eeBuilder.computeEdgeEnds((*arg)[0]->getEdges());
+    insertEdgeEnds(ee0);
+    auto&& ee1 = eeBuilder.computeEdgeEnds((*arg)[1]->getEdges());
 
 #if GEOS_DEBUG
     std::cerr << "RelateComputer::computeIM: "
@@ -198,7 +198,7 @@ RelateComputer::computeIM()
               << std::endl;
 #endif
 
-    insertEdgeEnds(&ee1);
+    insertEdgeEnds(ee1);
 
 #if GEOS_DEBUG
     std::cerr << "RelateComputer::computeIM: "
@@ -234,10 +234,10 @@ RelateComputer::computeIM()
 }
 
 void
-RelateComputer::insertEdgeEnds(std::vector<EdgeEnd*>* ee)
+RelateComputer::insertEdgeEnds(std::vector<std::unique_ptr<EdgeEnd>>& ee)
 {
-    for(EdgeEnd* e: *ee) {
-        nodes.add(e);
+    for(auto& e : ee) {
+        nodes.add(std::move(e));
     }
 }
 
diff --git a/src/operation/relate/RelateNodeGraph.cpp b/src/operation/relate/RelateNodeGraph.cpp
index 78a6e2ce4..1ae35929c 100644
--- a/src/operation/relate/RelateNodeGraph.cpp
+++ b/src/operation/relate/RelateNodeGraph.cpp
@@ -72,8 +72,8 @@ RelateNodeGraph::build(GeometryGraph* geomGraph)
      * Build EdgeEnds for all intersections.
      */
     EdgeEndBuilder eeBuilder;
-    std::vector<EdgeEnd*> eeList = eeBuilder.computeEdgeEnds(geomGraph->getEdges());
-    insertEdgeEnds(&eeList);
+    auto&& eeList = eeBuilder.computeEdgeEnds(geomGraph->getEdges());
+    insertEdgeEnds(eeList);
 }
 
 /**
@@ -131,10 +131,10 @@ RelateNodeGraph::copyNodesAndLabels(GeometryGraph *geomGraph, uint8_t argIndex)
 }
 
 void
-RelateNodeGraph::insertEdgeEnds(std::vector<EdgeEnd*>* ee)
+RelateNodeGraph::insertEdgeEnds(std::vector<std::unique_ptr<EdgeEnd>>& ee)
 {
-    for(EdgeEnd* e: *ee) {
-        nodes->add(e);
+    for(auto& e : ee) {
+        nodes->add(std::move(e));
     }
 }
 
diff --git a/tests/unit/capi/GEOSUnionTest.cpp b/tests/unit/capi/GEOSUnionTest.cpp
index 2efceb22d..fa52a7d94 100644
--- a/tests/unit/capi/GEOSUnionTest.cpp
+++ b/tests/unit/capi/GEOSUnionTest.cpp
@@ -43,5 +43,24 @@ void object::test<1>()
     GEOSGeom_destroy(expected);
 }
 
+// Verify that no crash occurs in overlay with NaN coordinates
+// https://github.com/libgeos/geos/issues/606
+template<>
+template<>
+void object::test<2>()
+{
+    std::string wkb1 = "010100000000000000000000000000000000000840";
+    std::string wkb2 = "01020000000300000049544C553736090000FFFF544E494F500000000000000000FFFFFF2B2B2B2B2BFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFF";
+
+    geom1_ = GEOSGeomFromHEX_buf((unsigned char*) wkb1.c_str(), wkb1.size());
+    geom2_ = GEOSGeomFromHEX_buf((unsigned char*) wkb2.c_str(), wkb2.size());
+
+    ensure(geom1_);
+    ensure(geom2_);
+
+    GEOSGeometry* result = GEOSUnion(geom1_, geom2_);
+    (void) result; // no crash
+}
+
 } // namespace tut
 
