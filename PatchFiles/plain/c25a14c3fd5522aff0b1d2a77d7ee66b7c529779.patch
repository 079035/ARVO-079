From c25a14c3fd5522aff0b1d2a77d7ee66b7c529779 Mon Sep 17 00:00:00 2001
From: David Anderson <davea42@linuxmail.org>
Date: Mon, 27 Mar 2023 10:07:36 -0700
Subject: [PATCH] Unused local variables removed. 	modified:  
 src/lib/libdwarf/dwarf_gdbindex.c

A free() was duplicated, Windows compiler noticed.
	modified:   src/lib/libdwarf/dwarf_line_table_reader_common.h
---
 src/lib/libdwarf/dwarf_gdbindex.c                 | 10 ----------
 src/lib/libdwarf/dwarf_line_table_reader_common.h |  1 -
 2 files changed, 11 deletions(-)

diff --git a/src/lib/libdwarf/dwarf_gdbindex.c b/src/lib/libdwarf/dwarf_gdbindex.c
index 4b4bd0d5..0ddf894e 100644
--- a/src/lib/libdwarf/dwarf_gdbindex.c
+++ b/src/lib/libdwarf/dwarf_gdbindex.c
@@ -182,7 +182,6 @@ dwarf_gdbindex_header(Dwarf_Debug dbg,
 {
     Dwarf_Gdbindex indexptr = 0;
     int res = DW_DLV_ERROR;
-    Dwarf_Unsigned localoff = 0;
     Dwarf_Small *data = 0;
     Dwarf_Small *startdata = 0;
     Dwarf_Unsigned version_in = 0;
@@ -238,7 +237,6 @@ dwarf_gdbindex_header(Dwarf_Debug dbg,
         return DW_DLV_ERROR;
     }
     data += DWARF_32BIT_SIZE;
-    localoff += DWARF_32BIT_SIZE;
     READ_GDBINDEX(indexptr->gi_cu_list_offset ,Dwarf_Unsigned,
         data, DWARF_32BIT_SIZE);
     if (indexptr->gi_cu_list_offset > indexptr->gi_section_length) {
@@ -250,7 +248,6 @@ dwarf_gdbindex_header(Dwarf_Debug dbg,
         return DW_DLV_ERROR;
     }
     data += DWARF_32BIT_SIZE;
-    localoff += DWARF_32BIT_SIZE;
     READ_GDBINDEX(indexptr->gi_types_cu_list_offset ,Dwarf_Unsigned,
         data, DWARF_32BIT_SIZE);
     if (indexptr->gi_types_cu_list_offset > 
@@ -264,7 +261,6 @@ dwarf_gdbindex_header(Dwarf_Debug dbg,
         return DW_DLV_ERROR;
     }
     data += DWARF_32BIT_SIZE;
-    localoff += DWARF_32BIT_SIZE;
     READ_GDBINDEX(indexptr->gi_address_area_offset ,Dwarf_Unsigned,
         data, DWARF_32BIT_SIZE);
     if (indexptr->gi_address_area_offset > 
@@ -278,7 +274,6 @@ dwarf_gdbindex_header(Dwarf_Debug dbg,
         return DW_DLV_ERROR;
     }
     data += DWARF_32BIT_SIZE;
-    localoff += DWARF_32BIT_SIZE;
     READ_GDBINDEX(indexptr->gi_symbol_table_offset ,Dwarf_Unsigned,
         data, DWARF_32BIT_SIZE);
     if (indexptr->gi_symbol_table_offset > 
@@ -292,7 +287,6 @@ dwarf_gdbindex_header(Dwarf_Debug dbg,
         return DW_DLV_ERROR;
     }
     data += DWARF_32BIT_SIZE;
-    localoff += DWARF_32BIT_SIZE;
     READ_GDBINDEX(indexptr->gi_constant_pool_offset ,Dwarf_Unsigned,
         data, DWARF_32BIT_SIZE);
     if (indexptr->gi_constant_pool_offset > 
@@ -306,7 +300,6 @@ dwarf_gdbindex_header(Dwarf_Debug dbg,
         return DW_DLV_ERROR;
     }
     data += DWARF_32BIT_SIZE;
-    localoff += DWARF_32BIT_SIZE;
     
     res = set_base(dbg,&indexptr->gi_culisthdr,
         startdata + indexptr->gi_cu_list_offset,
@@ -689,7 +682,6 @@ dwarf_gdbindex_cuvector_length(Dwarf_Gdbindex gdbindexptr,
     Dwarf_Small *endptr = 0;
     Dwarf_Unsigned fieldlen = 0;
     Dwarf_Unsigned val = 0;
-    Dwarf_Unsigned secoff = 0;
 
     if (!gdbindexptr || !gdbindexptr->gi_dbg) {
         _dwarf_error_string(NULL, error,
@@ -701,12 +693,10 @@ dwarf_gdbindex_cuvector_length(Dwarf_Gdbindex gdbindexptr,
     }
 
     base = gdbindexptr->gi_cuvectorhdr.dg_base;
-    secoff = (Dwarf_Unsigned)(base - gdbindexptr->gi_section_data); 
     endptr = gdbindexptr->gi_section_data +
         gdbindexptr->gi_section_length;
     fieldlen = gdbindexptr->gi_cuvectorhdr.dg_entry_length;
     base += cuvector_offset;
-    secoff += cuvector_offset;
     if (( base + fieldlen) >endptr) {
         Dwarf_Debug dbg = gdbindexptr->gi_dbg;
         emit_no_value_msg(dbg, DW_DLE_GDB_INDEX_INDEX_ERROR,
diff --git a/src/lib/libdwarf/dwarf_line_table_reader_common.h b/src/lib/libdwarf/dwarf_line_table_reader_common.h
index 5985bcdb..1a6b3e46 100644
--- a/src/lib/libdwarf/dwarf_line_table_reader_common.h
+++ b/src/lib/libdwarf/dwarf_line_table_reader_common.h
@@ -987,7 +987,6 @@ _dwarf_read_line_table_header(Dwarf_Debug dbg,
                     break;
 
                 default:
-                    free(filename_entry_pairs);
                     _dwarf_report_bad_lnct(dbg,
                         lntype,
                         DW_DLE_LINE_NUMBER_HEADER_ERROR,
