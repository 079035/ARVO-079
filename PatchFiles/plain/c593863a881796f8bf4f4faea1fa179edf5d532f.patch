From c593863a881796f8bf4f4faea1fa179edf5d532f Mon Sep 17 00:00:00 2001
From: Neil Dhar <neildhar@fb.com>
Date: Mon, 21 Sep 2020 11:46:57 -0700
Subject: [PATCH] Add cursor bounds check for word boundary assertions

Summary:
Check whether the cursor is currently at the end of the string before
dereferencing it. This ensures that we read valid data when parsing
word boundary assertions.

Reviewed By: dulinriley

Differential Revision: D23807839

fbshipit-source-id: 9c4a5a775fe5f34025e6d21b8a860b8e195e49d0
---
 lib/Regex/RegexParser.cpp | 5 ++++-
 test/hermes/regexp.js     | 4 ++++
 2 files changed, 8 insertions(+), 1 deletion(-)

diff --git a/lib/Regex/RegexParser.cpp b/lib/Regex/RegexParser.cpp
index 9611b547f2a..aa534e3ad8b 100644
--- a/lib/Regex/RegexParser.cpp
+++ b/lib/Regex/RegexParser.cpp
@@ -420,7 +420,10 @@ class Parser {
         case '\\': {
           consume('\\');
           // This may be an ES6 21.2.2.6 Assertion (\b or \B) or an AtomeEscape.
-          if (*current_ == 'b' || *current_ == 'B') {
+          if (current_ == end_) {
+            setError(constants::ErrorType::EscapeIncomplete);
+            return;
+          } else if (*current_ == 'b' || *current_ == 'B') {
             re_->pushWordBoundary(*current_ == 'B' /* invert */);
             consume(*current_);
             quantifierAllowed = false;
diff --git a/test/hermes/regexp.js b/test/hermes/regexp.js
index 7ffc76b7efb..66e612a2352 100644
--- a/test/hermes/regexp.js
+++ b/test/hermes/regexp.js
@@ -462,6 +462,10 @@ try { new RegExp("["); } catch (e) { print(e.message); }
 try { new RegExp("\\"); } catch (e) { print(e.message); }
 // CHECK-NEXT: Invalid RegExp: Incomplete escape
 
+// Check that incomplete escapes don't cause an OOB read.
+try { new RegExp("                                \\"); } catch (e) { print(e.message); }
+// CHECK-NEXT: Invalid RegExp: Incomplete escape
+
 // textual 'undefined' flag is invalid.
 try {
   RegExp(/1/g, 'undefined');
