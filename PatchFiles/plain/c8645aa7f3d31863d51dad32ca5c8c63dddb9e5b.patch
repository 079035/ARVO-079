From c8645aa7f3d31863d51dad32ca5c8c63dddb9e5b Mon Sep 17 00:00:00 2001
From: Guy Harris <gharris@sonic.net>
Date: Sat, 30 May 2020 20:08:14 -0700
Subject: [PATCH] Add pcap_handle(), and deprecate pcap_fileno(), on Windows.

I don't know whether a Windows HANDLE can be expected to survive
conversion to an int - and there's no need for it to have to be
converted.  If a caller needs to do something with a HANDLE associated
with a pcap_t, it should call the new pcap_handle() routine and get a
HANDLE; code for UN*X that uses the result of pcap_fileno() is unlikely
to work on Windows anyway.

Squelch the "pointer truncation from 'HANDLE' to 'DWORD'" warning, as,
if that truncation causes an issue, callers should use pcap_handle(),
and if it *doesn't* cause an issue, it's, well, not an issue.
---
 diag-control.h |  3 ++-
 pcap.c         | 30 ++++++++++++++++++++++++------
 pcap/pcap.h    | 12 ++++++++++++
 3 files changed, 38 insertions(+), 7 deletions(-)

diff --git a/diag-control.h b/diag-control.h
index 55d0da80c1..30815fc1f9 100644
--- a/diag-control.h
+++ b/diag-control.h
@@ -72,7 +72,8 @@
    */
   #define DIAG_OFF_NARROWING \
     __pragma(warning(push)) \
-    __pragma(warning(disable:4242))
+    __pragma(warning(disable:4242)) \
+    __pragma(warning(disable:4311))
   #define DIAG_ON_NARROWING \
     __pragma(warning(pop))
 
diff --git a/pcap.c b/pcap.c
index 38aaf379bf..7b89c05126 100644
--- a/pcap.c
+++ b/pcap.c
@@ -3464,18 +3464,36 @@ pcap_file(pcap_t *p)
 	return (p->rfile);
 }
 
+#ifdef _WIN32
+HANDLE
+pcap_handle(pcap_t *p)
+{
+	return (p->handle);
+}
+
 int
 pcap_fileno(pcap_t *p)
 {
-#ifndef _WIN32
-	return (p->fd);
-#else
-	if (p->handle != INVALID_HANDLE_VALUE)
+	if (p->handle != INVALID_HANDLE_VALUE) {
+		/*
+		 * This is a bogus and now-deprecated API; we
+		 * squelch the narrowing warning for the cast
+		 * from HANDLE to DWORD - Windows programmers
+		 * should use pcap_handle().
+		 */
+DIAG_OFF_NARROWING
 		return ((int)(DWORD)p->handle);
-	else
+DIAG_ON_WARINING
+	} else
 		return (PCAP_ERROR);
-#endif
 }
+#else /* _WIN32 */
+int
+pcap_fileno(pcap_t *p)
+{
+	return (p->fd);
+}
+#endif /* _WIN32 */
 
 #if !defined(_WIN32) && !defined(MSDOS)
 int
diff --git a/pcap/pcap.h b/pcap/pcap.h
index ee2221fa54..9385e4e983 100644
--- a/pcap/pcap.h
+++ b/pcap/pcap.h
@@ -548,7 +548,19 @@ PCAP_API int	pcap_bufsize(pcap_t *);
 
 /* XXX */
 PCAP_API FILE	*pcap_file(pcap_t *);
+#ifdef _WIN32
+/*
+ * This returns a HANDLE, cast to an int; UN*X code that uses the
+ * result of pcap_fileno() will probably not work on Windows.
+ * We keep it around for backwards compatibility, but also provide
+ * pcap_handle(), which returns a HANDLE.
+ */
+PCAP_API HANDLE	pcap_handle(pcap_t *);
+PCAP_API int	pcap_fileno(pcap_t *)
+PCAP_DEPRECATED(pcap_fileno, "use 'pcap_handle'");
+#else /* _WIN32 */
 PCAP_API int	pcap_fileno(pcap_t *);
+#endif /* _WIN32 */
 
 #ifdef _WIN32
   PCAP_API int	pcap_wsockinit(void);
