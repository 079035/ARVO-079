From c9c8d81e0e97fff0e4b9a01704ed9cc94fba928c Mon Sep 17 00:00:00 2001
From: danielaparker <danielaparker@yahoo.com>
Date: Wed, 2 Jun 2021 22:22:24 -0400
Subject: [PATCH] improve decimal128_to_chars

---
 include/jsoncons_ext/bson/bson_decimal128.hpp | 18 +++++++++++++++---
 tests/bson/src/bson_decimal128_tests.cpp      |  2 +-
 2 files changed, 16 insertions(+), 4 deletions(-)

diff --git a/include/jsoncons_ext/bson/bson_decimal128.hpp b/include/jsoncons_ext/bson/bson_decimal128.hpp
index ac6e7acd8c..2f6e98a800 100644
--- a/include/jsoncons_ext/bson/bson_decimal128.hpp
+++ b/include/jsoncons_ext/bson/bson_decimal128.hpp
@@ -470,9 +470,21 @@ namespace jsoncons { namespace bson {
            }
            /* Exponent */
            *(str_out++) = 'E';
-           int n = snprintf (str_out, 6, "%+d", scientific_exponent);
-           int m = (std::min)(n,5);
-           str_out += m;
+
+           std::string s;
+           if (scientific_exponent >= 0) {
+               s.push_back('+');
+           }
+           jsoncons::detail::from_integer(scientific_exponent, s);
+           if (str_out + s.size() < last) 
+           {
+               memcpy(str_out, s.data(), s.size());
+           }
+           else
+           {
+               return decimal128_to_chars_result{str_out, std::errc::value_too_large};
+           }
+           str_out += s.size();
         } else {
            /* Regular format with no decimal place */
            if (exponent >= 0) {
diff --git a/tests/bson/src/bson_decimal128_tests.cpp b/tests/bson/src/bson_decimal128_tests.cpp
index 8473006ae7..8f67418395 100644
--- a/tests/bson/src/bson_decimal128_tests.cpp
+++ b/tests/bson/src/bson_decimal128_tests.cpp
@@ -246,7 +246,7 @@ TEST_CASE("test_decimal128_to_string__scientific")
     {
         auto rc = bson::decimal128_to_chars(buf, buf+sizeof(buf), tiniest);
         CHECK(rc.ec == std::errc());
-        CHECK (!strcmp("9.999999999999999999999999999999999E-6143", buf));
+        CHECK (std::equal(buf, rc.ptr, "9.999999999999999999999999999999999E-6143"));
     }
     {
         auto rc = bson::decimal128_to_chars(buf, buf+sizeof(buf), trailing_zero);
