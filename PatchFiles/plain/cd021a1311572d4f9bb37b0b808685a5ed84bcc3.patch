From cd021a1311572d4f9bb37b0b808685a5ed84bcc3 Mon Sep 17 00:00:00 2001
From: David Anderson <davea42@linuxmail.org>
Date: Mon, 8 Nov 2021 10:20:24 -0800
Subject: [PATCH] Working toward complete reporting of the oss-fuzz reports. 
 modified:   bugxml/data.txt

Corrected a test for a section group section-reference
so it catches a section number just one too big.
	modified:   src/lib/libdwarf/dwarf_elf_load_headers.c
---
 bugxml/data.txt                           | 40 +++++++++++++++--------
 src/lib/libdwarf/dwarf_elf_load_headers.c | 12 ++++---
 2 files changed, 34 insertions(+), 18 deletions(-)

diff --git a/bugxml/data.txt b/bugxml/data.txt
index 82d7412ac..71b8d7b3f 100644
--- a/bugxml/data.txt
+++ b/bugxml/data.txt
@@ -1,3 +1,18 @@
+id: DW202111-010
+cve:
+fuzzer: oss-fuzz-40627
+datereported: 2021-11-02
+reportedby: David Korczynski
+vulnerability: Abrt in _dwarf_error_string
+product: libdwarf
+description: The Elf object file has some corruption. The
+  read now stops with an error.
+datefixed: 2021-11-07
+references: regressiontests/ossfuzz40627/clusterfuzz-testcase-fuzz_init_path-5186858573758464
+  regressiontests/ossfuzz40627/clusterfuzz-testcase-minimized-fuzz_init_path-5186858573758464
+gitfixid: 94dece3ce0f030d06da442a103bd6a5301410b25
+tarrelease:
+endrec: DW202111-010
 
 id: DW202111-009
 cve:
@@ -40,11 +55,10 @@ reportedby: David Korczynski
 vulnerability:  Null-dereference READ in dwarf_object_init_b
 product: libdwarf
 description: Verified as fixed by oss-fuzz
-  The testcase has illegal libdwarf call
-  and improper include statements.
-datefixed:
+  The Macho headers are corrupted and that is now reported.
+datefixed: 2021-11-07
 references:
-gitfixid:
+gitfixid: 94dece3ce0f030d06da442a103bd6a5301410b25
 tarrelease:
 endrec: DW202111-007
 
@@ -55,11 +69,10 @@ datereported: 2021-11-03
 reportedby: David Korczynski
 vulnerability: Heap-buffer-overflow in _dwarf_elf_setup_all_section_groups
 product: libdwarf
-description: The testcase has illegal libdwarf call
-  and improper include statements.
-datefixed: 
-references: 
-gitfixid: 
+description:  Object file has corrupt section group information.
+datefixed: 2021-11-07
+references: regressiontests/ossfuzz40674/clusterfuzz-testcase-minimized-fuzz_init_path-6557751518560256
+gitfixid: 94dece3ce0f030d06da442a103bd6a5301410b25
 tarrelease:
 endrec: DW202111-005
 
@@ -70,13 +83,12 @@ datereported: 2021-11-03
 reportedby: David Korczynski
 vulnerability: Null-dereference READ in dwarf_object_init_b 
 product: libdwarf
-description: 
+description: The macho object has corrupted headers
+  and now mentions that and stops.
   Verified as fixed by oss-fuzz 2021-11-03
-  The testcase has illegal libdwarf call
-  and improper include statements.
 datefixed: 2021-11-05
-references: 
-gitfixid: 
+references: regressiontests/ossfuzz40673/clusterfuzz-testcase-minimized-fuzz_init_path-6240961391362048.fuzz 
+gitfixid: 94dece3ce0f030d06da442a103bd6a5301410b25
 tarrelease:
 endrec: DW202111-004
 
diff --git a/src/lib/libdwarf/dwarf_elf_load_headers.c b/src/lib/libdwarf/dwarf_elf_load_headers.c
index 7b24881d9..a68a9ac35 100644
--- a/src/lib/libdwarf/dwarf_elf_load_headers.c
+++ b/src/lib/libdwarf/dwarf_elf_load_headers.c
@@ -1684,7 +1684,11 @@ elf_flagmatches(Dwarf_Unsigned flagsword,Dwarf_Unsigned flag)
     return FALSE;
 }
 
-/*  For SHT_GROUP sections. */
+/*  For SHT_GROUP sections. 
+    A group section starts with a 32bit flag
+    word with value 1. 
+    32bit section numbers of the sections
+    in the group follow the flag field. */
 static int
 read_gs_section_group(
     dwarf_elf_object_access_internals_t *ep,
@@ -1725,7 +1729,7 @@ read_gs_section_group(
             return DW_DLV_ERROR;
         }
         count = seclen/psh->gh_entsize;
-        if (count > ep->f_loc_shdr.g_count) {
+        if (count >= ep->f_loc_shdr.g_count) {
             /* Impossible */
             free(data);
             *errcode = DW_DLE_ELF_SECTION_GROUP_ERROR;
@@ -1771,12 +1775,12 @@ read_gs_section_group(
                 return DW_DLV_ERROR;
             }
             grouparray[i] = gseca;
-            if (gseca > ep->f_loc_shdr.g_count) {
+            if (gseca >= ep->f_loc_shdr.g_count) {
                 /*  Might be confused endianness by
                     the compiler generating the SHT_GROUP.
                     This is pretty horrible. */
 
-                if (gsecb > ep->f_loc_shdr.g_count) {
+                if (gsecb >= ep->f_loc_shdr.g_count) {
                     *errcode = DW_DLE_ELF_SECTION_GROUP_ERROR;
                     free(data);
                     free(grouparray);
