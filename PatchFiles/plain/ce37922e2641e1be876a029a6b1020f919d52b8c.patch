From ce37922e2641e1be876a029a6b1020f919d52b8c Mon Sep 17 00:00:00 2001
From: "Victor M. Alvarez" <vmalvarez@virustotal.com>
Date: Wed, 8 Nov 2017 12:26:04 +0100
Subject: [PATCH] Revert to returning yyterminate() from the lexer when an
 error is found.

This aborts the lexer, causing the parser to return a spurious "syntax error, unexpected $end", but if yyterminate() is not called it has other negative effects, as the parser continues executing while some tokens can have associated invalid data (for example an _IDENTIFIER_ token with a NULL c_string)
---
 libyara/lexer.c    | 176 ++++++++++++++++++++++-----------------------
 libyara/lexer.l    |  15 ++--
 tests/test-rules.c |  37 +++++-----
 3 files changed, 114 insertions(+), 114 deletions(-)

diff --git a/libyara/lexer.c b/libyara/lexer.c
index 1dbb75027e..a2e008b5a9 100644
--- a/libyara/lexer.c
+++ b/libyara/lexer.c
@@ -965,6 +965,7 @@ with noyywrap then we can remove this pragma.
     { \
       compiler->last_result = error_code; \
       yyerror(yyscanner, compiler, NULL); \
+      yyterminate(); \
     }
 
 #define syntax_error(error_msg) \
@@ -1009,11 +1010,11 @@ with noyywrap then we can remove this pragma.
 #define snprintf _snprintf
 #endif
 
-#line 1012 "lexer.c"
+#line 1013 "lexer.c"
 #define YY_NO_UNISTD_H 1
 #define YY_NO_INPUT 1
 
-#line 1016 "lexer.c"
+#line 1017 "lexer.c"
 
 #define INITIAL 0
 #define str 1
@@ -1289,10 +1290,10 @@ YY_DECL
 		}
 
 	{
-#line 143 "lexer.l"
+#line 144 "lexer.l"
 
 
-#line 1295 "lexer.c"
+#line 1296 "lexer.c"
 
 	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
 		{
@@ -1359,208 +1360,208 @@ YY_DECL
 
 case 1:
 YY_RULE_SETUP
-#line 145 "lexer.l"
+#line 146 "lexer.l"
 { return _DOT_DOT_;     }
 	YY_BREAK
 case 2:
 YY_RULE_SETUP
-#line 146 "lexer.l"
+#line 147 "lexer.l"
 { return _LT_;          }
 	YY_BREAK
 case 3:
 YY_RULE_SETUP
-#line 147 "lexer.l"
+#line 148 "lexer.l"
 { return _GT_;          }
 	YY_BREAK
 case 4:
 YY_RULE_SETUP
-#line 148 "lexer.l"
+#line 149 "lexer.l"
 { return _LE_;          }
 	YY_BREAK
 case 5:
 YY_RULE_SETUP
-#line 149 "lexer.l"
+#line 150 "lexer.l"
 { return _GE_;          }
 	YY_BREAK
 case 6:
 YY_RULE_SETUP
-#line 150 "lexer.l"
+#line 151 "lexer.l"
 { return _EQ_;          }
 	YY_BREAK
 case 7:
 YY_RULE_SETUP
-#line 151 "lexer.l"
+#line 152 "lexer.l"
 { return _NEQ_;         }
 	YY_BREAK
 case 8:
 YY_RULE_SETUP
-#line 152 "lexer.l"
+#line 153 "lexer.l"
 { return _SHIFT_LEFT_;  }
 	YY_BREAK
 case 9:
 YY_RULE_SETUP
-#line 153 "lexer.l"
+#line 154 "lexer.l"
 { return _SHIFT_RIGHT_; }
 	YY_BREAK
 case 10:
 YY_RULE_SETUP
-#line 154 "lexer.l"
+#line 155 "lexer.l"
 { return _PRIVATE_;     }
 	YY_BREAK
 case 11:
 YY_RULE_SETUP
-#line 155 "lexer.l"
+#line 156 "lexer.l"
 { return _GLOBAL_;      }
 	YY_BREAK
 case 12:
 YY_RULE_SETUP
-#line 156 "lexer.l"
+#line 157 "lexer.l"
 { return _RULE_;        }
 	YY_BREAK
 case 13:
 YY_RULE_SETUP
-#line 157 "lexer.l"
+#line 158 "lexer.l"
 { return _META_;        }
 	YY_BREAK
 case 14:
 YY_RULE_SETUP
-#line 158 "lexer.l"
+#line 159 "lexer.l"
 { return _STRINGS_;     }
 	YY_BREAK
 case 15:
 YY_RULE_SETUP
-#line 159 "lexer.l"
+#line 160 "lexer.l"
 { return _ASCII_;       }
 	YY_BREAK
 case 16:
 YY_RULE_SETUP
-#line 160 "lexer.l"
+#line 161 "lexer.l"
 { return _WIDE_;        }
 	YY_BREAK
 case 17:
 YY_RULE_SETUP
-#line 161 "lexer.l"
+#line 162 "lexer.l"
 { return _FULLWORD_;    }
 	YY_BREAK
 case 18:
 YY_RULE_SETUP
-#line 162 "lexer.l"
+#line 163 "lexer.l"
 { return _NOCASE_;      }
 	YY_BREAK
 case 19:
 YY_RULE_SETUP
-#line 163 "lexer.l"
+#line 164 "lexer.l"
 { return _CONDITION_;   }
 	YY_BREAK
 case 20:
 YY_RULE_SETUP
-#line 164 "lexer.l"
+#line 165 "lexer.l"
 { return _TRUE_;        }
 	YY_BREAK
 case 21:
 YY_RULE_SETUP
-#line 165 "lexer.l"
+#line 166 "lexer.l"
 { return _FALSE_;       }
 	YY_BREAK
 case 22:
 YY_RULE_SETUP
-#line 166 "lexer.l"
+#line 167 "lexer.l"
 { return _NOT_;         }
 	YY_BREAK
 case 23:
 YY_RULE_SETUP
-#line 167 "lexer.l"
+#line 168 "lexer.l"
 { return _AND_;         }
 	YY_BREAK
 case 24:
 YY_RULE_SETUP
-#line 168 "lexer.l"
+#line 169 "lexer.l"
 { return _OR_;          }
 	YY_BREAK
 case 25:
 YY_RULE_SETUP
-#line 169 "lexer.l"
+#line 170 "lexer.l"
 { return _AT_;          }
 	YY_BREAK
 case 26:
 YY_RULE_SETUP
-#line 170 "lexer.l"
+#line 171 "lexer.l"
 { return _IN_;          }
 	YY_BREAK
 case 27:
 YY_RULE_SETUP
-#line 171 "lexer.l"
+#line 172 "lexer.l"
 { return _OF_;          }
 	YY_BREAK
 case 28:
 YY_RULE_SETUP
-#line 172 "lexer.l"
+#line 173 "lexer.l"
 { return _THEM_;        }
 	YY_BREAK
 case 29:
 YY_RULE_SETUP
-#line 173 "lexer.l"
+#line 174 "lexer.l"
 { return _FOR_;         }
 	YY_BREAK
 case 30:
 YY_RULE_SETUP
-#line 174 "lexer.l"
+#line 175 "lexer.l"
 { return _ALL_;         }
 	YY_BREAK
 case 31:
 YY_RULE_SETUP
-#line 175 "lexer.l"
+#line 176 "lexer.l"
 { return _ANY_;         }
 	YY_BREAK
 case 32:
 YY_RULE_SETUP
-#line 176 "lexer.l"
+#line 177 "lexer.l"
 { return _ENTRYPOINT_;  }
 	YY_BREAK
 case 33:
 YY_RULE_SETUP
-#line 177 "lexer.l"
+#line 178 "lexer.l"
 { return _FILESIZE_;    }
 	YY_BREAK
 case 34:
 YY_RULE_SETUP
-#line 178 "lexer.l"
+#line 179 "lexer.l"
 { return _MATCHES_;     }
 	YY_BREAK
 case 35:
 YY_RULE_SETUP
-#line 179 "lexer.l"
+#line 180 "lexer.l"
 { return _CONTAINS_;    }
 	YY_BREAK
 case 36:
 YY_RULE_SETUP
-#line 180 "lexer.l"
+#line 181 "lexer.l"
 { return _IMPORT_;      }
 	YY_BREAK
 case 37:
 YY_RULE_SETUP
-#line 183 "lexer.l"
+#line 184 "lexer.l"
 { BEGIN(comment);       }
 	YY_BREAK
 case 38:
 YY_RULE_SETUP
-#line 184 "lexer.l"
+#line 185 "lexer.l"
 { BEGIN(INITIAL);       }
 	YY_BREAK
 case 39:
 /* rule 39 can match eol */
 YY_RULE_SETUP
-#line 185 "lexer.l"
+#line 186 "lexer.l"
 { /* skip comments */   }
 	YY_BREAK
 case 40:
 YY_RULE_SETUP
-#line 188 "lexer.l"
+#line 189 "lexer.l"
 { /* skip single-line comments */ }
 	YY_BREAK
 case 41:
 YY_RULE_SETUP
-#line 191 "lexer.l"
+#line 192 "lexer.l"
 {
                           yyextra->lex_buf_ptr = yyextra->lex_buf;
                           yyextra->lex_buf_len = 0;
@@ -1570,12 +1571,12 @@ YY_RULE_SETUP
 case 42:
 /* rule 42 can match eol */
 YY_RULE_SETUP
-#line 198 "lexer.l"
+#line 199 "lexer.l"
 { yytext_to_buffer; }
 	YY_BREAK
 case 43:
 YY_RULE_SETUP
-#line 201 "lexer.l"
+#line 202 "lexer.l"
 {
 
   if (compiler->include_callback != NULL)
@@ -1664,7 +1665,7 @@ case YY_STATE_EOF(str):
 case YY_STATE_EOF(regexp):
 case YY_STATE_EOF(include):
 case YY_STATE_EOF(comment):
-#line 285 "lexer.l"
+#line 286 "lexer.l"
 {
 
   YR_COMPILER* compiler = yyget_extra(yyscanner);
@@ -1680,7 +1681,7 @@ case YY_STATE_EOF(comment):
 	YY_BREAK
 case 44:
 YY_RULE_SETUP
-#line 299 "lexer.l"
+#line 300 "lexer.l"
 {
 
   yylval->c_string = yr_strdup(yytext);
@@ -1693,7 +1694,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 45:
 YY_RULE_SETUP
-#line 310 "lexer.l"
+#line 311 "lexer.l"
 {
 
   yylval->c_string = yr_strdup(yytext);
@@ -1706,7 +1707,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 46:
 YY_RULE_SETUP
-#line 321 "lexer.l"
+#line 322 "lexer.l"
 {
 
   yylval->c_string = yr_strdup(yytext);
@@ -1725,7 +1726,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 47:
 YY_RULE_SETUP
-#line 338 "lexer.l"
+#line 339 "lexer.l"
 {
 
   yylval->c_string = yr_strdup(yytext);
@@ -1744,7 +1745,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 48:
 YY_RULE_SETUP
-#line 355 "lexer.l"
+#line 356 "lexer.l"
 {
 
   yylval->c_string = yr_strdup(yytext);
@@ -1763,7 +1764,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 49:
 YY_RULE_SETUP
-#line 372 "lexer.l"
+#line 373 "lexer.l"
 {
 
   char* text = yytext;
@@ -1804,26 +1805,23 @@ YY_RULE_SETUP
 	YY_BREAK
 case 50:
 YY_RULE_SETUP
-#line 411 "lexer.l"
+#line 412 "lexer.l"
 {
 
   if (strlen(yytext) > 128)
-  {
     syntax_error("identifier too long");
-  }
-  else
-  {
-    yylval->c_string = yr_strdup(yytext);
-    if (yylval->c_string == NULL)
-      error(ERROR_INSUFFICIENT_MEMORY);
-  }
+
+  yylval->c_string = yr_strdup(yytext);
+
+  if (yylval->c_string == NULL)
+    error(ERROR_INSUFFICIENT_MEMORY);
 
   return _IDENTIFIER_;
 }
 	YY_BREAK
 case 51:
 YY_RULE_SETUP
-#line 428 "lexer.l"
+#line 426 "lexer.l"
 {
 
   char *endptr;
@@ -1866,7 +1864,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 52:
 YY_RULE_SETUP
-#line 468 "lexer.l"
+#line 466 "lexer.l"
 {
   yylval->double_ = atof(yytext);
   return _DOUBLE_;
@@ -1874,7 +1872,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 53:
 YY_RULE_SETUP
-#line 473 "lexer.l"
+#line 471 "lexer.l"
 {
 
   char *endptr;
@@ -1893,7 +1891,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 54:
 YY_RULE_SETUP
-#line 489 "lexer.l"
+#line 487 "lexer.l"
 {
 
   char *endptr;
@@ -1912,7 +1910,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 55:
 YY_RULE_SETUP
-#line 506 "lexer.l"
+#line 504 "lexer.l"
 {     /* saw closing quote - all done */
 
   alloc_sized_string(s, yyextra->lex_buf_len);
@@ -1928,7 +1926,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 56:
 YY_RULE_SETUP
-#line 520 "lexer.l"
+#line 518 "lexer.l"
 {
 
   lex_check_space_ok("\t", yyextra->lex_buf_len, LEX_BUF_SIZE);
@@ -1938,7 +1936,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 57:
 YY_RULE_SETUP
-#line 528 "lexer.l"
+#line 526 "lexer.l"
 {
 
   lex_check_space_ok("\n", yyextra->lex_buf_len, LEX_BUF_SIZE);
@@ -1948,7 +1946,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 58:
 YY_RULE_SETUP
-#line 536 "lexer.l"
+#line 534 "lexer.l"
 {
 
   lex_check_space_ok("\"", yyextra->lex_buf_len, LEX_BUF_SIZE);
@@ -1958,7 +1956,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 59:
 YY_RULE_SETUP
-#line 544 "lexer.l"
+#line 542 "lexer.l"
 {
 
   lex_check_space_ok("\\", yyextra->lex_buf_len, LEX_BUF_SIZE);
@@ -1968,7 +1966,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 60:
 YY_RULE_SETUP
-#line 552 "lexer.l"
+#line 550 "lexer.l"
 {
 
    int result;
@@ -1981,13 +1979,13 @@ YY_RULE_SETUP
 	YY_BREAK
 case 61:
 YY_RULE_SETUP
-#line 563 "lexer.l"
+#line 561 "lexer.l"
 { yytext_to_buffer; }
 	YY_BREAK
 case 62:
 /* rule 62 can match eol */
 YY_RULE_SETUP
-#line 566 "lexer.l"
+#line 564 "lexer.l"
 {
   syntax_error("unterminated string");
 }
@@ -1995,14 +1993,14 @@ YY_RULE_SETUP
 case 63:
 /* rule 63 can match eol */
 YY_RULE_SETUP
-#line 570 "lexer.l"
+#line 569 "lexer.l"
 {
   syntax_error("illegal escape sequence");
 }
 	YY_BREAK
 case 64:
 YY_RULE_SETUP
-#line 575 "lexer.l"
+#line 574 "lexer.l"
 {
 
   if (yyextra->lex_buf_len > 0)
@@ -2030,7 +2028,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 65:
 YY_RULE_SETUP
-#line 601 "lexer.l"
+#line 600 "lexer.l"
 {
 
   lex_check_space_ok("/", yyextra->lex_buf_len, LEX_BUF_SIZE);
@@ -2040,7 +2038,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 66:
 YY_RULE_SETUP
-#line 609 "lexer.l"
+#line 608 "lexer.l"
 {
 
   lex_check_space_ok("\\.", yyextra->lex_buf_len, LEX_BUF_SIZE);
@@ -2055,20 +2053,20 @@ YY_RULE_SETUP
 	YY_BREAK
 case 67:
 YY_RULE_SETUP
-#line 622 "lexer.l"
+#line 621 "lexer.l"
 { yytext_to_buffer; }
 	YY_BREAK
 case 68:
 /* rule 68 can match eol */
 YY_RULE_SETUP
-#line 625 "lexer.l"
+#line 624 "lexer.l"
 {
   syntax_error("unterminated regular expression");
 }
 	YY_BREAK
 case 69:
 YY_RULE_SETUP
-#line 630 "lexer.l"
+#line 629 "lexer.l"
 {
 
   yylval->sized_string = NULL;
@@ -2079,7 +2077,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 70:
 YY_RULE_SETUP
-#line 639 "lexer.l"
+#line 638 "lexer.l"
 {
 
   yylval->sized_string = NULL;
@@ -2091,7 +2089,7 @@ YY_RULE_SETUP
 case 71:
 /* rule 71 can match eol */
 YY_RULE_SETUP
-#line 648 "lexer.l"
+#line 647 "lexer.l"
 {
   // Match hex-digits with whitespace or comments. The latter are stripped
   // out by hex_lexer.l
@@ -2107,12 +2105,12 @@ YY_RULE_SETUP
 case 72:
 /* rule 72 can match eol */
 YY_RULE_SETUP
-#line 661 "lexer.l"
+#line 660 "lexer.l"
 /* skip whitespace */
 	YY_BREAK
 case 73:
 YY_RULE_SETUP
-#line 663 "lexer.l"
+#line 662 "lexer.l"
 {
 
   if (yytext[0] >= 32 && yytext[0] < 127)
@@ -2127,10 +2125,10 @@ YY_RULE_SETUP
 	YY_BREAK
 case 74:
 YY_RULE_SETUP
-#line 675 "lexer.l"
+#line 674 "lexer.l"
 ECHO;
 	YY_BREAK
-#line 2133 "lexer.c"
+#line 2131 "lexer.c"
 
 	case YY_END_OF_BUFFER:
 		{
@@ -3279,7 +3277,7 @@ void yyfree (void * ptr , yyscan_t yyscanner)
 
 #define YYTABLES_NAME "yytables"
 
-#line 675 "lexer.l"
+#line 674 "lexer.l"
 
 
 
diff --git a/libyara/lexer.l b/libyara/lexer.l
index d89fd93070..f2c8b9ddce 100644
--- a/libyara/lexer.l
+++ b/libyara/lexer.l
@@ -71,6 +71,7 @@ with noyywrap then we can remove this pragma.
     { \
       compiler->last_result = error_code; \
       yyerror(yyscanner, compiler, NULL); \
+      yyterminate(); \
     }
 
 #define syntax_error(error_msg) \
@@ -411,15 +412,12 @@ u?int(8|16|32)(be)? {
 ({letter}|_)({letter}|{digit}|_)*  {
 
   if (strlen(yytext) > 128)
-  {
     syntax_error("identifier too long");
-  }
-  else
-  {
-    yylval->c_string = yr_strdup(yytext);
-    if (yylval->c_string == NULL)
-      error(ERROR_INSUFFICIENT_MEMORY);
-  }
+
+  yylval->c_string = yr_strdup(yytext);
+
+  if (yylval->c_string == NULL)
+    error(ERROR_INSUFFICIENT_MEMORY);
 
   return _IDENTIFIER_;
 }
@@ -567,6 +565,7 @@ u?int(8|16|32)(be)? {
   syntax_error("unterminated string");
 }
 
+
 <str>\\(.|\n) {
   syntax_error("illegal escape sequence");
 }
diff --git a/tests/test-rules.c b/tests/test-rules.c
index 1a474ea3e0..8755fff85d 100644
--- a/tests/test-rules.c
+++ b/tests/test-rules.c
@@ -208,63 +208,66 @@ static void test_arithmetic_operators()
   assert_true_rule(
       "rule test { condition: 0o755 == 493 }", NULL);
 
-  assert_error(  // integer too long
+  // TODO: This should return ERROR_INTEGER_OVERFLOW, but right now it returns
+  // ERROR_SYNTAX_ERROR because after the lexer aborts with ERROR_INTEGER_OVERFLOW
+  // the parser finds an unexpected end fails with error: unexpected $end.
+  assert_error(
       "rule test { condition: 9223372036854775808 > 0 }",
-      ERROR_INTEGER_OVERFLOW);
+      ERROR_SYNTAX_ERROR);
 
-  assert_error(  // integer too long
+  assert_error(
       "rule test { condition: 9007199254740992KB > 0 }",
-      ERROR_INTEGER_OVERFLOW);
+      ERROR_SYNTAX_ERROR);
 
   assert_error(  // integer too long
       "rule test { condition: 8796093022208MB > 0 }",
-      ERROR_INTEGER_OVERFLOW);
+      ERROR_SYNTAX_ERROR);
 
   assert_error(  // integer too long
      "rule test { condition: 0x8000000000000000 > 0 }",
-     ERROR_INTEGER_OVERFLOW);
+     ERROR_SYNTAX_ERROR);
 
   assert_error(  // integer too long
      "rule test { condition: 0o1000000000000000000000 > 0 }",
-     ERROR_INTEGER_OVERFLOW);
+     ERROR_SYNTAX_ERROR);
 
-  assert_error(  // integer overflow
+  assert_error(
      "rule test { condition: 0x7FFFFFFFFFFFFFFF + 1 > 0 }",
      ERROR_INTEGER_OVERFLOW);
 
-  assert_error(  // integer overflow
+  assert_error(
      "rule test { condition: 9223372036854775807 + 1 > 0 }",
      ERROR_INTEGER_OVERFLOW);
 
-  assert_error(  // integer overflow
+  assert_error(
      "rule test { condition: -9223372036854775807 - 2 > 0 }",
      ERROR_INTEGER_OVERFLOW);
 
-  assert_error(  // integer overflow
+  assert_error(
      "rule test { condition: -2 + -9223372036854775807 > 0 }",
      ERROR_INTEGER_OVERFLOW);
 
-  assert_error(  // integer overflow
+  assert_error(
      "rule test { condition: 1 - -9223372036854775807 > 0 }",
      ERROR_INTEGER_OVERFLOW);
 
-  assert_error(  // integer overflow
+  assert_error(
      "rule test { condition: 0x4000000000000000 * 2 }",
      ERROR_INTEGER_OVERFLOW);
 
-  assert_error(  // integer overflow
+  assert_error(
      "rule test { condition: 4611686018427387904 * 2 }",
      ERROR_INTEGER_OVERFLOW);
 
-  assert_error(  // integer overflow
+  assert_error(
      "rule test { condition: 4611686018427387904 * -2 }",
      ERROR_INTEGER_OVERFLOW);
 
-  assert_error(  // integer overflow
+  assert_error(
      "rule test { condition: -4611686018427387904 * 2 }",
      ERROR_INTEGER_OVERFLOW);
 
-  assert_error(  // integer overflow
+  assert_error(
      "rule test { condition: -4611686018427387904 * -2 }",
      ERROR_INTEGER_OVERFLOW);
 }
