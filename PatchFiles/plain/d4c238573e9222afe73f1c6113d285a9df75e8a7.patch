From d4c238573e9222afe73f1c6113d285a9df75e8a7 Mon Sep 17 00:00:00 2001
From: Mark Raasveldt <mark.raasveldt@gmail.com>
Date: Fri, 10 Mar 2023 22:30:46 +0100
Subject: [PATCH] duckdb-fuzzer: fix overflow in bitstring_agg

---
 .../aggregate/distributive/bitstring_agg.cpp  | 25 +++++++++----
 .../sqlsmith/bitstring_agg_overflow.test      | 35 +++++++++++++++++++
 2 files changed, 54 insertions(+), 6 deletions(-)
 create mode 100644 test/fuzzer/sqlsmith/bitstring_agg_overflow.test

diff --git a/src/function/aggregate/distributive/bitstring_agg.cpp b/src/function/aggregate/distributive/bitstring_agg.cpp
index 2664c353d5c..32db9ee1bd3 100644
--- a/src/function/aggregate/distributive/bitstring_agg.cpp
+++ b/src/function/aggregate/distributive/bitstring_agg.cpp
@@ -6,6 +6,7 @@
 #include "duckdb/storage/statistics/base_statistics.hpp"
 #include "duckdb/execution/expression_executor.hpp"
 #include "duckdb/common/types/cast_helpers.hpp"
+#include "duckdb/common/operator/subtract.hpp"
 
 namespace duckdb {
 
@@ -93,7 +94,16 @@ struct BitStringAggOperation {
 
 	template <class INPUT_TYPE>
 	static idx_t GetRange(INPUT_TYPE min, INPUT_TYPE max) {
-		return max - min + 1;
+		D_ASSERT(max >= min);
+		INPUT_TYPE result;
+		if (!TrySubtractOperator::Operation(max, min, result)) {
+			return NumericLimits<idx_t>::Maximum();
+		}
+		idx_t val(result);
+		if (val == NumericLimits<idx_t>::Maximum()) {
+			return val;
+		}
+		return val + 1;
 	}
 
 	template <class INPUT_TYPE, class STATE>
@@ -162,12 +172,15 @@ void BitStringAggOperation::Execute(BitAggState<hugeint_t> *state, hugeint_t inp
 
 template <>
 idx_t BitStringAggOperation::GetRange(hugeint_t min, hugeint_t max) {
-	idx_t val;
-	if (Hugeint::TryCast(max - min + 1, val)) {
-		return val;
-	} else {
-		throw OutOfRangeException("Range too large for bitstring aggregation");
+	hugeint_t result;
+	if (!TrySubtractOperator::Operation(max, min, result)) {
+		return NumericLimits<idx_t>::Maximum();
+	}
+	idx_t range;
+	if (!Hugeint::TryCast(result + 1, range)) {
+		return NumericLimits<idx_t>::Maximum();
 	}
+	return range;
 }
 
 unique_ptr<BaseStatistics> BitstringPropagateStats(ClientContext &context, BoundAggregateExpression &expr,
diff --git a/test/fuzzer/sqlsmith/bitstring_agg_overflow.test b/test/fuzzer/sqlsmith/bitstring_agg_overflow.test
new file mode 100644
index 00000000000..ec78171b4d3
--- /dev/null
+++ b/test/fuzzer/sqlsmith/bitstring_agg_overflow.test
@@ -0,0 +1,35 @@
+# name: test/fuzzer/sqlsmith/bitstring_agg_overflow.test
+# description: bitstring_agg overflow
+# group: [sqlsmith]
+
+foreach type utinyint usmallint uinteger ubigint smallint integer bigint hugeint
+
+statement ok
+CREATE OR REPLACE TABLE integers(i ${type});
+
+statement ok
+INSERT INTO integers VALUES (0), (255);
+
+statement ok
+SELECT bitstring_agg(i) FROM integers
+
+endloop
+
+statement ok
+CREATE TABLE all_types AS FROM test_all_types();
+
+foreach small_type utinyint usmallint
+
+statement ok
+SELECT bitstring_agg("${small_type}") FROM all_types;
+
+endloop
+
+foreach type tinyint smallint int uint ubigint bigint hugeint
+
+statement error
+SELECT bitstring_agg("${type}") FROM all_types;
+----
+too large for bitstring aggregation
+
+endloop
