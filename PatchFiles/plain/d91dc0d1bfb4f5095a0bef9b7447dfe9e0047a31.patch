From d937a81af6f94e8a0918222b267b462eed218a9a Mon Sep 17 00:00:00 2001
From: Eric Blankenhorn <eric@wolfssl.com>
Date: Fri, 5 Nov 2021 15:02:59 -0500
Subject: [PATCH 1/4] Add ability to parse pub props in msg CB

---
 examples/mqttclient/mqttclient.c | 15 +++++++++++++++
 src/mqtt_client.c                | 30 ++++++++++++++++++++----------
 2 files changed, 35 insertions(+), 10 deletions(-)

diff --git a/examples/mqttclient/mqttclient.c b/examples/mqttclient/mqttclient.c
index b661849cf..47a73d978 100644
--- a/examples/mqttclient/mqttclient.c
+++ b/examples/mqttclient/mqttclient.c
@@ -98,6 +98,21 @@ static int mqtt_message_cb(MqttClient *client, MqttMessage *msg,
     PRINTF("Payload (%d - %d): %s",
         msg->buffer_pos, msg->buffer_pos + len, buf);
 
+    #ifdef WOLFMQTT_V5
+    {
+        /* Properties can be checked in the message callback */
+        MqttProp *prop = msg->props;
+        while (prop != NULL)
+        {
+            if (prop->type == MQTT_PROP_CONTENT_TYPE) {
+                PRINTF("Content type: %.*s", prop->data_str.len,
+                                             prop->data_str.str);
+            }
+            prop = prop->next;
+        }
+    }
+    #endif
+
     if (msg_done) {
         PRINTF("MQTT Message: Done");
     }
diff --git a/src/mqtt_client.c b/src/mqtt_client.c
index 44cd36fd1..1ac863b07 100644
--- a/src/mqtt_client.c
+++ b/src/mqtt_client.c
@@ -292,7 +292,8 @@ static int MqttClient_RespList_Find(MqttClient *client,
 #endif /* WOLFMQTT_MULTITHREAD */
 
 #ifdef WOLFMQTT_V5
-static int Handle_Props(MqttClient* client, MqttProp* props, byte use_cb)
+static int Handle_Props(MqttClient* client, MqttProp* props, byte use_cb,
+                        byte free_props)
 {
     int rc = MQTT_CODE_SUCCESS;
 
@@ -312,8 +313,10 @@ static int Handle_Props(MqttClient* client, MqttProp* props, byte use_cb)
         (void)client;
         (void)use_cb;
     #endif
-        /* Free the properties */
-        MqttProps_Free(props);
+        if (free_props) {
+            /* Free the properties */
+            MqttProps_Free(props);
+        }
     }
     return rc;
 }
@@ -378,7 +381,7 @@ static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
         #ifdef WOLFMQTT_V5
             if (rc >= 0){
                 int tmp = Handle_Props(client, p_connect_ack->props,
-                                       (packet_obj != NULL));
+                                       (packet_obj != NULL), 1);
                 if (tmp != MQTT_CODE_SUCCESS) {
                     rc = tmp;
                 }
@@ -403,8 +406,10 @@ static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
                 packet_id = p_publish->packet_id;
             #ifdef WOLFMQTT_V5
                 {
+                    /* Do not free property list here. It will be freed
+                       after the message callback. */
                     int tmp = Handle_Props(client, p_publish->props,
-                                           (packet_obj != NULL));
+                                           (packet_obj != NULL), 0);
                     if (tmp != MQTT_CODE_SUCCESS) {
                         rc = tmp;
                     }
@@ -435,7 +440,7 @@ static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
             #ifdef WOLFMQTT_V5
                 {
                     int tmp = Handle_Props(client, p_publish_resp->props,
-                                           (packet_obj != NULL));
+                                           (packet_obj != NULL), 1);
                     if (tmp != MQTT_CODE_SUCCESS) {
                         rc = tmp;
                     }
@@ -462,7 +467,7 @@ static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
             #ifdef WOLFMQTT_V5
                 {
                     int tmp = Handle_Props(client, p_subscribe_ack->props,
-                                           (packet_obj != NULL));
+                                           (packet_obj != NULL), 1);
                     if (tmp != MQTT_CODE_SUCCESS) {
                         rc = tmp;
                     }
@@ -490,7 +495,7 @@ static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
             #ifdef WOLFMQTT_V5
                 {
                     int tmp = Handle_Props(client, p_unsubscribe_ack->props,
-                                           (packet_obj != NULL));
+                                           (packet_obj != NULL), 1);
                     if (tmp != MQTT_CODE_SUCCESS) {
                         rc = tmp;
                     }
@@ -524,7 +529,7 @@ static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
             rc = MqttDecode_Auth(rx_buf, rx_len, p_auth);
             if (rc >= 0) {
                 int tmp = Handle_Props(client, p_auth->props,
-                                       (packet_obj != NULL));
+                                       (packet_obj != NULL), 1);
                 if (tmp != MQTT_CODE_SUCCESS) {
                     rc = tmp;
                 }
@@ -547,7 +552,7 @@ static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
             rc = MqttDecode_Disconnect(rx_buf, rx_len, p_disc);
             if (rc >= 0) {
                 int tmp = Handle_Props(client, p_disc->props,
-                                       (packet_obj != NULL));
+                                       (packet_obj != NULL), 1);
                 if (tmp != MQTT_CODE_SUCCESS) {
                     rc = tmp;
                 }
@@ -633,6 +638,11 @@ static int MqttClient_HandlePacket(MqttClient* client,
             }
             /* Note: Getting here means the Publish Read is done */
 
+        #ifdef WOLFMQTT_V5
+            /* Free the properties */
+            MqttProps_Free(publish->props);
+        #endif
+
             /* Handle QoS */
             if (packet_qos == MQTT_QOS_0) {
                 /* we are done, no QoS response */

From 17eb652346678bd189742d7e45c946cae649d859 Mon Sep 17 00:00:00 2001
From: Eric Blankenhorn <eric@wolfssl.com>
Date: Tue, 1 Feb 2022 14:18:56 -0600
Subject: [PATCH 2/4] Fix stale data in generic msg struct

---
 src/mqtt_client.c | 12 ++++++++++++
 1 file changed, 12 insertions(+)

diff --git a/src/mqtt_client.c b/src/mqtt_client.c
index 1ac863b07..329015754 100644
--- a/src/mqtt_client.c
+++ b/src/mqtt_client.c
@@ -915,6 +915,18 @@ static int MqttClient_WaitType(MqttClient *client, void *packet_obj,
             else {
                 /* use generic packet object */
                 use_packet_obj = &client->msg;
+        #ifdef WOLFMQTT_MULTITHREAD
+                rc = wm_SemLock(&client->lockClient);
+                if (rc == 0) {
+        #endif /* WOLFMQTT_MULTITHREAD */
+                    XMEMSET(use_packet_obj, 0, sizeof(client->msg));
+        #ifdef WOLFMQTT_MULTITHREAD
+                    wm_SemUnlock(&client->lockClient);
+                }
+                else {
+                    break; /* error */
+                }
+        #endif /* WOLFMQTT_MULTITHREAD */
             }
             use_packet_type = packet_type;
 

From bb0f4c2d4b72764e81077f1ae6a2c51380ad615d Mon Sep 17 00:00:00 2001
From: Eric Blankenhorn <eric@wolfssl.com>
Date: Tue, 8 Feb 2022 13:12:39 -0600
Subject: [PATCH 3/4] Fix warning in MqttClient_CheckPendResp

---
 src/mqtt_client.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/mqtt_client.c b/src/mqtt_client.c
index 329015754..c86e45608 100644
--- a/src/mqtt_client.c
+++ b/src/mqtt_client.c
@@ -771,14 +771,14 @@ static int MqttClient_CheckPendResp(MqttClient *client, byte wait_type,
     word16 wait_packet_id)
 {
     int rc = MQTT_CODE_CONTINUE;
-    MqttPendResp *pendResp;
+    MqttPendResp *pendResp = NULL;
 
     /* Check to see if packet type and id have already completed */
     rc = wm_SemLock(&client->lockClient);
     if (rc == 0) {
         if (MqttClient_RespList_Find(client, (MqttPacketType)wait_type,
             wait_packet_id, &pendResp)) {
-            if (pendResp->packetDone) {
+            if ((pendResp != NULL) && (pendResp->packetDone)) {
                 /* pending response is already done, so return */
                 rc = pendResp->packet_ret;
             #ifdef WOLFMQTT_DEBUG_CLIENT

From 917a5b6dc66e30565d30ce86f26a4b9510b56ac1 Mon Sep 17 00:00:00 2001
From: David Garske <david@wolfssl.com>
Date: Thu, 10 Feb 2022 14:00:20 -0800
Subject: [PATCH 4/4] Fix for publish property leak. The properties were being
 parsed and allocated twice, only free'd once. Fix is to only parse if real
 publish object is being provided. Also cleanup on the property parse/add/free
 code.

---
 src/mqtt_client.c | 37 +++++++++++++----------
 src/mqtt_packet.c | 77 ++++++++++++++++++++++++++---------------------
 2 files changed, 64 insertions(+), 50 deletions(-)

diff --git a/src/mqtt_client.c b/src/mqtt_client.c
index c86e45608..0c00536f2 100644
--- a/src/mqtt_client.c
+++ b/src/mqtt_client.c
@@ -391,16 +391,20 @@ static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
         }
         case MQTT_PACKET_TYPE_PUBLISH:
         {
-            MqttPublish publish, *p_publish = &publish;
+            MqttPublish publish, *p_publish;
             if (packet_obj) {
                 p_publish = (MqttPublish*)packet_obj;
+            #ifdef WOLFMQTT_V5
+                /* setting the protocol level will enable parsing of the
+                 * properties. The properties are allocated from a list,
+                 * so only parse if we are using a return packet object */
+                p_publish->protocol_level = client->protocol_level;
+            #endif
             }
             else {
-                XMEMSET(p_publish, 0, sizeof(MqttPublish));
+                p_publish = &publish;
+                XMEMSET(p_publish, 0, sizeof(MqttPublish));   
             }
-        #ifdef WOLFMQTT_V5
-            p_publish->protocol_level = client->protocol_level;
-        #endif
             rc = MqttDecode_Publish(rx_buf, rx_len, p_publish);
             if (rc >= 0) {
                 packet_id = p_publish->packet_id;
@@ -913,20 +917,21 @@ static int MqttClient_WaitType(MqttClient *client, void *packet_obj,
                 }
             }
             else {
-                /* use generic packet object */
-                use_packet_obj = &client->msg;
-        #ifdef WOLFMQTT_MULTITHREAD
+            #ifdef WOLFMQTT_MULTITHREAD
                 rc = wm_SemLock(&client->lockClient);
-                if (rc == 0) {
-        #endif /* WOLFMQTT_MULTITHREAD */
-                    XMEMSET(use_packet_obj, 0, sizeof(client->msg));
-        #ifdef WOLFMQTT_MULTITHREAD
-                    wm_SemUnlock(&client->lockClient);
-                }
-                else {
+                if (rc != 0) {
                     break; /* error */
                 }
-        #endif /* WOLFMQTT_MULTITHREAD */
+            #endif
+
+                /* use generic packet object */
+                use_packet_obj = &client->msg;
+                /* make sure the generic client message is zero initialized */
+                XMEMSET(use_packet_obj, 0, sizeof(client->msg));
+
+            #ifdef WOLFMQTT_MULTITHREAD
+                wm_SemUnlock(&client->lockClient);
+            #endif
             }
             use_packet_type = packet_type;
 
diff --git a/src/mqtt_packet.c b/src/mqtt_packet.c
index 7074323a1..5095ac85d 100755
--- a/src/mqtt_packet.c
+++ b/src/mqtt_packet.c
@@ -479,16 +479,15 @@ int MqttEncode_Props(MqttPacketType packet, MqttProp* props, byte* buf)
 int MqttDecode_Props(MqttPacketType packet, MqttProp** props, byte* pbuf,
         word32 buf_len, word32 prop_len)
 {
-    /* TODO: Validate property type is allowed for packet type */
-
     int rc = 0;
-    int tmp;
+    int total, tmp;
     MqttProp* cur_prop;
     byte* buf = pbuf;
 
     *props = NULL;
+    total = 0;
 
-    while ((prop_len > 0) && (rc >= 0))
+    while (((int)prop_len > 0) && (rc >= 0))
     {
         /* Allocate a structure and add to head. */
         cur_prop = MqttProps_Add(props);
@@ -498,16 +497,17 @@ int MqttDecode_Props(MqttPacketType packet, MqttProp** props, byte* pbuf,
         }
 
         /* Decode the Identifier */
-        tmp = MqttDecode_Vbi(buf, (word32*)&cur_prop->type,
+        rc = MqttDecode_Vbi(buf, (word32*)&cur_prop->type,
                 (word32)(buf_len - (buf - pbuf)));
-        if (tmp < 0) {
-            return tmp;
+        if (rc < 0) {
+            break;
         }
+        tmp = rc;
         buf += tmp;
-        rc += (int)tmp;
+        total += tmp;
         prop_len -= tmp;
 
-        /* TODO: validate packet type */
+        /* TODO: Validate property type is allowed for packet type */
         (void)packet;
 
         if (cur_prop->type >= sizeof(gPropMatrix) / sizeof(gPropMatrix[0])) {
@@ -521,7 +521,7 @@ int MqttDecode_Props(MqttPacketType packet, MqttProp** props, byte* pbuf,
             {
                 cur_prop->data_byte = *buf++;
                 tmp++;
-                rc++;
+                total++;
                 prop_len--;
                 break;
             }
@@ -529,15 +529,15 @@ int MqttDecode_Props(MqttPacketType packet, MqttProp** props, byte* pbuf,
             {
                 tmp = MqttDecode_Num(buf, &cur_prop->data_short);
                 buf += tmp;
-                rc += (int)tmp;
-                prop_len -= tmp;
+                total += tmp;
+                prop_len -= (word32)tmp;
                 break;
             }
             case MQTT_DATA_TYPE_INT:
             {
                 tmp = MqttDecode_Int(buf, &cur_prop->data_int);
                 buf += tmp;
-                rc += (int)tmp;
+                total += tmp;
                 prop_len -= tmp;
                 break;
             }
@@ -548,8 +548,8 @@ int MqttDecode_Props(MqttPacketType packet, MqttProp** props, byte* pbuf,
                         &cur_prop->data_str.len);
                 if (cur_prop->data_str.len <= (buf_len - (buf - pbuf))) {
                     buf += tmp;
-                    rc += (int)tmp;
-                    prop_len -= tmp;
+                    total += tmp;
+                    prop_len -= (word32)tmp;
                 }
                 else {
                     /* Invalid length */
@@ -560,13 +560,13 @@ int MqttDecode_Props(MqttPacketType packet, MqttProp** props, byte* pbuf,
             case MQTT_DATA_TYPE_VAR_INT:
             {
                 tmp = MqttDecode_Vbi(buf, &cur_prop->data_int,
-                        (word32)(buf_len -(buf - pbuf)));
+                        (word32)(buf_len - (buf - pbuf)));
                 if (tmp < 0) {
                     return tmp;
                 }
                 buf += tmp;
-                rc += (int)tmp;
-                prop_len -= tmp;
+                total += tmp;
+                prop_len -= (word32)tmp;
                 break;
             }
             case MQTT_DATA_TYPE_BINARY:
@@ -575,13 +575,13 @@ int MqttDecode_Props(MqttPacketType packet, MqttProp** props, byte* pbuf,
                    followed by that number of bytes */
                 tmp = MqttDecode_Num(buf, &cur_prop->data_bin.len);
                 buf += tmp;
-                rc += (int)tmp;
+                total += tmp;
                 prop_len -= tmp;
 
                 if (cur_prop->data_bin.len <= (buf_len - (buf - pbuf))) {
                     cur_prop->data_bin.data = buf;
                     buf += cur_prop->data_bin.len;
-                    rc += (int)cur_prop->data_bin.len;
+                    total += (int)cur_prop->data_bin.len;
                     prop_len -= cur_prop->data_bin.len;
                 }
                 else {
@@ -600,8 +600,8 @@ int MqttDecode_Props(MqttPacketType packet, MqttProp** props, byte* pbuf,
                 if (cur_prop->data_str.len <=
                     (buf_len - (buf + tmp - pbuf))) {
                     buf += tmp;
-                    rc += (int)tmp;
-                    prop_len -= tmp;
+                    total += tmp;
+                    prop_len -= (word32)tmp;
 
                     tmp = MqttDecode_String(buf,
                             (const char**)&cur_prop->data_str2.str,
@@ -609,8 +609,8 @@ int MqttDecode_Props(MqttPacketType packet, MqttProp** props, byte* pbuf,
                     if (cur_prop->data_str2.len <=
                         (buf_len - (buf + tmp - pbuf))) {
                         buf += tmp;
-                        rc += (int)tmp;
-                        prop_len -= tmp;
+                        total += tmp;
+                        prop_len -= (word32)tmp;
                     }
                     else {
                         /* Invalid length */
@@ -624,8 +624,11 @@ int MqttDecode_Props(MqttPacketType packet, MqttProp** props, byte* pbuf,
                 break;
             }
             case MQTT_DATA_TYPE_NONE:
+                PRINTF("DATA TYPE NONE");
+                break;
             default:
             {
+                PRINTF("INVALID DATA TYPE");
                 /* Invalid property data type */
                 rc = MQTT_TRACE_ERROR(MQTT_CODE_ERROR_PROPERTY);
                 break;
@@ -634,9 +637,12 @@ int MqttDecode_Props(MqttPacketType packet, MqttProp** props, byte* pbuf,
     };
 
     if (rc < 0) {
-        /* Free the properties */
+        /* Free the property */
         MqttProps_Free(*props);
     }
+    else {
+        rc = total;
+    }
 
     return rc;
 }
@@ -1809,8 +1815,9 @@ MqttProp* MqttProps_Add(MqttProp **head)
     }
 
 #ifdef WOLFMQTT_MULTITHREAD
-    if (wm_SemLock(&clientPropStack_lock))
+    if (wm_SemLock(&clientPropStack_lock) != 0) {
         return NULL;
+    }
 #endif
 
     cur = *head;
@@ -1823,7 +1830,7 @@ MqttProp* MqttProps_Add(MqttProp **head)
 
     /* Find a free element */
     for (i = 0; i < MQTT_MAX_PROPS; i++) {
-        if (clientPropStack[i].type == 0) {
+        if (clientPropStack[i].type == MQTT_PROP_NONE) {
             /* Found one */
             new_prop = &clientPropStack[i];
             XMEMSET(new_prop, 0, sizeof(MqttProp));
@@ -1832,7 +1839,8 @@ MqttProp* MqttProps_Add(MqttProp **head)
     }
 
     if (new_prop != NULL) {
-        new_prop->type = MQTT_PROP_TYPE_MAX; /* placeholder until caller sets it to a real type. */
+        /* set placeholder until caller sets it to a real type */
+        new_prop->type = MQTT_PROP_TYPE_MAX;
         if (prev == NULL) {
             /* Start a new list */
             *head = new_prop;
@@ -1853,19 +1861,20 @@ MqttProp* MqttProps_Add(MqttProp **head)
 /* Free properties */
 int MqttProps_Free(MqttProp *head)
 {
+    int ret = MQTT_CODE_SUCCESS;
 #ifdef WOLFMQTT_MULTITHREAD
-    if (wm_SemLock(&clientPropStack_lock))
-        return -1;
+    if ((ret = wm_SemLock(&clientPropStack_lock)) != 0) {
+        return ret;
+    }
 #endif
     while (head != NULL) {
-        head->type = (MqttPropertyType)0;
+        head->type = MQTT_PROP_NONE; /* available */
         head = head->next;
     }
 #ifdef WOLFMQTT_MULTITHREAD
-    return wm_SemUnlock(&clientPropStack_lock);
-#else
-    return 0;
+    (void)wm_SemUnlock(&clientPropStack_lock);
 #endif
+    return ret;
 }
 
 #endif /* WOLFMQTT_V5 */
