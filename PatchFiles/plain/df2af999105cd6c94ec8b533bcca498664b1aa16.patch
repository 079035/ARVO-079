From df2af999105cd6c94ec8b533bcca498664b1aa16 Mon Sep 17 00:00:00 2001
From: DavidKorczynski <david@adalogics.com>
Date: Mon, 22 Feb 2021 16:54:03 +0000
Subject: [PATCH] gzip: fix upper-bound decompression calculation. OSS-Fuzz
 5072671825723392 (#3101)

Signed-off-by: davkor <david@adalogics.com>
---
 src/flb_gzip.c | 19 ++++---------------
 1 file changed, 4 insertions(+), 15 deletions(-)

diff --git a/src/flb_gzip.c b/src/flb_gzip.c
index cb5359ed6ec..c3b1d33933f 100644
--- a/src/flb_gzip.c
+++ b/src/flb_gzip.c
@@ -77,23 +77,12 @@ int flb_gzip_compress(void *in_data, size_t in_len,
     z_stream strm;
     mz_ulong crc;
 
-
-    /*
-     * GZIP relies on an algorithm with worst-case expansion
-     * of 5 bytes per 32KB data. This means we need to create a variable
-     * length output, that depends on the input length.
-     * See RFC 1951 for details.
-     */
-    int max_input_expansion = ((int)(in_len / 32000) + 1) * 5;
-
     /*
-     * Max compressed size is equal to sum of:
-     *   10 byte header
-     *   8 byte foot
-     *   max input expansion
-     *   size of input
+     * Calculating the upper bound for a gzip compression is
+     * non-trivial, so we rely on miniz's own calculation
+     * to guarantee memory safety.
      */
-    out_size = 10 + 8 + max_input_expansion + in_len;
+    out_size = compressBound(in_len);
     out_buf = flb_malloc(out_size);
 
     if (!out_buf) {
