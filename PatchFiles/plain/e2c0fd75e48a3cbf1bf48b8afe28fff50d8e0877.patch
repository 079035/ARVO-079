From e2c0fd75e48a3cbf1bf48b8afe28fff50d8e0877 Mon Sep 17 00:00:00 2001
From: Guy Harris <gharris@sonic.net>
Date: Tue, 12 Jul 2022 16:12:40 -0700
Subject: [PATCH] Linux USB: check the captured length early in the fixup
 process.

In fixup_pcap_pkthdr(), check th capture length to make sure it has a
full header before we start looking at fields in the header.

The other place that calls fix_linux_usb_mmapped_length() already
ensures that we have at least a full USB metadata header; this change
means that both places that call it do, so we can remove the check from
fix_linux_usb_mmapped_length() itself.
---
 pcap-common.c           |  5 ++++-
 pcap-usb-linux-common.c | 10 ++++------
 2 files changed, 8 insertions(+), 7 deletions(-)

diff --git a/pcap-common.c b/pcap-common.c
index b12ee21589..d0f3ddf446 100644
--- a/pcap-common.c
+++ b/pcap-common.c
@@ -1836,7 +1836,8 @@ fixup_pcap_pkthdr(int linktype, struct pcap_pkthdr *hdr, const u_char *data)
 	const pcap_usb_header_mmapped *usb_hdr;
 
 	usb_hdr = (const pcap_usb_header_mmapped *) data;
-	if (linktype == DLT_USB_LINUX_MMAPPED) {
+	if (linktype == DLT_USB_LINUX_MMAPPED &&
+	    hdr->caplen >= sizeof (pcap_usb_header_mmapped)) {
 		/*
 		 * In older versions of libpcap, in memory-mapped captures,
 		 * the "on-the-bus length" for completion events for
@@ -1849,6 +1850,8 @@ fixup_pcap_pkthdr(int linktype, struct pcap_pkthdr *hdr, const u_char *data)
 		 * is 0 if we *do* have data), and the total on-the-network
 		 * length is equal to the value calculated from the raw URB
 		 * length, then it might be one of those transfers.
+		 *
+		 * We only do this if we hae the full USB pseudo-header.
 		 */
 		if (!usb_hdr->data_flag &&
 		    hdr->len == sizeof(pcap_usb_header_mmapped) +
diff --git a/pcap-usb-linux-common.c b/pcap-usb-linux-common.c
index d5d9e5383f..6bd044c953 100644
--- a/pcap-usb-linux-common.c
+++ b/pcap-usb-linux-common.c
@@ -41,13 +41,11 @@ fix_linux_usb_mmapped_length(struct pcap_pkthdr *pkth, const u_char *bp)
 	const pcap_usb_header_mmapped *hdr;
 	u_int bytes_left;
 
+	/*
+	 * All callers of this routine must ensure that pkth->caplen is
+	 * >= sizeof (pcap_usb_header_mmapped).
+	 */
 	bytes_left = pkth->caplen;
-	if (bytes_left < sizeof (pcap_usb_header_mmapped)) {
-		/*
-		 * We don't have the full metadata header, so give up.
-		 */
-		return;
-	}
 	bytes_left -= sizeof (pcap_usb_header_mmapped);
 
 	hdr = (const pcap_usb_header_mmapped *) bp;
