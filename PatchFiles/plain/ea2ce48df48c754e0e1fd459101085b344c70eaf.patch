From ea2ce48df48c754e0e1fd459101085b344c70eaf Mon Sep 17 00:00:00 2001
From: Roman Lebedev <lebedev.ri@gmail.com>
Date: Sun, 24 Sep 2017 17:05:54 +0300
Subject: [PATCH] UncompressedDecompressor::sanityCheck(): always throw if not
 enough data.

FIXME: need to come up with some common variable to allow
better handling of such [truncated] cases.
---
 .../decompressors/UncompressedDecompressor.cpp           | 9 ++++++---
 src/librawspeed/decompressors/UncompressedDecompressor.h | 4 ++--
 2 files changed, 8 insertions(+), 5 deletions(-)

diff --git a/src/librawspeed/decompressors/UncompressedDecompressor.cpp b/src/librawspeed/decompressors/UncompressedDecompressor.cpp
index 2303274e2..744a26971 100644
--- a/src/librawspeed/decompressors/UncompressedDecompressor.cpp
+++ b/src/librawspeed/decompressors/UncompressedDecompressor.cpp
@@ -38,7 +38,7 @@ using std::min;
 
 namespace rawspeed {
 
-void UncompressedDecompressor::sanityCheck(uint32* h, int bpl) {
+void UncompressedDecompressor::sanityCheck(const uint32* h, int bpl) {
   assert(h != nullptr);
   assert(*h > 0);
   assert(bpl > 0);
@@ -59,10 +59,13 @@ void UncompressedDecompressor::sanityCheck(uint32* h, int bpl) {
   assert(min_h < *h);
   assert(input.getRemainSize() >= bpl * min_h);
 
-  *h = min_h;
+  ThrowIOE("Image truncated, only %u of %u lines found", min_h, *h);
+  // FIXME: need to come up with some common variable to allow proceeding here
+
+  // *h = min_h;
 }
 
-void UncompressedDecompressor::sanityCheck(uint32 w, uint32* h, int bpp) {
+void UncompressedDecompressor::sanityCheck(uint32 w, const uint32* h, int bpp) {
   assert(w > 0);
   assert(bpp > 0);
 
diff --git a/src/librawspeed/decompressors/UncompressedDecompressor.h b/src/librawspeed/decompressors/UncompressedDecompressor.h
index fada8c8d8..8d4a524b1 100644
--- a/src/librawspeed/decompressors/UncompressedDecompressor.h
+++ b/src/librawspeed/decompressors/UncompressedDecompressor.h
@@ -39,10 +39,10 @@ class UncompressedDecompressor final : public AbstractDecompressor {
   RawImage mRaw;
 
   // check buffer size, throw, or compute minimal height that can be decoded
-  void sanityCheck(uint32* h, int bpl);
+  void sanityCheck(const uint32* h, int bpl);
 
   // check buffer size, throw, or compute minimal height that can be decoded
-  void sanityCheck(uint32 w, uint32* h, int bpp);
+  void sanityCheck(uint32 w, const uint32* h, int bpp);
 
   // for special packed formats
   int bytesPerLine(int w, bool skips);
