commit f1aaa03f2e91e9a06e60dc529f30383714e7012b
Author: Ken Sharp <ken.sharp@artifex.com>
Date:   Tue May 24 19:35:03 2022 +0100

    OSS-fuzz #47601
    
    Another case of not taking a reference to an object and just using it
    directly from the stack. Triggering a repair can cause the stack to be
    flushed.
    
    Fixed by taking a proper reference.

diff --git a/pdf/pdf_image.c b/pdf/pdf_image.c
index 4a5f54b01..0e341892d 100644
--- a/pdf/pdf_image.c
+++ b/pdf/pdf_image.c
@@ -2583,6 +2583,7 @@ int pdfi_Do(pdf_context *ctx, pdf_dict *stream_dict, pdf_dict *page_dict)
         code = gs_note_error(gs_error_typecheck);
         goto exit1;
     }
+    pdfi_countup(n);
 
     if (ctx->text.BlockDepth != 0)
         pdfi_set_warning(ctx, 0, NULL, W_PDF_OPINVALIDINTEXT, "pdfi_Do", NULL);
@@ -2631,6 +2632,7 @@ int pdfi_Do(pdf_context *ctx, pdf_dict *stream_dict, pdf_dict *page_dict)
     //    pdfi_gsave(ctx);
     code = pdfi_do_image_or_form(ctx, stream_dict, page_dict, o);
     //    pdfi_grestore(ctx);
+    pdfi_countdown(n);
     pdfi_countdown(o);
     pdfi_pop(ctx, 1);
     return code;
@@ -2638,7 +2640,7 @@ int pdfi_Do(pdf_context *ctx, pdf_dict *stream_dict, pdf_dict *page_dict)
 exit:
     (void)pdfi_loop_detector_cleartomark(ctx);
 exit1:
-    /* No need to countdown 'n' because that points to the stack object, and we're going to pop that */
+    pdfi_countdown(n);
     pdfi_countdown(o);
     pdfi_pop(ctx, 1);
     return code;
