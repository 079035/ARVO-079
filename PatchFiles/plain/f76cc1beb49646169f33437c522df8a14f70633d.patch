commit f76cc1beb49646169f33437c522df8a14f70633d
Author: Ken Sharp <ken.sharp@artifex.com>
Date:   Mon Jan 10 15:19:55 2022 +0000

    OSS-fuzz #43354 - Validate Default* colour spaces
    
    We were not checking that a DefaultGray, DefaultRGB or DefaultCMYK
    space was not one of Lab, Pattern or Indexed nor that it had the correct
    number of components.
    
    This commit checks that, moves the loading of Default* colour spaces
    into pdf_colour.c instead of doing almost exactly the same complex task
    in two different places (neither of them the colour code) and if the
    space is illegal, raies a warning.

diff --git a/pdf/ghostpdf.c b/pdf/ghostpdf.c
index 7f5f353bc..8a306b7d1 100644
--- a/pdf/ghostpdf.c
+++ b/pdf/ghostpdf.c
@@ -1,4 +1,4 @@
-/* Copyright (C) 2018-2021 Artifex Software, Inc.
+/* Copyright (C) 2018-2022 Artifex Software, Inc.
    All Rights Reserved.
 
    This software is provided AS-IS with no warranty, either express or
@@ -381,6 +381,7 @@ const char *pdf_warning_strings[] = {
     "A DeviceN space used the /All ink name.",
     "Couldn't retrieve MediaBox for page, using current media size",
     "CA or ca value not in range 0.0 to 1.0, clamped to range.",
+    "Invalid DefaultGray, DefaultRGB or DefaultCMYK space specified, ignored.",
     ""                                                  /* Last warning shuld not be used */
 };
 
diff --git a/pdf/ghostpdf.h b/pdf/ghostpdf.h
index de001f869..836851933 100644
--- a/pdf/ghostpdf.h
+++ b/pdf/ghostpdf.h
@@ -1,4 +1,4 @@
-/* Copyright (C) 2018-2021 Artifex Software, Inc.
+/* Copyright (C) 2018-2022 Artifex Software, Inc.
    All Rights Reserved.
 
    This software is provided AS-IS with no warranty, either express or
@@ -132,6 +132,7 @@ typedef enum pdf_warning_e {
     W_PDF_DEVICEN_USES_ALL,
     W_PDF_BAD_MEDIABOX,
     W_PDF_CA_OUTOFRANGE,
+    W_PDF_INVALID_DEFAULTSPACE,
     W_PDF_MAX_WARNING               /* Must be last entry, add new warnings immediately before this and update pdf_warning_strings in ghostpdf.c */
 } pdf_warning;
 
diff --git a/pdf/pdf_colour.c b/pdf/pdf_colour.c
index 185b74cf7..5ca0faee9 100644
--- a/pdf/pdf_colour.c
+++ b/pdf/pdf_colour.c
@@ -1,4 +1,4 @@
-/* Copyright (C) 2018-2021 Artifex Software, Inc.
+/* Copyright (C) 2018-2022 Artifex Software, Inc.
    All Rights Reserved.
 
    This software is provided AS-IS with no warranty, either express or
@@ -2727,3 +2727,171 @@ int pdfi_color_setoutputintent(pdf_context *ctx, pdf_dict *intent_dict, pdf_stre
     pdfi_seek(ctx, ctx->main_stream, savedoffset, SEEK_SET);
     return code;
 }
+
+static int Check_Default_Space(pdf_context *ctx, pdf_obj *space, pdf_dict *source_dict, int num_components)
+{
+    pdf_obj *primary = NULL;
+    pdf_obj *ref_space = NULL;
+    int code = 0;
+
+    if (space->type == PDF_NAME)
+    {
+        if (pdfi_name_is((const pdf_name *)space, "DeviceGray"))
+            return (num_components == 1 ? 0 : gs_error_rangecheck);
+        if (pdfi_name_is((const pdf_name *)space, "DeviceCMYK"))
+            return (num_components == 4 ? 0 : gs_error_rangecheck);
+        if (pdfi_name_is((const pdf_name *)space, "DeviceRGB"))
+            return (num_components == 3 ? 0 : gs_error_rangecheck);
+
+        code = pdfi_find_resource(ctx, (unsigned char *)"ColorSpace", (pdf_name *)space, (pdf_dict *)source_dict,
+                                  NULL, &ref_space);
+        if (code < 0)
+            return code;
+
+        if (ref_space->type == PDF_NAME) {
+            if (ref_space->object_num != 0 && ref_space->object_num == space->object_num) {
+                pdfi_countdown(ref_space);
+                return_error(gs_error_circular_reference);
+            }
+            if (pdfi_name_is((const pdf_name *)ref_space, "DeviceGray")) {
+                pdfi_countdown(ref_space);
+                return (num_components == 1 ? 0 : gs_error_rangecheck);
+            }
+            if (pdfi_name_is((const pdf_name *)ref_space, "DeviceCMYK")) {
+                pdfi_countdown(ref_space);
+                return (num_components == 4 ? 0 : gs_error_rangecheck);
+            }
+            if (pdfi_name_is((const pdf_name *)ref_space, "DeviceRGB")) {
+                pdfi_countdown(ref_space);
+                return (num_components == 3 ? 0 : gs_error_rangecheck);
+            }
+            pdfi_countdown(ref_space);
+            return_error(gs_error_typecheck);
+        }
+        space = ref_space;
+    }
+
+    if (space->type == PDF_ARRAY) {
+        code = pdfi_array_get(ctx, (pdf_array *)space, 0, &primary);
+        if (code < 0)
+            goto exit;
+
+        if (primary->type == PDF_NAME) {
+            if (pdfi_name_is((pdf_name *)primary, "Lab")) {
+                code = gs_note_error(gs_error_typecheck);
+                goto exit;
+            }
+            if (pdfi_name_is((pdf_name *)primary, "Pattern")) {
+                code = gs_note_error(gs_error_typecheck);
+                goto exit;
+            }
+            if (pdfi_name_is((pdf_name *)primary, "Indexed")) {
+                code = gs_note_error(gs_error_typecheck);
+                goto exit;
+            }
+        }
+    } else
+        code = gs_note_error(gs_error_typecheck);
+
+exit:
+    pdfi_countdown(primary);
+    pdfi_countdown(ref_space);
+    return code;
+}
+
+int pdfi_setup_DefaultSpaces(pdf_context *ctx, pdf_dict *source_dict)
+{
+    int code = 0;
+    pdf_dict *resources_dict = NULL, *colorspaces_dict = NULL;
+    pdf_obj *DefaultSpace = NULL;
+
+    if (ctx->args.NOSUBSTDEVICECOLORS)
+        return 0;
+
+    /* Create any required DefaultGray, DefaultRGB or DefaultCMYK
+     * spaces.
+     */
+    code = pdfi_dict_knownget(ctx, source_dict, "Resources", (pdf_obj **)&resources_dict);
+    if (code > 0) {
+        code = pdfi_dict_knownget(ctx, resources_dict, "ColorSpace", (pdf_obj **)&colorspaces_dict);
+        if (code > 0) {
+            code = pdfi_dict_knownget(ctx, colorspaces_dict, "DefaultGray", &DefaultSpace);
+            if (code > 0) {
+                gs_color_space *pcs;
+
+                code = Check_Default_Space(ctx, DefaultSpace, source_dict, 1);
+                if (code >= 0) {
+                    code = pdfi_create_colorspace(ctx, DefaultSpace, NULL, source_dict, &pcs, false);
+                    /* If any given Default* space fails simply ignore it, we wil then use the Device
+                     * space instead, this is as per the spec.
+                     */
+                    if (code >= 0) {
+                        if (gs_color_space_num_components(pcs) == 1) {
+                            ctx->page.DefaultGray_cs = pcs;
+                            pdfi_set_colour_callback(pcs, ctx, NULL);
+                        } else {
+                            pdfi_set_warning(ctx, 0, NULL, W_PDF_INVALID_DEFAULTSPACE, "pdfi_setup_DefaultSpaces", NULL);
+                            rc_decrement(pcs, "setup_DefautSpaces");
+                        }
+                    }
+                } else
+                    pdfi_set_warning(ctx, 0, NULL, W_PDF_INVALID_DEFAULTSPACE, "pdfi_setup_DefaultSpaces", NULL);
+            }
+            pdfi_countdown(DefaultSpace);
+            DefaultSpace = NULL;
+            code = pdfi_dict_knownget(ctx, colorspaces_dict, "DefaultRGB", &DefaultSpace);
+            if (code > 0) {
+                gs_color_space *pcs;
+
+                code = Check_Default_Space(ctx, DefaultSpace, source_dict, 1);
+                if (code >= 0) {
+                    code = pdfi_create_colorspace(ctx, DefaultSpace, NULL, source_dict, &pcs, false);
+                    /* If any given Default* space fails simply ignore it, we wil then use the Device
+                     * space instead, this is as per the spec.
+                     */
+                    if (code >= 0) {
+                        if (gs_color_space_num_components(pcs) == 3) {
+                            ctx->page.DefaultRGB_cs = pcs;
+                            pdfi_set_colour_callback(pcs, ctx, NULL);
+                        } else {
+                            rc_decrement(pcs, "setup_DefautSpaces");
+                            pdfi_set_warning(ctx, 0, NULL, W_PDF_INVALID_DEFAULTSPACE, "pdfi_setup_DefaultSpaces", NULL);
+                        }
+                    }
+                } else
+                    pdfi_set_warning(ctx, 0, NULL, W_PDF_INVALID_DEFAULTSPACE, "pdfi_setup_DefaultSpaces", NULL);
+            }
+            pdfi_countdown(DefaultSpace);
+            DefaultSpace = NULL;
+            code = pdfi_dict_knownget(ctx, colorspaces_dict, "DefaultCMYK", &DefaultSpace);
+            if (code > 0) {
+                gs_color_space *pcs;
+
+                code = Check_Default_Space(ctx, DefaultSpace, source_dict, 1);
+                if (code >= 0) {
+                    code = pdfi_create_colorspace(ctx, DefaultSpace, NULL, source_dict, &pcs, false);
+                    /* If any given Default* space fails simply ignore it, we wil then use the Device
+                     * space instead, this is as per the spec.
+                     */
+                    if (code >= 0) {
+                        if (gs_color_space_num_components(pcs) == 4) {
+                            ctx->page.DefaultCMYK_cs = pcs;
+                            pdfi_set_colour_callback(pcs, ctx, NULL);
+                        } else {
+                            pdfi_set_warning(ctx, 0, NULL, W_PDF_INVALID_DEFAULTSPACE, "pdfi_setup_DefaultSpaces", NULL);
+                            rc_decrement(pcs, "setup_DefautSpaces");
+                        }
+                    }
+                } else
+                    pdfi_set_warning(ctx, 0, NULL, W_PDF_INVALID_DEFAULTSPACE, "pdfi_setup_DefaultSpaces", NULL);
+            }
+            pdfi_countdown(DefaultSpace);
+            DefaultSpace = NULL;
+        }
+    }
+
+    pdfi_countdown(DefaultSpace);
+    pdfi_countdown(resources_dict);
+    pdfi_countdown(colorspaces_dict);
+    return 0;
+}
diff --git a/pdf/pdf_colour.h b/pdf/pdf_colour.h
index 0f49c5849..5a43937eb 100644
--- a/pdf/pdf_colour.h
+++ b/pdf/pdf_colour.h
@@ -1,4 +1,4 @@
-/* Copyright (C) 2018-2021 Artifex Software, Inc.
+/* Copyright (C) 2018-2022 Artifex Software, Inc.
    All Rights Reserved.
 
    This software is provided AS-IS with no warranty, either express or
@@ -87,4 +87,7 @@ int pdfi_check_ColorSpace_for_spots(pdf_context *ctx, pdf_obj *space, pdf_dict *
 
 int pdfi_color_setoutputintent(pdf_context *ctx, pdf_dict *intent_dict, pdf_stream *profile);
 
+/* Sets up the DefaultRGB, DefaultCMYK and DefaultGray colour spaces if present */
+int pdfi_setup_DefaultSpaces(pdf_context *ctx, pdf_dict *source_dict);
+
 #endif
diff --git a/pdf/pdf_int.c b/pdf/pdf_int.c
index 6575dd61a..e5ff14dbb 100644
--- a/pdf/pdf_int.c
+++ b/pdf/pdf_int.c
@@ -1,4 +1,4 @@
-/* Copyright (C) 2018-2021 Artifex Software, Inc.
+/* Copyright (C) 2018-2022 Artifex Software, Inc.
    All Rights Reserved.
 
    This software is provided AS-IS with no warranty, either express or
@@ -1783,80 +1783,6 @@ void initialise_stream_save(pdf_context *ctx)
     ctx->current_stream_save.stack_count = pdfi_count_total_stack(ctx);
 }
 
-static int setup_stream_DefaultSpaces(pdf_context *ctx, pdf_dict *stream_dict)
-{
-    int code = 0;
-    pdf_dict *resources_dict = NULL, *colorspaces_dict = NULL;
-    pdf_obj *DefaultSpace = NULL;
-
-    /* Create any required DefaultGray, DefaultRGB or DefaultCMYK
-     * spaces.
-     */
-
-    if (ctx->args.NOSUBSTDEVICECOLORS)
-        return 0;
-
-    code = pdfi_dict_knownget(ctx, stream_dict, "Resources", (pdf_obj **)&resources_dict);
-    if (code > 0) {
-        code = pdfi_dict_knownget(ctx, resources_dict, "ColorSpace", (pdf_obj **)&colorspaces_dict);
-        if (code > 0) {
-            code = pdfi_dict_knownget(ctx, colorspaces_dict, "DefaultGray", &DefaultSpace);
-            if (code > 0) {
-                gs_color_space *pcs;
-                code = pdfi_create_colorspace(ctx, DefaultSpace, NULL, stream_dict, &pcs, false);
-                /* If any given Default* space fails simply ignore it, we wil then use the Device
-                 * space (or page level Default) instead, this is as per the spec.
-                 */
-                if (code >= 0) {
-                    if (ctx->page.DefaultGray_cs)
-                        rc_decrement_only(ctx->page.DefaultGray_cs, "setup_stream_DefaultSpaces");
-                    ctx->page.DefaultGray_cs = pcs;
-                    pdfi_set_colour_callback(pcs, ctx, NULL);
-                }
-            }
-            pdfi_countdown(DefaultSpace);
-            DefaultSpace = NULL;
-            code = pdfi_dict_knownget(ctx, colorspaces_dict, "DefaultRGB", &DefaultSpace);
-            if (code > 0) {
-                gs_color_space *pcs;
-                code = pdfi_create_colorspace(ctx, DefaultSpace, NULL, stream_dict, &pcs, false);
-                /* If any given Default* space fails simply ignore it, we wil then use the Device
-                 * space (or page level Default) instead, this is as per the spec.
-                 */
-                if (code >= 0) {
-                    if (ctx->page.DefaultRGB_cs)
-                        rc_decrement_only(ctx->page.DefaultRGB_cs, "setup_stream_DefaultSpaces");
-                    ctx->page.DefaultRGB_cs = pcs;
-                    pdfi_set_colour_callback(pcs, ctx, NULL);
-                }
-            }
-            pdfi_countdown(DefaultSpace);
-            DefaultSpace = NULL;
-            code = pdfi_dict_knownget(ctx, colorspaces_dict, "DefaultCMYK", &DefaultSpace);
-            if (code > 0) {
-                gs_color_space *pcs;
-                code = pdfi_create_colorspace(ctx, DefaultSpace, NULL, stream_dict, &pcs, false);
-                /* If any given Default* space fails simply ignore it, we wil then use the Device
-                 * space (or page level Default) instead, this is as per the spec.
-                 */
-                if (code >= 0) {
-                    if (ctx->page.DefaultCMYK_cs)
-                        rc_decrement_only(ctx->page.DefaultCMYK_cs, "setup_stream_DefaultSpaces");
-                    ctx->page.DefaultCMYK_cs = pcs;
-                    pdfi_set_colour_callback(pcs, ctx, NULL);
-                }
-            }
-            pdfi_countdown(DefaultSpace);
-            DefaultSpace = NULL;
-        }
-    }
-
-    pdfi_countdown(DefaultSpace);
-    pdfi_countdown(resources_dict);
-    pdfi_countdown(colorspaces_dict);
-    return 0;
-}
-
 /* Run a stream in a sub-context (saves/restores DefaultQState) */
 int pdfi_run_context(pdf_context *ctx, pdf_stream *stream_obj,
                      pdf_dict *page_dict, bool stoponerror, const char *desc)
@@ -1879,7 +1805,7 @@ int pdfi_run_context(pdf_context *ctx, pdf_stream *stream_obj,
     /* If the stream has any Default* colour spaces, replace the page level ones.
      * This will derement the reference counts to the current spaces if they are replaced.
      */
-    setup_stream_DefaultSpaces(ctx, stream_obj->stream_dict);
+    pdfi_setup_DefaultSpaces(ctx, stream_obj->stream_dict);
 
     pdfi_copy_DefaultQState(ctx, &DefaultQState);
     pdfi_set_DefaultQState(ctx, ctx->pgs);
diff --git a/pdf/pdf_page.c b/pdf/pdf_page.c
index c8b8f7944..aed1eeef6 100644
--- a/pdf/pdf_page.c
+++ b/pdf/pdf_page.c
@@ -1,4 +1,4 @@
-/* Copyright (C) 2019-2021 Artifex Software, Inc.
+/* Copyright (C) 2019-2022 Artifex Software, Inc.
    All Rights Reserved.
 
    This software is provided AS-IS with no warranty, either express or
@@ -677,72 +677,10 @@ static void release_page_DefaultSpaces(pdf_context *ctx)
 
 static int setup_page_DefaultSpaces(pdf_context *ctx, pdf_dict *page_dict)
 {
-    int code = 0;
-    pdf_dict *resources_dict = NULL, *colorspaces_dict = NULL;
-    pdf_obj *DefaultSpace = NULL;
-
     /* First off, discard any dangling Default* colour spaces, just in case. */
     release_page_DefaultSpaces(ctx);
 
-    if (ctx->args.NOSUBSTDEVICECOLORS)
-        return 0;
-
-    /* Create any required DefaultGray, DefaultRGB or DefaultCMYK
-     * spaces.
-     */
-    code = pdfi_dict_knownget(ctx, page_dict, "Resources", (pdf_obj **)&resources_dict);
-    if (code > 0) {
-        code = pdfi_dict_knownget(ctx, resources_dict, "ColorSpace", (pdf_obj **)&colorspaces_dict);
-        if (code > 0) {
-            code = pdfi_dict_knownget(ctx, colorspaces_dict, "DefaultGray", &DefaultSpace);
-            if (code > 0) {
-                gs_color_space *pcs;
-                code = pdfi_create_colorspace(ctx, DefaultSpace, NULL, page_dict, &pcs, false);
-                /* If any given Default* space fails simply ignore it, we wil then use the Device
-                 * space instead, this is as per the spec.
-                 */
-                if (code >= 0) {
-                    ctx->page.DefaultGray_cs = pcs;
-                    pdfi_set_colour_callback(pcs, ctx, NULL);
-                }
-            }
-            pdfi_countdown(DefaultSpace);
-            DefaultSpace = NULL;
-            code = pdfi_dict_knownget(ctx, colorspaces_dict, "DefaultRGB", &DefaultSpace);
-            if (code > 0) {
-                gs_color_space *pcs;
-                code = pdfi_create_colorspace(ctx, DefaultSpace, NULL, page_dict, &pcs, false);
-                /* If any given Default* space fails simply ignore it, we wil then use the Device
-                 * space instead, this is as per the spec.
-                 */
-                if (code >= 0) {
-                    ctx->page.DefaultRGB_cs = pcs;
-                    pdfi_set_colour_callback(pcs, ctx, NULL);
-                }
-            }
-            pdfi_countdown(DefaultSpace);
-            DefaultSpace = NULL;
-            code = pdfi_dict_knownget(ctx, colorspaces_dict, "DefaultCMYK", &DefaultSpace);
-            if (code > 0) {
-                gs_color_space *pcs;
-                code = pdfi_create_colorspace(ctx, DefaultSpace, NULL, page_dict, &pcs, false);
-                /* If any given Default* space fails simply ignore it, we wil then use the Device
-                 * space instead, this is as per the spec.
-                 */
-                if (code >= 0) {
-                    ctx->page.DefaultCMYK_cs = pcs;
-                    pdfi_set_colour_callback(pcs, ctx, NULL);
-                }
-            }
-            pdfi_countdown(DefaultSpace);
-            DefaultSpace = NULL;
-        }
-    }
-
-    pdfi_countdown(DefaultSpace);
-    pdfi_countdown(resources_dict);
-    pdfi_countdown(colorspaces_dict);
-    return 0;
+    return(pdfi_setup_DefaultSpaces(ctx, page_dict));
 }
 
 int pdfi_page_render(pdf_context *ctx, uint64_t page_num, bool init_graphics)
