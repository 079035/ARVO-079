commit fa394e79b7e2228aacc4c8366cd41c3b2d6b05f5
Author: Ken Sharp <ken.sharp@artifex.com>
Date:   Mon Oct 31 11:31:29 2022 +0000

    OSS-fuzz 52879 "Global-buffer-overflow in get_unpack_proc"
    
    The PDF spec allows (more craziness) a JPX image in a PDF file to have
    a different colour space to the declared space in the PDF file, and the
    JPX should take precedence.
    
    In this case the JPX image has been fuzzed leading to it declaring that
    the image has 48 bits per component, which is outside the legal values
    for PDF. Although the PDF interpreter does check the BPC, it does it for
    the image data in the PDF file, which has been overridden by the data
    in the JPX image.
    
    So here we check the BPC value after potential overrides. We also add
    a check in get_unpack_proc to make sure we don't over or under run the
    array of procedures and finally we add a check in the XPS image writing
    code to check the returned decode procedure and if it is NULL to exit
    with an error (the only other place that uses this, the clist, already
    exits cleanly if the returned proc is NULL)

diff --git a/base/gximdecode.c b/base/gximdecode.c
index e24c6c061..2454fa38c 100644
--- a/base/gximdecode.c
+++ b/base/gximdecode.c
@@ -1,4 +1,4 @@
-/* Copyright (C) 2014-2021 Artifex Software, Inc.
+/* Copyright (C) 2014-2022 Artifex Software, Inc.
 All Rights Reserved.
 
 This software is provided AS-IS with no warranty, either express or
@@ -40,6 +40,10 @@ get_unpack_proc(gx_image_enum_common_t *pie, image_decode_t *imd,
     int index_bps = (imd->bps < 8 ? imd->bps >> 1 : (imd->bps >> 2) + 1);
     int log2_xbytes = (imd->bps <= 8 ? 0 : arch_log2_sizeof_frac);
 
+    imd->unpack = NULL;
+    if (index_bps < 0 || index_bps > 5)
+        return;
+
     switch (format) {
     case gs_image_format_chunky:
         imd->spread = 1 << log2_xbytes;
diff --git a/devices/vector/gdevxps.c b/devices/vector/gdevxps.c
index cb2ab4ee2..d0f02f5d0 100644
--- a/devices/vector/gdevxps.c
+++ b/devices/vector/gdevxps.c
@@ -2108,6 +2108,10 @@ xps_begin_typed_image(gx_device               *dev,
     pie->decode_st.unpack = NULL;
     get_unpack_proc((gx_image_enum_common_t*)pie, &(pie->decode_st), pim->format,
         pim->Decode);
+    if (pie->decode_st.unpack == NULL){
+        gs_free_object(mem, pie, "xps_begin_image");
+        return_error(gs_rethrow_code(gs_error_rangecheck));
+    }
 
     /* The decode mapping for index colors needs an adjustment */
     if (csindex == gs_color_space_index_Indexed) {
diff --git a/pdf/pdf_image.c b/pdf/pdf_image.c
index a268fd50b..c7c66f6f4 100644
--- a/pdf/pdf_image.c
+++ b/pdf/pdf_image.c
@@ -1775,6 +1775,11 @@ pdfi_do_image(pdf_context *ctx, pdf_dict *page_dict, pdf_dict *stream_dict, pdf_
     if (code < 0)
         goto cleanupExit;
 
+    if (image_info.BPC != 1 && image_info.BPC != 2 && image_info.BPC != 4 && image_info.BPC != 8 && image_info.BPC != 16) {
+        code = gs_note_error(gs_error_rangecheck);
+        goto cleanupExit;
+    }
+
     /* Set the colorspace */
     if (pcs) {
         gs_color_space  *pcs1 = pcs;
