From fcd827cff1e0026e5bf8d7a34ee15f115ec8b01e Mon Sep 17 00:00:00 2001
From: Roman Lebedev <lebedev.ri@gmail.com>
Date: Sun, 25 Mar 2018 19:22:32 +0300
Subject: [PATCH] Cr2Decompressor: introduce a struct to describe the slicing
 pattern.

Don't use std::vector<>, it's kinda just wrong here.
---
 .../decompressors/Cr2Decompressor.cpp         | 15 +++---
 src/librawspeed/decoders/Cr2Decoder.cpp       | 18 +++----
 .../decompressors/Cr2Decompressor.cpp         | 46 ++++++++---------
 .../decompressors/Cr2Decompressor.h           | 50 +++++++++++++++++--
 4 files changed, 82 insertions(+), 47 deletions(-)

diff --git a/fuzz/librawspeed/decompressors/Cr2Decompressor.cpp b/fuzz/librawspeed/decompressors/Cr2Decompressor.cpp
index 90ddc041e..f07a791b4 100644
--- a/fuzz/librawspeed/decompressors/Cr2Decompressor.cpp
+++ b/fuzz/librawspeed/decompressors/Cr2Decompressor.cpp
@@ -44,17 +44,16 @@ extern "C" int LLVMFuzzerTestOneInput(const uint8_t* Data, size_t Size) {
 
     rawspeed::RawImage mRaw(CreateRawImage(&bs));
 
-    using slice_type = int;
-    std::vector<slice_type> slicesWidths;
-    const unsigned sliceCount = bs.getU32();
-    bs.check(sliceCount, sizeof(slice_type));
-    slicesWidths.reserve(sliceCount);
-    std::generate_n(std::back_inserter(slicesWidths), sliceCount,
-                    [&bs]() -> slice_type { return bs.get<slice_type>(); });
+    using slice_type = rawspeed::ushort16;
+    const auto numSlices = bs.get<slice_type>();
+    const auto sliceWidth = bs.get<slice_type>();
+    const auto lastSliceWidth = bs.get<slice_type>();
+
+    const rawspeed::Cr2Slicing slicing(numSlices, sliceWidth, lastSliceWidth);
 
     rawspeed::Cr2Decompressor c(bs, mRaw);
     mRaw->createData();
-    c.decode(std::move(slicesWidths));
+    c.decode(slicing);
 
     mRaw->checkMemIsInitialized();
   } catch (rawspeed::RawspeedException&) {
diff --git a/src/librawspeed/decoders/Cr2Decoder.cpp b/src/librawspeed/decoders/Cr2Decoder.cpp
index 5dfa6102f..ff5812c93 100644
--- a/src/librawspeed/decoders/Cr2Decoder.cpp
+++ b/src/librawspeed/decoders/Cr2Decoder.cpp
@@ -40,11 +40,9 @@
 #include <cassert>                       // for assert
 #include <memory>                        // for unique_ptr, allocator
 #include <string>                        // for string, operator==
-#include <vector>                        // for vector
 // IWYU pragma: no_include <ext/alloc_traits.h>
 
 using std::string;
-using std::vector;
 
 namespace rawspeed {
 
@@ -91,7 +89,10 @@ RawImage Cr2Decoder::decodeOldFormat() {
 
   Cr2Decompressor l(bs, mRaw);
   mRaw->createData();
-  l.decode({width});
+
+  Cr2Slicing slicing(/*numSlices=*/1, /*sliceWidth=don't care*/ 0,
+                     /*lastSliceWidth=*/width);
+  l.decode(slicing);
 
   // deal with D2000 GrayResponseCurve
   TiffEntry* curve = mRootIFD->getEntryRecursive(static_cast<TiffTag>(0x123));
@@ -129,7 +130,7 @@ RawImage Cr2Decoder::decodeNewFormat() {
   mRaw->setCpp(componentsPerPixel);
   mRaw->isCFA = (mRaw->getCpp() == 1);
 
-  vector<int> s_width;
+  Cr2Slicing slicing;
   // there are four cases:
   // * there is a tag with three components,
   //   $ last two components are non-zero: all fine then.
@@ -148,10 +149,9 @@ RawImage Cr2Decoder::decodeNewFormat() {
 
     if (cr2SliceEntry->getU16(1) != 0 && cr2SliceEntry->getU16(2) != 0) {
       // first component can be either zero or non-zero, don't care
-      s_width.reserve(1 + cr2SliceEntry->getU16(0));
-      for (int i = 0; i < cr2SliceEntry->getU16(0); i++)
-        s_width.emplace_back(cr2SliceEntry->getU16(1));
-      s_width.emplace_back(cr2SliceEntry->getU16(2));
+      slicing = Cr2Slicing(/*numSlices=*/1 + cr2SliceEntry->getU16(0),
+                           /*sliceWidth=*/cr2SliceEntry->getU16(1),
+                           /*lastSliceWidth=*/cr2SliceEntry->getU16(2));
     } else if (cr2SliceEntry->getU16(0) == 0 && cr2SliceEntry->getU16(1) == 0 &&
                cr2SliceEntry->getU16(2) != 0) {
       // PowerShot G16, PowerShot S120, let Cr2Decompressor guess.
@@ -169,7 +169,7 @@ RawImage Cr2Decoder::decodeNewFormat() {
 
   Cr2Decompressor d(bs, mRaw);
   mRaw->createData();
-  d.decode(s_width);
+  d.decode(slicing);
 
   if (mRaw->metadata.subsampling.x > 1 || mRaw->metadata.subsampling.y > 1)
     sRawInterpolate();
diff --git a/src/librawspeed/decompressors/Cr2Decompressor.cpp b/src/librawspeed/decompressors/Cr2Decompressor.cpp
index 02a53eced..56dda017a 100644
--- a/src/librawspeed/decompressors/Cr2Decompressor.cpp
+++ b/src/librawspeed/decompressors/Cr2Decompressor.cpp
@@ -55,12 +55,13 @@ void Cr2Decompressor::decodeScan()
   if (predictorMode != 1)
     ThrowRDE("Unsupported predictor mode.");
 
-  if (slicesWidths.empty()) {
+  if (slicing.empty()) {
     const int slicesWidth = frame.w * frame.cps;
     if (slicesWidth > mRaw->dim.x)
       ThrowRDE("Don't know slicing pattern, and failed to guess it.");
 
-    slicesWidths.push_back(slicesWidth);
+    slicing = Cr2Slicing(/*numSlices=*/1, /*sliceWidth=don't care*/ 0,
+                         /*lastSliceWidth=*/slicesWidth);
   }
 
   bool isSubSampled = false;
@@ -115,12 +116,12 @@ void Cr2Decompressor::decodeScan()
   }
 }
 
-void Cr2Decompressor::decode(std::vector<int> slicesWidths_)
-{
-  slicesWidths = move(slicesWidths_);
-  for (auto slicesWidth : slicesWidths) {
-    if (slicesWidth <= 0)
-      ThrowRDE("Bad slice width: %i", slicesWidth);
+void Cr2Decompressor::decode(const Cr2Slicing& slicing_) {
+  slicing = slicing_;
+  for (auto sliceId = 0; sliceId < slicing.numSlices; sliceId++) {
+    const auto sliceWidth = slicing.widthOfSlice(sliceId);
+    if (sliceWidth <= 0)
+      ThrowRDE("Bad slice width: %i", sliceWidth);
   }
 
   AbstractLJpegDecompressor::decode();
@@ -163,32 +164,27 @@ void Cr2Decompressor::decodeN_X_Y()
   if (X_S_F == 2 && Y_S_F == 1)
   {
     // fix the inconsistent slice width in sRaw mode, ask Canon.
-    for (auto& sliceWidth : slicesWidths)
-      sliceWidth = sliceWidth * 3 / 2;
+    for (auto* width : {&slicing.sliceWidth, &slicing.lastSliceWidth})
+      *width = (*width) * 3 / 2;
   }
 
-  for (const auto& slicesWidth : slicesWidths) {
-    if (slicesWidth > mRaw->dim.x)
+  for (const auto& width : {slicing.sliceWidth, slicing.lastSliceWidth}) {
+    if (width > mRaw->dim.x)
       ThrowRDE("Slice is longer than image's height, which is unsupported.");
-    if (slicesWidth % xStepSize != 0) {
+    if (width % xStepSize != 0) {
       ThrowRDE("Slice width (%u) should be multiple of pixel group size (%u)",
-               slicesWidth, xStepSize);
+               width, xStepSize);
     }
   }
 
-  if (frame.h * std::accumulate(slicesWidths.begin(), slicesWidths.end(), 0) <
-      mRaw->getCpp() * mRaw->dim.area())
+  if (frame.h * slicing.totalWidth() < mRaw->getCpp() * mRaw->dim.area())
     ThrowRDE("Incorrrect slice height / slice widths! Less than image size.");
 
-  // Do we have completely unneeded slices at the end? Drop them.
-  while (frame.h *
-             std::accumulate(slicesWidths.begin(), slicesWidths.end() - 1, 0) >=
-         mRaw->getCpp() * mRaw->dim.area())
-    slicesWidths.pop_back();
-
   unsigned processedPixels = 0;
   unsigned processedLineSlices = 0;
-  for (unsigned sliceWidth : slicesWidths) {
+  for (auto sliceId = 0; sliceId < slicing.numSlices; sliceId++) {
+    const unsigned sliceWidth = slicing.widthOfSlice(sliceId);
+
     assert(frame.h % yStepSize == 0);
     for (unsigned y = 0; y < frame.h; y += yStepSize) {
       // Fix for Canon 80D mraw format.
@@ -198,8 +194,8 @@ void Cr2Decompressor::decodeN_X_Y()
       // Those would overflow, hence the break.
       // see FIX_CANON_FRAME_VS_IMAGE_SIZE_MISMATCH
       unsigned destY = processedLineSlices % mRaw->dim.y;
-      unsigned destX =
-          processedLineSlices / mRaw->dim.y * slicesWidths[0] / mRaw->getCpp();
+      unsigned destX = processedLineSlices / mRaw->dim.y * slicing.sliceWidth /
+                       mRaw->getCpp();
       if (destX >= static_cast<unsigned>(mRaw->dim.x))
         break;
       auto dest =
diff --git a/src/librawspeed/decompressors/Cr2Decompressor.h b/src/librawspeed/decompressors/Cr2Decompressor.h
index 07718ecf4..4607f3ed8 100644
--- a/src/librawspeed/decompressors/Cr2Decompressor.h
+++ b/src/librawspeed/decompressors/Cr2Decompressor.h
@@ -2,6 +2,7 @@
     RawSpeed - RAW file decoder.
 
     Copyright (C) 2017 Axel Waggershauser
+    Copyright (C) 2018 Roman Lebedev
 
     This library is free software; you can redistribute it and/or
     modify it under the terms of the GNU Lesser General Public
@@ -20,28 +21,67 @@
 
 #pragma once
 
+#include "common/Common.h"                           // ushort16
+#include "decoders/RawDecoderException.h"            // for ThrowRDE
 #include "decompressors/AbstractLJpegDecompressor.h" // for AbstractLJpegDe...
 #include "io/Buffer.h"                               // for Buffer, Buffer:...
 #include "io/ByteStream.h"                           // for ByteStream
-#include <vector>                                    // for vector
+#include <cassert>                                   // for assert
 
 namespace rawspeed {
 
 class RawImage;
-
+class Cr2Decompressor;
 // Decompresses Lossless JPEGs, with 2-4 components and optional X/Y subsampling
 
+class Cr2Slicing {
+  int numSlices = 0;
+  int sliceWidth = 0;
+  int lastSliceWidth = 0;
+
+  friend class Cr2Decompressor;
+
+public:
+  Cr2Slicing() = default;
+
+  Cr2Slicing(ushort16 numSlices_, ushort16 sliceWidth_,
+             ushort16 lastSliceWidth_)
+      : numSlices(numSlices_), sliceWidth(sliceWidth_),
+        lastSliceWidth(lastSliceWidth_) {
+    if (numSlices < 1)
+      ThrowRDE("Bad slice count: %u", numSlices);
+  }
+
+  bool empty() const {
+    return 0 == numSlices && 0 == sliceWidth && 0 == lastSliceWidth;
+  }
+
+  unsigned widthOfSlice(int sliceId) const {
+    assert(sliceId >= 0);
+    assert(sliceId < numSlices);
+    if ((sliceId + 1) == numSlices)
+      return lastSliceWidth;
+    return sliceWidth;
+  }
+
+  unsigned totalWidth() const {
+    int width = 0;
+    for (auto sliceId = 0; sliceId < numSlices; sliceId++)
+      width += widthOfSlice(sliceId);
+    return width;
+  }
+};
+
 class Cr2Decompressor final : public AbstractLJpegDecompressor
 {
-  // CR2 slices
-  std::vector<int> slicesWidths;
+  Cr2Slicing slicing;
 
   void decodeScan() override;
   template<int N_COMP, int X_S_F, int Y_S_F> void decodeN_X_Y();
 
 public:
   Cr2Decompressor(const ByteStream& bs, const RawImage& img);
-  void decode(std::vector<int> slicesWidths);
+  void decode(const Cr2Slicing& slicing);
 };
 
 } // namespace rawspeed
